.686p
.mmx
.model large


; Segment type: Pure code
seg000 segment byte public 'CODE' use16
assume cs:seg000
assume es:nothing, ss:seg092, ds:nothing, fs:nothing, gs:nothing


; Attributes: noreturn

public start
start proc near
mov     dx, seg seg091
mov     es, dx
assume es:seg091
mov     di, sp
mov     es:word_4B8CE, ds
mov     bx, ss
add     bx, 1F4h
mov     es:word_4B8B4, bx
mov     es:word_4B8BC, bx
mov     ax, bx
mov     cx, ds:2
mov     es:word_4B8B8, cx
mov     es:word_4B8C0, cx
sub     cx, ax
shr     cx, 1
add     cx, bx
mov     es:word_4B8C4, cx
mov     es:word_4B8C8, cx
mov     es:word_4B8CA, ds
mov     cx, ds:2Ch
mov     es:word_4B8CC, cx
mov     ch, 0
mov     si, 81h
mov     cl, ds:80h
mov     ax, cx
sub     di, cx
dec     di
and     di, 0FFFEh
mov     sp, di
push    ss
pop     es
assume es:seg092
cld
rep movsb
mov     bp, di
mov     ds, dx
assume ds:seg091
mov     es, dx
assume es:seg091
push    ax
xor     ax, ax
mov     cx, 0C204h
mov     di, 822Eh
sub     cx, di
rep stosb
pop     cx
mov     bx, 1
push    ax
push    ax
mov     [bp+0], al
jcxz    short loc_100A1

loc_10080:
dec     bp
cmp     byte ptr [bp+0], 20h ; ' '
jz      short loc_10091
cmp     byte ptr [bp+0], 9
jz      short loc_10091
mov     ah, 1
jmp     short loc_1009F

loc_10091:
or      ah, ah
mov     [bp+0], al
jz      short loc_1009F
inc     bp
push    ss
push    bp
dec     bp
inc     bx
xor     ax, ax

loc_1009F:
loop    loc_10080

loc_100A1:
or      ah, ah
jz      short loc_100A8
inc     bx
push    ss
push    bp

loc_100A8:
push    ss
push    bp
push    bx
mov     ah, 30h
int     21h             ; DOS - GET DOS VERSION
                        ; Return: AL = major version number (00h for DOS 1.x)
pop     bx
cmp     al, 3
jb      short loc_100CE
pop     ax
pop     ax
mov     es, word_4B8CC
assume es:nothing
xor     ax, ax
mov     di, ax
mov     cx, ax
dec     cx

loc_100C1:
repne scasb
inc     di
cmp     es:[di-1], al
jnz     short loc_100C1
inc     di
inc     di
push    es
push    di

loc_100CE:
mov     ax, sp
push    ss
push    ax
push    bx
mov     ax, ss
mov     bx, ds
sub     ax, bx
mov     cl, 4
shl     ax, cl
mov     bx, ds
cli
mov     ss, bx
assume ss:seg091
add     sp, ax
sti
call    sub_1D6CF
push    ax
push    ax
push    ax
start endp ; sp-analysis failed



; Attributes: noreturn bp-based frame

sub_100ED proc near

arg_2= byte ptr  4

mov     bp, sp
mov     al, [bp+arg_2]
mov     ah, 4Ch
int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
sub_100ED endp          ; AL = exit code

sti
push    bx
push    bp
mov     bp, sp
push    es
mov     bx, [bp+4]
xchg    bx, [bp+6]
xchg    bx, [bp+8]
xchg    bx, [bp+2]
mov     [bp+4], bx
les     bx, [bp+6]
inc     word ptr [bp+6]
mov     bl, es:[bx]
mov     bh, 0
shl     bx, 1
neg     bx
mov     bx, cs:[bx+224h]
xchg    bx, [bp+4]
pop     es
pop     bp
popf
retn
db 100h dup(90h)


; Attributes: bp-based frame

sub_10226 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    bx
push    cx
push    dx
push    si
push    di
push    ds
push    es
int     11h             ; EQUIPMENT DETERMINATION
                        ; Return: AX = equipment flag bits
and     ax, 0C1h
cmp     ax, 1
jnz     short loc_10280
mov     ax, [bp+arg_0]
or      al, al
jz      short loc_10280
cmp     ah, 3Ah ; ':'
jz      short loc_1024F
mov     ah, 19h
call    sub_10BD7
jmp     short loc_10253

loc_1024F:
and     al, 0DFh
sub     al, 41h ; 'A'

loc_10253:
cmp     al, 1
ja      short loc_10280
xor     si, si
mov     es, si
assume es:nothing
mov     ah, es:504h
cmp     ah, al
jz      short loc_10280
push    es
push    ax
push    ax
mov     ax, seg seg091
mov     ds, ax
call    sub_16A32
or      ax, ax
pop     ax
pop     es
assume es:nothing
jz      short loc_1027D
mov     es:504h, al
jmp     short loc_10280

loc_1027D:
stc
jmp     short loc_10281

loc_10280:
clc

loc_10281:
pop     es
pop     ds
assume ds:nothing
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     bp
retn    2
sub_10226 endp




sub_1028C proc near
mov     ax, 4400h
call    sub_10BD7
test    dl, 80h
jnz     short loc_102A7
and     dl, 3Fh
add     dl, 41h ; 'A'
mov     dh, 3Ah ; ':'
push    dx
call    sub_10226
jmp     short locret_102A8

loc_102A7:
clc

locret_102A8:
retn
sub_1028C endp




sub_102A9 proc near
call    sub_10BD7
jb      short locret_102DC
push    ax
push    bx
push    dx
mov     bx, ax
mov     ax, 4400h
call    sub_10BD7
test    dl, 80h
jz      short loc_102D8
test    dx, 0Bh
jz      short loc_102D8
mov     ah, 3Eh ; '>'
call    sub_10BD7
pop     dx
pop     bx
pop     ax
mov     ax, 5
stc
jmp     short locret_102DC

loc_102D8:
pop     dx
pop     bx
pop     ax
clc

locret_102DC:
retn
sub_102A9 endp




sub_102DD proc near
mov     ah, 3Eh ; '>'
call    sub_10BD7
retn
sub_102DD endp



; Attributes: bp-based frame

sub_102E5 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= word ptr  0Ch
arg_A= dword ptr  0Eh

push    bp
mov     bp, sp
push    si
push    di
push    ds
push    ds
lds     bx, [bp+arg_A]
push    word ptr [bx]
call    sub_10226
jb      short loc_10301
mov     dx, bx
mov     ax, 3D00h
call    sub_102A9
pop     ds
jnb     short loc_10306

loc_10301:
mov     ax, 1
jmp     short loc_1032B

loc_10306:
mov     bx, ax
mov     cx, [bp+arg_8]
push    ds
lds     dx, [bp+arg_0]
mov     ah, 3Fh ; '?'
call    sub_1F059
pop     ds
jnb     short loc_10321
call    sub_102DD
mov     ax, 2
jmp     short loc_1032B

loc_10321:
lds     di, [bp+arg_4]
mov     [di], ax
call    sub_102DD
xor     ax, ax

loc_1032B:
pop     ds
pop     di
pop     si
pop     bp
retn    0Eh
sub_102E5 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_10332 proc near

arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
push    ds
lds     bx, [bp+arg_6]
push    word ptr [bx]
call    sub_10226
jb      short loc_1034F
mov     dx, bx
xor     cx, cx
mov     ah, 3Ch ; '<'
call    sub_102A9
pop     ds
jnb     short loc_10354

loc_1034F:
mov     ax, 1
jmp     short loc_1038D

loc_10354:
mov     bx, ax
mov     cx, [bp+arg_4]
lds     dx, [bp+arg_0]
mov     ah, 40h ; '@'
call    sub_1F059
jb      short loc_10379
sub     cx, ax
jz      short loc_10381
dec     cx
jnz     short loc_10379
mov     ax, 4400h
call    sub_10BD7
test    dl, 80h
jnz     short loc_10381

loc_10379:
call    sub_102DD
mov     ax, 2
jmp     short loc_1038D

loc_10381:
call    sub_102DD
jnb     short loc_1038B
mov     ax, 3
jmp     short loc_1038D

loc_1038B:
xor     ax, ax

loc_1038D:
pop     ds
pop     di
pop     si
pop     bp
retn    0Ah
sub_10332 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_10394 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     bx, [bp+arg_0]
push    word ptr [bx]
call    sub_10226
jb      short loc_103AF
mov     dx, bx
mov     ah, 41h ; 'A'
call    sub_10BD7
jnb     short loc_103B4

loc_103AF:
mov     ax, 1
jmp     short loc_103B6

loc_103B4:
xor     ax, ax

loc_103B6:
pop     ds
pop     di
pop     si
pop     bp
retn    4
sub_10394 endp



; Attributes: bp-based frame

sub_103BD proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     dx, [bp+arg_0]
les     di, [bp+arg_4]
push    word ptr es:[di]
call    sub_10226
jb      short loc_103DA
mov     ah, 56h ; 'V'
call    sub_10BD7
jnb     short loc_103DF

loc_103DA:
mov     ax, 1
jmp     short loc_103E1

loc_103DF:
xor     ax, ax

loc_103E1:
pop     ds
pop     di
pop     si
pop     bp
retn    8
sub_103BD endp



; Attributes: bp-based frame

sub_103E8 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     bx, [bp+arg_0]
push    word ptr [bx]
call    sub_10226
jb      short loc_10404
mov     dx, bx
mov     ax, 4300h
call    sub_10BD7
jnb     short loc_10408

loc_10404:
xor     ax, ax
jmp     short loc_1040A

loc_10408:
mov     ax, cx

loc_1040A:
pop     ds
pop     di
pop     si
pop     bp
retn    4
sub_103E8 endp



; Attributes: bp-based frame

sub_10411 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     ah, 2Fh ; '/'
call    sub_10BD7
mov     ax, bx
push    ds
lds     bx, [bp+arg_0]
mov     [bx], ax
mov     word ptr [bx+2], es
pop     ds
pop     ds
pop     di
pop     si
pop     bp
retn    4
sub_10411 endp



; Attributes: bp-based frame

sub_10431 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
push    ds
lds     dx, [bp+arg_0]
mov     ah, 1Ah
call    sub_10BD7
pop     ds
pop     ds
pop     di
pop     si
pop     bp
retn    4
sub_10431 endp



; Attributes: bp-based frame

sub_1044A proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     dl, [bp+arg_0]
cmp     dl, 61h ; 'a'
jb      short loc_1045B
sub     dl, 20h ; ' '

loc_1045B:
mov     dh, 3Ah ; ':'
cmp     dl, 41h ; 'A'
jb      short loc_10486
mov     ah, 1Ch
push    dx
sub     dl, 40h ; '@'
call    sub_10BD7
pop     dx
cmp     al, 0FFh
jz      short loc_10486
push    dx
call    sub_10226
jb      short loc_10486
sub     dl, 41h ; 'A'
mov     ah, 0Eh
call    sub_10BD7
xor     ax, ax
jmp     short loc_10489

loc_10486:
mov     ax, 0FFF1h

loc_10489:
pop     ds
pop     di
pop     si
pop     bp
retn    2
sub_1044A endp




sub_10490 proc near
push    si
push    di
push    ds
mov     ah, 19h
call    sub_10BD7
add     al, 41h ; 'A'
pop     ds
pop     di
pop     si
retn
sub_10490 endp




sub_104A0 proc near
push    di
push    ds
pop     es
mov     di, ax
cld
xor     al, al
mov     cx, 0FFFFh
repne scasb
dec     di
mov     ax, di
pop     di
retn
sub_104A0 endp




sub_104B2 proc near
cmp     al, 5Ch ; '\'
jz      short locret_104B8
cmp     al, 2Fh ; '/'

locret_104B8:
retn
sub_104B2 endp



; Attributes: bp-based frame

sub_104B9 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     ax, [bp+arg_0]
push    ax
call    sub_104A0
pop     dx
dec     ax
mov     di, ax
cmp     di, dx
jbe     short loc_104DB
mov     al, [di]
call    sub_104B2
jnz     short loc_104DB
cmp     byte ptr [di-1], 3Ah ; ':'
jnz     short loc_104DC

loc_104DB:
inc     di

loc_104DC:
mov     cl, [di]
mov     byte ptr [di], 0
mov     bx, dx
push    word ptr [bx]
call    sub_10226
mov     ax, 1
jb      short loc_104FA
mov     ah, 3Bh ; ';'
call    sub_10BD7
jb      short loc_104FA
xor     ax, ax
jmp     short loc_104FC

loc_104FA:
neg     ax

loc_104FC:
mov     [di], cl
pop     ds
pop     di
pop     si
pop     bp
retn    4
sub_104B9 endp



; Attributes: bp-based frame

sub_10505 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     bx, [bp+arg_0]

loc_1050E:
mov     al, [bx]
or      al, al
jz      short loc_1052D
call    sub_104B2
jnz     short loc_1051E
mov     al, ds:226Eh
jmp     short loc_10528

loc_1051E:
cmp     al, 61h ; 'a'
jb      short loc_1052A
cmp     al, 7Ah ; 'z'
ja      short loc_1052A
sub     al, 20h ; ' '

loc_10528:
mov     [bx], al

loc_1052A:
inc     bx
jmp     short loc_1050E

loc_1052D:
pop     ds
pop     di
pop     si
pop     bp
retn    4
sub_10505 endp



; Attributes: bp-based frame

sub_10534 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    bp
mov     bp, sp
push    si
push    di
push    ds
les     di, [bp+arg_0]
mov     byte ptr es:[di], 0
mov     al, [bp+arg_4]
or      al, al
jnz     short loc_10551
mov     ah, 19h
call    sub_10BD7
add     al, 41h ; 'A'

loc_10551:
mov     dl, al
mov     ah, 3Ah ; ':'
push    ax
call    sub_10226
mov     ax, 1
jb      short loc_105B2
lea     si, ds:8BA8h
cmp     dl, ds:8BE8h
jz      short loc_1057A
mov     ds:8BE8h, dl
push    dx
sub     dl, 40h ; '@'
mov     ah, 47h ; 'G'
call    sub_10BD7
pop     dx
jb      short loc_105B2

loc_1057A:
add     di, 3
push    di
cld

loc_1057F:
lodsb
stosb
or      al, al
jz      short loc_10587
jmp     short loc_1057F

loc_10587:
pop     di
sub     di, 3
mov     [di], dl
mov     word ptr [di+1], 5C3Ah
push    ds
push    di
call    sub_10505
mov     ax, di
call    sub_104A0
mov     di, ax
mov     al, [di-1]
call    sub_104B2
mov     ax, 0
jz      short loc_105B4
mov     al, ds:226Eh
mov     ah, 0
mov     [di], ax
jmp     short loc_105B4

loc_105B2:
neg     ax

loc_105B4:
pop     ds
pop     di
pop     si
pop     bp
retn    6
sub_10534 endp



; Attributes: bp-based frame

sub_105BB proc near

arg_0= word ptr  4
arg_2= byte ptr  6
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     bx, [bp+arg_4]
mov     ah, [bp+arg_2]
or      ah, ah
jnz     short loc_105D5
push    word ptr [bx]
call    sub_10226
mov     ax, 1
jb      short loc_105E8

loc_105D5:
mov     dx, bx
mov     cx, [bp+arg_0]
add     ah, 4Eh ; 'N'
call    sub_10BD7
jb      short loc_105E8
xor     ax, ax
jmp     short loc_105EA

loc_105E8:
neg     ax

loc_105EA:
pop     ds
pop     di
pop     si
pop     bp
retn    8
sub_105BB endp



; Attributes: bp-based frame

sub_105F1 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
xor     ax, ax
mov     ds:378h, ax
mov     ds:37Ah, ax
lds     bx, [bp+arg_0]
push    word ptr [bx]
call    sub_10226
jb      short loc_10649
mov     dx, bx
mov     ax, 3D00h
call    sub_102A9
jb      short loc_10649
mov     bx, ax
mov     ax, 4400h
call    sub_10BD7
test    dl, 80h
jz      short loc_10627
call    sub_102DD
jmp     short loc_10649

loc_10627:
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
mov     ax, 4202h
xor     cx, cx
xor     dx, dx
call    sub_10BD7
jb      short loc_10641
mov     word_4BC28, ax
mov     word_4BC2A, dx

loc_10641:
call    sub_102DD
mov     ax, 1
jmp     short loc_1064B

loc_10649:
xor     ax, ax

loc_1064B:
pop     ds
assume ds:nothing
pop     di
pop     si
pop     bp
retn    4
sub_105F1 endp




sub_10652 proc near
sub     sp, 44h
push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     bx, [bp+48h]
push    word ptr [bx]
call    sub_10226
jb      short loc_106DA
mov     ax, [bx]
cmp     ah, 3Ah ; ':'
jz      short loc_10677
mov     ah, 19h
call    sub_10BD7
add     al, 41h ; 'A'
mov     ah, 3Ah ; ':'

loc_10677:
push    ss
pop     ds
assume ds:seg091
mov     [bp+2], ax
mov     byte ptr [bp+4], 5Ch ; '\'
lea     si, [bp+5]
mov     dl, al
sub     dl, 40h ; '@'
mov     ah, 47h ; 'G'
call    sub_10BD7
jb      short loc_106DA
lds     dx, [bp+48h]
assume ds:nothing
mov     ax, dx
call    sub_104A0
dec     ax
mov     bx, ax
cmp     byte ptr [bx], 3Ah ; ':'
jz      short loc_106D5
mov     al, [bx]
call    sub_104B2
jnz     short loc_106B2
cmp     bx, dx
jz      short loc_106D5
cmp     byte ptr [bx-1], 3Ah ; ':'
jz      short loc_106D5

loc_106B2:
push    word ptr [bx]
mov     al, [bx]
call    sub_104B2
jnz     short loc_106BE
mov     byte ptr [bx], 0

loc_106BE:
mov     ah, 3Bh ; ';'
call    sub_10BD7
pop     word ptr [bx]
jb      short loc_106DA
push    ss
pop     ds
assume ds:seg091
lea     dx, [bp+2]
mov     ah, 3Bh ; ';'
call    sub_10BD7

loc_106D5:
mov     ax, 1
jmp     short loc_106DC

loc_106DA:
xor     ax, ax

loc_106DC:
pop     ds
assume ds:nothing
pop     di
pop     si
pop     bp
add     sp, 44h
retn    4
sub_10652 endp



; Attributes: bp-based frame

sub_106E6 proc near

arg_0= byte ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     bx, [bp+arg_2]
push    word ptr [bx]
call    sub_10226
mov     ax, 1
jb      short loc_1071F
mov     dx, bx
mov     al, [bp+arg_0]
cmp     al, 3
jz      short loc_1070E
mov     ah, 3Dh ; '='
call    sub_102A9
jnb     short loc_10721
cmp     ax, 2
jnz     short loc_1071F

loc_1070E:
cmp     [bp+arg_0], 0
jz      short loc_1071F
xor     cx, cx
mov     ah, 3Ch ; '<'
call    sub_10BD7
jnb     short loc_10721

loc_1071F:
neg     ax

loc_10721:
pop     ds
pop     di
pop     si
pop     bp
retn    6
sub_106E6 endp



; Attributes: bp-based frame

sub_10728 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     bx, [bp+arg_0]
call    sub_1028C
jb      short loc_10739
call    sub_102DD

loc_10739:
pop     ds
pop     di
pop     si
pop     bp
retn    2
sub_10728 endp



; Attributes: bp-based frame

sub_10740 proc near

arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     bx, [bp+arg_6]
call    sub_1028C
mov     ax, 0FFFBh
jb      short loc_10762
mov     cx, [bp+arg_0]
lds     dx, [bp+arg_2]
mov     ah, 3Fh ; '?'
call    sub_1F059
jnb     short loc_10762
neg     ax

loc_10762:
pop     ds
pop     di
pop     si
pop     bp
retn    8
sub_10740 endp



; Attributes: bp-based frame

sub_10769 proc near

arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     bx, [bp+arg_6]
call    sub_1028C
mov     ax, 0FFFBh
jb      short loc_1078B
mov     cx, [bp+arg_0]
lds     dx, [bp+arg_2]
mov     ah, 40h ; '@'
call    sub_1F059
jnb     short loc_1078B
neg     ax

loc_1078B:
pop     ds
pop     di
pop     si
pop     bp
retn    8
sub_10769 endp



; Attributes: bp-based frame

sub_10792 proc near

arg_0= byte ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     bx, [bp+arg_6]
call    sub_1028C
jb      short loc_107B0
mov     dx, [bp+arg_2]
mov     cx, [bp+arg_4]
mov     al, [bp+arg_0]
mov     ah, 42h ; 'B'
call    sub_10BD7

loc_107B0:
pop     ds
pop     di
pop     si
pop     bp
retn    8
sub_10792 endp




sub_107B7 proc near
mov     ah, 0
mov     al, ds:37Ch
retn
sub_107B7 endp




sub_107BD proc near
int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
mov     ah, 2
int     16h             ; KEYBOARD - GET SHIFT STATUS
                        ; AL = shift status bits
xor     ah, ah
and     al, 7Fh
test    al, 3
jz      short locret_107CD
or      al, 3

locret_107CD:
retn
sub_107BD endp




sub_107CE proc near
mov     ah, 2
int     16h             ; KEYBOARD - GET SHIFT STATUS
                        ; AL = shift status bits
retn
sub_107CE endp




sub_107D3 proc near
int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
mov     ah, 1
int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                        ; Return: ZF clear if character in buffer
                        ; AH = scan code, AL = character
                        ; ZF set if no character in buffer
jz      short loc_107E4
or      ax, ax
jnz     short locret_107E6
mov     ax, 0FFFFh
jmp     short locret_107E6

loc_107E4:
xor     ax, ax

locret_107E6:
retn
sub_107D3 endp




sub_107E7 proc near
push    ds
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
call    sub_107D3
or      ax, ax
jz      short loc_107FC
mov     byte_4BC31, 0
jmp     loc_108CB

loc_107FC:
call    sub_107BD
xor     al, byte_4BC2C
jnz     short loc_1080D
mov     byte_4BC31, 0
jmp     loc_108CB

loc_1080D:
test    al, 10h
jz      short loc_1081C
mov     ax, 4600h
mov     byte_4BC31, 10h
jmp     loc_108CB

loc_1081C:
test    al, 20h
jz      short loc_1082B
mov     ax, 4500h
mov     byte_4BC31, 20h ; ' '
jmp     loc_108CB

loc_1082B:
test    al, 40h
jz      short loc_1083A
mov     ax, 3A00h
mov     byte_4BC31, 40h ; '@'
jmp     loc_108CB

loc_1083A:
test    al, 8
jz      short loc_10868
test    byte_4BC2C, 8
jnz     short loc_1085E
cmp     byte_4BC31, 8
jz      short loc_10856
call    sub_108CD
mov     word_4BC2D, ax
mov     word_4BC2F, dx

loc_10856:
call    sub_108DB
mov     ax, 0
jb      short loc_10861

loc_1085E:
mov     ax, 3800h

loc_10861:
mov     byte_4BC31, 8
jmp     short loc_108CB

loc_10868:
test    al, 4
jz      short loc_10896
test    byte_4BC2C, 4
jnz     short loc_1088C
cmp     byte_4BC31, 4
jz      short loc_10884
call    sub_108CD
mov     word_4BC2D, ax
mov     word_4BC2F, dx

loc_10884:
call    sub_108DB
mov     ax, 0
jb      short loc_1088F

loc_1088C:
mov     ax, 1D00h

loc_1088F:
mov     byte_4BC31, 4
jmp     short loc_108CB

loc_10896:
test    al, 3
jz      short loc_108C5
test    byte_4BC2C, 3
jnz     short loc_108BA
cmp     byte_4BC31, 3
jz      short loc_108B2
call    sub_108CD
mov     word_4BC2D, ax
mov     word_4BC2F, dx

loc_108B2:
call    sub_108DB
mov     ax, 0
jb      short loc_108BD

loc_108BA:
mov     ax, 2A00h

loc_108BD:
mov     byte_4BC31, 3
jmp     short loc_108CB
db 90h

loc_108C5:
xor     byte_4BC2C, al
xor     ax, ax

loc_108CB:
pop     ds
assume ds:nothing
retn
sub_107E7 endp




sub_108CD proc near
push    ds
xor     ax, ax
mov     ds, ax
assume ds:nothing
mov     ax, ds:46Ch
mov     dx, ds:46Eh
pop     ds
assume ds:nothing
retn
sub_108CD endp




sub_108DB proc near
call    sub_108CD
cmp     dx, ds:37Fh
jnb     short loc_108EC
mov     ds:37Dh, ax
mov     ds:37Fh, dx
retn

loc_108EC:
sub     ax, ds:37Dh
sbb     dx, ds:37Fh
sub     ax, 12h
sbb     dx, 0
retn
sub_108DB endp




sub_108FB proc near
push    ds
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091

loc_10901:
call    sub_107E7
or      ax, ax
jz      short loc_10901
pop     ds
assume ds:nothing
retn
sub_108FB endp




sub_1090A proc near
call    sub_108FB
mov     dl, ds:381h
xor     ds:37Ch, dl
mov     byte ptr ds:381h, 0
cmp     ax, 2A00h
jz      short locret_10943
cmp     ax, 1D00h
jz      short locret_10943
cmp     ax, 3800h
jz      short locret_10943
cmp     ax, 4500h
jz      short locret_10943
cmp     ax, 3A00h
jz      short locret_10943
cmp     ax, 4600h
jz      short locret_10943
xor     ah, ah
int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                        ; Return: AH = scan code, AL = character
or      ax, ax
jnz     short locret_10943
mov     ax, 0FFFFh

locret_10943:
retn
sub_1090A endp




sub_10944 proc near
int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
mov     ah, 1
int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
                        ; Return: ZF clear if character in buffer
                        ; AH = scan code, AL = character
                        ; ZF set if no character in buffer
jz      short locret_10952
xor     ah, ah
int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                        ; Return: AH = scan code, AL = character
jmp     short sub_10944

locret_10952:
retn
sub_10944 endp



; Attributes: bp-based frame

sub_10953 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
push    ax
push    bx
push    dx
push    es
test    word ptr [si], 3
jz      short loc_10990
mov     dx, [si+6Bh]
add     dx, 4
test    byte ptr [si+9Ah], 40h
jz      short loc_10981
mov     al, 14h
out     dx, al
jmp     short $+2

loc_10976:
mov     al, 1
mov     dl, 0DEh
out     dx, al
jmp     short $+2

loc_1097D:
mov     al, 14h
jmp     short loc_10989

loc_10981:
mov     al, [si+6Dh]
and     al, 0F7h
out     dx, al
jmp     short $+2

loc_10989:
les     bx, ds:227Ch
mov     es:[bx], al

loc_10990:
pop     es
pop     dx
pop     bx
pop     ax
pop     si
pop     bp
retn    2
sub_10953 endp



; Attributes: bp-based frame

sub_10999 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
push    ax
push    bx
push    dx
push    es
test    word ptr [si], 3
jz      short loc_109CF
mov     dx, [si+6Bh]
add     dx, 4
test    byte ptr [si+9Ah], 40h
jz      short loc_109C0
mov     al, 1
mov     dl, 0DEh
out     dx, al
jmp     short $+2

loc_109BE:
mov     dl, 0D8h

loc_109C0:
mov     al, [si+6Dh]
or      al, 8
out     dx, al
jmp     short $+2

loc_109C8:
les     bx, ds:227Ch
mov     es:[bx], al

loc_109CF:
pop     es
pop     dx
pop     bx
pop     ax
pop     si
pop     bp
retn    2
sub_10999 endp




sub_109D8 proc near
out     dx, al
jmp     short $+2

loc_109DB:
xchg    ah, al
inc     dx
out     dx, al
jmp     short $+2

loc_109E1:
xchg    ah, al
dec     dx
retn
sub_109D8 endp




sub_109E5 proc near
xor     bx, bx
test    byte ptr ds:91D2h, 2
jz      short loc_109EF
inc     bx

loc_109EF:
push    ds
mov     ax, 0A000h
mov     ds, ax
assume ds:nothing
mov     cx, 1000h
cld

loc_109F9:
movsb
or      bx, bx
jz      short loc_109FF
lodsb

loc_109FF:
loop    loc_109F9
pop     ds
assume ds:nothing
retn
sub_109E5 endp




sub_10A03 proc near
push    si
push    di
mov     dx, 3CEh
mov     ax, 204h
call    sub_109D8
test    byte ptr ds:91D2h, 2
jnz     short loc_10A1B
mov     ax, 5
call    sub_109D8

loc_10A1B:
or      byte ptr ds:91D2h, 4
les     di, ds:228Ch
xor     si, si
call    sub_109E5
test    byte ptr ds:91D2h, 2
jz      short loc_10A33
mov     si, 4000h

loc_10A33:
call    sub_109E5
pop     di
pop     si
retn
sub_10A03 endp




sub_10A39 proc near
push    ds
push    es
xor     bx, bx
test    byte ptr ds:91D2h, 2
jz      short loc_10A45
inc     bx

loc_10A45:
push    es
mov     ax, 0A000h
mov     es, ax
assume es:nothing
mov     cx, 1000h
pop     ds
cld

loc_10A50:
movsb
or      bx, bx
jz      short loc_10A56
stosb

loc_10A56:
loop    loc_10A50
pop     es
assume es:nothing
pop     ds
retn
sub_10A39 endp




sub_10A5B proc near
push    si
push    di
mov     dx, 3C4h
mov     ax, 402h
call    sub_109D8
xor     di, di
les     si, ds:228Ch
call    sub_10A39
test    byte ptr ds:91D2h, 2
jz      short loc_10A79
mov     di, 4000h

loc_10A79:
call    sub_10A39
mov     ax, 0F02h
call    sub_109D8
pop     di
pop     si
retn
sub_10A5B endp



; Attributes: bp-based frame

sub_10A85 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     ah, 0
call    sub_10BFC
les     bx, ds:2280h
and     byte ptr es:[bx], 7Fh
pop     bp
retn    2
sub_10A85 endp



; Attributes: bp-based frame

sub_10A9C proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     bl, [bp+arg_0]
mov     ax, 6F05h
call    sub_10BFC
les     bx, ds:2280h
and     byte ptr es:[bx], 7Fh
pop     bp
retn    2
sub_10A9C endp



; Attributes: bp-based frame

sub_10AB4 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     cl, [si+9Ah]
mov     ax, [si]
and     byte ptr [si+9Ah], 7Fh
test    ax, 200h
jz      short loc_10AD2
push    cx
call    sub_10A9C
jmp     loc_10B60

loc_10AD2:
test    ax, 1Ch
jnz     short loc_10ADE
test    byte ptr [si+0A1h], 4
jz      short loc_10AE5

loc_10ADE:
push    cx
call    sub_10A85
jmp     short loc_10B60
db 90h

loc_10AE5:
test    word ptr [si+4], 1Ch
jz      short loc_10AF4
les     bx, ds:2280h
or      byte ptr es:[bx], 8

loc_10AF4:
mov     dx, [si+6Bh]
mov     al, cl
and     al, 7Fh
test    cl, 80h
jnz     short loc_10B08
mov     ah, 0
call    sub_10BFC
jmp     short loc_10B60
align 2

loc_10B08:
mov     cx, [si]
test    cx, 40h
jz      short loc_10B1D
cmp     al, 0Fh
jnz     short loc_10B1D
mov     bx, 382h
mov     ax, ds
mov     es, ax
jmp     short loc_10B39

loc_10B1D:
les     bx, ds:2270h
les     bx, es:[bx]
cmp     al, 2
jb      short loc_10B39
add     bx, 10h
cmp     al, 4
jb      short loc_10B39
add     bx, 10h
cmp     al, 7
jnz     short loc_10B39
add     bx, 10h

loc_10B39:
test    cx, 40h
jz      short loc_10B44
mov     cx, 0Ch
jmp     short loc_10B47

loc_10B44:
mov     cx, 10h

loc_10B47:
cli
push    [bp+arg_2]
call    sub_10953
mov     al, 0

loc_10B50:
mov     ah, es:[bx]
inc     bx
call    sub_109D8
inc     al
loop    loc_10B50
push    si
call    sub_10999
sti

loc_10B60:
pop     si
pop     bp
retn    4
sub_10AB4 endp



; Attributes: bp-based frame

sub_10B65 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     cx, 10h
les     di, [bp+arg_0]
cld

loc_10B71:
mov     dx, 3DAh
in      al, dx          ; Video status bits:
                        ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
mov     dl, 0C0h
mov     al, cl
dec     al
out     dx, al          ; EGA: palette register: select colors for attribute AL:
                        ; 0: RED
                        ; 1: GREEN
                        ; 2: BLUE
                        ; 3: blue
                        ; 4: green
                        ; 5: red
jmp     short $+2

loc_10B7E:
inc     dx
in      al, dx
jmp     short $+2

loc_10B82:
stosb
loop    loc_10B71
mov     dl, 0DAh
in      al, dx          ; Video status bits:
                        ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
mov     dl, 0C0h
mov     al, 11h
out     dx, al          ; EGA: select overscan (border) color.
                        ; Same rgbRGB as palette regs
jmp     short $+2

loc_10B8F:
inc     dx
in      al, dx
jmp     short $+2

loc_10B93:
stosb
mov     dl, 0DAh
in      al, dx          ; Video status bits:
                        ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
mov     dl, 0C0h
mov     al, 20h ; ' '
out     dx, al          ; EGA: palette register: select colors for attribute AL:
                        ; 0: RED
                        ; 1: GREEN
                        ; 2: BLUE
                        ; 3: blue
                        ; 4: green
                        ; 5: red
jmp     short $+2

loc_10B9E:
pop     di
pop     si
pop     bp
retn    4
sub_10B65 endp



; Attributes: bp-based frame

sub_10BA4 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     cx, 10h
les     bx, [bp+arg_0]
mov     dx, 3DAh
in      al, dx          ; Video status bits:
                        ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
mov     dl, 0C0h

loc_10BB3:
mov     al, cl
dec     al
out     dx, al          ; EGA: palette register: select colors for attribute AL:
                        ; 0: RED
                        ; 1: GREEN
                        ; 2: BLUE
                        ; 3: blue
                        ; 4: green
                        ; 5: red
jmp     short $+2

loc_10BBA:
mov     al, es:[bx]
inc     bx
out     dx, al          ; EGA: palette register: select colors for attribute AL:
                        ; 0: RED
                        ; 1: GREEN
                        ; 2: BLUE
                        ; 3: blue
                        ; 4: green
                        ; 5: red
jmp     short $+2

loc_10BC1:
loop    loc_10BB3
mov     al, 11h
out     dx, al          ; EGA: select overscan (border) color.
                        ; Same rgbRGB as palette regs
jmp     short $+2

loc_10BC8:
mov     al, es:[bx]
out     dx, al          ; EGA: palette register: select colors for attribute AL:
                        ; 0: RED
                        ; 1: GREEN
                        ; 2: BLUE
                        ; 3: blue
                        ; 4: green
                        ; 5: red
jmp     short $+2

loc_10BCE:
mov     al, 20h ; ' '
out     dx, al          ; EGA: palette register: select colors for attribute AL:
                        ; 0: RED
                        ; 1: GREEN
                        ; 2: BLUE
                        ; 3: blue
                        ; 4: green
                        ; 5: red
jmp     short $+2

loc_10BD3:
pop     bp
retn    4
sub_10BA4 endp




sub_10BD7 proc far
push    si
push    di
push    ax
push    ds
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
mov     word_53B0A, 1
pop     ds
assume ds:nothing
pop     ax
int     21h             ; DOS -
push    ax
push    ds
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
mov     word_53B0A, 0
pop     ds
assume ds:nothing
pop     ax
pop     di
pop     si
retf
sub_10BD7 endp




sub_10BFC proc near
push    si
push    di
mov     ds:822Eh, bp
int     10h             ; - VIDEO -
mov     bp, ds:822Eh
pop     di
pop     si
retn
sub_10BFC endp

align 2
db 24h, 2Ah, 24h, 2Ah, 24h, 2Ah, 1Ch, 9
db 0, 1, 44h, 45h, 42h, 55h, 47h, 0
seg_10C1C dw seg seg091
byte_10C1E db 4, 5 dup(0), 0EEh, 18h, 0Ch, 5 dup(0)
db 0F7h, 18h, 24h, 5 dup(0), 4Ch, 19h, 40h
db 5 dup(0), 9Ah, 1Bh, 4Ch, 5 dup(0), 8Dh
db 1Bh
word_10C46 dw 5
dword_10C48 dd 0
dword_10C4C dd 0
word_10C50 dw 0
word_10C52 dw 0
byte_10C54 db 0
byte_10C55 db 9 dup(0)


; Attributes: bp-based frame

sub_10C5E proc far

arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    si
push    di
cld
mov     ax, cs:seg_10C1C
mov     ds, ax
assume ds:seg091
mov     es, ax
assume es:seg091
mov     word_4C282, ss
mov     word_4C280, sp
mov     word_4C27E, bp
push    word_4BE52
push    word_4BE50
push    ds
mov     ax, 9CAh
push    ax
call    sub_3F3F4
mov     word_4C262, ax
mov     word_4C264, dx
or      ax, dx
jnz     short loc_10CA5
call    sub_11452
mov     [bp+arg_0], 2

loc_10C9D:
call    sub_13450
jmp     short loc_10D02
db 90h

loc_10CA5:
call    sub_11434
call    sub_11452

loc_10CAB:
mov     ax, ds
mov     es, ax
mov     di, 38Eh
mov     cx, 100h
mov     ax, ds
mov     bx, 48Eh
mov     dx, 100h
call    sub_10E3A
cmp     [bp+arg_0], 2
jz      short loc_10C9D
mov     ax, word ptr dword_4C266
add     ax, word_4C26A
mov     word_4C26C, ax
les     bx, dword_4C266
assume es:nothing
mov     cx, word_4C26A
mov     si, word_4BE50
mov     ax, [bp+arg_0]
call    sub_10E72
jnb     short loc_10CF4

loc_10CE4:
mov     sp, word_4C280
mov     bp, word_4C27E
xor     ax, ax
mov     dx, 0FFFFh
jmp     loc_10E1B

loc_10CF4:
mov     di, word_4C26C
mov     es, word ptr dword_4C266+2
assume es:nothing
mov     al, 6
nop
call    near ptr sub_110C9

loc_10D02:
cmp     word_4C274, 0
jz      short loc_10D19
les     di, dword_4C266
assume es:nothing
cmp     byte ptr es:[di], 0CCh
jz      short loc_10D19
call    sub_1168A
call    sub_10E21

loc_10D19:
mov     cs:word_10C52, 0
mov     cs:byte_10C54, 0
mov     cs:byte_11BA7, 0
nop
mov     ax, word_4BE50
mov     word_4C28C, ax
mov     ax, word_4BE52
mov     word_4C28E, ax
call    sub_117B6
call    near ptr sub_118B2
call    sub_117E5
mov     ax, word_4BE50
mov     dx, word_4BE52
mov     cx, [bp+arg_6]
jcxz    short loc_10D68
les     di, [bp+arg_2]

loc_10D51:
cmp     byte ptr es:[di+5], 0
jz      short loc_10D63
cmp     ax, es:[di]
jnz     short loc_10D63
cmp     dx, es:[di+2]
jz      short loc_10DDD

loc_10D63:
add     di, 6
loop    loc_10D51

loc_10D68:
call    sub_111AD
jnb     short loc_10DD8
mov     cx, 1
mov     ax, word_4BE50
cmp     ax, word_4C28C
jnz     short loc_10D93
mov     ax, word_4BE52
cmp     ax, word_4C28E
jnz     short loc_10D93
mov     word_4C28C, 0FFFFh
inc     word_4BE50
dec     cx
cmp     [bp+arg_0], 2
jz      short loc_10DDA

loc_10D93:
mov     word_4C28C, 0FFFFh
push    cx
push    word_4BE52
push    word_4BE50
push    ds
mov     ax, 9CAh
push    ax
call    sub_3F3F4
pop     cx
mov     bx, ax
or      bx, dx
jz      short loc_10DD1
push    cx
mov     word_4C262, ax
mov     word_4C264, dx
call    sub_11434
pop     cx
mov     ax, word ptr dword_4C266
cmp     ax, word_4BE50
jnz     short loc_10DD1
mov     ax, word ptr dword_4C266+2
cmp     ax, word_4BE52
jz      short loc_10E0E

loc_10DD1:
add     word_4BE50, cx
jmp     loc_10D19

loc_10DD8:
jnz     short loc_10DEF

loc_10DDA:
jmp     loc_10D19

loc_10DDD:
push    word_4BE52
push    word_4BE50
push    ds
mov     ax, 9CAh
push    ax
call    sub_3F3F4

loc_10DEF:
mov     word_4C262, ax
mov     word_4C264, dx
call    sub_11434
mov     ax, word ptr dword_4C266
cmp     ax, word_4BE50
jnz     short loc_10E0B
mov     ax, word ptr dword_4C266+2
cmp     ax, word_4BE52
jz      short loc_10E0E

loc_10E0B:
jmp     loc_10CAB

loc_10E0E:
call    sub_114D3
call    sub_11152

loc_10E14:
mov     ax, word_4C262
mov     dx, word_4C264

loc_10E1B:
pop     di
pop     si
pop     bp
retf    8
sub_10C5E endp ; sp-analysis failed




sub_10E21 proc near
les     di, dword_4C266
mov     al, es:[di]
mov     byte ptr es:[di], 0CCh
les     di, dword_4C276
stosb
mov     word_4C274, 0
retn
sub_10E21 endp

byte_10E38 db 0
byte_10E39 db 0



sub_10E3A proc near
mov     word_4C298, ax
mov     word_4C296, bx
mov     word_4C29A, bx
mov     word_4C29E, 0
add     bx, dx
mov     word_4C29C, bx
mov     word_4C290, di
mov     word_4C292, es
mov     ax, cx
shl     ax, 1
shl     ax, 1
shl     ax, 1
mov     word_4C294, ax
shr     cx, 1
xor     ax, ax
rep stosw
mov     word_4C2C4, ax
mov     cs:byte_10E38, al
retn
sub_10E3A endp




sub_10E72 proc near

; FUNCTION CHUNK AT 1042 SIZE 00000003 BYTES

cmp     cx, word_4C294
jbe     short loc_10E7B
jmp     loc_10FAC

loc_10E7B:
mov     word_4C2AA, ax
mov     word_4C2A2, bx
mov     word_4C2A4, es
add     cx, bx
mov     word_4C2A6, cx
mov     word_4C2C2, 0
mov     cs:byte_10E39, 0FFh

loc_10E98:
mov     ax, word_4C29C
mov     word_4C2A0, ax

loc_10E9E:
mov     word_4C2A8, si
call    sub_11087
mov     word_4C2B0, bx
mov     word_4C2B2, dx
mov     word_4C2B4, cx

loc_10EB1:
mov     si, word_4C2B0
mov     es, word_4C292
mov     ax, word_4C2B2
test    es:[si], ax
jnz     short loc_10F2D
mov     di, word_4C2A8
mov     es, word_4C2A4
call    sub_114FA
mov     word_4C2B8, cx
mov     word ptr dword_4C2BA, di
mov     word ptr dword_4C2BA+2, es
mov     word_4C2B6, ax
mov     si, word_4C2B0
mov     es, word_4C292
mov     ax, word_4C2B2
mov     dx, word_4C2B4

loc_10EEA:
or      es:[si], ax
shl     ax, 1
dec     dx
jnz     short loc_10F00
mov     ax, 1
mov     dx, 10h
add     si, 2
add     word_4C2B0, 2

loc_10F00:
loop    loc_10EEA
mov     word_4C2B2, ax
mov     word_4C2B4, dx
mov     ax, word_4C2B6
cmp     ax, 5
jz      short loc_10F4E
mov     word_4C2C2, 0
and     ax, ax
jnz     short loc_10F4E

loc_10F1B:
mov     ax, word_4C2B8
add     word_4C2A8, ax
mov     ax, word_4C2A8
cmp     ax, word_4C2A6
jnb     short loc_10F2D
jmp     short loc_10EB1

loc_10F2D:
mov     si, word_4C2A0
cmp     si, word_4C29C
jz      short loc_10F4C
mov     es, word_4C292
mov     si, es:[si]
add     word_4C2A0, 2
mov     word_4C2C2, 0
jmp     loc_10E9E

loc_10F4C:
clc
retn

loc_10F4E:
mov     bx, ax
and     bx, 7Fh
shl     bx, 1
jmp     word ptr [bx+0A14h]
mov     al, 5
call    sub_110C1
jmp     short loc_10F1B
test    ax, 80h
jz      short loc_10FB1

loc_10F65:
mov     al, 8
call    sub_110C1
jmp     short loc_10F2D

loc_10F6C:
cmp     word_4C2B6, 3
jz      short loc_10F7A

loc_10F73:
mov     si, word ptr dword_4C2BA
jmp     loc_10E9E

loc_10F7A:
mov     si, word ptr dword_4C2BA
call    sub_11087
mov     es, word_4C292
test    es:[bx], dx
jnz     short loc_10FA9
mov     bx, word_4C2B0
mov     ax, word_4C2B2
and     ax, es:[bx]
jnz     short loc_10F73
sub     word_4C2A0, 2
mov     di, word_4C2A0
cmp     di, word_4C29A
jb      short loc_10FAC
mov     ax, word ptr dword_4C2BA
stosw

loc_10FA9:
jmp     loc_10F1B

loc_10FAC:
call    sub_11152
stc
retn

loc_10FB1:
mov     ax, word ptr dword_4C2BA+2
cmp     ax, word_4C2A4
jnz     short loc_10FCB
mov     ax, word ptr dword_4C2BA
cmp     ax, word_4C2A2
jb      short loc_10FCB
jz      short loc_10FF4
cmp     ax, word_4C2A6
jb      short loc_10F6C

loc_10FCB:
push    word ptr dword_4C2BA+2
push    word ptr dword_4C2BA
push    ds
mov     ax, 0A0Eh
push    ax
call    sub_3F3F4
or      ax, dx
jz      short loc_10F65
mov     al, 6
les     di, dword_4C2BA
call    near ptr sub_110C9
cmp     word_4C2B6, 3
jz      short loc_11042
jmp     loc_10F2D

loc_10FF4:
mov     al, 9
les     di, dword_4C2BA
call    near ptr sub_110C9
mov     cs:byte_10E38, 1
mov     ax, word_4BE50
cmp     ax, word ptr dword_4C266
jnz     short loc_1101A
mov     ax, word_4BE52
cmp     ax, word ptr dword_4C266+2
jnz     short loc_1101A
dec     cs:byte_10E38

loc_1101A:
jmp     loc_10F6C
sub_10E72 endp ; sp-analysis failed

cmp     word_4C2C2, 0
jnz     short loc_1102F
mov     word_4C2C2, 1
mov     al, 4
call    sub_110C1

loc_1102F:
jmp     loc_10F1B
cmp     word ptr [bp+6], 0
jnz     short loc_11067
test    ax, 80h
jz      short loc_11045
mov     al, 7
call    sub_110C1
; START OF FUNCTION CHUNK FOR sub_10E72

loc_11042:
jmp     loc_10F1B
; END OF FUNCTION CHUNK FOR sub_10E72

loc_11045:
push    word ptr dword_4C2BA+2
push    word ptr dword_4C2BA
push    ds
mov     ax, 0A0Eh
push    ax
call    sub_3F3F4
or      ax, dx
jz      short loc_11067
mov     al, 6
les     di, dword_4C2BE
call    near ptr sub_110C9
jmp     loc_10F1B

loc_11067:
mov     al, 3
call    sub_110C1
jmp     loc_10F1B
mov     al, 0
call    sub_110C1
jmp     loc_10F1B
mov     al, 1
call    sub_110C1
jmp     loc_10F1B
mov     al, 2
call    sub_110C1
jmp     loc_10F1B



sub_11087 proc near
sub     si, word_4C2A2
mov     bx, si
mov     cl, 4
shr     bx, cl
shl     bx, 1
add     bx, word_4C290
and     si, 0Fh
shl     si, 1
shl     si, 1
mov     dx, [si+0A26h]
mov     cx, [si+0A28h]
retn
sub_11087 endp

cmp     word ptr es:0, 3FCDh
jnz     short loc_110BD
cmp     word ptr es:10h, 0
jz      short loc_110BF
mov     es, word ptr es:10h

loc_110BD:
clc
retn

loc_110BF:
stc
retn



sub_110C1 proc near
mov     di, word_4C2A8
mov     es, word_4C2A4
sub_110C1 endp




sub_110C9 proc far
cmp     byte ptr es:[di], 0CCh
jz      short loc_11117
cmp     al, 9
jnz     short loc_110E8
cmp     word_4C274, 0
jz      short loc_110E8
cmp     di, word ptr dword_4C266
jnz     short loc_110E8
mov     dx, es
cmp     dx, word ptr dword_4C266+2
jz      short locret_11116

loc_110E8:
mov     bx, word_4C29A
lea     dx, [bx+6]
cmp     dx, word_4C2A0
ja      short loc_11149
push    ds
mov     ds, word_4C298
assume ds:nothing
mov     [bx], di
mov     word ptr [bx+2], es
mov     [bx+5], al
mov     al, es:[di]
mov     [bx+4], al
mov     byte ptr es:[di], 0CCh
pop     ds
add     word ptr ds:9EAh, 6
inc     word ptr ds:9EEh

locret_11116:
retn

loc_11117:
cmp     al, 9
jnz     short locret_11116
mov     cx, ds:9EEh
jcxz    short locret_11116
push    ds
lds     si, ds:9E6h
mov     dx, es

loc_11128:
cmp     di, [si]
jnz     short loc_11142
cmp     dx, [si+2]
jnz     short loc_11142
mov     al, [si+5]
mov     byte ptr [si+5], 9
pop     ds
cmp     al, 9
jz      short locret_11116
mov     cs:byte_10E39, al
retn

loc_11142:
add     si, 6
loop    loc_11128
pop     ds
retn

loc_11149:
call    sub_11152
call    sub_114D3
jmp     loc_10CE4
sub_110C9 endp




sub_11152 proc near
mov     cx, ds:9EEh
jcxz    short locret_1117D
push    ds
lds     si, ds:9E6h

loc_1115D:
les     di, [si]
cmp     byte ptr es:[di], 0CCh
jnz     short loc_1116B
mov     al, [si+4]
mov     es:[di], al

loc_1116B:
add     si, 6
loop    loc_1115D
pop     ds
mov     ax, ds:9E6h
mov     ds:9EAh, ax
mov     word ptr ds:9EEh, 0

locret_1117D:
retn
sub_11152 endp




sub_1117E proc near
mov     si, ds:9FCh
mov     es, word ptr ds:9E8h
les     di, es:[si]
cmp     byte ptr es:[di], 0CCh
jnz     short locret_111AC
mov     al, [si+4]
mov     es:[di], al
call    sub_1168A
mov     si, ds:9FCh
mov     es, word ptr ds:9E8h
les     di, [si]
mov     al, es:[di]
mov     [si+4], al
mov     byte ptr es:[di], 0CCh

locret_111AC:
retn
sub_1117E endp




sub_111AD proc near
mov     cx, ds:9EEh
jcxz    short loc_111CA
mov     di, ds:9E6h
mov     es, word ptr ds:9E8h
mov     ax, ds:5A0h
mov     dx, ds:5A2h

loc_111C2:
scasw
jz      short loc_111CC

loc_111C5:
add     di, 4
loop    loc_111C2

loc_111CA:
stc
retn

loc_111CC:
cmp     dx, es:[di]
jnz     short loc_111C5
sub     di, 2
mov     ds:9FCh, di
mov     al, es:[di+5]
cbw
mov     ds:9FEh, ax
mov     bx, ax
cmp     al, 9
jz      short loc_111FE
cmp     al, 7
jz      short loc_111FE
cmp     al, 8
jz      short loc_111FE
push    ds
lds     si, es:[di]
cmp     byte ptr [si], 0CCh
jnz     short loc_111FD
mov     al, es:[di+4]
mov     [si], al

loc_111FD:
pop     ds

loc_111FE:
shl     bx, 1
jmp     word ptr [bx+0A66h]
sub_111AD endp

inc     cs:byte_10E38
mov     al, cs:byte_10E39
cmp     al, 0FFh
jnz     short loc_1121F
cmp     cs:byte_10E38, 2
jz      short loc_1128C
call    sub_1117E
xor     al, al
retn

loc_1121F:
cbw
mov     bx, ax
push    word ptr ds:5A0h
call    loc_111FE
pop     bx
push    ax
push    dx
pushf
cmp     bx, ds:5A0h
jnz     short loc_1123C
call    sub_1117E
mov     cs:byte_10E39, 0FFh

loc_1123C:
popf
pop     dx
pop     ax
mov     cs:byte_10E38, 1
retn
call    sub_1117E
mov     si, ds:5A2h
cmp     si, ds:9F4h
jnz     short loc_1128C
mov     si, ds:5A0h
cmp     si, ds:9F2h
jb      short loc_1128C
cmp     si, ds:9F6h
jnb     short loc_1128C
call    sub_11087
mov     es, word ptr ds:9E2h
test    es:[bx], dx
jnz     short loc_11276
mov     si, ds:5A0h
call    loc_10E98

loc_11276:
xor     al, al
retn
call    sub_1117E
jmp     short loc_1128C
call    sub_1168A
cmp     word ptr [bp+6], 1
jnz     short loc_1128C
mov     word ptr [bp+6], 0

loc_1128C:
push    word ptr ds:5A2h
push    word ptr ds:5A0h
push    ds
mov     ax, 0A0Eh
push    ax
call    sub_3F3F4
cmp     word ptr ds:9FEh, 7
jnz     short loc_112AB
mov     bx, ax
or      bx, dx
jz      short loc_11303

loc_112AB:
push    ax
push    dx
call    sub_11152
pop     dx
pop     ax
mov     bx, ax
or      bx, dx
jnz     short locret_112C1
call    sub_13450
xor     ax, ax
xor     dx, dx

locret_112C1:
retn
mov     ax, ds:59Ch

loc_112C5:
push    ax
mov     di, ds:9FCh
push    ds
mov     ds, word ptr ds:9E8h
les     si, [di]
cmp     byte ptr es:[si], 0CCh
jnz     short loc_112DD
mov     al, [di+4]
mov     es:[si], al

loc_112DD:
pop     ds
pop     ax
cmp     ax, 50h ; 'P'
jb      short loc_11303
cmp     ax, 0A000h
jb      short loc_112EE
cmp     ax, 0C000h
jb      short loc_11303

loc_112EE:
xor     al, al
retn
mov     ax, ds:59Ch
cmp     ax, 0A000h
jnb     short loc_112C5
cmp     ax, 50h ; 'P'
jb      short loc_112C5
mov     ax, ds:59Eh
jmp     short loc_112C5

loc_11303:
cmp     word ptr ds:0A14h, 0
jnz     short loc_11338
call    sub_13450
mov     word ptr ds:0A14h, 1
mov     cx, ds:9EEh
push    ds
lds     si, ds:9E6h

loc_1131E:
cmp     byte ptr [si+5], 4
ja      short loc_11332
les     di, [si]
cmp     byte ptr es:[di], 0CCh
jnz     short loc_11332
mov     al, [si+4]
mov     es:[di], al

loc_11332:
add     si, 6
loop    loc_1131E
pop     ds

loc_11338:
xor     al, al
retn



sub_1133B proc near
mov     cx, ds:9EEh
jcxz    short locret_1135A
push    ds
lds     si, ds:9E6h

loc_11346:
les     di, [si]
cmp     byte ptr es:[di], 0CCh
jnz     short loc_11354
mov     al, [si+4]
mov     es:[di], al

loc_11354:
add     si, 6
loop    loc_11346
pop     ds

locret_1135A:
retn
sub_1133B endp



; Attributes: bp-based frame

sub_1135B proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     dx, [bp+arg_0]
cli
mov     ss, word ptr ds:9D2h
assume ss:nothing
mov     sp, ds:9D0h
sti
mov     bp, ds:9CEh
mov     ds, cs:seg_10C1C
assume ds:seg091
push    dx
call    sub_11875
call    sub_11804
call    sub_114D3
call    sub_11152
xor     ax, ax
pop     dx
xor     dh, dh
cmp     cs:byte_10C54, 0
jz      short loc_11393
mov     dx, ax
dec     ax

loc_11393:
jmp     loc_10E1B
sub_1135B endp



; Attributes: bp-based frame

sub_11396 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     ds, cs:seg_10C1C
mov     ax, [bp+arg_0]
mov     ax, word_4BE4C
mov     word_4BE5E, ax
or      word_4BE54, 200h
mov     es, ax
assume es:nothing
mov     es, word ptr es:16h
assume es:nothing
les     si, es:2Eh
mov     word_4C284, si
mov     word_4C286, es
mov     es, cs:seg_10C1C
assume es:seg091
xor     ax, ax
mov     ds, ax
assume ds:nothing
xor     si, si
mov     di, 5B2h
mov     cx, 200h
rep movsw
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
mov     di, word_4B9A4
shl     di, 1
shl     di, 1
mov     ax, seg seg091
mov     ds, ax
mov     si, 8C48h
add     di, 5B2h
movsw
movsw
mov     si, 825Fh
mov     di, 61Eh
lodsw
stosw
mov     word ptr cs:dword_10C48, ax
lodsw
stosw
mov     word ptr cs:dword_10C48+2, ax
mov     si, 8256h
mov     di, 63Eh
movsw
movsw
mov     si, 8C4Ch
mov     di, 642h
movsw
movsw
mov     di, 636h
mov     ax, es:[di]
mov     word ptr cs:dword_10C4C, ax
mov     ax, es:[di+2]
mov     word ptr cs:dword_10C4C+2, ax
mov     ax, 1BA8h
stosw
mov     ax, cs
stosw
pop     ds
assume ds:nothing
pop     di
pop     si
pop     bp
retf    2
sub_11396 endp




sub_11434 proc near
push    word ptr ds:9B4h
push    word ptr ds:9B2h
push    ds
mov     ax, 9B6h
push    ax
push    ds
mov     ax, 9BAh
push    ax
call    sub_3F201
or      ax, ax
retn
sub_11434 endp

dword_1144E dd 0



sub_11452 proc near
mov     word ptr ds:9C4h, 0
mov     cx, [bp+0Ch]
jcxz    short locret_114D2
les     bx, [bp+8]
assume es:nothing

loc_11460:
push    cx
push    bx
push    es
mov     ax, es:[bx]
mov     word ptr cs:dword_1144E, ax
mov     ax, es:[bx+2]
mov     word ptr cs:dword_1144E+2, ax
mov     ax, word ptr cs:dword_1144E
cmp     ax, ds:5A0h
jnz     short loc_114B2
mov     ax, word ptr cs:dword_1144E+2
cmp     ax, ds:5A2h
jnz     short loc_114B2
xor     al, al
cmp     word ptr [bp+6], 2
jnz     short loc_114C2
cmp     word ptr ds:9C4h, 0
jnz     short loc_114C2
pop     es
pop     bx
push    bx
push    es
mov     word ptr ds:9C4h, 1
lea     ax, [bx+4]
mov     ds:9C6h, ax
mov     word ptr ds:9C8h, es
les     di, cs:dword_1144E
jmp     short loc_114BE
jmp     short locret_114D2

loc_114B2:
les     di, cs:dword_1144E
mov     ah, es:[di]
mov     byte ptr es:[di], 0CCh

loc_114BE:
mov     al, 1
mov     dx, es

loc_114C2:
pop     es
pop     bx
mov     es:[bx+5], al
mov     es:[bx+4], ah
pop     cx
add     bx, 6
loop    loc_11460

locret_114D2:
retn
sub_11452 endp




sub_114D3 proc near
mov     cx, [bp+0Ch]
jcxz    short locret_114F9
push    ds
lds     si, [bp+8]

loc_114DC:
cmp     byte ptr [si+5], 0
jz      short loc_114F3
mov     di, [si]
mov     es, word ptr [si+2]
cmp     byte ptr es:[di], 0CCh
jnz     short loc_114F3
mov     al, [si+4]
mov     es:[di], al

loc_114F3:
add     si, 6
loop    loc_114DC
pop     ds

locret_114F9:
retn
sub_114D3 endp




sub_114FA proc near
xor     dx, dx
mov     ds:0C48h, dx

loc_11500:
mov     bx, es:[di]
mov     si, 0A7Ah
mov     cx, 4Dh ; 'M'

loc_11509:
lodsw
and     ax, bx
cmp     ax, [si]
jz      short loc_1151B
add     si, 4
loop    loc_11509
mov     cx, 1
xor     ax, ax
retn

loc_1151B:
mov     cl, [si+2]
xor     ch, ch
mov     al, [si+3]
xor     ah, ah
and     cl, cl
jle     short loc_1152C
add     cx, dx
retn

loc_1152C:
jz      short loc_11563
dec     ch
mov     si, cx
neg     si
add     si, 153Bh
jmp     word ptr cs:[si]
db 63h, 15h, 85h, 15h, 96h, 15h, 0A3h, 15h
db 2Bh, 15h, 2Bh, 15h, 0D9h, 15h, 0D8h, 15h
db 37h, 16h, 42h, 16h, 4Dh, 16h, 0D1h, 15h
db 0CBh, 15h, 0C2h, 15h, 0BFh, 15h, 58h
db 16h, 5Fh, 16h, 78h, 16h, 0ADh, 15h, 64h
db 16h

loc_11563:
mov     al, es:[di]
inc     di
inc     dx
cmp     al, 26h ; '&'
jz      short loc_1157C
cmp     al, 2Eh ; '.'
jz      short loc_11574
cmp     al, 26h ; '&'
jnz     short loc_11500

loc_11574:
mov     word ptr ds:0C48h, 0FFFFh
jmp     short loc_11500

loc_1157C:
mov     word ptr ds:0C48h, 7
jmp     loc_11500
sub_114FA endp

mov     bx, ax
mov     al, es:[di+1]
cbw
xchg    ax, bx
lea     di, [bx+di+2]
mov     cx, 2
add     cx, dx
retn
mov     bx, es:[di+1]
lea     di, [bx+di+3]
mov     cx, 3
add     cx, dx
retn
les     di, es:[di+1]
mov     cx, 5
add     cx, dx
retn
inc     di
inc     dx
mov     bl, es:[di+1]
and     bl, 0F0h
cmp     bl, 20h ; ' '
jnz     short loc_115BF
inc     dx
add     cx, dx
retn

loc_115BF:
inc     di
jmp     short loc_115D8
test    byte ptr es:[di], 2
jnz     short loc_115D8
inc     dx
jmp     short loc_115D8
test    byte ptr es:[di], 2
jnz     short loc_115D8
inc     dx
test    byte ptr es:[di], 1
jz      short loc_115D9

loc_115D8:
inc     dx

loc_115D9:
and     ax, ax
jnz     short loc_11611
mov     cx, ds:0C48h
and     cx, cx
jl      short loc_11611
mov     bl, es:[di+1]
cmp     bl, 0C0h
jnb     short loc_11611
jcxz    short loc_115F4
or      ax, cx
jmp     short loc_11611

loc_115F4:
and     bl, 0C7h
cmp     bl, 6
jz      short loc_11611
and     bl, 7
cmp     bl, 2
jz      short loc_11611
cmp     bl, 3
jz      short loc_11611
cmp     bl, 6
jz      short loc_11611
or      ax, 6

loc_11611:
mov     bl, es:[di+1]
and     bl, 0C7h
mov     cx, 2
cmp     bl, 0C0h
jnb     short loc_11634
mov     cx, 4
cmp     bl, 80h
jnb     short loc_11634
cmp     bl, 6
jz      short loc_11634
dec     cx
cmp     bl, 40h ; '@'
jnb     short loc_11634
dec     cx

loc_11634:
add     cx, dx
retn
mov     cx, 2
test    byte ptr es:[di], 1
jz      short locret_11641
inc     cx

locret_11641:
retn
mov     cx, 2
test    byte ptr es:[di], 2
jnz     short locret_1164C
inc     cx

locret_1164C:
retn
mov     cx, 2
test    byte ptr es:[di], 8
jz      short locret_11657
inc     cx

locret_11657:
retn

loc_11658:
mov     ax, 7
mov     cx, dx
inc     cx
retn
mov     cx, 1
jmp     short loc_11667
mov     cx, 3

loc_11667:
mov     ax, ds:0C48h
cmp     ax, 7
jz      short loc_11658
inc     ax
jz      short loc_11675
mov     ax, 6

loc_11675:
add     cx, dx
retn
mov     ax, ds:0C48h
cmp     ax, 7
jz      short loc_11658
inc     ax
jz      short loc_11658
mov     ax, 8
mov     cx, dx
inc     cx
retn



sub_1168A proc near
les     di, ds:5A0h
cmp     byte ptr es:[di], 0CDh
jz      short loc_1169E

loc_11694:
call    sub_11BF5
call    sub_116D3
call    sub_11C16
retn

loc_1169E:
cmp     byte ptr es:[di+1], 34h ; '4'
jb      short loc_11694
cmp     byte ptr es:[di+1], 3Eh ; '>'
ja      short loc_11694
call    sub_114FA
les     di, ds:5A0h
add     di, cx
push    word ptr es:[di]
push    es
push    di
mov     byte ptr es:[di], 0CCh
call    sub_13450
call    sub_117B6
call    near ptr sub_118B2
call    sub_117E5
pop     di
pop     es
pop     ax
mov     es:[di], al
retn
sub_1168A endp




sub_116D3 proc near
les     di, ds:5A0h
mov     al, es:[di]
cmp     al, 0CCh
jz      short loc_1170F
cmp     al, 0CFh
jz      short loc_11714
cmp     al, 9Ch
jz      short loc_11738
cmp     al, 9Dh
jz      short loc_11750
cmp     al, 0CDh
jz      short loc_1170D
or      word ptr ds:5A4h, 100h
push    cs:word_10C50
mov     cs:word_10C50, 1
call    near ptr sub_118B2
pop     cs:word_10C50
inc     word ptr ds:5A0h
retn

loc_1170D:
jmp     short loc_1176B

loc_1170F:
inc     word ptr ds:5A0h
retn

loc_11714:
mov     es, word ptr ds:5A8h
mov     bx, ds:5A6h
mov     ax, es:[bx]
mov     cx, es:[bx+2]
mov     dx, es:[bx+4]
mov     ds:5A0h, ax
mov     ds:5A2h, cx
mov     ds:5A4h, dx
add     word ptr ds:5A6h, 6
retn

loc_11738:
sub     word ptr ds:5A6h, 2
mov     bx, ds:5A6h
mov     es, word ptr ds:5A8h
mov     ax, ds:5A4h
mov     es:[bx], ax
inc     word ptr ds:5A0h
retn

loc_11750:
mov     bx, ds:5A6h
mov     es, word ptr ds:5A8h
mov     ax, es:[bx]
and     ax, 0FEFFh
mov     ds:5A4h, ax
add     word ptr ds:5A6h, 2
inc     word ptr ds:5A0h
retn

loc_1176B:
mov     bl, es:[di+1]
xor     bh, bh
shl     bx, 1
shl     bx, 1
add     word ptr ds:5A0h, 2
sub     word ptr ds:5A6h, 6
mov     di, ds:5A6h
mov     es, word ptr ds:5A8h
mov     ax, ds:5A0h
stosw
mov     ax, ds:5A2h
stosw
mov     ax, ds:5A4h
stosw
push    ds
add     bx, 5B2h
test    cs:byte_10C54, 80h
jz      short loc_117A8
xor     ax, ax
mov     ds, ax
assume ds:nothing
sub     bx, 5B2h

loc_117A8:
mov     ax, [bx]
mov     dx, [bx+2]
pop     ds
assume ds:nothing
mov     ds:5A0h, ax
mov     ds:5A2h, dx
retn
sub_116D3 endp




sub_117B6 proc near
mov     ah, 51h
int     21h             ; DOS - 2+ internal - GET PSP SEGMENT
                        ; Return: BX = current PSP segment
mov     ds:5B0h, bx
mov     es, bx
mov     ax, ds:9D4h
mov     es:2Eh, ax
mov     ax, ds:9D6h
mov     es:30h, ax
mov     bx, ds:5AEh
mov     ah, 50h
int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                        ; BX = segment address of new PSP
cli
call    sub_11804
call    sub_1184C
mov     cs:word_10C50, 3
retn
sub_117B6 endp




sub_117E5 proc near
call    sub_11875
call    sub_11804
mov     cs:word_10C50, 0
sti
mov     ah, 51h
int     21h             ; DOS - 2+ internal - GET PSP SEGMENT
                        ; Return: BX = current PSP segment
mov     ds:5AEh, bx
mov     bx, ds:5B0h
mov     ah, 50h
int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                        ; BX = segment address of new PSP
retn
sub_117E5 endp



; Attributes: fuzzy-sp

sub_11804 proc near
xor     ax, ax
mov     bx, sp
sub     sp, 401h
and     sp, 0FFFEh
mov     ds, ax
assume ds:nothing
mov     si, ax
push    ss
pop     es
mov     di, sp
mov     cx, 200h
rep movsw
nop
mov     ds, cs:seg_10C1C
assume ds:seg091
mov     si, 5B2h
mov     es, ax
assume es:nothing
mov     di, ax
mov     cx, 200h
rep movsw
mov     si, sp
push    ss
pop     ds
assume ds:nothing
mov     di, 5B2h
mov     es, cs:seg_10C1C
assume es:seg091
mov     cx, 200h
rep movsw
mov     ds, cs:seg_10C1C
assume ds:seg091
mov     es, cs:seg_10C1C
mov     sp, bx
retn
sub_11804 endp




sub_1184C proc near
push    ds
push    cs
pop     ds
assume ds:seg000
xor     ax, ax
mov     es, ax
assume es:nothing
mov     si, 0C1Eh
mov     cx, cs:word_10C46

loc_1185B:
lodsw
mov     di, ax
mov     ax, es:[di]
mov     [si], ax
mov     ax, es:[di+2]
mov     [si+2], ax
add     si, 4
movsw
mov     ax, cs
stosw
loop    loc_1185B
pop     ds
assume ds:nothing
retn
sub_1184C endp




sub_11875 proc near
mov     bx, ds:5AEh
push    ds
mov     dx, cs
mov     ds, dx
assume ds:seg000
xor     ax, ax
mov     es, ax
mov     si, 0C1Eh
mov     cx, cs:word_10C46

loc_1188A:
lodsw
mov     di, ax
cmp     dx, es:[di+2]
jnz     short loc_118A3
mov     ax, [si+4]
cmp     ax, es:[di]
jnz     short loc_118A3

loc_1189B:
movsw
movsw
inc     si
inc     si
loop    loc_1188A
pop     ds
assume ds:nothing
retn

loc_118A3:
cmp     es:[di+2], bx
jb      short loc_1189B
mov     ds, dx
add     si, 6
loop    loc_1188A
pop     ds
retn
sub_11875 endp




sub_118B2 proc far
mov     ds:0C4Ah, sp
mov     word ptr ds:0C4Ch, ss
mov     ds:0C4Eh, bp
mov     bx, 58Eh
mov     ax, [bx]
mov     cx, [bx+4]
mov     dx, [bx+6]
mov     si, [bx+0Ah]
mov     di, [bx+0Ch]
mov     bp, [bx+8]
mov     es, word ptr [bx+10h]
assume es:nothing
cli
mov     ss, word ptr [bx+1Ah]
mov     sp, [bx+18h]
sti
push    word ptr [bx+16h]
push    word ptr [bx+14h]
push    word ptr [bx+12h]
mov     bx, [bx+2]
mov     ds, word ptr ds:59Ch
iret
sub_118B2 endp

cmp     cs:word_10C50, 1
jz      short loc_11900
iret
cmp     cs:word_10C50, 3
jz      short loc_11900
iret

loc_11900:
push    ds
push    bx
mov     ds, cs:seg_10C1C
assume ds:seg091
mov     bx, 58Eh
mov     [bx], ax
pop     word ptr [bx+2]
mov     [bx+4], cx
mov     [bx+6], dx
mov     [bx+0Ah], si
mov     [bx+0Ch], di
mov     [bx+8], bp
pop     word ptr [bx+0Eh]
mov     word ptr [bx+10h], es
pop     word ptr [bx+12h]
pop     word ptr [bx+14h]
pop     word ptr [bx+16h]
mov     word ptr [bx+1Ah], ss
mov     [bx+18h], sp
cli
mov     ss, word_4C4FC
assume ss:nothing
mov     sp, word_4C4FA
sti
mov     bp, word_4C4FE
and     word ptr [bx+16h], 0FEFFh
dec     word_4BE50
cld
retn
push    ds
push    di
xor     di, di
mov     ds, di
assume ds:nothing
mov     di, 6Ch ; 'l'
push    word ptr [di]
push    word ptr [di+2]
cli
mov     word ptr [di], 1996h
mov     word ptr [di+2], cs
pushf
call    dword ptr cs:byte_10C1E+12h
cli
pop     word ptr [di+2]
pop     word ptr [di]
cmp     cs:byte_10C55, 0
jz      short loc_1198B
and     byte ptr ds:471h, 7Fh
mov     cs:byte_10C55, 0
push    ax
push    bx
push    si
xor     ah, ah
int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
                        ; Return: AH = scan code, AL = character
pop     si
pop     bx
pop     ax

loc_1198B:
pop     di
pop     ds
assume ds:nothing
test    cs:byte_10C54, 1
jnz     short loc_119C9

locret_11995:
iret
or      cs:byte_10C54, 1
test    cs:byte_10C54, 82h
jnz     short loc_119BE
mov     cs:byte_10C55, 1
push    ds
mov     ds, cs:seg_10C1C
assume ds:seg091
mov     word_4C262, 1
mov     word_4C264, 0
pop     ds
assume ds:nothing
iret

loc_119BE:
or      cs:byte_10C54, 80h
jmp     cs:dword_10C48

loc_119C9:
or      cs:byte_10C54, 2
cmp     cs:word_10C52, 0
jnz     short locret_11995
push    ds
push    bx
test    cs:byte_10C54, 80h
jnz     short loc_119F7
mov     bx, seg seg091
mov     ds, bx
assume ds:seg091
cmp     byte_54340, 0
jz      short loc_119F7
mov     cs:byte_10C54, 82h
pop     bx
pop     ds
assume ds:nothing
jmp     short locret_11995

loc_119F7:
mov     ds, cs:seg_10C1C
assume ds:seg091
mov     bx, 58Eh
mov     [bx], ax
pop     word ptr [bx+2]
mov     [bx+4], cx
mov     [bx+6], dx
mov     [bx+0Ah], si
mov     [bx+0Ch], di
mov     [bx+8], bp
pop     word ptr [bx+0Eh]
mov     word ptr [bx+10h], es
pop     word ptr [bx+12h]
pop     word ptr [bx+14h]
pop     word ptr [bx+16h]
mov     word ptr [bx+1Ah], ss
mov     [bx+18h], sp
cli
mov     ss, word_4C282
assume ss:nothing
mov     sp, word_4C280
sti
mov     bp, word_4C27E
test    cs:byte_10C54, 80h
jnz     short loc_11AA0
mov     cs:byte_10C54, 82h
sti
call    sub_114D3
call    sub_1133B
mov     word_4C262, 1
mov     word_4C264, 0

loc_11A57:
push    word_4BE52
call    sub_3F541
or      ax, ax
jnz     short loc_11A76
mov     ax, word_4BE52

loc_11A67:
push    ax
call    sub_11AE6
pop     ax
jnz     short loc_11AA0
cmp     ax, word_4BE52
jz      short loc_11A67
jmp     short loc_11A57

loc_11A76:
push    word_4BE52
push    word_4BE50
push    ds
mov     ax, 9CAh
push    ax
call    sub_3F3F4
mov     bx, ax
or      bx, dx
jnz     short loc_11AAC

loc_11A8E:
mov     ax, word_4BE52
push    ax
call    sub_11AE6
pop     ax
jnz     short loc_11AA0
cmp     ax, word_4BE52
jz      short loc_11A76
jmp     short loc_11A57

loc_11AA0:
neg     word_4C264
mov     cs:byte_10C54, 0
jmp     short loc_11AC8

loc_11AAC:
mov     word_4C262, ax
mov     word_4C264, dx
call    sub_11434
mov     ax, word ptr dword_4C266
cmp     ax, word_4BE50
jnz     short loc_11A8E
mov     ax, word ptr dword_4C266+2
cmp     ax, word_4BE52
jnz     short loc_11A8E

loc_11AC8:
mov     ah, 51h
int     21h             ; DOS - 2+ internal - GET PSP SEGMENT
                        ; Return: BX = current PSP segment
mov     word_4BE5E, bx
mov     bx, word_4BE60
mov     ah, 50h
int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                        ; BX = segment address of new PSP
call    sub_11875
call    sub_11804
sti
neg     word_4C262
jmp     loc_10E14



sub_11AE6 proc near
mov     di, word_4BE50
mov     es, word_4BE52
assume es:nothing
cmp     word ptr es:[di], 21CDh
jz      short loc_11B44
cmp     word ptr es:[di], 13CDh
jz      short loc_11B44
cmp     word ptr es:[di], 10CDh
jz      short loc_11B44
push    cs:word_10C50
mov     cs:word_10C50, 1
call    sub_116D3
pop     cs:word_10C50
cmp     word_4BE50, 194Ch
jz      short loc_11B26

loc_11B1F:
test    cs:byte_10C54, 1
retn

loc_11B26:
mov     bx, cs
cmp     bx, word_4BE52
jnz     short loc_11B1F
push    cs:word_10C50
mov     cs:word_10C50, 1
call    near ptr sub_118B2
pop     cs:word_10C50
jmp     short loc_11B1F

loc_11B44:
mov     cs:word_10C52, 1
inc     di
inc     di
mov     al, es:[di]
mov     byte ptr es:[di], 0CCh
push    ax

loc_11B55:
push    es
push    di
push    cs:word_10C50
mov     cs:word_10C50, 3
call    near ptr sub_118B2
pop     cs:word_10C50
pop     di
pop     es
assume es:nothing
mov     dx, es
cmp     dx, word_4BE52
jnz     short loc_11B55
cmp     di, word_4BE50
jnz     short loc_11B55
pop     ax
mov     es:[di], al
mov     cs:word_10C52, 0
test    cs:byte_10C54, 1
retn
sub_11AE6 endp

inc     cs:word_10C52
pushf
call    dword ptr cs:byte_10C1E+22h
jmp     short loc_11BC1
inc     cs:word_10C52
pushf
call    dword ptr cs:byte_10C1E+1Ah
jmp     short loc_11BC1
byte_11BA7 db 0
cmp     cs:byte_11BA7, 0
jnz     short loc_11BD9
inc     cs:word_10C52
cmp     ah, 4Bh ; 'K'
jz      short loc_11BDE
clc
pushf
call    cs:dword_10C4C

loc_11BC1:
push    bp
mov     bp, sp
push    ax
lahf
mov     [bp+6], ah
pop     ax
pop     bp
dec     cs:word_10C52
test    cs:byte_10C54, 1
jnz     short loc_11BF2
iret

loc_11BD9:
jmp     cs:dword_10C4C

loc_11BDE:
inc     cs:byte_11BA7
pushf
call    cs:dword_10C4C
pushf
dec     cs:byte_11BA7
popf
jmp     short loc_11BC1

loc_11BF2:
jmp     loc_119C9



sub_11BF5 proc near
mov     si, 4
mov     di, 0C20h
mov     ax, 18EEh
push    ds
xor     bx, bx
mov     ds, bx
assume ds:nothing
push    cs
pop     es
assume es:seg000
movsw
movsw
pop     ds
assume ds:nothing
mov     es, bx
assume es:nothing
lea     di, [si-4]
cli
stosw
mov     ax, cs
stosw
sti
push    ds
pop     es
assume es:nothing
retn
sub_11BF5 endp




sub_11C16 proc near
mov     di, 4
mov     si, 0C20h
mov     ax, 18EEh
push    ds
xor     bx, bx
mov     es, bx
assume es:nothing
cmp     ax, es:[di]
jnz     short loc_11C2F
push    cs
pop     ds
assume ds:seg000
cli
movsw
movsw
sti

loc_11C2F:
pop     ds
assume ds:nothing
push    ds
pop     es
assume es:nothing
retn
sub_11C16 endp




sub_11C33 proc near
mov     word ptr ds:824Eh, 0FFFFh
mov     word ptr ds:824Ch, 0FFFFh
retn
sub_11C33 endp




sub_11C40 proc near
mov     dx, ds:824Eh
mov     ax, ds:824Ch
retn
sub_11C40 endp



; Attributes: bp-based frame

sub_11C48 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    ds
mov     ax, 9877h
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_19911
pop     bp
retf    4
sub_11C48 endp



; Attributes: bp-based frame

sub_11C5D proc near

var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= byte ptr -2Ch
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 30h
push    si
push    ss
lea     ax, [bp+var_30]
push    ax
call    sub_10411
push    ss
lea     ax, [bp+var_2C]
push    ax
call    sub_10431
push    [bp+arg_2]
push    [bp+arg_0]
mov     al, 0
push    ax
xor     ax, ax
push    ax
call    sub_105BB
mov     si, ax
push    [bp+var_2E]
push    [bp+var_30]
call    sub_10431
or      si, si
jz      short loc_11C99
mov     dx, 0FFFFh
mov     ax, dx
jmp     short loc_11CBA

loc_11C99:
mov     ax, [bp+var_12]
or      ax, [bp+var_10]
jz      short loc_11CB5
mov     ax, [bp+var_14]
xor     dx, dx
mov     dx, ax
xor     ax, ax
mov     bx, [bp+var_16]
xor     cx, cx
add     ax, bx
adc     dx, cx
jmp     short loc_11CBA

loc_11CB5:
mov     dx, 0FFFFh
mov     ax, dx

loc_11CBA:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_11C5D endp



; Attributes: bp-based frame

sub_11CC1 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_11C48
or      ax, ax
jz      short loc_11CD7
call    sub_11C40
jmp     short loc_11CE0

loc_11CD7:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_11C5D

loc_11CE0:
pop     bp
retf    4
sub_11CC1 endp



; Attributes: bp-based frame

sub_11CE4 proc near

var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_2]
mov     ax, [bp+arg_0]
and     ax, 0FFFFh
mov     [bp+var_2], ax
push    ds
push    [bp+arg_4]
mov     ax, 2
push    ax
call    sub_106E6
mov     si, ax
mov     ax, si
or      ax, ax
jle     short loc_11D1E
mov     cx, [bp+var_2]
mov     dx, di
mov     ax, 5701h
mov     bx, si
call    sub_10BD7
push    si
call    sub_10728

loc_11D1E:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_11CE4 endp



; Attributes: bp-based frame

sub_11D26 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    ds
push    [bp+arg_0]
call    sub_11C5D
mov     ds:824Eh, dx
mov     ds:824Ch, ax
pop     bp
retn    2
sub_11D26 endp



; Attributes: bp-based frame

sub_11D3B proc near

var_C= byte ptr -0Ch
var_B= byte ptr -0Bh
var_9= byte ptr -9
var_8= word ptr -8
var_6= byte ptr -6
var_5= byte ptr -5
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 0Ch
push    ss
lea     ax, [bp+var_8]
push    ax
call    sub_46805
push    ss
lea     ax, [bp+var_C]
push    ax
call    sub_4681A
mov     ax, [bp+var_8]
add     ax, 0F844h
and     word ptr [bp-1], 0FF01h
and     ax, 7Fh
shl     ax, 1
or      [bp-1], ax
mov     al, [bp+var_5]
cbw
and     [bp+var_2], 0FE1Fh
and     ax, 0Fh
mov     cx, 5
shl     ax, cl
or      [bp+var_2], ax
mov     al, [bp+var_6]
cbw
and     [bp+var_2], 0FFE0h
and     ax, 1Fh
or      [bp+var_2], ax
mov     al, [bp+var_B]
mov     ah, 0
and     word ptr [bp-3], 0FF07h
and     ax, 1Fh
shl     ax, 1
shl     ax, 1
shl     ax, 1
or      [bp-3], ax
mov     al, [bp+var_C]
mov     ah, 0
and     [bp+var_4], 0F81Fh
and     ax, 3Fh
mov     cx, 5
shl     ax, cl
or      [bp+var_4], ax
mov     al, [bp+var_9]
shr     al, 1
mov     ah, 0
and     [bp+var_4], 0FFE0h
and     ax, 1Fh
or      [bp+var_4], ax
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     ds:824Eh, dx
mov     ds:824Ch, ax
mov     sp, bp
pop     bp
retn
sub_11D3B endp



; Attributes: bp-based frame

sub_11DD9 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_2]
mov     bx, [bp+arg_0]
mov     word ptr [bx], 1
jmp     short loc_11DED

loc_11DEC:
inc     si

loc_11DED:
cmp     byte ptr [si], 20h ; ' '
jz      short loc_11DEC
cmp     byte ptr [si], 9
jz      short loc_11DEC
mov     [bp+var_2], 0
mov     [bp+var_4], 0
jmp     short loc_11E4F

loc_11E03:
cmp     [bp+var_2], 1999h
ja      short loc_11E59
jnz     short loc_11E13
cmp     [bp+var_4], 9999h
ja      short loc_11E59

loc_11E13:
cmp     [bp+var_2], 1999h
jnz     short loc_11E26
cmp     [bp+var_4], 9999h
jnz     short loc_11E26
cmp     byte ptr [si], 35h ; '5'
jg      short loc_11E59

loc_11E26:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
xor     cx, cx
mov     bx, 0Ah
call    sub_46A18
push    dx
push    ax
mov     al, [si]
cbw
cwd
pop     bx
pop     cx
add     bx, ax
adc     cx, dx
add     bx, 0FFD0h
adc     cx, 0FFFFh
mov     [bp+var_2], cx
mov     [bp+var_4], bx
inc     si

loc_11E4F:
cmp     byte ptr [si], 30h ; '0'
jl      short loc_11E59
cmp     byte ptr [si], 39h ; '9'
jle     short loc_11E03

loc_11E59:
cmp     byte ptr [si], 0
jz      short loc_11E65
mov     bx, [bp+arg_0]
mov     word ptr [bx], 0

loc_11E65:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     si
mov     sp, bp
pop     bp
retn    4
sub_11DD9 endp



; Attributes: bp-based frame

sub_11E72 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_11DD9
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      dx, dx
jb      short loc_11E99
ja      short loc_11E92
cmp     ax, 0FFFFh
jbe     short loc_11E99

loc_11E92:
mov     bx, [bp+arg_0]
mov     word ptr [bx], 0

loc_11E99:
mov     ax, [bp+var_4]
mov     sp, bp
pop     bp
retn    4
sub_11E72 endp



; Attributes: bp-based frame

sub_11EA2 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, ds:1F85h

loc_11EAA:
test    word ptr [si], 0FF00h
jnz     short loc_11EBC
mov     ax, [bp+arg_0]
and     ax, 0FFh
cmp     ax, [si]
jz      short loc_11ECB
jmp     short loc_11EC3

loc_11EBC:
mov     ax, [si]
cmp     ax, [bp+arg_0]
jz      short loc_11ECB

loc_11EC3:
add     si, 3
cmp     word ptr [si], 0
jnz     short loc_11EAA

loc_11ECB:
mov     al, [si+2]
cbw
pop     si
pop     bp
retn    2
sub_11EA2 endp



; Attributes: bp-based frame

sub_11ED4 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_4]
push    ds
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_10740
cmp     ax, [bp+arg_0]
jz      short loc_11F0A
mov     ax, 145Ch
push    ax
push    word ptr ds:8250h
call    sub_19065
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
mov     ax, 1
push    ax
call    sub_4698B

loc_11F0A:
pop     bp
retn    6
sub_11ED4 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_11F0E proc near

var_54= byte ptr -54h
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 54h
push    si
mov     si, [bp+arg_2]
push    si
lea     ax, [bp+var_54]
push    ax
push    [bp+arg_0]
call    sub_19448
inc     ax
push    ax
call    sub_11ED4
lea     ax, [bp+var_54]
push    ax
push    [bp+arg_0]
call    sub_19497
or      ax, ax
jnz     short loc_11F74
push    si
lea     ax, [bp+var_54]
push    ax
mov     ax, 7
push    ax
call    sub_11ED4
lea     ax, [bp+var_54]
push    ax
mov     ax, 0ABh
push    ax
call    sub_19497
or      ax, ax
jnz     short loc_11F74
push    si
lea     ax, [bp+var_2]
push    ax
mov     ax, 2
push    ax
call    sub_11ED4
mov     ax, [bp+var_2]
and     ax, 0FF00h
mov     dx, ds:1B3Eh
and     dx, 0FF00h
cmp     ax, dx
jnz     short loc_11F74
mov     ax, 1
jmp     short loc_11F81

loc_11F74:
mov     ax, 1477h
push    ax
push    word ptr ds:8250h
call    sub_19065
xor     ax, ax

loc_11F81:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_11F0E endp



; Attributes: bp-based frame

sub_11F88 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
jmp     short loc_11FA2

loc_11F91:
mov     ax, [si]
and     ax, 7FFFh
cmp     ax, [bp+arg_2]
jnz     short loc_11F9F
mov     ax, si
jmp     short loc_11FA9

loc_11F9F:
add     si, 6

loc_11FA2:
cmp     word ptr [si], 0FFFFh
jnz     short loc_11F91
xor     ax, ax

loc_11FA9:
pop     si
pop     bp
retn    4
sub_11F88 endp



; Attributes: bp-based frame

sub_11FAE proc near

var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     [bp+var_4], 0
mov     ax, [bp+arg_4]
mov     ds:8250h, ax
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_11FDE
jmp     loc_1209F

loc_11FDE:
push    ds
push    [bp+arg_4]
xor     ax, ax
push    ax
call    sub_106E6
mov     di, ax
or      di, di
jge     short loc_11FFB
mov     ax, 0E30h
push    ax
push    [bp+arg_4]
call    sub_19065
jmp     loc_120A3

loc_11FFB:
push    di
push    [bp+arg_0]
call    sub_11F0E
or      ax, ax
jnz     short loc_12009
jmp     loc_1209B

loc_12009:
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_12022
jmp     loc_1209F

loc_12022:
push    di
lea     ax, [bp+var_A]
push    ax
mov     ax, 4
push    ax
call    sub_11ED4
cmp     [bp+var_A], 0FFFFh
jz      short loc_12096
push    [bp+var_A]
push    [bp+arg_2]
call    sub_11F88
mov     si, ax
mov     ax, si
or      ax, ax
jz      short loc_12085
push    ds
mov     ax, [si+4]
mov     [bp+var_2], ax
push    ax
mov     ax, [si+2]
mov     [bp+var_6], ax
push    ax
mov     al, 0
push    ax
call    sub_46C10
mov     ax, [bp+var_8]
cmp     ax, [bp+var_6]
jnb     short loc_12067
mov     [bp+var_6], ax

loc_12067:
push    di
push    [bp+var_2]
push    [bp+var_6]
call    sub_11ED4
push    di
mov     ax, [bp+var_8]
sub     ax, [bp+var_6]
xor     dx, dx
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_10792
jmp     short loc_12022

loc_12085:
push    di
mov     ax, [bp+var_8]
xor     dx, dx
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_10792
jmp     short loc_12022

loc_12096:
mov     [bp+var_4], 1

loc_1209B:
push    di
call    sub_10728

loc_1209F:
dec     word ptr ds:1DE8h

loc_120A3:
mov     ax, [bp+var_4]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_11FAE endp



; Attributes: bp-based frame

sub_120AE proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
xor     si, si
push    [bp+arg_0]
call    sub_19448
mov     di, ax
inc     di
push    [bp+arg_2]
push    ds
push    [bp+arg_0]
push    di
call    sub_10769
cmp     ax, di
jnz     short loc_120F5
push    [bp+arg_2]
push    ds
mov     ax, 0ABh
push    ax
mov     ax, 7
push    ax
call    sub_10769
cmp     ax, 7
jnz     short loc_120F5
push    [bp+arg_2]
push    ds
mov     ax, 1B3Eh
push    ax
mov     ax, 2
push    ax
call    sub_10769
cmp     ax, 2
jz      short loc_120F8

loc_120F5:
mov     si, 1

loc_120F8:
mov     ax, si
pop     di
pop     si
pop     bp
retn    4
sub_120AE endp



; Attributes: bp-based frame

sub_12100 proc near

var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_2]
xor     di, di
mov     ax, [bp+arg_4]
mov     ds:8250h, ax
push    ds
push    ax
mov     ax, 3
push    ax
call    sub_106E6
mov     [bp+var_2], ax
or      ax, ax
jge     short loc_12131
mov     ax, 1494h
push    ax
push    word ptr ds:8250h
call    sub_19065
jmp     loc_1219E

loc_12131:
push    [bp+var_2]
push    [bp+arg_0]
call    sub_120AE
mov     di, ax
jmp     short loc_1217D

loc_1213E:
mov     dx, [si]
cmp     dx, 0FFFFh
jz      short loc_1214B
test    dx, 8000h
jnz     short loc_12175

loc_1214B:
push    [bp+var_2]
push    ds
push    si
mov     ax, 4
push    ax
call    sub_10769
cmp     ax, 4
jnz     short loc_1216E
push    [bp+var_2]
push    ds
push    word ptr [si+4]
push    word ptr [si+2]
call    sub_10769
cmp     ax, [si+2]
jz      short loc_12173

loc_1216E:
mov     di, 1
jmp     short loc_12175

loc_12173:
xor     di, di

loc_12175:
cmp     word ptr [si], 0FFFFh
jz      short loc_12181
add     si, 6

loc_1217D:
or      di, di
jz      short loc_1213E

loc_12181:
push    [bp+var_2]
call    sub_10728
or      di, di
jz      short loc_121A2
mov     ax, 14A2h
push    ax
push    word ptr ds:8250h
call    sub_19065
push    ds
push    word ptr ds:8250h
call    sub_10394

loc_1219E:
xor     ax, ax
jmp     short loc_121A5

loc_121A2:
mov     ax, 1

loc_121A5:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_12100 endp




sub_121AD proc near
call    sub_1D1C6
mov     dx, ds:91D3h
cmp     word ptr ds:0F2h, 19h
jle     short loc_121D7
test    dx, 14h
jz      short loc_121D7
test    dx, 4
jz      short loc_121CF
mov     word ptr ds:0F2h, 2Bh ; '+'
jmp     short locret_121DD

loc_121CF:
mov     word ptr ds:0F2h, 32h ; '2'
jmp     short locret_121DD

loc_121D7:
mov     word ptr ds:0F2h, 19h

locret_121DD:
retn
sub_121AD endp



; Attributes: bp-based frame

sub_121DE proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     word ptr ds:40DAh, 0Ch
mov     ax, 0FFFFh
push    ax
call    sub_156D7
push    [bp+arg_0]
mov     ax, 0F6h
push    ax
mov     ax, 22h ; '"'
push    ax
call    sub_12100
mov     si, ax
mov     ax, si
cmp     ax, 1
jnz     short loc_1221C
mov     ax, 0F6h
push    ax
call    sub_12397
mov     ds:8254h, ax
mov     ax, 9963h
push    ax
push    [bp+arg_0]
call    sub_19C57

loc_1221C:
mov     ax, si
pop     si
pop     bp
retn    2
sub_121DE endp



; Attributes: bp-based frame

sub_12223 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     word ptr ds:40DAh, 0Eh
mov     ax, 0FFFFh
push    ax
call    sub_156D7
push    [bp+arg_0]
mov     ax, 0F6h
push    ax
mov     ax, 22h ; '"'
push    ax
call    sub_11FAE
mov     si, ax
mov     ax, si
cmp     ax, 1
jnz     short loc_12261
mov     ax, 0F6h
push    ax
call    sub_12397
mov     ds:8254h, ax
mov     ax, 9963h
push    ax
push    [bp+arg_0]
call    sub_19C57

loc_12261:
mov     ax, si
pop     si
pop     bp
retn    2
sub_12223 endp



; Attributes: bp-based frame

sub_12268 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
or      si, si
jnz     short loc_1227E
cmp     word ptr ds:23BBh, 0
jnz     short loc_1227E
jmp     loc_122F6

loc_1227E:
or      si, si
jz      short loc_1228C
call    sub_14FFE
or      ax, ax
jnz     short loc_122A3
jmp     loc_12342

loc_1228C:
cmp     word ptr ds:1D2Eh, 0
jnz     short loc_122A3
call    sub_153A6
mov     di, ax
mov     ax, di
or      ax, ax
jge     short loc_122A3
mov     ax, di
jmp     loc_12353

loc_122A3:
or      si, si
jz      short loc_122F6
mov     ax, 33Ch
push    ax
push    word ptr ds:9111h
call    sub_123DA
or      ax, ax
jz      short loc_122F6
mov     ax, 9113h
push    ax
call    sub_17F15
or      ax, ax
jnz     short loc_122F6
mov     word ptr ds:1DD3h, 11Ah
xor     ax, ax
push    ax
mov     ax, 0C64h
push    ax
mov     ax, 157Ah
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 14h
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Eh
cmp     al, 59h ; 'Y'
jnz     short loc_12342
mov     ax, 33Ch
push    ax
call    sub_12397
mov     ds:9111h, ax

loc_122F6:
cmp     word ptr ds:23BDh, 0
jz      short loc_12351
mov     ax, 0F6h
push    ax
push    word ptr ds:8254h
call    sub_123DA
or      ax, ax
jz      short loc_12351
mov     ax, 9963h
push    ax
call    sub_121DE
or      ax, ax
jnz     short loc_12351
mov     word ptr ds:1DD3h, 11Bh
xor     ax, ax
push    ax
mov     ax, 0C64h
push    ax
mov     ax, 1591h
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 14h
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Eh
cmp     al, 59h ; 'Y'
jz      short loc_12347

loc_12342:
mov     ax, 0FFFFh
jmp     short loc_12353

loc_12347:
mov     ax, 0F6h
push    ax
call    sub_12397
mov     ds:8254h, ax

loc_12351:
xor     ax, ax

loc_12353:
pop     di
pop     si
pop     bp
retn    2
sub_12268 endp



; Attributes: bp-based frame

sub_12359 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
push    si
mov     si, 8
mov     al, [bp+arg_0]
mov     ah, 0
xor     ax, ds:8252h
mov     ds:8252h, ax
jmp     short loc_1238B

loc_1236E:
test    word ptr ds:8252h, 1
jz      short loc_12383
mov     ax, ds:8252h
shr     ax, 1
xor     ax, 8404h
mov     ds:8252h, ax
jmp     short loc_1238B

loc_12383:
mov     ax, ds:8252h
shr     ax, 1
mov     ds:8252h, ax

loc_1238B:
mov     ax, si
dec     si
or      ax, ax
jnz     short loc_1236E
pop     si
pop     bp
retn    2
sub_12359 endp



; Attributes: bp-based frame

sub_12397 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_0]
mov     word ptr ds:8252h, 0
jmp     short loc_123CA

loc_123AA:
mov     di, [si+2]
mov     ax, [si+4]
mov     [bp+var_2], ax
jmp     short loc_123C0

loc_123B5:
mov     bx, [bp+var_2]
inc     [bp+var_2]
push    word ptr [bx]
call    sub_12359

loc_123C0:
mov     ax, di
dec     di
or      ax, ax
jnz     short loc_123B5
add     si, 6

loc_123CA:
cmp     word ptr [si], 0FFFFh
jnz     short loc_123AA
mov     ax, ds:8252h
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_12397 endp



; Attributes: bp-based frame

sub_123DA proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
call    sub_12397
cmp     ax, [bp+arg_0]
jz      short loc_123ED
mov     ax, 1
jmp     short loc_123EF

loc_123ED:
xor     ax, ax

loc_123EF:
pop     bp
retn    4
sub_123DA endp



; Attributes: bp-based frame

sub_123F3 proc near

var_52= word ptr -52h
var_50= byte ptr -50h
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 52h
push    si
call    sub_10490
mov     [bp+var_1], al
cmp     byte ptr ds:91CDh, 0
jz      short loc_1241C
mov     al, ds:91CDh
cmp     al, [bp+var_1]
jnz     short loc_12416
mov     byte ptr ds:91CDh, 0
jmp     short loc_1241C

loc_12416:
mov     al, ds:91CDh
mov     [bp+var_1], al

loc_1241C:
mov     byte ptr [bp+var_52], 2Eh ; '.'
mov     al, ds:226Eh
mov     byte ptr [bp+var_52+1], al
mov     ax, [bp+var_52]
cmp     ax, ds:9179h
jnz     short loc_1243C
mov     ax, 9179h
push    ax
mov     ax, 917Bh
push    ax
call    sub_19458
jmp     short loc_1248E

loc_1243C:              ; EQUIPMENT DETERMINATION
int     11h             ; Return: AX = equipment flag bits
test    al, 1
jz      short loc_1244C
mov     cl, 6
shr     al, cl
and     al, 3
inc     al
jmp     short loc_1244E

loc_1244C:
mov     al, 0

loc_1244E:
add     al, 41h ; 'A'
cmp     al, [bp+var_1]
ja      short loc_1248E
push    word ptr ds:91CDh
push    ss
lea     ax, [bp+var_52]
push    ax
call    sub_10534
lea     ax, [bp+var_52]
push    ax
call    sub_19448
mov     si, ax
add     si, 0FFFEh
push    ss
lea     ax, [bp+var_50]
push    ax
push    ds
mov     ax, 9179h
push    ax
push    si
call    sub_46E7B
or      ax, ax
jnz     short loc_1248E
mov     ax, 9179h
push    ax
mov     ax, si
add     ax, 9179h
push    ax
call    sub_19458

loc_1248E:
pop     si
mov     sp, bp
pop     bp
retn
sub_123F3 endp



; Attributes: bp-based frame

sub_12493 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     ax, 91CDh
push    ax
call    sub_19448
mov     di, ax
push    di
mov     ax, 9170h
push    ax
call    sub_19448
pop     di
add     di, ax
push    di
mov     ax, 91C8h
push    ax
call    sub_19448
pop     di
add     di, ax
mov     ax, 9179h
push    ax
call    sub_19448
mov     [bp+var_2], ax
mov     ax, di
add     ax, [bp+var_2]
cmp     ax, [bp+arg_0]
jle     short loc_1250D
mov     ax, [bp+arg_0]
sub     ax, di
mov     si, [bp+var_2]
sub     si, ax
add     si, 917Dh
jmp     short loc_124EA

loc_124DE:
mov     bx, si
inc     si
push    word ptr [bx]
call    sub_19729
or      al, al
jnz     short loc_124EF

loc_124EA:
cmp     byte ptr [si], 0
jnz     short loc_124DE

loc_124EF:
sub     si, 5
mov     ax, si
inc     ax
push    ax
mov     ax, 1B40h
push    ax
call    sub_19458
mov     al, ds:226Eh
mov     [si+4], al
mov     [si], al
mov     ax, 9179h
push    ax
push    si
call    sub_19458

loc_1250D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_12493 endp



; Attributes: bp-based frame

sub_12515 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_4]
call    sub_19C1B
call    sub_123F3
push    [bp+arg_0]
call    sub_12493
push    [bp+arg_2]
call    sub_19C39
pop     bp
retn    6
sub_12515 endp

push    ax
push    bx
push    cx
push    dx
push    es
push    ds
push    si
push    di
push    bp
mov     bp, seg seg091
mov     ds, bp
assume ds:seg091
cmp     word_53B0A, 0
jz      short loc_12556
mov     bh, 0
mov     ah, 3
call    sub_10BFC
dec     dh
mov     bh, 0
mov     ah, 2
call    sub_10BFC

loc_12556:
pop     bp
pop     di
pop     si
pop     ds
assume ds:nothing
pop     es
pop     dx
pop     cx
pop     bx
pop     ax
iret
push    ax
push    bx
push    cx
push    dx
push    es
push    ds
push    si
push    di
push    bp
mov     bp, seg seg091
mov     ds, bp
assume ds:seg091
xor     ax, ax
mov     es, ax
assume es:nothing
mov     bx, 471h
and     byte ptr es:[bx], 7Fh
mov     word_53B0D, 1
pop     bp
pop     di
pop     si
pop     ds
assume ds:nothing
pop     es
assume es:nothing
pop     dx
pop     cx
pop     bx
pop     ax
iret



sub_12589 proc near
mov     ax, 3300h
int     21h             ; DOS - EXTENDED CONTROL-BREAK CHECKING
                        ; AL = 00h get state / 01h set state / 02h set AND get
                        ; DL = 00h for OFF or 01h for ON
mov     al, dl
mov     ds:825Ch, al
mov     word ptr ds:825Dh, 0
mov     ax, 3301h
mov     dl, 0
int     21h             ; DOS - EXTENDED CONTROL-BREAK CHECKING
                        ; AL = 00h get state / 01h set state / 02h set AND get
                        ; DL = 00h for OFF or 01h for ON
mov     ax, 1Bh
push    ax
call    sub_468C2
mov     ds:8261h, dx
mov     ds:825Fh, ax
mov     ax, 1Bh
push    ax
push    cs
mov     ax, 2560h
push    ax
call    sub_468D4
mov     ax, 23h ; '#'
push    ax
call    sub_468C2
mov     ds:8258h, dx
mov     ds:8256h, ax
mov     ax, 23h ; '#'
push    ax
push    cs
mov     ax, 2531h
push    ax
call    sub_468D4
retn
sub_12589 endp




sub_125DD proc near
mov     ax, 1Bh
push    ax
push    word ptr ds:8261h
push    word ptr ds:825Fh
call    sub_468D4
mov     ax, 23h ; '#'
push    ax
push    word ptr ds:8258h
push    word ptr ds:8256h
call    sub_468D4
mov     ax, 3301h
mov     dl, ds:825Ch
int     21h             ; DOS - EXTENDED CONTROL-BREAK CHECKING
                        ; AL = 00h get state / 01h set state / 02h set AND get
                        ; DL = 00h for OFF or 01h for ON
retn
sub_125DD endp




sub_12609 proc near
mov     word ptr ds:40DAh, 1
mov     word ptr ds:1DD3h, 0F3h
call    sub_157A7
and     ax, 0FFh
cmp     ax, 3
jz      short loc_12627
cmp     word ptr ds:825Dh, 0
jz      short loc_12635

loc_12627:
call    sub_15852
mov     word ptr ds:825Dh, 0
mov     ax, 1
jmp     short locret_12637

loc_12635:
xor     ax, ax

locret_12637:
retn
sub_12609 endp

push    ax
push    bx
push    cx
push    dx
push    es
push    ds
push    si
push    di
push    bp
mov     bp, seg seg091
mov     ds, bp
assume ds:seg091
pop     bp
pop     di
pop     si
pop     ds
assume ds:nothing
pop     es
pop     dx
pop     cx
pop     bx
pop     ax
iret


; Attributes: bp-based frame

sub_12650 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
xor     si, si
jmp     short loc_1267A

loc_1265B:
mov     ax, 4400h
mov     bx, si
xor     cx, cx
call    sub_10BD7
mov     ax, 4401h
mov     bx, si
xor     cx, cx
or      dx, 40h
xor     dh, dh
call    sub_10BD7
inc     si

loc_1267A:
cmp     si, 5
jl      short loc_1265B
mov     ax, 10h
push    ax
call    sub_468C2
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 10h
push    ax
push    cs
mov     ax, 2638h
push    ax
call    sub_468D4
mov     ah, 0Bh
int     21h             ; DOS - CHECK STANDARD INPUT STATUS
                        ; Return: AL = FFh if character available
                        ; 00h if no character
mov     ax, 10h
push    ax
push    [bp+var_2]
push    [bp+var_4]
call    sub_468D4
pop     si
mov     sp, bp
pop     bp
retn
sub_12650 endp



; Attributes: bp-based frame

sub_126B4 proc near

var_50= byte ptr -50h
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 50h
push    si
push    di
xor     di, di
cmp     [bp+arg_0], di
jg      short loc_126C6
jmp     loc_1279A

loc_126C6:
push    ss
lea     ax, [bp+var_50]
push    ax
push    [bp+arg_0]
call    sub_401D4
push    dx
push    ax
call    sub_46D76
jmp     loc_12791

loc_126DD:
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_11C48
or      ax, ax
jnz     short loc_126F7
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_1272F

loc_126F7:
push    ss
lea     ax, [bp+var_50]
push    ax
push    [bp+arg_2]
call    sub_148A4
or      di, di
jnz     short loc_12709
jmp     loc_1279A

loc_12709:
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19C57
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_40037
push    [bp+arg_0]
lea     ax, [bp+var_50]
push    ax
call    sub_12A4F
jmp     short loc_1279A

loc_1272F:
mov     di, 1
mov     word ptr ds:1DD3h, 11Ch
mov     ax, 0EA6h
push    ax
lea     ax, [bp+var_50]
push    ax
mov     ax, 5
push    ax
push    ax
mov     ax, 50h ; 'P'
push    ax
mov     ax, 28h ; '('
push    ax
call    sub_18E6D
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_1278D
cmp     [bp+var_50], 0
jnz     short loc_12773
push    [bp+arg_0]
call    sub_12A82
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_40037
jmp     short loc_1279A

loc_12773:
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_50]
push    ax
xor     ax, ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_12791

loc_1278D:
mov     ax, si
jmp     short loc_1279D

loc_12791:
cmp     [bp+var_50], 0
jz      short loc_1279A
jmp     loc_126DD

loc_1279A:
mov     ax, 600h

loc_1279D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_126B4 endp



; Attributes: bp-based frame

sub_127A5 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
call    sub_40033
mov     di, ax
mov     si, 1
jmp     short loc_127CE

loc_127B6:
push    ds
push    [bp+arg_0]
push    si
call    sub_401D4
push    dx
push    ax
call    sub_19911
or      ax, ax
jz      short loc_127CD
mov     ax, si
jmp     short loc_127D4

loc_127CD:
inc     si

loc_127CE:
cmp     si, di
jle     short loc_127B6
xor     ax, ax

loc_127D4:
pop     di
pop     si
pop     bp
retn    2
sub_127A5 endp



; Attributes: bp-based frame

sub_127DA proc near

var_100= byte ptr -100h
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 100h
push    ss
lea     ax, [bp+var_100]
push    ax
push    [bp+arg_2]
call    sub_3FDE1
push    dx
push    ax
call    sub_46D76
mov     ax, ds:4A0Ch
mov     ds:93C8h, ax
lea     ax, [bp+var_100]
push    ax
mov     ax, [bp+arg_2]
sub     ax, ds:8266h
inc     ax
push    ax
push    [bp+arg_0]
mov     al, ds:4A16h
mov     ah, 0
mov     dl, ds:4A14h
mov     dh, 0
sub     ax, dx
dec     ax
push    ax
call    sub_1B181
mov     sp, bp
pop     bp
retn    4
sub_127DA endp




sub_12825 proc near
push    si
push    di
mov     word ptr ds:9166h, 0
mov     ax, ds:8276h
cmp     ax, ds:8272h
jle     short loc_1283C
mov     ax, ds:8272h
mov     ds:8276h, ax

loc_1283C:
mov     ax, ds:8276h
cmp     ax, ds:8266h
jge     short loc_12848
mov     ds:8266h, ax

loc_12848:
cmp     word ptr ds:8266h, 0
jnz     short loc_12855
mov     word ptr ds:8266h, 1

loc_12855:
mov     ax, ds:8266h
add     ax, ds:8270h
cmp     ax, ds:8276h
jg      short loc_12874
mov     ax, ds:8266h
add     ax, ds:8270h
mov     dx, ds:8276h
sub     dx, ax
inc     dx
add     ds:8266h, dx

loc_12874:
mov     si, ds:8266h
mov     di, 1
jmp     short loc_12891

loc_1287D:
push    si
cmp     si, ds:8276h
jnz     short loc_12889
mov     ax, 2
jmp     short loc_1288B

loc_12889:
xor     ax, ax

loc_1288B:
push    ax
call    sub_127DA
inc     si
inc     di

loc_12891:
cmp     di, ds:8270h
jle     short loc_1287D
pop     di
pop     si
retn
sub_12825 endp



; Attributes: bp-based frame

sub_1289A proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     word ptr ds:9166h, 0
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_127DA
pop     bp
retn    2
sub_1289A endp




sub_128B0 proc near
mov     ax, ds:8276h
cmp     ax, ds:8266h
jl      short loc_128C6
mov     ax, ds:8266h
add     ax, ds:8270h
cmp     ax, ds:8276h
jg      short loc_128CB

loc_128C6:
call    sub_12825
jmp     short locret_128D6

loc_128CB:
push    word ptr ds:8276h
mov     ax, 2
push    ax
call    sub_127DA

locret_128D6:
retn
sub_128B0 endp



; Attributes: bp-based frame

sub_128D7 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, ds:8276h
mov     ax, ds:8266h
mov     [bp+var_4], ax
xor     ax, ax
mov     ds:9166h, ax
mov     [bp+var_2], ax

loc_128F1:
mov     word ptr ds:40DAh, 0Fh
mov     word ptr ds:1DD3h, 11Dh
push    word ptr ds:8272h
push    word ptr ds:8270h
mov     ax, 8276h
push    ax
mov     ax, 8266h
push    ax
call    sub_1927C
mov     si, ax
mov     ax, ds:8266h
cmp     ax, [bp+var_4]
jz      short loc_1291F
call    sub_12825
jmp     short loc_12938

loc_1291F:
mov     ax, ds:8276h
cmp     ax, di
jz      short loc_1292C
push    di
call    sub_1289A
jmp     short loc_12935

loc_1292C:
mov     ax, [bp+var_2]
cmp     ax, ds:9166h
jz      short loc_12938

loc_12935:
call    sub_128B0

loc_12938:
mov     ax, ds:8266h
mov     [bp+var_4], ax
mov     di, ds:8276h
mov     ax, ds:9166h
mov     [bp+var_2], ax
cmp     si, 0FFFFh
jl      short loc_12960
cmp     si, 500h
jz      short loc_12960
cmp     si, 4
jz      short loc_12960
cmp     si, 5
jnz     short loc_128F1
mov     si, 0FFFFh

loc_12960:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_128D7 endp




sub_12968 proc near
push    si
push    di
mov     di, 0Ch
mov     si, 1
jmp     short loc_12986

loc_12972:
push    si
call    sub_3FDE1
push    dx
push    ax
call    sub_46E60
cmp     ax, di
jbe     short loc_12985
mov     di, ax

loc_12985:
inc     si

loc_12986:
cmp     si, ds:8272h
jle     short loc_12972
cmp     di, 28h ; '('
jg      short loc_12995
mov     ax, di
jmp     short loc_12997

loc_12995:
mov     al, 28h ; '('

loc_12997:
mov     dl, ds:4A16h
sub     dl, al
add     dl, 0FDh
mov     ds:4A14h, dl
mov     al, ds:4A15h
mov     dx, si
add     al, dl
mov     ds:4A17h, al
cmp     al, 10h
jbe     short loc_129B7
mov     byte ptr ds:4A17h, 10h

loc_129B7:
mov     al, ds:4A17h
mov     ah, 0
mov     dl, ds:4A15h
mov     dh, 0
sub     ax, dx
dec     ax
mov     ds:8270h, ax
pop     di
pop     si
retn
sub_12968 endp



; Attributes: bp-based frame

sub_129CB proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, 0FFFFh
call    sub_40223
mov     ax, 1
mov     ds:8276h, ax
mov     ds:8266h, ax
call    sub_3FBAD
mov     ds:8272h, ax
call    sub_12968
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_12A0A
mov     si, 0FFFFh
jmp     short loc_12A38

loc_12A0A:
mov     ax, 10h
push    ax
call    sub_1ACE5
mov     ax, 1
push    ax
call    sub_1DCE5
call    sub_12825
call    sub_128D7
mov     si, ax
mov     ax, si
cmp     ax, 4
jnz     short loc_12A38
push    word ptr ds:8276h
call    sub_3FFCD
mov     bx, [bp+arg_0]
mov     [bx], ax
mov     [bx+2], dx

loc_12A38:
dec     word ptr ds:1DE8h
mov     ax, 10h
push    ax
call    sub_1AD85
call    sub_402B3
mov     ax, si
pop     si
pop     bp
retn    2
sub_129CB endp



; Attributes: bp-based frame

sub_12A4F proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     si, 82DAh
mov     di, 15h
jmp     short loc_12A78

loc_12A5C:
mov     ax, [si+6]
cmp     ax, [bp+arg_2]
jnz     short loc_12A74
mov     ax, si
add     ax, 0Ah
push    ax
push    [bp+arg_0]
call    sub_19458
push    si
call    sub_12B18

loc_12A74:
dec     di
add     si, 5Eh ; '^'

loc_12A78:
or      di, di
jnz     short loc_12A5C
pop     di
pop     si
pop     bp
retn    4
sub_12A4F endp



; Attributes: bp-based frame

sub_12A82 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     si, 82DAh
mov     di, 15h
jmp     short loc_12AA4

loc_12A8F:
mov     ax, [si+6]
cmp     ax, [bp+arg_0]
jnz     short loc_12AA0
mov     word ptr [si+2], 0
mov     word ptr [si], 0

loc_12AA0:
dec     di
add     si, 5Eh ; '^'

loc_12AA4:
or      di, di
jnz     short loc_12A8F
pop     di
pop     si
pop     bp
retn    2
sub_12A82 endp



; Attributes: bp-based frame

sub_12AAE proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     si, 82DAh
mov     di, 15h
jmp     short loc_12AE7

loc_12ABB:
mov     bx, [bp+arg_2]
mov     ax, [bx+8]
cmp     ax, [si+8]
jnz     short loc_12AE3
cmp     [bp+arg_0], 0
jnz     short loc_12AE3
mov     ax, bx
add     ax, 0Ah
push    ax
mov     ax, si
add     ax, 0Ah
push    ax
call    sub_19497
or      ax, ax
jnz     short loc_12AE3
mov     ax, si
jmp     short loc_12AED

loc_12AE3:
dec     di
add     si, 5Eh ; '^'

loc_12AE7:
or      di, di
jnz     short loc_12ABB
xor     ax, ax

loc_12AED:
pop     di
pop     si
pop     bp
retn    4
sub_12AAE endp



; Attributes: bp-based frame

sub_12AF3 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     word ptr ds:1D2Eh, 0
jz      short loc_12B07
mov     ax, [si+8]
mov     [si+4], ax

loc_12B07:
push    word ptr [si+8]
xor     ax, ax
push    ax
call    sub_14875
mov     [si+5Ah], ax
pop     si
pop     bp
retn    2
sub_12AF3 endp



; Attributes: bp-based frame

sub_12B18 proc near

var_2= byte ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
mov     si, [bp+arg_0]
cmp     word ptr [si+8], 0
jz      short loc_12B52
mov     ax, si
add     ax, 0Ah
push    ax
call    sub_127A5
mov     [si+6], ax
or      ax, ax
jz      short loc_12B4E
push    word ptr [si+8]
push    word ptr [si+6]
push    ds
push    si
push    ss
lea     ax, [bp+var_2]
push    ax
call    sub_3F201
or      ax, ax
jnz     short loc_12B52

loc_12B4E:
xor     ax, ax
jmp     short loc_12B55

loc_12B52:
mov     ax, 1

loc_12B55:
pop     si
mov     sp, bp
pop     bp
retn    2
sub_12B18 endp



; Attributes: bp-based frame

sub_12B5C proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_0]
mov     ax, ds:4942h
mov     [bp+var_2], ax
mov     si, 82DAh
mov     [bp+var_4], 15h
jmp     loc_12C2E

loc_12B78:
cmp     word ptr [si+8], 0
jnz     short loc_12B81
jmp     def_12C01       ; jumptable 00012C01 default case

loc_12B81:
push    si
call    sub_12B18
or      ax, ax
jz      short loc_12B8C
jmp     def_12C01       ; jumptable 00012C01 default case

loc_12B8C:
or      di, di
jnz     short loc_12BEE
push    ds
mov     ax, si
add     ax, 0Ah
push    ax
push    word ptr [si+8]
call    sub_148A4
or      word ptr ds:1C68h, 200h
call    sub_1492F
xor     ax, ax
push    ax
call    sub_1ACE5
mov     word ptr ds:4942h, 0D51h
mov     word ptr ds:1DD3h, 11Eh
xor     ax, ax
push    ax
mov     ax, 0D68h
push    ax
mov     ax, 0DA5h
push    ax
call    sub_1DBF2
and     ax, 0FF00h
mov     cl, 8
shr     ax, cl
push    ax
mov     al, ds:1C63h
cbw
pop     dx
add     dx, ax
push    dx
mov     al, ds:1C62h
cbw
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Ch
cbw
mov     di, ax
mov     ax, [bp+var_2]
mov     ds:4942h, ax

loc_12BEE:
mov     ax, di
mov     cx, 4           ; switch 4 cases
mov     bx, 2C05h

loc_12BF6:
cmp     ax, cs:[bx]
jz      short loc_12C01
inc     bx
inc     bx
loop    loc_12BF6
jmp     short def_12C01 ; jumptable 00012C01 default case

loc_12C01:              ; switch jump
jmp     word ptr cs:[bx+8]
dw    1Bh,   43h,   45h,   49h ; value table for switch statement
jpt_12C01 dw offset loc_12C23 ; jump table for switch statement
dw offset loc_12C1D
dw offset loc_12C15
dw offset loc_12C19

loc_12C15:              ; jumptable 00012C01 case 69
push    si
call    sub_12C45

loc_12C19:              ; jumptable 00012C01 case 73
xor     di, di
jmp     short def_12C01 ; jumptable 00012C01 default case

loc_12C1D:              ; jumptable 00012C01 case 67
push    si
call    sub_12C45
jmp     short def_12C01 ; jumptable 00012C01 default case

loc_12C23:              ; jumptable 00012C01 case 27
mov     ax, 0BAD0h
jmp     short loc_12C3D

def_12C01:              ; jumptable 00012C01 default case
dec     [bp+var_4]
add     si, 5Eh ; '^'

loc_12C2E:
cmp     [bp+var_4], 0
jz      short loc_12C37
jmp     loc_12B78

loc_12C37:
mov     ax, 1
mov     ds:8264h, ax

loc_12C3D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_12B5C endp



; Attributes: bp-based frame

sub_12C45 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    ds
push    [bp+arg_0]
mov     ax, 5Eh ; '^'
push    ax
mov     al, 0
push    ax
call    sub_46C10
dec     word ptr ds:8274h
pop     bp
retn    2
sub_12C45 endp




sub_12C60 proc near
push    si
push    di
mov     di, 82DAh
mov     si, 15h
jmp     short loc_12C74

loc_12C6A:
mov     ax, di
add     di, 5Eh ; '^'
push    ax
call    sub_12C45
dec     si

loc_12C74:
or      si, si
jnz     short loc_12C6A
xor     ax, ax
mov     ds:8264h, ax
mov     ds:8274h, ax
mov     word ptr ds:1B46h, 1
call    sub_1492F
pop     di
pop     si
retn
sub_12C60 endp




sub_12C8C proc near
push    si
mov     si, ds:1B46h
cmp     word ptr ds:8274h, 0
jz      short loc_12CFC
cmp     word ptr ds:8274h, 1
jg      short loc_12CAF
mov     ax, si
mov     dx, 5Eh ; '^'
mul     dx
mov     bx, ax
cmp     word ptr [bx-7D7Ch], 0
jnz     short loc_12CD0

loc_12CAF:
inc     si
mov     ax, si
cmp     ax, ds:1B46h
jz      short loc_12CFC
cmp     si, 16h
jl      short loc_12CC0
mov     si, 1

loc_12CC0:
mov     ax, si
mov     dx, 5Eh ; '^'
mul     dx
mov     bx, ax
cmp     word ptr [bx-7D7Ch], 0
jz      short loc_12CAF

loc_12CD0:
mov     ds:1B46h, si
push    ds
mov     ax, si
mov     dx, 5Eh ; '^'
mul     dx
add     ax, 8286h
push    ax
xor     ax, ax
push    ax
call    sub_148A4
mov     ax, si
mov     dx, 5Eh ; '^'
mul     dx
mov     bx, ax
mov     ax, [bx-7D2Ah]
mov     ds:1C96h, ax
call    sub_17CEE
call    sub_1492F

loc_12CFC:
pop     si
retn
sub_12C8C endp



; Attributes: bp-based frame

sub_12CFE proc near

var_62= word ptr -62h
var_60= word ptr -60h
var_5E= byte ptr -5Eh
var_56= word ptr -56h
var_54= byte ptr -54h

push    bp
mov     bp, sp
sub     sp, 62h
push    si
push    di
mov     [bp+var_60], 1
mov     di, ds:4942h
push    ss
lea     ax, [bp+var_5E]
push    ax
mov     ax, 5Eh ; '^'
push    ax
mov     al, 0
push    ax
call    sub_46C10
push    word ptr ds:1C96h
call    sub_1488E
mov     [bp+var_56], ax
lea     ax, [bp+var_54]
push    ax
mov     ax, 9877h
push    ax
call    sub_19458
cmp     word ptr ds:0C0EFh, 2
jnz     short loc_12D46
lea     ax, [bp+var_5E]
push    ax
call    sub_12B18
mov     [bp+var_60], ax

loc_12D46:
lea     ax, [bp+var_5E]
push    ax
xor     ax, ax
push    ax
call    sub_12AAE
mov     si, ax
mov     ax, si
or      ax, ax
jz      short loc_12D5F
push    si
call    sub_12C45
jmp     loc_12E21

loc_12D5F:
cmp     [bp+var_60], 0
jnz     short loc_12DD8
xor     ax, ax
push    ax
call    sub_1AE6D
mov     word ptr ds:4942h, 0D51h
call    sub_1DBF2
mov     dx, ax
mov     al, dh
mov     ah, 0
push    ax
mov     al, ds:1C63h
cbw
pop     dx
add     dx, ax
mov     al, ds:926Eh
mov     ah, 0
add     ax, 0FFFEh
cmp     dx, ax
jl      short loc_12D9D
or      word ptr ds:1C68h, 200h
call    sub_1492F
xor     ax, ax
push    ax
call    sub_1ACE5

loc_12D9D:
mov     word ptr ds:1DD3h, 11Fh
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
mov     ax, 0DABh
push    ax
mov     ax, 0C81h
push    ax
call    sub_1DBF2
and     ax, 0FF00h
mov     cl, 8
shr     ax, cl
push    ax
mov     al, ds:1C63h
cbw
pop     dx
add     dx, ax
push    dx
mov     al, ds:1C62h
cbw
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Eh
cmp     al, 59h ; 'Y'
jnz     short loc_12E24

loc_12DD8:
cmp     word ptr ds:8274h, 15h
jge     short loc_12E17
mov     si, 82DAh
mov     [bp+var_62], 15h
jmp     short loc_12E0F

loc_12DE9:
cmp     word ptr [si+8], 0
jnz     short loc_12E09
push    ss
lea     ax, [bp+var_5E]
push    ax
push    ds
push    si
mov     ax, 5Eh ; '^'
push    ax
call    sub_46A2C
push    si
call    sub_12AF3
inc     word ptr ds:8274h
jmp     short loc_12E21

loc_12E09:
dec     [bp+var_62]
add     si, 5Eh ; '^'

loc_12E0F:
cmp     [bp+var_62], 0
jnz     short loc_12DE9
jmp     short loc_12E21

loc_12E17:
mov     ax, 0DB9h
push    ax
xor     ax, ax
push    ax
call    sub_19065

loc_12E21:
call    sub_1490A

loc_12E24:
mov     ds:4942h, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_12CFE endp



; Attributes: bp-based frame

sub_12E2E proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
jmp     short loc_12E4E

loc_12E37:
mov     bx, [bp+arg_6]
add     [bp+arg_6], 6
mov     dx, [bx+2]
mov     ax, [bx]
cmp     dx, [bp+arg_4]
jnz     short loc_12E4D
cmp     ax, [bp+arg_2]
jz      short loc_12E52

loc_12E4D:
dec     si

loc_12E4E:
or      si, si
jnz     short loc_12E37

loc_12E52:
mov     ax, si
pop     si
pop     bp
retn    8
sub_12E2E endp



; Attributes: bp-based frame

sub_12E59 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, 827Ch
mov     ax, [bp+arg_0]
mov     [bp+var_2], ax
xor     di, di
push    ds
mov     ax, si
add     ax, 0Ah
push    ax
push    word ptr [si+6]
call    sub_401D4
push    dx
push    ax
call    sub_46D76
push    si
call    sub_12B18
cmp     word ptr ds:8264h, 0
jnz     short loc_12E9C
xor     ax, ax
push    ax
call    sub_12B5C
or      ax, ax
jg      short loc_12E9C
mov     ax, 0BAD0h
jmp     short loc_12EDB

loc_12E9C:
mov     [bp+var_4], 16h
jmp     short loc_12ED3

loc_12EA3:
cmp     word ptr [si+8], 0
jz      short loc_12ECD
push    [bp+arg_0]
push    ds
mov     ax, si
add     ax, 6
push    ax
push    di
call    sub_12E2E
or      ax, ax
jnz     short loc_12ECD
mov     dx, [si+2]
mov     ax, [si]
mov     bx, [bp+var_2]
mov     [bx+2], dx
mov     [bx], ax
add     [bp+var_2], 6
inc     di

loc_12ECD:
dec     [bp+var_4]
add     si, 5Eh ; '^'

loc_12ED3:
cmp     [bp+var_4], 0
jnz     short loc_12EA3
mov     ax, di

loc_12EDB:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_12E59 endp




sub_12EE3 proc near
xor     ax, ax
mov     ds:1B70h, ax
mov     ds:1B6Eh, ax
mov     ds:1B62h, ax
mov     ds:1B60h, ax
mov     ds:1B54h, ax
mov     ds:1B52h, ax
mov     ax, 1
mov     ds:1B66h, ax
mov     ds:1B4Ah, ax
retn
sub_12EE3 endp



; Attributes: bp-based frame

sub_12F01 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
push    word ptr [si+8]
call    sub_1E8C0
push    word ptr [si+6]
push    word ptr ds:826Eh
mov     ax, si
add     ax, 0Ah
push    ax
mov     ax, si
add     ax, 0Ch
push    ax
xor     ax, ax
push    ax
call    sub_188F3
pop     si
pop     bp
retn    2
sub_12F01 endp



; Attributes: bp-based frame

sub_12F2C proc near

var_1= byte ptr -1
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
mov     word ptr ds:827Ah, 0
mov     bx, ds:1B4Eh
cmp     byte ptr [bx], 0
jz      short loc_12F8E
cmp     word ptr ds:826Ch, 0
jnz     short loc_12F9B
push    ds
push    bx
push    ds
push    word ptr ds:1B5Ch
push    ds
mov     ax, 8278h
push    ax
mov     ax, 1
push    ax
call    sub_4031D
mov     [bp+var_1], al
call    sub_13469
cmp     [bp+var_1], 0
jz      short loc_12F83
mov     al, [bp+var_1]
mov     ah, 0
dec     ax
mov     ds:1B52h, ax
xor     ax, ax
mov     ds:1B66h, ax
mov     ds:1B4Ah, ax
mov     ds:827Ah, ax
mov     ds:1B60h, ax
jmp     loc_12FFD

loc_12F83:
mov     ax, 1
mov     ds:826Ch, ax
mov     ds:827Ah, ax
jmp     short loc_12F9B

loc_12F8E:
mov     bx, ds:1B5Ch
mov     byte ptr [bx], 0
mov     word ptr ds:8278h, 0

loc_12F9B:
cmp     [bp+arg_0], 0
jnz     short loc_13001
cmp     word ptr ds:8278h, 0
jz      short loc_12FE4
push    ds
push    word ptr ds:1B6Ah
push    ds
push    word ptr ds:1B5Ch
call    sub_40627
mov     [bp+var_1], al
call    sub_13469
cmp     [bp+var_1], 0
jz      short loc_12FDC
mov     al, [bp+var_1]
mov     ah, 0
dec     ax
mov     ds:1B6Eh, ax
xor     ax, ax
mov     ds:1B66h, ax
mov     ds:1B4Ah, ax
mov     ds:1B60h, ax
mov     ax, 2
jmp     short loc_13004

loc_12FDC:
mov     word ptr ds:827Ah, 0
jmp     short loc_13001

loc_12FE4:
push    word ptr ds:1B5Ch
mov     ax, 1544h
push    ax
call    sub_19458
xor     ax, ax
mov     ds:1B66h, ax
mov     ds:1B4Ah, ax
mov     ds:1B60h, ax
mov     ds:1B52h, ax

loc_12FFD:
xor     ax, ax
jmp     short loc_13004

loc_13001:
mov     ax, 0FFFFh

loc_13004:
mov     sp, bp
pop     bp
retn    2
sub_12F2C endp



; Attributes: bp-based frame

sub_1300A proc near

var_306= byte ptr -306h
var_206= byte ptr -206h
var_106= byte ptr -106h
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 306h
push    si
push    di
mov     [bp+var_2], 0
lea     ax, [bp+var_306]
mov     ds:1B4Eh, ax
lea     ax, [bp+var_106]
mov     ds:1B5Ch, ax
lea     ax, [bp+var_206]
mov     ds:1B6Ah, ax
mov     ax, 1
mov     ds:1B68h, ax
mov     ds:1B4Ch, ax
xor     ax, ax
mov     ds:826Ch, ax
mov     ds:827Ah, ax
call    sub_40223
mov     al, ds:4A27h
mov     ah, 0
mov     dl, ds:4A25h
mov     dh, 0
sub     ax, dx
add     ax, 0FFFDh
mov     ds:826Eh, ax
mov     ax, 11h
push    ax
mov     ax, 2Eh ; '.'
push    ax
mov     ax, 3
push    ax
mov     ax, 826Eh
push    ax
mov     al, ds:4A28h
mov     ah, 0
mov     dl, ds:4A26h
mov     dh, 0
sub     ax, dx
dec     ax
push    ax
xor     ax, ax
push    ax
call    sub_18D5E
mov     [bp+var_4], ax
lea     ax, [bp+var_306]
push    ax
call    sub_1B1FB
mov     al, 0
mov     [bp+var_206], al
mov     [bp+var_106], al
mov     si, 3
mov     di, 1B64h
jmp     short loc_13106

loc_13098:
dec     si
mov     ax, si
mov     dx, 3
mul     dx
mov     dx, ax
inc     dx
inc     dx
mov     al, ds:4A25h
mov     ah, 0
add     ax, 3
push    ax
mov     al, ds:4A26h
mov     ah, 0
add     ax, dx
push    ax
mov     al, ds:4A27h
mov     ah, 0
dec     ax
push    ax
mov     al, ds:4A26h
mov     ah, 0
add     ax, dx
inc     ax
inc     ax
push    ax
mov     al, ds:4A29h
mov     ah, 0
push    ax
mov     bx, ds:4A1Dh
mov     al, [bx+1]
mov     ah, 0
push    ax
mov     al, [bx+3]
mov     ah, 0
push    ax
mov     ax, 1
push    ax
push    ax
call    sub_1E93C
mov     [di+8], ax
mov     ax, 20h ; ' '
push    ax
call    sub_1DC4A
push    word ptr [di]
mov     bx, ds:4A1Dh
mov     al, [bx]
mov     ah, 0
push    ax
call    sub_1E90D
mov     ax, 1
push    ax
call    sub_1DCE5
sub     di, 0Eh

loc_13106:
or      si, si
jnz     short loc_13098
call    sub_12EE3
sub     word ptr ds:826Eh, 4

loc_13112:
mov     ax, si
mov     dx, 0Eh
mul     dx
mov     di, ax
add     di, 1B48h
mov     bx, di
push    word ptr [bx+8]
call    sub_1E8C0
xor     ax, ax
push    ax
call    sub_1DC5F
mov     ax, si
or      ax, ax
jz      short loc_1313F
cmp     ax, 1
jz      short loc_13159
cmp     ax, 2
jz      short loc_13167
jmp     short loc_13173

loc_1313F:
mov     word ptr ds:1DD3h, 120h
cmp     word ptr ds:8B9Dh, 0
jz      short loc_13151
mov     ax, 12h
jmp     short loc_13154

loc_13151:
mov     ax, 11h

loc_13154:
mov     ds:40DAh, ax
jmp     short loc_13173

loc_13159:
mov     word ptr ds:1DD3h, 121h
mov     word ptr ds:40DAh, 13h
jmp     short loc_13173

loc_13167:
mov     word ptr ds:1DD3h, 122h
mov     word ptr ds:40DAh, 14h

loc_13173:
push    word ptr [di+6]
push    word ptr ds:826Eh
mov     ax, 0FFh
push    ax
mov     ax, di
add     ax, 0Ah
push    ax
mov     ax, di
add     ax, 0Ch
push    ax
mov     ax, di
inc     ax
inc     ax
push    ax
push    word ptr [di+4]
call    sub_18A4A
mov     [bp+var_6], ax
cmp     word ptr ds:1B4Ah, 0
jnz     short loc_131A5
mov     word ptr ds:826Ch, 0

loc_131A5:
mov     ax, [bp+var_6]
mov     cx, 5           ; switch 5 cases
mov     bx, 31BEh

loc_131AE:
cmp     ax, cs:[bx]
jz      short loc_131BA
inc     bx
inc     bx
loop    loc_131AE
jmp     def_131BA       ; jumptable 000131BA default case

loc_131BA:              ; switch jump
jmp     word ptr cs:[bx+0Ah]
dw      0,     1,     4,   1Eh ; value table for switch statement
dw    1Fh
jpt_131BA dw offset loc_1325E ; jump table for switch statement
dw offset loc_13244
dw offset loc_131D2
dw offset loc_13244
dw offset loc_1325E

loc_131D2:              ; jumptable 000131BA case 4
mov     ax, si
or      ax, ax
jz      short loc_131E4
cmp     ax, 1
jz      short loc_131FE
cmp     ax, 2
jz      short loc_13217
jmp     short loc_1322D

loc_131E4:
mov     word ptr ds:826Ch, 0
mov     ax, 1
push    ax
call    sub_12F2C
or      ax, ax
jge     short loc_1322D
mov     bx, ds:1B6Ah
mov     byte ptr [bx], 0
jmp     short loc_13226

loc_131FE:
cmp     word ptr ds:827Ah, 0
jz      short loc_1322D
lea     ax, [bp+var_206]
push    ax
lea     ax, [bp+var_106]
push    ax
call    sub_19458
mov     si, 2
jmp     short loc_13226

loc_13217:
xor     ax, ax
push    ax
call    sub_12F2C
or      ax, ax
jge     short loc_1322B
mov     [bp+var_2], 1

loc_13226:
call    sub_12EE3
jmp     short loc_1322D

loc_1322B:
mov     si, ax

loc_1322D:
mov     ax, 1B48h
push    ax
call    sub_12F01
mov     ax, 1B56h
push    ax
call    sub_12F01
mov     ax, 1B64h
push    ax
call    sub_12F01
jmp     short def_131BA ; jumptable 000131BA default case

loc_13244:              ; jumptable 000131BA cases 1,30
mov     ax, si
mov     dx, 0Eh
mul     dx
add     ax, 1B48h
push    ax
call    sub_12F01
inc     si
mov     ax, si
cmp     ax, 3
jl      short def_131BA ; jumptable 000131BA default case
xor     si, si
jmp     short def_131BA ; jumptable 000131BA default case

loc_1325E:              ; jumptable 000131BA cases 0,31
mov     ax, si
mov     dx, 0Eh
mul     dx
add     ax, 1B48h
push    ax
call    sub_12F01
dec     si
jge     short def_131BA ; jumptable 000131BA default case
mov     si, 2

def_131BA:              ; jumptable 000131BA default case
cmp     [bp+var_6], 0
jl      short loc_1327B
jmp     loc_13112

loc_1327B:
mov     di, 1B48h
jmp     short loc_1328C

loc_13280:
push    word ptr [di+8]
call    sub_1E8C0
call    sub_1DA41
add     di, 0Eh

loc_1328C:
cmp     di, 1B64h
jbe     short loc_13280
mov     ax, 11h
push    ax
call    sub_1AD85
push    [bp+var_4]
call    sub_1E8C0
call    sub_402B3
cmp     [bp+var_2], 0
jz      short loc_132B4
mov     ax, 0FFFFh
push    ax
call    sub_1774F
call    sub_1A751

loc_132B4:
mov     ax, [bp+var_6]
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1300A endp




sub_132BD proc near
push    si
push    di
mov     di, 82DAh
cmp     word ptr ds:0C0EFh, 2
jnz     short loc_132F2
call    sub_12650
mov     si, 15h
jmp     short loc_132DE

loc_132D1:
mov     word ptr [di+2], 0
mov     word ptr [di], 0
add     di, 5Eh ; '^'
dec     si

loc_132DE:
or      si, si
jnz     short loc_132D1
xor     ax, ax
mov     ds:8264h, ax
mov     ds:8268h, ax
call    sub_1F00F
call    sub_1492F

loc_132F2:
pop     di
pop     si
retn
sub_132BD endp



; Attributes: bp-based frame

sub_132F5 proc near

var_A0= byte ptr -0A0h
var_50= byte ptr -50h
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0A0h
push    si
push    di
mov     di, 600h
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     ds:826Ah, dx
mov     ds:8268h, ax
cmp     ax, 0FFFFh
jnz     short loc_13317
or      dx, dx
jz      short loc_1333B

loc_13317:
cmp     [bp+arg_0], 0
jz      short loc_1333B
cmp     word ptr ds:8268h, 0
jge     short loc_1332C
mov     ax, ds:8268h
neg     ax
mov     ds:8268h, ax

loc_1332C:
cmp     word ptr ds:826Ah, 0
jge     short loc_1333B
mov     ax, ds:826Ah
neg     ax
mov     ds:826Ah, ax

loc_1333B:
mov     [bp+var_50], 0
xor     si, si
cmp     [bp+arg_0], si
jnz     short loc_13375
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E59h
push    ax
call    sub_19483
cmp     [bp+arg_2], 0FFFFh
jnz     short loc_13368
mov     si, 1
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E6Dh
push    ax
call    sub_19483
jmp     loc_133EE

loc_13368:
mov     [bp+var_50], 0
mov     ax, [bp+arg_2]
mov     ds:1B44h, ax
jmp     loc_133EE

loc_13375:
cmp     [bp+arg_0], 0
jge     short loc_133EE
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E80h
push    ax
call    sub_19483
cmp     [bp+arg_2], 0
jg      short loc_1339C
mov     si, 1
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E8Ch
push    ax
call    sub_19483
jmp     short loc_133EE

loc_1339C:
lea     ax, [bp+var_50]
push    ax
mov     ax, 0EA1h
push    ax
call    sub_19483
push    ss
lea     ax, [bp+var_A0]
push    ax
push    word ptr ds:8268h
call    sub_401D4
push    dx
push    ax
call    sub_46D76
lea     ax, [bp+var_A0]
push    ax
lea     ax, [bp+var_A0]
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19448
push    ax
mov     ax, 0C52h
push    ax
call    sub_19448
pop     dx
add     dx, ax
mov     ax, 4Ch ; 'L'
sub     ax, dx
push    ax
call    sub_12515
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_A0]
push    ax
call    sub_19483

loc_133EE:
cmp     [bp+var_50], 0
jz      short loc_1341E
xor     ax, ax
push    ax
mov     ax, 0C52h
push    ax
lea     ax, [bp+var_50]
push    ax
mov     ax, 0C7Fh
push    ax
mov     ax, 5
push    ax
mov     ax, 0Ah
push    ax
or      si, si
jz      short loc_13414
mov     ax, 5
jmp     short loc_13417

loc_13414:
mov     ax, 4

loc_13417:
push    ax
call    sub_18EAD
add     sp, 0Eh

loc_1341E:
cmp     di, 600h
jnz     short loc_13431
push    word ptr ds:826Ah
push    word ptr ds:8268h
call    sub_126B4
mov     di, ax

loc_13431:
cmp     [bp+arg_0], 0
jz      short loc_13443
cmp     [bp+arg_0], 0
jge     short loc_13446
cmp     [bp+arg_2], 0
jg      short loc_13446

loc_13443:
call    sub_132BD

loc_13446:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_132F5 endp




sub_13450 proc far
cmp     word ptr ds:472Ah, 0
jnz     short locret_13468
cmp     word ptr ds:229Ah, 0
jnz     short locret_13468
cmp     word ptr ds:23C7h, 0
jz      short locret_13468
call    sub_1A45E

locret_13468:
retf
sub_13450 endp




sub_13469 proc near
cmp     word ptr ds:229Ah, 0
jz      short locret_13473
call    sub_1A39F

locret_13473:
retn
sub_13469 endp



; Attributes: bp-based frame

sub_13474 proc near

var_88= byte ptr -88h
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 88h
push    si
lea     ax, [bp+var_88]
push    ax
call    sub_12E59
mov     si, ax
cmp     si, 0BAD0h
jnz     short loc_13498
mov     ax, 0BAD0h
mov     [bp+var_2], ax
mov     [bp+var_4], ax
jmp     loc_1351A

loc_13498:
cmp     word ptr ds:472Ah, 0
jnz     short loc_134A6
call    sub_1A521
or      ax, ax
jnz     short loc_134B6

loc_134A6:
mov     ax, 91D3h
push    ax
call    sub_1E87B
mov     ax, 9276h
push    ax
call    sub_19CCF
jmp     short loc_134C0

loc_134B6:
cmp     word ptr ds:23C7h, 2
jnz     short loc_134C0
call    sub_1A45E

loc_134C0:
call    sub_14E1B
call    sub_125DD
push    si
push    ss
lea     ax, [bp+var_88]
push    ax
push    [bp+arg_0]
call    sub_10C5E
mov     [bp+var_2], dx
mov     [bp+var_4], ax
call    sub_12589
call    sub_14E2F
call    sub_14E43
cmp     word ptr ds:229Ah, 0
jz      short loc_134F0
call    sub_1A39F
jmp     short loc_13506

loc_134F0:
cmp     word ptr ds:229Eh, 9276h
jnz     short loc_13506
mov     ax, 9276h
push    ax
call    sub_1E87B
mov     ax, 91D3h
push    ax
call    sub_19CCF

loc_13506:
push    ds
mov     ax, 827Ch
push    ax
mov     ax, 5Eh ; '^'
push    ax
mov     al, 0
push    ax
call    sub_46C10
call    sub_10944

loc_1351A:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     si
mov     sp, bp
pop     bp
retn    2
sub_13474 endp



; Attributes: bp-based frame

sub_13527 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     ax, [bp+arg_2]
sub     ax, 0FFFAh      ; switch 5 cases
cmp     ax, 4
ja      short def_1353A ; jumptable 0001353A default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1353A[bx] ; switch jump
jpt_1353A dw offset loc_13562 ; jump table for switch statement
dw offset loc_1354E
dw offset loc_13558
dw offset loc_13549
dw offset loc_13553

loc_13549:              ; jumptable 0001353A case -3
mov     si, 0F71h
jmp     short loc_1356A

loc_1354E:              ; jumptable 0001353A case -5
mov     si, 0F7Eh
jmp     short loc_1356A

loc_13553:              ; jumptable 0001353A case -2
mov     si, 0E1Fh
jmp     short loc_1356A

loc_13558:              ; jumptable 0001353A case -4
mov     si, 0E3Eh
mov     [bp+arg_0], 0
jmp     short loc_1356A

loc_13562:              ; jumptable 0001353A case -6
mov     si, 0F91h
jmp     short loc_1356A

def_1353A:              ; jumptable 0001353A default case
mov     si, 0F5Bh

loc_1356A:
push    si
push    [bp+arg_0]
call    sub_19065
pop     si
pop     bp
retn    4
sub_13527 endp



; Attributes: bp-based frame

sub_13576 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
mov     word ptr ds:229Ch, 1
call    sub_1A45E
call    sub_1EF94
mov     word ptr ds:0C0EFh, 0
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 2
push    ax
call    sub_10C5E
mov     [bp+var_2], dx
mov     [bp+var_4], ax
call    sub_1F00F
mov     word ptr ds:0C0EFh, 0
mov     ax, [bp+var_2]
mov     ds:1B44h, ax
call    sub_1A39F
mov     sp, bp
pop     bp
retn
sub_13576 endp



; Attributes: bp-based frame

sub_135BC proc near

var_A4= word ptr -0A4h

push    bp
mov     bp, sp
sub     sp, 0A4h
cmp     word ptr ds:472Ah, 0
jz      short loc_135D4
mov     al, ds:9224h
mov     ah, 0
call    sub_10BFC
jmp     short loc_135E4

loc_135D4:
cmp     word ptr ds:0C0EFh, 2
jz      short loc_135E1
mov     word ptr ds:229Ch, 1

loc_135E1:
call    sub_1A45E

loc_135E4:
mov     ax, 1214h
push    ax
call    sub_19BEC
call    sub_125DD
call    sub_16A20
call    sub_16478
call    sub_1EF52
call    sub_16431
call    sub_16A05
call    sub_12589
cmp     word ptr ds:472Ah, 0
jz      short loc_13652
lea     ax, [bp+var_A4]
push    ax
call    sub_1E87B
mov     ax, [bp+var_A4]
cmp     ax, ds:9276h
jnz     short loc_13649
push    ss
lea     ax, [bp+var_A4]
push    ax
push    ds
mov     ax, 9276h
push    ax
mov     ax, 0A3h
push    ax
call    sub_46A2C
cmp     word ptr ds:0C0EFh, 2
jz      short loc_13649
push    ds
mov     ax, 9276h
push    ax
push    ds
mov     ax, 931Bh
push    ax
mov     ax, 0A3h
push    ax
call    sub_46A2C

loc_13649:
mov     ax, 1
push    ax
call    sub_1A4C4
jmp     short loc_1366F

loc_13652:
call    sub_1A39F
cmp     word ptr ds:0C0EFh, 2
jz      short loc_1366F
push    ds
mov     ax, 9276h
push    ax
push    ds
mov     ax, 931Bh
push    ax
mov     ax, 0A3h
push    ax
call    sub_46A2C

loc_1366F:
mov     sp, bp
pop     bp
retn
sub_135BC endp



; Attributes: bp-based frame

sub_13673 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
cmp     word ptr ds:0C0EFh, 2
jz      short loc_1368C
call    sub_139EF
call    sub_1BDD1
call    sub_147A2
call    sub_31744

loc_1368C:
push    ds
push    [bp+arg_2]
call    sub_1EE52
push    ds
push    [bp+arg_4]
call    sub_1EEB8
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_136B9
cmp     [bp+arg_0], 0
jz      short loc_136B1
call    sub_135BC
jmp     short loc_136B4

loc_136B1:
call    sub_13576

loc_136B4:
call    sub_12650
jmp     short loc_136C0

loc_136B9:
push    si
push    [bp+arg_4]
call    sub_13527

loc_136C0:
cmp     word ptr ds:0C0EFh, 2
jz      short loc_136CF
call    sub_317B4
call    sub_1BE15

loc_136CF:
pop     si
pop     bp
retn    6
sub_13673 endp



; Attributes: bp-based frame

sub_136D4 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, 0FFFFh
push    [bp+arg_0]
call    sub_13474
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     ax, 0BAD0h
jz      short loc_136F9
push    dx
push    ax
call    sub_132F5
mov     si, ax
call    sub_1A751

loc_136F9:
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn    2
sub_136D4 endp



; Attributes: bp-based frame

sub_13702 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, 827Ch
les     bx, ds:5AAh
les     bx, es:[bx+12h]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     di, 16h
jmp     short loc_13733

loc_13720:
mov     dx, [si+2]
mov     ax, [si]
cmp     dx, [bp+var_2]
jnz     short loc_1372F
cmp     ax, [bp+var_4]
jz      short loc_13737

loc_1372F:
dec     di
add     si, 5Eh ; '^'

loc_13733:
or      di, di
jnz     short loc_13720

loc_13737:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_13702 endp



; Attributes: bp-based frame

sub_1373F proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
mov     ax, 9877h
push    ax
call    sub_127A5
mov     di, ax
mov     ax, di
or      ax, ax
jz      short loc_13786
mov     ax, 8286h
push    ax
mov     ax, 9877h
push    ax
call    sub_19458
push    word ptr ds:1C96h
call    sub_1488E
mov     ds:8284h, ax
mov     ds:8282h, di
mov     ax, 827Ch
push    ax
call    sub_12B18
or      ax, ax
jnz     short loc_13794
mov     ax, 0F14h
push    ax
xor     ax, ax
push    ax
call    sub_19065
jmp     short loc_13791

loc_13786:
mov     ax, 0F34h
push    ax
mov     ax, 9877h
push    ax
call    sub_19065

loc_13791:
mov     si, 905h

loc_13794:
mov     ax, si
pop     di
pop     si
pop     bp
retn    2
sub_1373F endp



; Attributes: bp-based frame

sub_1379C proc near

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= byte ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
mov     di, [bp+arg_0]
mov     si, 0FFFFh
xor     ax, ax
push    ax
call    sub_12268
or      ax, ax
jge     short loc_137B7
jmp     loc_1393E

loc_137B7:
mov     word ptr ds:1B44h, 0FFFFh
call    sub_139EF
call    sub_31529
mov     ds:93DAh, dx
mov     ds:93D8h, ax
push    ds
mov     ax, 2EFCh
push    ax
call    sub_1EE52
mov     word ptr ds:8A90h, 0
cmp     word ptr ds:23CBh, 0
jz      short loc_137EE
mov     ax, 0FFFFh
mov     [bp+var_A], ax
mov     [bp+var_C], ax
jmp     short loc_137FE

loc_137EE:
push    ds
push    word ptr ds:40BCh
call    sub_3EAFC
mov     [bp+var_A], dx
mov     [bp+var_C], ax

loc_137FE:
cmp     [bp+var_C], 0FFFFh
jnz     short loc_13869
cmp     [bp+var_A], 0FFFFh
jnz     short loc_1385C
cmp     di, 901h
jnz     short loc_13817
cmp     word ptr ds:8274h, 0
jz      short loc_13845

loc_13817:
mov     word ptr ds:1DD3h, 123h
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
mov     ax, 0EFAh
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 5
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Eh
cmp     al, 59h ; 'Y'
jz      short loc_13845
jmp     loc_1392A

loc_13845:
mov     word ptr ds:8A90h, 1
push    word ptr ds:40BCh
mov     ax, 2EFCh
push    ax
xor     ax, ax
push    ax
call    sub_13673
jmp     loc_1393C

loc_1385C:
push    [bp+var_A]
push    word ptr ds:40BCh
call    sub_13527
jmp     loc_1393C

loc_13869:
xor     ax, ax
push    ax
call    sub_1B2A2
xor     ax, ax
push    ax
call    sub_12B5C
cmp     ax, 0BAD0h
jnz     short loc_1387D
jmp     loc_1392A

loc_1387D:
cmp     di, 902h
jnz     short loc_13889
push    di
call    sub_1373F
mov     di, ax

loc_13889:
call    sub_13702
or      ax, ax
jz      short loc_13893
mov     di, 905h

loc_13893:
mov     ax, di
sub     ax, 901h        ; switch 5 cases
cmp     ax, 4
jbe     short loc_138A0
jmp     def_138A4       ; jumptable 000138A4 default case, case 2307

loc_138A0:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_138A4[bx] ; switch jump
jpt_138A4 dw offset loc_1392F ; jump table for switch statement
dw offset loc_1392F
dw offset def_138A4
dw offset loc_138B3
dw offset loc_138B3

loc_138B3:              ; jumptable 000138A4 cases 2308,2309
les     bx, ds:5AAh
push    word ptr es:[bx+14h]
push    word ptr es:[bx+12h]
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_3F3F4
mov     [bp+var_6], dx
mov     [bp+var_8], ax
or      ax, ax
jz      short loc_138E5
mov     [bp+var_A], dx
mov     [bp+var_C], ax
push    dx
push    ax
call    sub_132F5
mov     si, ax
call    sub_1A751
jmp     short loc_13936

loc_138E5:
cmp     [bp+var_C], 0
jbe     short loc_138FF
cmp     [bp+var_A], 0
jbe     short loc_138FF
mov     ax, [bp+var_A]
mov     ds:8284h, ax
mov     ax, [bp+var_C]
mov     ds:8282h, ax
jmp     short loc_1392F ; jumptable 000138A4 cases 2305,2306

loc_138FF:
mov     word ptr ds:1DD3h, 124h
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
mov     ax, 0ECFh
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 5
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Eh
cmp     al, 59h ; 'Y'
jz      short loc_1392F ; jumptable 000138A4 cases 2305,2306

loc_1392A:
call    sub_132BD
jmp     short loc_1393C

loc_1392F:              ; jumptable 000138A4 cases 2305,2306
mov     si, di
jmp     short loc_13936

def_138A4:              ; jumptable 000138A4 default case, case 2307
mov     si, 0FFFFh

loc_13936:
mov     word ptr ds:229Ch, 1

loc_1393C:
mov     ax, si

loc_1393E:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1379C endp



; Attributes: bp-based frame

sub_13946 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_0]
mov     si, 0FFFFh
mov     ax, di
cmp     ax, 903h
jz      short loc_1395D
jmp     short loc_13963

loc_1395D:
call    sub_132BD
jmp     def_139AF       ; jumptable 000139AF default case, case 2307

loc_13963:
cmp     word ptr ds:0C0EFh, 2
jz      short loc_1397B
cmp     word ptr ds:99FDh, 0
jz      short loc_13974
call    sub_139EF

loc_13974:
cmp     word ptr ds:0C0EFh, 1
jnz     short loc_13992

loc_1397B:
call    sub_1D4DD
mov     [bp+var_2], ax
cmp     ax, 1Bh
jz      short def_139AF ; jumptable 000139AF default case, case 2307
cmp     ax, 59h ; 'Y'
jz      short loc_13992
cmp     word ptr ds:0C0EFh, 2
jz      short loc_1399A

loc_13992:
push    di
call    sub_1D321
mov     si, ax
jmp     short def_139AF ; jumptable 000139AF default case, case 2307

loc_1399A:
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     ax, di
sub     ax, 901h        ; switch 5 cases
cmp     ax, 4
ja      short def_139AF ; jumptable 000139AF default case, case 2307
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_139AF[bx] ; switch jump
jpt_139AF dw offset loc_139C7 ; jump table for switch statement
dw offset loc_139BE
dw offset def_139AF
dw offset loc_139D2
dw offset loc_139D2

loc_139BE:              ; jumptable 000139AF case 2306
push    di
call    sub_1373F
cmp     ax, 905h
jz      short def_139AF ; jumptable 000139AF default case, case 2307

loc_139C7:              ; jumptable 000139AF case 2305
mov     ax, 2
push    ax
call    sub_136D4
mov     si, ax
jmp     short def_139AF ; jumptable 000139AF default case, case 2307

loc_139D2:              ; jumptable 000139AF cases 2308,2309
cmp     di, 904h
jnz     short loc_139DC
xor     ax, ax
jmp     short loc_139DF

loc_139DC:
mov     ax, 1

loc_139DF:
push    ax
call    sub_136D4
mov     si, ax

def_139AF:              ; jumptable 000139AF default case, case 2307
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_13946 endp




sub_139EF proc near
cmp     word ptr ds:0C0EFh, 0
jz      short locret_13A01
call    sub_132BD
call    sub_3F160
call    sub_1A751

locret_13A01:
retn
sub_139EF endp



; Attributes: bp-based frame

sub_13A02 proc near

var_50= byte ptr -50h

push    bp
mov     bp, sp
sub     sp, 50h
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_13A76
push    ss
lea     ax, [bp+var_50]
push    ax
push    ds
mov     ax, 0F53h
push    ax
call    sub_4682F
push    dx
push    ax
call    sub_46D76
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_105F1
or      ax, ax
jnz     short loc_13A51
mov     ax, 0E1Fh
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19065
jmp     short loc_13A76

loc_13A51:
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_13A76
lea     ax, [bp+var_50]
push    ax
mov     ax, 0C63h
push    ax
mov     ax, 1
push    ax
call    sub_13673

loc_13A76:
dec     word ptr ds:1DE8h
mov     sp, bp
pop     bp
retn
sub_13A02 endp



; Attributes: bp-based frame

sub_13A7E proc near

var_24= byte ptr -24h
var_22= byte ptr -22h
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= byte ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 24h
push    si
push    di
mov     di, [bp+arg_4]
mov     ax, [bp+arg_A]
cmp     ax, [bp+arg_6]
jl      short loc_13A94
jmp     loc_13B26

loc_13A94:
cmp     byte ptr [di], 7Eh ; '~'
jl      short loc_13A9E
mov     ax, 1
jmp     short loc_13AA0

loc_13A9E:
xor     ax, ax

loc_13AA0:
mov     [bp+var_2], ax
inc     di
lea     si, [bp+var_24]
mov     [bp+var_8], 0
jmp     short loc_13ABC

loc_13AAE:
mov     byte ptr [si], 20h ; ' '
mov     al, [bp+arg_8]
mov     [si+1], al
inc     [bp+var_8]
inc     si
inc     si

loc_13ABC:
cmp     [bp+var_8], 0Eh
jl      short loc_13AAE
lea     si, [bp+var_22]
jmp     short loc_13AD4

loc_13AC7:
mov     al, [di]
mov     [si], al
mov     al, [bp+arg_8]
mov     [si+1], al
inc     di
inc     si
inc     si

loc_13AD4:
cmp     byte ptr [di], 0
jnz     short loc_13AC7
cmp     [bp+var_2], 0
jz      short loc_13AEC
mov     al, ds:226Eh
mov     [si], al
mov     al, [bp+arg_8]
mov     [si+1], al
inc     si
inc     si

loc_13AEC:
mov     ax, [bp+arg_A]
sub     ax, [bp+arg_2]
cwd
idiv    [bp+arg_0]
mov     ax, dx
mul     word ptr ds:8A92h
inc     ax
mov     [bp+var_6], ax
mov     ax, [bp+arg_A]
sub     ax, [bp+arg_2]
cwd
idiv    [bp+arg_0]
inc     ax
mov     [bp+var_4], ax
push    [bp+var_6]
push    ax
mov     ax, [bp+var_6]
add     ax, 0Dh
push    ax
push    [bp+var_4]
lea     ax, [bp+var_24]
push    ax
xor     ax, ax
push    ax
call    sub_1D8CC

loc_13B26:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_13A7E endp




sub_13B2E proc near
push    si
push    di
mov     di, 492Fh
mov     al, [di+0Ah]
mov     ah, 0
mov     si, ax
mov     al, [di+8]
mov     ah, 0
sub     si, ax
dec     si
mov     ax, si
mov     bx, 0Eh
cwd
idiv    bx
mov     ds:8A9Eh, ax
mov     dx, bx
mul     dx
push    ax
mov     ax, si
pop     dx
sub     ax, dx
cwd
idiv    word ptr ds:8A9Eh
mov     ds:8A94h, ax
add     ax, bx
mov     ds:8A92h, ax
mov     al, [di+0Bh]
mov     ah, 0
mov     dl, [di+9]
mov     dh, 0
sub     ax, dx
dec     ax
mul     word ptr ds:8A9Eh
mov     ds:8AA0h, ax
call    sub_1DA26
cmp     word ptr ds:8AF2h, 0
jnz     short loc_13B90
mov     ax, 1
push    ax
push    ax
mov     ax, 0E1Fh
push    ax
call    sub_1ED32
jmp     short loc_13BC1

loc_13B90:
mov     si, ds:8A96h
jmp     short loc_13BB6

loc_13B96:
push    si
mov     bx, [di]
push    word ptr [bx+3]
push    word ptr ds:8AF2h
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
push    word ptr [bx]
push    word ptr ds:8A96h
push    word ptr ds:8A9Eh
call    sub_13A7E
inc     si

loc_13BB6:
mov     ax, ds:8A96h
add     ax, ds:8AA0h
cmp     ax, si
jg      short loc_13B96

loc_13BC1:
pop     di
pop     si
retn
sub_13B2E endp



; Attributes: bp-based frame

sub_13BC4 proc near

var_52= byte ptr -52h
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 52h
push    si
push    di
mov     si, 492Fh
mov     al, [si+0Ah]
mov     ah, 0
mov     dl, [si+8]
mov     dh, 0
sub     ax, dx
dec     ax
mov     [bp+var_2], ax
lea     ax, [bp+var_52]
push    ax
mov     ax, 0D66h
push    ax
call    sub_19458
mov     ax, 8AA2h
push    ax
call    sub_19448
mov     di, ax
inc     di
inc     di
cmp     di, [bp+var_2]
jle     short loc_13C17
lea     ax, [bp+var_52]
push    ax
mov     ax, 1B72h
push    ax
call    sub_19483
push    ax
mov     ax, di
add     ax, 8AA2h
sub     ax, [bp+var_2]
add     ax, 3
push    ax
call    sub_19483
jmp     short loc_13C22

loc_13C17:
lea     ax, [bp+var_52]
push    ax
mov     ax, 8AA2h
push    ax
call    sub_19483

loc_13C22:
lea     ax, [bp+var_52]
push    ax
mov     ax, 0D66h
push    ax
call    sub_19483
lea     ax, [bp+var_52]
push    ax
mov     bx, [si]
mov     al, [bx]
mov     ah, 0
push    ax
call    sub_1E90D
cmp     word ptr ds:8AF6h, 0
jz      short loc_13C85
mov     ax, ds:8A98h
mov     ds:8AF2h, ax
lea     ax, [bp+var_52]
push    ax
mov     ax, 150Ah
push    ax
call    sub_19458
lea     bx, [bp+var_52]
add     bx, [bp+var_2]
mov     byte ptr [bx], 0
mov     al, [si+0Bh]
mov     ah, 0
mov     di, ax
mov     al, [si+9]
mov     ah, 0
sub     di, ax
mov     ax, 1
push    ax
push    di
lea     ax, [bp+var_52]
push    ax
call    sub_19448
push    ax
push    di
lea     ax, [bp+var_52]
push    ax
mov     ax, 1
push    ax
call    sub_1D8CC
jmp     short loc_13C92

loc_13C85:
mov     al, [si+0Ch]
mov     ah, 0
push    ax
mov     ax, 0FFh
push    ax
call    sub_1DA05

loc_13C92:
call    sub_13B2E
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_13BC4 endp



; Attributes: bp-based frame

sub_13C9B proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
mov     di, [bp+arg_2]
jmp     short loc_13CBA

loc_13CA8:
cmp     byte ptr [si], 2Ah ; '*'
jz      short loc_13CC4
cmp     byte ptr [si], 3Fh ; '?'
jz      short loc_13CB8
mov     al, [di]
cmp     al, [si]
jnz     short loc_13CD5

loc_13CB8:
inc     di
inc     si

loc_13CBA:
cmp     byte ptr [di], 0
jz      short loc_13CC4
cmp     byte ptr [si], 0
jnz     short loc_13CA8

loc_13CC4:
cmp     byte ptr [si], 2Ah ; '*'
jz      short loc_13CD9
mov     al, [di]
cbw
push    ax
mov     al, [si]
cbw
pop     dx
add     dx, ax
jz      short loc_13CD9

loc_13CD5:
xor     ax, ax
jmp     short loc_13CDC

loc_13CD9:
mov     ax, 1

loc_13CDC:
pop     di
pop     si
pop     bp
retn    4
sub_13C9B endp



; Attributes: bp-based frame

sub_13CE2 proc near

var_10= byte ptr -10h
var_6= byte ptr -6
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 10h
push    ds
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
lea     ax, [bp+var_10]
push    ax
lea     ax, [bp+var_6]
push    ax
call    sub_19500
test    ax, 2
jnz     short loc_13D1E
lea     ax, [bp+var_6]
push    ax
mov     ax, 1B74h
push    ax
call    sub_19458
push    ds
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
lea     ax, [bp+var_10]
push    ax
lea     ax, [bp+var_6]
push    ax
call    sub_19777

loc_13D1E:
lea     ax, [bp+var_10]
push    ax
mov     ax, 9170h
push    ax
call    sub_13C9B
or      ax, ax
jnz     short loc_13D31
xor     ax, ax
jmp     short loc_13D3C

loc_13D31:
lea     ax, [bp+var_6]
push    ax
mov     ax, 91C8h
push    ax
call    sub_13C9B

loc_13D3C:
mov     sp, bp
pop     bp
retn    2
sub_13CE2 endp



; Attributes: bp-based frame

sub_13D42 proc near

var_83= word ptr -83h
var_31= byte ptr -31h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= byte ptr -2Ch
var_17= byte ptr -17h
var_E= byte ptr -0Eh

push    bp
mov     bp, sp
sub     sp, 84h
push    si
push    di
push    ss
lea     ax, [bp+var_83+1]
push    ax
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
mov     ax, 1B76h
push    ax
mov     ax, 1B78h
push    ax
call    sub_19777
push    ss
lea     ax, [bp+var_30]
push    ax
call    sub_10411
push    ss
lea     ax, [bp+var_2C]
push    ax
call    sub_10431
mov     al, 0
mov     byte ptr [bp+var_83], al
cbw
mov     ds:8A9Ah, ax
mov     ds:8AF2h, ax
lea     di, [bp+var_E]
jmp     short loc_13DEE

loc_13D86:
mov     byte ptr [bp+var_83], 1
test    [bp+var_17], 10h
jz      short loc_13DB2
mov     ax, [di]
cmp     ax, 2Eh ; '.'
jz      short loc_13DEE
cmp     ax, 2E2Eh
jnz     short loc_13DA3
mov     [bp+var_31], 7Fh
jmp     short loc_13DA7

loc_13DA3:
mov     [bp+var_31], 7Eh ; '~'

loc_13DA7:
mov     ax, ds:8AF2h
cmp     ax, ds:8A98h
jz      short loc_13DC3
jmp     short loc_13DD1

loc_13DB2:
push    di
call    sub_13CE2
or      ax, ax
jz      short loc_13DEE
mov     ax, ds:8AF2h
cmp     ax, ds:8A98h
jnz     short loc_13DC9

loc_13DC3:
inc     word ptr ds:8AF2h
jmp     short loc_13E0F

loc_13DC9:
inc     word ptr ds:8A9Ah
mov     [bp+var_31], 7Dh ; '}'

loc_13DD1:
mov     ax, ds:8AF2h
mov     dx, 0Eh
mul     dx
mov     si, ax
add     si, ds:8AF8h
inc     word ptr ds:8AF2h
mov     al, [bp+var_31]
mov     [si], al
inc     si
push    si
push    di
call    sub_19458

loc_13DEE:
mov     ax, ds:8AF2h
cmp     ax, ds:8A98h
ja      short loc_13E0F
push    ss
lea     ax, [bp+var_83+1]
push    ax
push    [bp+var_83]
mov     ax, 10h
push    ax
call    sub_105BB
or      ax, ax
jnz     short loc_13E0F
jmp     loc_13D86

loc_13E0F:
push    [bp+var_2E]
push    [bp+var_30]
call    sub_10431
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_13D42 endp



; Attributes: bp-based frame

sub_13E1E proc near

var_50= byte ptr -50h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 50h
push    si
test    word ptr ds:8AFAh, 20h
jnz     short loc_13E4B
mov     ax, 0CB2h
push    ax
xor     ax, ax
push    ax
call    sub_19065
xor     ax, ax
mov     ds:8AF4h, ax
mov     ds:8A96h, ax
mov     ds:8A9Ah, ax
mov     ds:8AF2h, ax
mov     ds:8AF6h, ax
jmp     loc_13EFE

loc_13E4B:
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
call    sub_1982B
or      word ptr ds:8AFAh, 18h
mov     ax, 8AA2h
push    ax
call    sub_19C39
cmp     [bp+arg_0], 0
jz      short loc_13EA1
mov     al, 0
push    ax
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_10534
lea     ax, [bp+var_50]
push    ax
call    sub_19448
mov     si, ax
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_50]
push    ax
push    ds
mov     ax, 8AA2h
push    ax
push    si
call    sub_46E7B
or      ax, ax
jz      short loc_13E98
xor     ax, ax
jmp     short loc_13E9A

loc_13E98:
mov     ax, si

loc_13E9A:
add     ax, 8AA2h
push    ax
call    sub_19458

loc_13EA1:
call    sub_13D42
mov     ax, ds:8AF2h
cmp     ax, ds:8A98h
jbe     short loc_13EB2
mov     ax, 1
jmp     short loc_13EB4

loc_13EB2:
xor     ax, ax

loc_13EB4:
mov     ds:8AF6h, ax
or      ax, ax
jz      short loc_13EC1
mov     ax, ds:8A98h
mov     ds:8AF2h, ax

loc_13EC1:
cmp     word ptr ds:8AF2h, 0
jle     short loc_13EF3
xor     si, si
jmp     short loc_13EE2

loc_13ECC:
mov     ax, si
mov     dx, 0Eh
mul     dx
add     ax, ds:8AF8h
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     [bx], ax
inc     si

loc_13EE2:
cmp     si, ds:8AF2h
jl      short loc_13ECC
push    word ptr ds:8AF2h
push    word ptr ds:8A9Ch
call    sub_1938B

loc_13EF3:
xor     ax, ax
mov     ds:8AF4h, ax
mov     ds:8A96h, ax
mov     ax, 1

loc_13EFE:
pop     si
mov     sp, bp
pop     bp
retn    2
sub_13E1E endp



; Attributes: bp-based frame

sub_13F05 proc near

arg_0= word ptr  4
arg_2= byte ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
cmp     [bp+arg_0], 0
jz      short loc_13F29
cmp     byte ptr [bp+arg_4], 7Eh ; '~'
jb      short loc_13F25
mov     ax, [bp+arg_4]
mov     cl, 8
shr     ax, cl
cmp     al, [bp+arg_2]
jnz     short loc_13F25
mov     ax, 1
jmp     short loc_13F27

loc_13F25:
xor     ax, ax

loc_13F27:
jmp     short loc_13F42

loc_13F29:
cmp     byte ptr [bp+arg_4], 7Dh ; '}'
jnz     short loc_13F40
mov     ax, [bp+arg_4]
mov     cl, 8
shr     ax, cl
cmp     al, [bp+arg_2]
jnz     short loc_13F40
mov     ax, 1
jmp     short loc_13F42

loc_13F40:
xor     ax, ax

loc_13F42:
pop     bp
retn    6
sub_13F05 endp



; Attributes: bp-based frame

sub_13F46 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     [bp+var_8], 492Fh

loc_13F53:
mov     ax, ds:8A96h
mov     [bp+var_6], ax

loc_13F59:
push    word ptr ds:8AF4h
mov     bx, [bp+var_8]
mov     bx, [bx]
push    word ptr [bx+2]
push    word ptr ds:8AF2h
mov     bx, ds:8AF4h
shl     bx, 1
add     bx, ds:8A9Ch
push    word ptr [bx]
push    word ptr ds:8A96h
push    word ptr ds:8A9Eh
call    sub_13A7E
mov     si, ds:8AF4h
mov     word ptr ds:40DAh, 3
mov     word ptr ds:1DD3h, 2Bh ; '+'
call    sub_15852
mov     [bp+var_2], ax
push    ax
call    sub_11EA2
mov     di, ax
push    word ptr ds:8AF4h
mov     bx, [bp+var_8]
mov     bx, [bx]
push    word ptr [bx+3]
push    word ptr ds:8AF2h
mov     bx, ds:8AF4h
shl     bx, 1
add     bx, ds:8A9Ch
push    word ptr [bx]
push    word ptr ds:8A96h
push    word ptr ds:8A9Eh
call    sub_13A7E
mov     ax, di
sub     ax, 0FFEBh      ; switch 34 cases
cmp     ax, 21h
jbe     short loc_13FD0
jmp     def_13FD4       ; jumptable 00013FD4 default case, cases -20--1,6-8

loc_13FD0:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_13FD4[bx] ; switch jump
jpt_13FD4 dw offset loc_1401D ; jump table for switch statement
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset loc_1410E
dw offset loc_14124
dw offset loc_140E9
dw offset loc_140FA
dw offset loc_140DC
dw offset loc_140D6
dw offset def_13FD4
dw offset def_13FD4
dw offset def_13FD4
dw offset loc_141BB
dw offset loc_141C4
dw offset loc_1414D
dw offset loc_14181

loc_1401D:              ; jumptable 00013FD4 case -21
inc     word ptr ds:1DE8h

loc_14021:
mov     word ptr ds:1DD3h, 12Dh
mov     ax, 1519h
push    ax
mov     ax, 8AA2h
push    ax
mov     bx, [bp+var_8]
mov     al, [bx+8]
mov     ah, 0
add     ax, 5
push    ax
mov     al, [bx+9]
mov     ah, 0
add     ax, 3
push    ax
mov     ax, 50h ; 'P'
push    ax
mov     ax, 28h ; '('
push    ax
call    sub_18E6D
mov     di, ax
or      di, di
jl      short loc_140BB
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_14021
mov     ax, 8AA2h
push    ax
push    [bp+arg_2]
xor     ax, ax
push    ax
push    [bp+arg_0]
call    sub_19A67
mov     ds:8AFAh, ax
and     ax, 21h
cmp     ax, 20h ; ' '
jnz     short loc_140AB
mov     bx, ds:8A9Ch
mov     bx, [bx]
mov     byte ptr [bx], 7Dh ; '}'
mov     bx, ds:8A9Ch
mov     ax, [bx]
inc     ax
push    ax
mov     ax, 9170h
push    ax
call    sub_19458
push    ax
mov     ax, 91C8h
push    ax
call    sub_19483
xor     si, si
jmp     loc_142D6

loc_140AB:
push    [bp+arg_4]
call    sub_13E1E
or      ax, ax
jnz     short loc_140B8
jmp     loc_14021

loc_140B8:
call    sub_13BC4

loc_140BB:
dec     word ptr ds:1DE8h
mov     si, di
mov     ax, si
cmp     ax, 0FFFFh
jl      short loc_140CB
jmp     loc_14288

loc_140CB:
cmp     di, 0FFEBh
jz      short loc_140D3
jmp     loc_142D6

loc_140D3:
jmp     loc_14021

loc_140D6:              ; jumptable 00013FD4 case 5
mov     si, 0FFFFh
jmp     loc_142D6

loc_140DC:              ; jumptable 00013FD4 case 4
cmp     word ptr ds:8AF2h, 0
jle     short loc_140E6
jmp     loc_142D6

loc_140E6:
jmp     loc_14288

loc_140E9:              ; jumptable 00013FD4 case 2
cmp     word ptr ds:8AF4h, 0
jg      short loc_140F3
jmp     loc_14288

loc_140F3:
dec     word ptr ds:8AF4h
jmp     loc_14288

loc_140FA:              ; jumptable 00013FD4 case 3
mov     ax, ds:8AF4h
inc     ax
cmp     ax, ds:8AF2h
jl      short loc_14107
jmp     loc_14288

loc_14107:
inc     word ptr ds:8AF4h
jmp     loc_14288

loc_1410E:              ; jumptable 00013FD4 case 0
mov     ax, ds:8AF4h
cmp     ax, ds:8A9Eh
jge     short loc_1411A
jmp     loc_14288

loc_1411A:
mov     ax, ds:8A9Eh
sub     ds:8AF4h, ax
jmp     loc_14288

loc_14124:              ; jumptable 00013FD4 case 1
mov     ax, ds:8A9Eh
add     ds:8AF4h, ax
mov     ax, ds:8AF4h
cmp     ax, ds:8AF2h
jge     short loc_14137
jmp     loc_14288

loc_14137:
mov     ax, ds:8A96h
add     ax, ds:8AA0h
cmp     ax, ds:8AF2h
jge     short loc_1411A
mov     ax, ds:8A9Eh
add     ds:8A96h, ax
jmp     short loc_1411A

loc_1414D:              ; jumptable 00013FD4 case 11
mov     ax, ds:8AF4h
sub     ax, ds:8AA0h
mov     ds:8AF4h, ax
jmp     short loc_14160

loc_14159:
mov     ax, ds:8A9Eh
add     ds:8AF4h, ax

loc_14160:
cmp     word ptr ds:8AF4h, 0
jl      short loc_14159
mov     ax, ds:8AA0h
sub     ds:8A96h, ax
cmp     word ptr ds:8A96h, 0
jl      short loc_14178
jmp     loc_14288

loc_14178:
mov     word ptr ds:8A96h, 0
jmp     loc_14288

loc_14181:              ; jumptable 00013FD4 case 12
cmp     word ptr ds:8AF2h, 0
jnz     short loc_1418B
jmp     loc_14288

loc_1418B:
mov     ax, ds:8AA0h
add     ds:8AF4h, ax
mov     ax, ds:8A96h
add     ax, ds:8AA0h
cmp     ax, ds:8AF2h
jge     short loc_141AF
mov     ax, ds:8AA0h
add     ds:8A96h, ax
jmp     short loc_141AF

loc_141A8:
mov     ax, ds:8A9Eh
sub     ds:8AF4h, ax

loc_141AF:
mov     ax, ds:8AF4h
cmp     ax, ds:8AF2h
jge     short loc_141A8
jmp     loc_14288

loc_141BB:              ; jumptable 00013FD4 case 9
mov     word ptr ds:8AF4h, 0
jmp     loc_14288

loc_141C4:              ; jumptable 00013FD4 case 10
cmp     word ptr ds:8AF2h, 0
jg      short loc_141CE
jmp     loc_14288

loc_141CE:
mov     ax, ds:8AF2h
dec     ax
mov     ds:8AF4h, ax
jmp     loc_14288

def_13FD4:              ; jumptable 00013FD4 default case, cases -20--1,6-8
cmp     di, 0FFFFh
jge     short loc_141FF
mov     si, di
mov     ax, si
cmp     ax, 0FFFFh
jge     short loc_141E9
jmp     loc_142D6

loc_141E9:
jmp     short loc_141EF

loc_141EB:
dec     word ptr ds:8AF4h

loc_141EF:
mov     ax, ds:8A96h
add     ax, ds:8AA0h
cmp     ax, ds:8AF4h
jle     short loc_141EB
jmp     loc_14288

loc_141FF:
and     [bp+var_2], 0FFh
mov     ax, [bp+var_2]
or      ax, ax
jnz     short loc_1420E
jmp     loc_14288

loc_1420E:
push    ax
call    sub_46F25
mov     [bp+var_2], ax
call    sub_107CE
and     ax, 3
mov     [bp+var_4], ax
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     bx, [bx]
push    word ptr [bx]
push    [bp+var_2]
push    ax
call    sub_13F05
or      ax, ax
jz      short loc_1423D
mov     ax, ds:8AF4h
inc     ax
jmp     short loc_1423F

loc_1423D:
xor     ax, ax

loc_1423F:
mov     si, ax
or      si, si
jz      short loc_14282
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     bx, [bx]
push    word ptr [bx]
push    [bp+var_2]
push    [bp+var_4]
call    sub_13F05
or      ax, ax
jnz     short loc_14282
xor     si, si
jmp     short loc_14282

loc_14262:
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     bx, [bx]
push    word ptr [bx]
push    [bp+var_2]
push    [bp+var_4]
call    sub_13F05
or      ax, ax
jz      short loc_14281
mov     ds:8AF4h, si
jmp     short loc_14288

loc_14281:
inc     si

loc_14282:
cmp     si, ds:8AF2h
jl      short loc_14262

loc_14288:
mov     ax, ds:8AF4h
cmp     ax, ds:8A96h
jge     short loc_14296
mov     ds:8A96h, ax
jmp     short loc_142B1

loc_14296:
mov     ax, ds:8A96h
add     ax, ds:8AA0h
cmp     ax, ds:8AF4h
jg      short loc_142B1
mov     ax, ds:8AF4h
sub     ax, ds:8AA0h
add     ax, ds:8A9Eh
mov     ds:8A96h, ax

loc_142B1:
mov     ax, ds:8A96h
cmp     ax, [bp+var_6]
jnz     short loc_142BC
jmp     loc_13F59

loc_142BC:
cwd
idiv    word ptr ds:8A9Eh
sub     ds:8A96h, dx
mov     ax, ds:8A96h
cmp     ax, [bp+var_6]
jnz     short loc_142D0
jmp     loc_13F59

loc_142D0:
call    sub_13B2E
jmp     loc_13F53

loc_142D6:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_13F46 endp



; Attributes: bp-based frame

sub_142E0 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
push    di

loc_142E5:
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_13F46
mov     si, ax
or      si, si
jge     short loc_142FA
jmp     loc_14390

loc_142FA:
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     bx, [bx]
cmp     byte ptr [bx], 7Eh ; '~'
jl      short loc_14364
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     bx, [bx]
cmp     word ptr [bx+1], 2E2Eh
jnz     short loc_1433D
push    ds
mov     ax, 9179h
push    ax
call    sub_46E60
mov     di, ax
dec     di
add     di, 9179h

loc_1432B:
dec     di
mov     bx, di
push    word ptr [bx]
call    sub_19729
or      al, al
jz      short loc_1432B
mov     byte ptr [di+1], 0
jmp     short loc_14358

loc_1433D:
mov     ax, 9179h
push    ax
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     ax, [bx]
inc     ax
push    ax
call    sub_19483
push    ax
mov     ax, 226Eh
push    ax
call    sub_19483

loc_14358:
push    [bp+arg_4]
call    sub_13E1E
call    sub_13BC4
jmp     loc_142E5

loc_14364:
push    ds
mov     ax, 8AA2h
push    ax
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_19777
mov     ax, 8AA2h
push    ax
mov     bx, si
shl     bx, 1
add     bx, ds:8A9Ch
mov     ax, [bx]
inc     ax
push    ax
call    sub_19483
mov     ax, 4
jmp     short loc_14392

loc_14390:
mov     ax, si

loc_14392:
pop     di
pop     si
pop     bp
retn    6
sub_142E0 endp



; Attributes: bp-based frame

sub_14398 proc near

var_64= word ptr -64h
var_62= byte ptr -62h
var_12= byte ptr -12h
var_8= byte ptr -8
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 64h
push    si
push    di
mov     [bp+var_2], 0
xor     di, di
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_143C7
mov     si, 0FFFFh
jmp     loc_14516

loc_143C7:
cmp     [bp+arg_0], 0
jz      short loc_143F9
push    ds
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
lea     ax, [bp+var_12]
push    ax
lea     ax, [bp+var_8]
push    ax
call    sub_19500
mov     ds:8AFAh, ax
test    ax, 4
jz      short loc_143EE
lea     ax, [bp+var_12]
mov     [bp+var_2], ax

loc_143EE:
test    word ptr ds:8AFAh, 2
jz      short loc_143F9
lea     di, [bp+var_8]

loc_143F9:
cmp     [bp+arg_4], 0
jz      short loc_14408
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_19458

loc_14408:
push    [bp+arg_6]
push    [bp+arg_2]
push    [bp+var_2]
push    di
call    sub_19A67
mov     ds:8AFAh, ax
mov     ax, 8AA2h
push    ax
push    [bp+arg_6]
call    sub_19458
mov     ax, ds:8AFAh
and     ax, 21h
cmp     ax, 20h ; ' '
jnz     short loc_14433
mov     si, 4
jmp     loc_14516

loc_14433:
mov     ax, sp
sub     ax, ds:20h
add     ax, 0F0B8h
mov     cl, 4
shr     ax, cl
mov     ds:8A98h, ax
shl     ax, 1
mov     dx, sp
sub     dx, ax
mov     sp, dx
mov     ax, sp
mov     ds:8A9Ch, ax
mov     ax, ds:8A98h
mov     dx, 0Eh
mul     dx
mov     dx, sp
sub     dx, ax
mov     sp, dx
mov     ax, sp
mov     ds:8AF8h, ax
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_14483
push    [bp+arg_4]
call    sub_13E1E
or      ax, ax
jnz     short loc_14489

loc_14483:
mov     si, 0FFFFh
jmp     loc_1450B

loc_14489:
mov     ax, 3
push    ax
call    sub_1ACE5
mov     ax, 1
push    ax
call    sub_1DCE5
call    sub_13BC4
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_144B5
mov     si, 0FFFFh
jmp     short loc_14504

loc_144B5:
push    [bp+arg_4]
push    [bp+arg_2]
push    di
call    sub_142E0
mov     si, ax
mov     ax, si
cmp     ax, 4
jnz     short loc_14504
mov     al, 0
push    ax
push    ss
lea     ax, [bp+var_62]
push    ax
call    sub_10534
lea     ax, [bp+var_62]
push    ax
call    sub_19448
mov     [bp+var_64], ax
push    [bp+arg_6]
push    ss
lea     ax, [bp+var_62]
push    ax
push    ds
mov     ax, 8AA2h
push    ax
push    [bp+var_64]
call    sub_46E7B
or      ax, ax
jz      short loc_144FA
xor     ax, ax
jmp     short loc_144FD

loc_144FA:
mov     ax, [bp+var_64]

loc_144FD:
add     ax, 8AA2h
push    ax
call    sub_19458

loc_14504:
mov     ax, 3
push    ax
call    sub_1AD85

loc_1450B:
mov     ax, ds:8A98h
mov     cl, 4
shl     ax, cl
add     ax, sp
mov     sp, ax

loc_14516:
dec     word ptr ds:1DE8h
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_14398 endp




sub_14524 proc near
cmp     word ptr ds:23C5h, 0
jz      short loc_14537
mov     byte ptr ds:3496h, 2
mov     byte ptr ds:3497h, 2
jmp     short locret_14547

loc_14537:
mov     al, ds:4904h
add     al, 3
mov     ds:3496h, al
mov     al, ds:4905h
add     al, 2
mov     ds:3497h, al

locret_14547:
retn
sub_14524 endp


loc_14548:
push    si
mov     word ptr ds:40DAh, 1
jmp     short loc_14554

loc_14551:
call    sub_15852

loc_14554:
call    sub_157A7
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jz      short loc_14551
or      si, si
jnz     short loc_14569
mov     ax, 0FFFFh
jmp     short loc_1456B

loc_14569:
mov     ax, si

loc_1456B:
pop     si
retf

loc_1456D:
push    si
mov     word ptr ds:40DAh, 1

loc_14574:
call    sub_15852
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jz      short loc_14574
mov     word ptr ds:1DD3h, 0F2h
mov     ax, si
pop     si
retf

loc_1458A:
push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     al, ds:4906h
mov     ah, 0
mov     di, ax
mov     al, ds:4904h
mov     ah, 0
sub     di, ax
inc     di
push    di
cmp     word ptr ds:23C5h, 0
jz      short loc_145AD
xor     ax, ax
jmp     short loc_145B0

loc_145AD:
mov     ax, 2

loc_145B0:
pop     di
sub     di, ax
push    word ptr [bp+6]
call    sub_30C40
mov     ax, 9A78h
push    ax
mov     al, 3Ah ; ':'
push    ax
call    sub_194AB
mov     [bp-4], ax
or      ax, ax
jz      short loc_145E8
inc     ax
push    ax
mov     al, 3Ah ; ':'
push    ax
call    sub_194AB
mov     [bp-2], ax
or      ax, ax
jz      short loc_145E8
mov     ax, [bp-4]
add     ax, 0FFFEh
push    ax
push    word ptr [bp-2]
call    sub_19458

loc_145E8:
push    ds
mov     ax, 8AFCh
push    ax
push    ds
mov     ax, 9A78h
push    ax
push    di
call    sub_46DA1
mov     ax, ds:0BFC4h
add     ax, 1F4h
mov     ds:1DD3h, ax
mov     byte ptr [di-7504h], 0
mov     ax, 8AFCh
push    ax
call    sub_19448
mov     si, ax
jmp     short loc_14617

loc_14611:
mov     byte ptr [si-7504h], 20h ; ' '
inc     si

loc_14617:
cmp     si, di
jl      short loc_14611
mov     ax, 8AFCh
mov     dx, ds
pop     di
pop     si
mov     sp, bp
pop     bp
retf


; Attributes: bp-based frame

sub_14626 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
call    sub_14524
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 50h ; 'P'
push    ax
call    sub_1917C
mov     si, ax
mov     word ptr ds:1DD3h, 0F2h
cmp     si, 0FFFFh
jge     short loc_1464E
push    si
call    far ptr sub_463C2
pop     cx

loc_1464E:
cmp     si, 0FFFFh
jnz     short loc_14658
mov     ax, 0FFFFh
jmp     short loc_14660

loc_14658:
push    [bp+arg_0]
call    sub_1943A
xor     ax, ax

loc_14660:
pop     si
pop     bp
retn    4
sub_14626 endp



; Attributes: bp-based frame

sub_14665 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_2]
push    ds
push    [bp+arg_4]
push    [bp+arg_0]
call    sub_106E6
mov     si, ax
dec     word ptr ds:1DE8h
or      si, si
jg      short loc_1468F
mov     ax, 169Ah
push    ax
push    [bp+arg_4]
call    sub_19065
mov     ax, 0FFFFh
jmp     short loc_14691

loc_1468F:
mov     ax, si

loc_14691:
pop     si
pop     bp
retn    6
sub_14665 endp


loc_14696:
push    bp
mov     bp, sp
sub     sp, 50h
push    si
mov     word ptr ds:1DD3h, 125h
mov     ax, 16AAh
push    ax
mov     ax, 8B4Dh
push    ax
call    sub_14626
or      ax, ax
jnz     short loc_146FB
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_146F7
lea     ax, [bp-50h]
push    ax
mov     ax, 8B4Dh
push    ax
xor     ax, ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jge     short loc_146F2
dec     word ptr ds:1DE8h
push    si
call    far ptr sub_463C2
pop     cx

loc_146F2:
cmp     si, 0FFFFh
jnz     short loc_14700

loc_146F7:
dec     word ptr ds:1DE8h

loc_146FB:
mov     ax, 0FFFFh
jmp     short loc_1470B

loc_14700:
lea     ax, [bp-50h]
push    ax
push    si
xor     ax, ax
push    ax
call    sub_14665

loc_1470B:
pop     si
mov     sp, bp
pop     bp
retf

loc_14710:
push    bp
mov     bp, sp
sub     sp, 50h
push    si
mov     word ptr ds:1DD3h, 126h
mov     ax, 16C1h
push    ax
mov     ax, 8B4Dh
push    ax
call    sub_14626
or      ax, ax
jnz     short loc_1478C
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_14788
lea     ax, [bp-50h]
push    ax
mov     ax, 8B4Dh
push    ax
xor     ax, ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jge     short loc_1476C
dec     word ptr ds:1DE8h
push    si
call    far ptr sub_463C2
pop     cx

loc_1476C:
cmp     si, 0FFFFh
jz      short loc_14788
push    ss
lea     ax, [bp-50h]
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_14791
lea     ax, [bp-50h]
push    ax
call    sub_1913E
or      ax, ax
jnz     short loc_14791

loc_14788:
dec     word ptr ds:1DE8h

loc_1478C:
mov     ax, 0FFFFh
jmp     short loc_1479D

loc_14791:
lea     ax, [bp-50h]
push    ax
push    si
mov     ax, 3
push    ax
call    sub_14665

loc_1479D:
pop     si
mov     sp, bp
pop     bp
retf



sub_147A2 proc near
mov     word ptr ds:1C7Ch, ds
mov     word ptr ds:1C7Ah, 1C05h
and     word ptr ds:1C68h, 0FD9Fh
call    sub_308FC
mov     byte ptr ds:942Ch, 0
retn
sub_147A2 endp




sub_147BD proc near
push    si
mov     si, ds:48FCh
mov     al, [si+3]
mov     ds:1B8Fh, al
mov     al, [si+4]
mov     ds:1B90h, al
mov     al, [si+2]
mov     ds:1B91h, al
mov     al, [si+5]
mov     ds:1B92h, al
mov     bx, ds:9A66h
mov     al, [bx]
mov     ds:1B93h, al
mov     al, [bx+1]
mov     ds:1B94h, al
push    ds
mov     ax, 1B8Fh
push    ax
push    ds
mov     ax, 1B89h
push    ax
mov     ax, 6
push    ax
call    sub_46A2C
push    ds
mov     ax, 1B8Fh
push    ax
push    ds
mov     ax, 1B83h
push    ax
mov     ax, 6
push    ax
call    sub_46A2C
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_4623D
pop     cx
pop     cx
pop     si
retn
sub_147BD endp




sub_1481D proc near
mov     byte ptr ds:1B7Fh, 50h ; 'P'
mov     al, ds:926Eh
mov     ds:1B80h, al
mov     ax, ds:9225h
mov     ds:1C66h, ax
cmp     word ptr ds:23C5h, 0
jz      short loc_14854
mov     al, 0
mov     ds:1C63h, al
mov     ds:1C62h, al
mov     al, ds:1B7Fh
dec     al
mov     ds:1C64h, al
mov     byte ptr ds:1C63h, 1
mov     al, ds:1B80h
add     al, 0FEh
mov     ds:1C65h, al
jmp     short locret_14874

loc_14854:
mov     al, ds:4904h
inc     al
mov     ds:1C62h, al
mov     al, ds:4905h
inc     al
mov     ds:1C63h, al
mov     al, ds:4906h
dec     al
mov     ds:1C64h, al
mov     al, ds:4907h
dec     al
mov     ds:1C65h, al

locret_14874:
retn
sub_1481D endp



; Attributes: bp-based frame

sub_14875 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_0]
push    [bp+arg_2]
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_46242
mov     sp, bp
pop     bp
retn    4
sub_14875 endp



; Attributes: bp-based frame

sub_1488E proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    [bp+arg_0]
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_46247
mov     sp, bp
pop     bp
retn    2
sub_1488E endp



; Attributes: bp-based frame

sub_148A4 proc near

var_50= byte ptr -50h
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 50h
push    si
xor     si, si
mov     ax, si
push    ax
call    sub_1AE6D
push    [bp+arg_4]
push    [bp+arg_2]
push    ds
mov     ax, 9877h
push    ax
call    sub_19911
or      ax, ax
jnz     short loc_148EA
push    ss
lea     ax, [bp+var_50]
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_46D76
lea     ax, [bp+var_50]
push    ax
call    sub_152EB
or      ax, ax
jnz     short loc_148E7
call    sub_147A2
xor     ax, ax
jmp     short loc_14903

loc_148E7:
mov     si, 200h

loc_148EA:
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_14875
mov     ds:1C96h, ax
call    sub_1490A
or      ds:1C68h, si
call    sub_17CEE
mov     ax, 1

loc_14903:
pop     si
mov     sp, bp
pop     bp
retn    6
sub_148A4 endp




sub_1490A proc near
and     word ptr ds:1C68h, 0FFDFh
retn
sub_1490A endp




sub_14911 proc near
mov     word ptr ds:1D2Eh, 1
test    word ptr ds:1C98h, 8
jz      short locret_1492E
and     word ptr ds:1C98h, 0FFF7h
and     word ptr ds:1C68h, 0EFFFh
call    sub_1492F

locret_1492E:
retn
sub_14911 endp




sub_1492F proc near
call    sub_1490A
xor     ax, ax
push    ax
call    sub_1B056
or      ax, ax
jz      short locret_14949
mov     ax, 0FFFFh
push    ax
call    sub_1774F
mov     al, 1Bh
push    ax
call    sub_14C12

locret_14949:
retn
sub_1492F endp



; Attributes: bp-based frame

sub_1494A proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     ds:1BF2h, al
pop     bp
retn    2
sub_1494A endp



; Attributes: bp-based frame

sub_14957 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_0]
mov     si, 82DAh
cmp     word ptr ds:8268h, 0
jz      short loc_14993
push    word ptr ds:8268h
call    sub_401D4
push    dx
push    ax
push    ds
mov     ax, 9877h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_14993
push    word ptr ds:826Ah
xor     ax, ax
push    ax
call    sub_14875
mov     [di], ax
jmp     short loc_14997

loc_14993:
mov     word ptr [di], 0FFFEh

loc_14997:
mov     byte ptr [di+2], 5
add     di, 3
cmp     word ptr ds:8274h, 0
jz      short loc_149FC
mov     [bp+var_2], 2
mov     [bp+var_4], 16h
jmp     short loc_149F6

loc_149B1:
cmp     word ptr [si+8], 0
jz      short loc_149EC
mov     ax, si
add     ax, 0Ah
push    ax
mov     ax, 9877h
push    ax
call    sub_19497
or      ax, ax
jnz     short loc_149EC
cmp     word ptr [si+5Ah], 0FFFFh
jnz     short loc_149D5
push    si
call    sub_12AF3
call    sub_1490A

loc_149D5:
mov     ax, [si+5Ah]
mov     [di], ax
mov     byte ptr [di+2], 4
add     di, 3
mov     al, byte ptr [bp+var_2]
mov     [si+5Dh], al
inc     [bp+var_2]
jmp     short loc_149F0

loc_149EC:
mov     byte ptr [si+5Dh], 0

loc_149F0:
dec     [bp+var_4]
add     si, 5Eh ; '^'

loc_149F6:
cmp     [bp+var_4], 0
jnz     short loc_149B1

loc_149FC:
mov     word ptr [di], 0FFFFh
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_14957 endp



; Attributes: bp-based frame

sub_14A08 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
jmp     short loc_14A2E

loc_14A12:
mov     si, di
add     si, 3
jmp     short loc_14A26

loc_14A19:
mov     ax, [si]
cmp     ax, [di]
jnz     short loc_14A23
mov     word ptr [si], 0FFFEh

loc_14A23:
add     si, 3

loc_14A26:
cmp     word ptr [si], 0FFFFh
jnz     short loc_14A19
add     di, 3

loc_14A2E:
cmp     word ptr [di], 0FFFFh
jnz     short loc_14A12
pop     di
pop     si
pop     bp
retn    2
sub_14A08 endp



; Attributes: bp-based frame

sub_14A39 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, 82DAh
cmp     word ptr ds:8268h, 0
jz      short loc_14A56
mov     bx, [bp+arg_0]
push    word ptr [bx]
call    sub_1488E
mov     ds:826Ah, ax

loc_14A56:
push    [bp+arg_0]
call    sub_14A08
mov     di, 16h
jmp     short loc_14A9C

loc_14A61:
cmp     byte ptr [si+5Dh], 0
jz      short loc_14A98
mov     al, [si+5Dh]
mov     ah, 0
dec     ax
mov     dx, 3
mul     dx
mov     bx, ax
add     bx, [bp+arg_0]
mov     [bp+var_2], bx
cmp     word ptr [bx], 0FFFEh
jnz     short loc_14A85
push    si
call    sub_12C45
jmp     short loc_14A98

loc_14A85:
mov     bx, [bp+var_2]
push    word ptr [bx]
call    sub_1488E
mov     [si+8], ax
mov     bx, [bp+var_2]
mov     ax, [bx]
mov     [si+5Ah], ax

loc_14A98:
dec     di
add     si, 5Eh ; '^'

loc_14A9C:
or      di, di
jnz     short loc_14A61
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_14A39 endp




sub_14AA8 proc near
push    si
push    di
mov     si, 82DAh
mov     di, 16h
jmp     short loc_14AC7

loc_14AB2:
cmp     byte ptr [si+5Dh], 0
jz      short loc_14AC3
mov     word ptr [si+5Ah], 0FFFFh
mov     ax, [si+4]
mov     [si+8], ax

loc_14AC3:
dec     di
add     si, 5Eh ; '^'

loc_14AC7:
or      di, di
jnz     short loc_14AB2
pop     di
pop     si
retn
sub_14AA8 endp




sub_14ACE proc near
push    si
push    di
mov     si, 82DAh
mov     di, 16h
jmp     short loc_14AE8

loc_14AD8:
cmp     byte ptr [si+5Dh], 0
jz      short loc_14AE4
mov     ax, [si+8]
mov     [si+4], ax

loc_14AE4:
dec     di
add     si, 5Eh ; '^'

loc_14AE8:
or      di, di
jnz     short loc_14AD8
pop     di
pop     si
retn
sub_14ACE endp



; Attributes: bp-based frame

sub_14AEF proc near

arg_0= byte ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    ds
push    [bp+arg_2]
mov     al, [bp+arg_0]
mov     ah, 0
push    ax
call    sub_46F25
push    ax
call    sub_46CCE
or      dx, ax
jz      short loc_14B10
mov     ax, 1
jmp     short loc_14B12

loc_14B10:
xor     ax, ax

loc_14B12:
pop     bp
retn    4
sub_14AEF endp



; Attributes: bp-based frame

sub_14B16 proc near

var_6= byte ptr -6
var_5= byte ptr -5
var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 6
push    si
mov     si, ds:8B9Fh
mov     ax, si
les     bx, ds:1C86h
add     bx, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     [bp+var_5], 0

loc_14B33:
mov     ax, si
inc     si
cmp     ax, ds:1C94h
jb      short loc_14B42
mov     [bp+var_6], 0
jmp     short loc_14B74

loc_14B42:
les     bx, [bp+var_4]
inc     word ptr [bp+var_4]
mov     al, es:[bx]
mov     [bp+var_6], al
cmp     al, 20h ; ' '
jge     short loc_14B56
mov     [bp+var_6], 20h ; ' '

loc_14B56:
cmp     [bp+var_6], 20h ; ' '
jnz     short loc_14B62
cmp     [bp+var_5], 20h ; ' '
jz      short loc_14B6C

loc_14B62:
mov     ax, [bp+arg_0]
dec     [bp+arg_0]
or      ax, ax
jz      short loc_14B74

loc_14B6C:
mov     al, [bp+var_6]
mov     [bp+var_5], al
jmp     short loc_14B33

loc_14B74:
mov     al, [bp+var_6]
pop     si
mov     sp, bp
pop     bp
retn    2
sub_14B16 endp



; Attributes: bp-based frame

sub_14B7E proc near

var_9= dword ptr -9
var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     si, ds:1C96h
mov     ax, si
les     bx, ds:1C86h
add     bx, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_14BBA

loc_14B9A:
dec     si
dec     word ptr [bp+var_4]
les     bx, [bp+var_4]
mov     al, es:[bx]
mov     byte ptr [bp+var_9], al
push    [bp+arg_2]
push    word ptr [bp+var_9]
call    sub_14AEF
or      ax, ax
jnz     short loc_14BBA
inc     si
inc     word ptr [bp+var_4]
jmp     short loc_14BBE

loc_14BBA:
or      si, si
jnz     short loc_14B9A

loc_14BBE:
mov     ds:8B9Fh, si
xor     di, di
mov     bx, [bp+arg_4]
push    ds
pop     es
mov     word ptr [bp+var_9+3], es
mov     word ptr [bp+var_9+1], bx
jmp     short loc_14BF8

loc_14BD1:
les     bx, [bp+var_4]
mov     al, es:[bx]
mov     byte ptr [bp+var_9], al
inc     word ptr [bp+var_4]
inc     si
push    [bp+arg_2]
push    word ptr [bp+var_9]
call    sub_14AEF
or      ax, ax
jz      short loc_14C03
mov     al, byte ptr [bp+var_9]
les     bx, [bp+var_9+1]
mov     es:[bx], al
inc     word ptr [bp+var_9+1]
inc     di

loc_14BF8:
cmp     si, ds:1C94h
jnb     short loc_14C03
cmp     di, [bp+arg_0]
jb      short loc_14BD1

loc_14C03:
les     bx, [bp+var_9+1]
mov     byte ptr es:[bx], 0
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_14B7E endp



; Attributes: bp-based frame

sub_14C12 proc near

var_46= byte ptr -46h
arg_0= byte ptr  4

push    bp
mov     bp, sp
sub     sp, 46h
push    si
push    di
lea     ax, [bp+var_46]
push    ax
call    sub_14957
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_46]
mov     word ptr ds:1CB0h, es
mov     ds:1CAEh, bx
cmp     [bp+arg_0], 1Bh
jnz     short loc_14C3E
mov     word ptr ds:1C5Bh, 0FF00h
jmp     short loc_14C5A

loc_14C3E:
cmp     [bp+arg_0], 0FFh
jz      short loc_14C70
mov     al, [bp+arg_0]
cbw
mov     ds:1C5Bh, ax
mov     word ptr ds:1D1Ah, 0
mov     al, [bp+arg_0]
cbw
test    ax, 0FF00h
jz      short loc_14C62

loc_14C5A:
mov     word ptr ds:1D1Ah, 2
jmp     short loc_14C74

loc_14C62:
test    [bp+arg_0], 0FFh
jz      short loc_14C74
mov     word ptr ds:1D1Ah, 1
jmp     short loc_14C74

loc_14C70:
mov     [bp+arg_0], 1Bh

loc_14C74:
inc     word ptr ds:1DE8h

loc_14C78:
cmp     word ptr ds:0BFBAh, 0
jz      short loc_14CAB
cmp     byte ptr ds:942Ch, 0
jnz     short loc_14CAB
push    ds
mov     ax, 942Ch
push    ax
push    ds
mov     ax, 9877h
push    ax
call    sub_46D76
push    ds
mov     ax, 942Ch
push    ax
call    sub_30B00
les     bx, ds:0BFBCh
mov     word ptr ds:1C7Ch, es
mov     ds:1C7Ah, bx

loc_14CAB:
les     bx, ds:1C86h
add     bx, ds:1C94h
mov     byte ptr es:[bx], 1Ah
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
mov     bx, ax
mov     word ptr [bx-73AAh], 0FFFFh
call    sub_1481D
cmp     word ptr ds:4066h, 0
jnz     short loc_14D18
mov     ax, ds:1FF2h
mov     dx, 52h ; 'R'
mul     dx
mov     bx, ax
mov     ax, [bx-71D1h]
mov     ds:1C96h, ax
push    ds
mov     ax, ds:1FF2h
mov     dx, 11h
mul     dx
add     ax, 8D96h
push    ax
push    ds
mov     ax, 1CB5h
push    ax
mov     ax, 11h
push    ax
call    sub_46A2C
mov     ax, ds:1FF2h
mov     dx, 6
mul     dx
mov     bx, ax
mov     ax, [bx+2004h]
mov     dx, ds:1C68h
and     dx, 0FFEFh
or      ax, dx
mov     ds:1C68h, ax

loc_14D18:
push    word ptr ds:4900h
call    sub_1E8C0
mov     di, ax
xor     ax, ax
push    ax
call    sub_1DC5F
mov     ax, 1
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB
mov     ax, ds:1C96h
cmp     ax, ds:1C94h
jbe     short loc_14D41
mov     ax, ds:1C94h
mov     ds:1C96h, ax

loc_14D41:
mov     word ptr ds:1DD3h, 0F2h
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_46238
pop     cx
pop     cx
mov     si, ax
or      si, si
jl      short loc_14D61
mov     bx, si
shl     bx, 1
mov     si, [bx+1E6Fh]

loc_14D61:
and     word ptr ds:1C68h, 0FCFFh
test    word ptr ds:1C98h, 1
jz      short loc_14D8B
lea     ax, [bp+var_46]
push    ax
call    sub_14A39
and     word ptr ds:1C98h, 0FFFEh
mov     word ptr ds:1D2Eh, 0
mov     word ptr ds:99FDh, 1
call    sub_11D3B

loc_14D8B:
cmp     word ptr ds:4066h, 0
jnz     short loc_14D95
call    sub_17CEE

loc_14D95:
push    ds
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_14DAE
jmp     loc_14C78

loc_14DAE:
cmp     [bp+arg_0], 1Bh
jz      short loc_14DED
mov     ax, si
cmp     ax, 0FFFFh
jz      short loc_14DEA
cmp     ax, 1
jz      short loc_14DC2
jmp     short loc_14DED

loc_14DC2:
mov     ax, 8C1Bh
push    ax
mov     ax, 16D7h
push    ax
mov     ax, 20h ; ' '
push    ax
call    sub_14B7E
mov     ax, 2
push    ax
call    sub_1611D
push    ax
call    sub_11EA2
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jl      short loc_14DE8
jmp     loc_14C78

loc_14DE8:
jmp     short loc_14DED

loc_14DEA:
mov     si, 500h

loc_14DED:
xor     ax, ax
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB
push    di
call    sub_1E8C0
xor     ax, ax
push    ax
call    sub_1DC5F
dec     word ptr ds:1DE8h
mov     word ptr ds:1CB0h, 0
mov     word ptr ds:1CAEh, 0
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_14C12 endp




sub_14E1B proc near
push    si
push    di
cmp     word ptr ds:1D20h, 0
jz      short loc_14E2C
mov     ah, 48h ; 'H'
mov     dx, ds:8BA6h
int     67h             ;  - LIM EMS - RESTORE MAPPING CONTEXT
                        ; DX = handle
                        ; Return: AH = status

loc_14E2C:
pop     di
pop     si
retn
sub_14E1B endp




sub_14E2F proc near
push    si
push    di
cmp     word ptr ds:1D20h, 0
jz      short loc_14E40
mov     ah, 47h ; 'G'
mov     dx, ds:8BA6h
int     67h             ;  - LIM EMS - SAVE MAPPING CONTEXT
                        ; DX = handle
                        ; Return: AH = status

loc_14E40:
pop     di
pop     si
retn
sub_14E2F endp




sub_14E43 proc near
push    si
push    di
cmp     word ptr ds:1D20h, 0
jz      short loc_14E65
mov     di, ds:1D22h
xor     si, si
jmp     short loc_14E61

loc_14E54:
mov     bx, si
mov     al, bl
mov     ah, 44h ; 'D'
mov     dx, ds:8BA6h
int     67h             ;  - LIM EMS - MAP MEMORY
                        ; AL = physical page number (0-3)
                        ; BX = logical page number, DX = handle
                        ; Return: AH = status
inc     si

loc_14E61:
cmp     si, di
jb      short loc_14E54

loc_14E65:
pop     di
pop     si
retn
sub_14E43 endp




sub_14E68 proc near
push    si
push    di
cmp     word ptr ds:1D20h, 0
jz      short loc_14E79
mov     ah, 45h ; 'E'
mov     dx, ds:8BA6h
int     67h             ;  - LIM EMS - RELEASE HANDLE AND MEMORY
                        ; DX = EMM handle
                        ; Return: AH = status

loc_14E79:
pop     di
pop     si
retn
sub_14E68 endp



; Attributes: bp-based frame

sub_14E7C proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     di, 1D24h
mov     ax, ds:1C09h
mov     [bp+var_6], ax
mov     [bp+var_8], ax
cmp     word ptr ds:1D20h, 0
jz      short loc_14EBF
xor     bx, bx
mov     es, bx
assume es:nothing
mov     bx, 19Eh
mov     es, word ptr es:[bx]
assume es:nothing
mov     si, 0Ah
jmp     short loc_14EA8

loc_14EA6:
inc     si
inc     di

loc_14EA8:
cmp     si, 12h
jnb     short loc_14EB4
mov     al, es:[si]
cmp     al, [di]
jz      short loc_14EA6

loc_14EB4:
cmp     si, 12h
jz      short loc_14EC4
mov     word ptr ds:1D20h, 0

loc_14EBF:
mov     [bp+var_8], 0

loc_14EC4:
cmp     word ptr ds:1D20h, 0
jz      short loc_14F15
mov     ah, 42h ; 'B'
int     67h             ;  - LIM EMS - GET NUMBER OF PAGES
                        ; Return: AH = 00h function successful, BX = number of unallocated pages
                        ; DX = total number of pages
                        ; AH = error code
mov     ax, bx
xor     dx, dx
mov     cl, 0Eh
call    sub_1EDF6
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
cmp     dx, [bp+var_2]
jb      short loc_14EFE
ja      short loc_14EF2
cmp     ax, [bp+var_4]
jbe     short loc_14EFE

loc_14EF2:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax

loc_14EFE:
mov     ax, [bp+var_8]
xor     dx, dx
cmp     dx, [bp+arg_2]
jb      short loc_14F15
ja      short loc_14F0F
cmp     ax, [bp+arg_0]
jbe     short loc_14F15

loc_14F0F:
mov     ax, [bp+arg_0]
mov     [bp+var_8], ax

loc_14F15:
call    sub_1BEA3
mov     cx, ax
mov     ax, [bp+var_6]
cmp     ax, cx
jbe     short loc_14F24
mov     [bp+var_6], cx

loc_14F24:
mov     ax, [bp+var_6]
cmp     ax, [bp+var_8]
jbe     short loc_14F37
mov     ds:1C09h, ax
mov     word ptr ds:1D20h, 0
jmp     short loc_14F66

loc_14F37:
mov     ax, [bp+var_8]
mov     ds:1C09h, ax
mov     bx, ax
dec     bx
mov     cl, 0Eh
shr     bx, cl
inc     bx
mov     ah, 43h ; 'C'
int     67h             ;  - LIM EMS - GET HANDLE AND ALLOCATE MEMORY
                        ; BX = number of logical pages to allocate
                        ; Return: AH = status
mov     ds:1D22h, bx
mov     ds:8BA6h, dx
call    sub_14E2F
call    sub_14E43
mov     ah, 41h ; 'A'
int     67h             ;  - LIM EMS - GET PAGE FRAME SEGMENT
                        ; Return: AH = 00h function successful, BX = segment of page frame
                        ; AH = error code
mov     dx, bx
xor     ax, ax
mov     ds:8BA3h, dx
mov     ds:8BA1h, ax

loc_14F66:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_14E7C endp



; Attributes: bp-based frame

sub_14F6E proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
call    sub_19A67
mov     ax, [bp+arg_2]
pop     bp
retn    4
sub_14F6E endp



; Attributes: bp-based frame

sub_14F85 proc near

var_50= byte ptr -50h
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 50h
push    si
push    di
mov     di, [bp+arg_2]
mov     si, 0C63h
mov     bx, [bp+arg_4]
cmp     byte ptr [bx], 0
jz      short loc_14F9F
mov     si, bx
jmp     short loc_14FEF

loc_14F9F:
push    ds
push    di
call    sub_105F1
or      ax, ax
jz      short loc_14FAC
mov     si, di
jmp     short loc_14FEF

loc_14FAC:
cmp     byte ptr ds:2C7Ch, 0
jz      short loc_14FCC
push    ds
lea     ax, [bp+var_50]
push    ax
push    di
call    sub_19458
push    ax
mov     ax, 2C7Ch
push    ax
call    sub_14F6E
push    ax
call    sub_105F1
or      ax, ax
jnz     short loc_14FEC

loc_14FCC:
cmp     byte ptr ds:991Bh, 0
jz      short loc_14FEF
push    ds
lea     ax, [bp+var_50]
push    ax
push    di
call    sub_19458
push    ax
mov     ax, 991Bh
push    ax
call    sub_14F6E
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_14FEF

loc_14FEC:
lea     si, [bp+var_50]

loc_14FEF:
push    [bp+arg_0]
push    si
call    sub_19458
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_14F85 endp




sub_14FFE proc near
push    si
mov     si, 1
cmp     word ptr ds:1D2Eh, 0
jz      short loc_1500C
jmp     loc_1507D

loc_1500C:
mov     word ptr ds:1DD3h, 127h
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
mov     ax, 15F7h
push    ax
mov     ax, 9877h
push    ax
mov     ax, 0FFFFh
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 5
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 12h
cbw
cmp     ax, 1Bh
jz      short loc_1507B
cmp     ax, 4Eh ; 'N'
jz      short loc_1505E
cmp     ax, 59h ; 'Y'
jz      short loc_1504D
jmp     short loc_1507D

loc_1504D:
call    sub_153A6
cmp     ax, 1
jnz     short loc_1505A
mov     si, 1
jmp     short loc_1505C

loc_1505A:
xor     si, si

loc_1505C:
jmp     short loc_1507D

loc_1505E:
mov     ax, ds:0BFBCh
or      ax, ds:0BFBEh
jz      short loc_15070
les     bx, ds:0BFBCh
mov     word ptr es:[bx], 0FFFFh

loc_15070:
call    sub_147A2
call    sub_14911
call    sub_14AA8
jmp     short loc_1507D

loc_1507B:
xor     si, si

loc_1507D:
mov     ax, si
pop     si
retn
sub_14FFE endp



; Attributes: bp-based frame

sub_15081 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
xor     si, si
call    sub_14FFE
or      ax, ax
jnz     short loc_15095
jmp     loc_15129

loc_15095:
mov     word ptr ds:1C96h, 0FFFFh
mov     word ptr ds:1C98h, 0
call    sub_11C33
cmp     byte ptr [di], 0
jnz     short loc_150AC
jmp     loc_1516C

loc_150AC:
push    ds
push    di
call    sub_105F1
or      ax, ax
jnz     short loc_150B8
jmp     loc_1514D

loc_150B8:
mov     word ptr ds:40DAh, 9
mov     ax, 0FFFFh
push    ax
call    sub_156D7
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_150E6
dec     word ptr ds:1DE8h
jmp     loc_1516C

loc_150E6:
mov     ax, ds:1C8Ah
xor     dx, dx
cmp     dx, ds:37Ah
ja      short loc_1512F
jnz     short loc_150F9
cmp     ax, ds:378h
ja      short loc_1512F

loc_150F9:
mov     word ptr ds:1DD3h, 128h
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
mov     ax, 1684h
push    ax
push    di
mov     ax, 0FFFFh
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 5
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 12h
cmp     al, 59h ; 'Y'
jz      short loc_1512F

loc_15129:
mov     ax, 0FFFFh
jmp     loc_151B1

loc_1512F:
push    ds
push    di
push    word ptr ds:1C8Ah
push    ds
mov     ax, 1C94h
push    ax
push    word ptr ds:1C88h
push    word ptr ds:1C86h
call    sub_102E5
mov     si, ax
dec     word ptr ds:1DE8h
jmp     short loc_15150

loc_1514D:
mov     si, 1

loc_15150:
cmp     si, 1
jnz     short loc_1515D
mov     word ptr ds:1C94h, 0
jmp     short loc_15190

loc_1515D:
cmp     si, 2
jnz     short loc_15170
mov     ax, 1679h
push    ax
xor     ax, ax
push    ax
call    sub_19065

loc_1516C:
xor     ax, ax
jmp     short loc_151B1

loc_15170:
mov     ax, ds:1C8Ah
xor     dx, dx
cmp     dx, ds:37Ah
ja      short loc_1518C
jnz     short loc_15183
cmp     ax, ds:378h
ja      short loc_1518C

loc_15183:
mov     ax, ds:1C8Ah
add     ax, 0FFFEh
mov     ds:1C94h, ax

loc_1518C:
push    di
call    sub_11D26

loc_15190:
xor     si, si
jmp     short loc_151A5

loc_15194:
les     bx, ds:1C86h
cmp     byte ptr es:[bx+si], 1Ah
jnz     short loc_151A4
mov     ds:1C94h, si
jmp     short loc_151AB

loc_151A4:
inc     si

loc_151A5:
cmp     si, ds:1C94h
jb      short loc_15194

loc_151AB:
call    sub_14ACE
mov     ax, 1

loc_151B1:
pop     di
pop     si
pop     bp
retn    2
sub_15081 endp



; Attributes: bp-based frame

sub_151B7 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
call    sub_19C1B
mov     ax, 91C8h
push    ax
mov     ax, 1088h
push    ax
call    sub_19458
push    [bp+arg_0]
call    sub_19C39
pop     bp
retn    4
sub_151B7 endp



; Attributes: bp-based frame

sub_151D5 proc near

var_52= word ptr -52h
var_50= byte ptr -50h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 52h
push    si
push    di
mov     si, [bp+arg_0]
mov     word ptr ds:40DAh, 8
mov     ax, 0FFFFh
push    ax
call    sub_156D7
cmp     byte ptr [si], 0
jnz     short loc_151F8
mov     di, 0CA4h
jmp     loc_1527F

loc_151F8:
push    ds
push    si
call    sub_103E8
test    ax, 1
jz      short loc_15208
mov     di, 0D03h
jmp     loc_1527F

loc_15208:
cmp     word ptr ds:23BFh, 0
jz      short loc_15229
push    si
lea     ax, [bp+var_50]
push    ax
call    sub_151B7
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_10394
push    ss
lea     ax, [bp+var_50]
push    ax
push    ds
push    si
call    sub_103BD

loc_15229:
push    ds
push    si
mov     ax, ds:1C94h
inc     ax
push    ax
push    word ptr ds:1C88h
push    word ptr ds:1C86h
call    sub_10332
mov     [bp+var_52], ax
cmp     ax, 1
jnz     short loc_15248
mov     di, 0CCDh
jmp     short loc_1527F

loc_15248:
cmp     [bp+var_52], 2
jnz     short loc_15253
mov     di, 0CE1h
jmp     short loc_1527F

loc_15253:
cmp     [bp+var_52], 3
jnz     short loc_1525E
mov     di, 0CF2h
jmp     short loc_1527F

loc_1525E:
cmp     word ptr ds:1D2Eh, 0
jnz     short loc_15270
push    si
call    sub_11C40
push    dx
push    ax
call    sub_11CE4
jmp     short loc_15274

loc_15270:
push    si
call    sub_11D26

loc_15274:
call    sub_17CEE
call    sub_14911
mov     ax, 1
jmp     short loc_15288

loc_1527F:
push    di
xor     ax, ax
push    ax
call    sub_19065
xor     ax, ax

loc_15288:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_151D5 endp



; Attributes: bp-based frame

sub_15290 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
jmp     short loc_1529A

loc_15299:
inc     si

loc_1529A:
cmp     byte ptr [si], 20h ; ' '
jz      short loc_15299
cmp     byte ptr [si], 0
jnz     short loc_152A9
mov     ax, 1
jmp     short loc_152E6

loc_152A9:
push    si
call    sub_19C1B
test    ax, 0Eh
jnz     short loc_152C4
push    word ptr [si]
call    sub_1044A
or      ax, ax
jz      short loc_152C0
mov     ax, 2
jmp     short loc_152C2

loc_152C0:
xor     ax, ax

loc_152C2:
jmp     short loc_152E6

loc_152C4:
push    ds
push    si
call    sub_104B9
or      ax, ax
jnz     short loc_152DF
cmp     byte ptr [si], 0
jz      short loc_152E4
cmp     byte ptr [si+1], 3Ah ; ':'
jnz     short loc_152E4
push    word ptr [si]
call    sub_1044A
jmp     short loc_152E4

loc_152DF:
mov     ax, 2
jmp     short loc_152E6

loc_152E4:
xor     ax, ax

loc_152E6:
pop     si
pop     bp
retn    2
sub_15290 endp



; Attributes: bp-based frame

sub_152EB proc near

var_50= byte ptr -50h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 50h
push    si
push    di
push    [bp+arg_0]
call    sub_15081
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jnz     short loc_15307
xor     ax, ax
jmp     loc_1539E

loc_15307:
or      si, si
jnz     short loc_15333
mov     word ptr ds:1C94h, 0
mov     al, 0
push    ax
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_10534
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E50h
push    ax
call    sub_19483
lea     ax, [bp+var_50]
push    ax
call    sub_17D70
mov     si, 1
jmp     short loc_15341

loc_15333:
push    ss
lea     ax, [bp+var_50]
push    ax
push    ds
push    [bp+arg_0]
call    sub_46D76

loc_15341:
mov     ax, 9877h
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19C57
push    ds
mov     ax, 9877h
push    ax
push    word ptr ds:1C6Ch
push    word ptr ds:1C6Ah
call    sub_463CE
add     sp, 8
call    sub_17DD8
mov     ax, 0FFFFh
push    ax
call    sub_1774F
call    sub_147A2
and     word ptr ds:1C68h, 0FFDFh
mov     di, ds:4066h
mov     word ptr ds:4066h, 0
xor     ax, ax
push    ax
call    sub_1B056
or      ax, ax
jz      short loc_15392
mov     al, 1Bh
push    ax
call    sub_14C12
jmp     short loc_15398

loc_15392:
xor     ax, ax
push    ax
call    sub_1AE6D

loc_15398:
mov     ds:4066h, di
mov     ax, si

loc_1539E:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_152EB endp



; Attributes: bp-based frame

sub_153A6 proc near

var_50= byte ptr -50h

push    bp
mov     bp, sp
sub     sp, 50h
push    si
mov     ax, 9877h
push    ax
call    sub_19C1B
mov     ax, 9170h
push    ax
mov     ax, 1D30h
push    ax
call    sub_19497
or      ax, ax
jz      short loc_153C6
jmp     loc_1546F

loc_153C6:
mov     ax, 91C8h
push    ax
mov     ax, 0E56h
push    ax
call    sub_19497
or      ax, ax
jz      short loc_153D8
jmp     loc_1546F

loc_153D8:
lea     ax, [bp+var_50]
push    ax
mov     ax, 9877h
push    ax
call    sub_19458
mov     word ptr ds:1DD3h, 129h
mov     ax, 15ACh
push    ax
lea     ax, [bp+var_50]
push    ax
mov     ax, 7
push    ax
mov     ax, 3
push    ax
mov     ax, 50h ; 'P'
push    ax
mov     ax, 28h ; '('
push    ax
call    sub_18E6D
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_15423
lea     ax, [bp+var_50]
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_15431

loc_15423:
cmp     si, 0FFFFh
jnz     short loc_1542C
xor     ax, ax
jmp     short loc_1542E

loc_1542C:
mov     ax, si

loc_1542E:
jmp     loc_154E1

loc_15431:
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_1544D
lea     ax, [bp+var_50]
push    ax
call    sub_1913E
or      ax, ax
jnz     short loc_1544D
xor     ax, ax
jmp     loc_154E1

loc_1544D:
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19C57
push    ss
lea     ax, [bp+var_50]
push    ax
push    word ptr ds:1C6Ch
push    word ptr ds:1C6Ah
call    sub_463CE
add     sp, 8

loc_1546F:
push    word ptr ds:1C6Ah
call    sub_151D5
or      ax, ax
jz      short loc_154C9
mov     ax, ds:0BFBCh
or      ax, ds:0BFBEh
jz      short loc_15488
call    sub_308AB

loc_15488:
mov     ax, 9877h
push    ax
push    word ptr ds:1C6Ah
call    sub_19497
or      ax, ax
jz      short loc_154B4
push    ds
mov     ax, 9877h
push    ax
push    word ptr ds:1C6Ch
push    word ptr ds:1C6Ah
call    sub_46D76
mov     ax, 98C7h
push    ax
mov     ax, 9877h
push    ax
call    sub_19458

loc_154B4:
call    sub_17DD8
mov     ax, 0FFFFh
push    ax
call    sub_17720
call    sub_1492F
call    sub_14ACE
mov     ax, 1
jmp     short loc_154E1

loc_154C9:
push    ds
mov     ax, 9877h
push    ax
push    word ptr ds:1C6Ch
push    word ptr ds:1C6Ah
call    sub_463CE
add     sp, 8
mov     ax, 0FFFFh

loc_154E1:
pop     si
mov     sp, bp
pop     bp
retn
sub_153A6 endp



; Attributes: bp-based frame

sub_154E6 proc near

var_50= byte ptr -50h

push    bp
mov     bp, sp
sub     sp, 50h
push    si
mov     ax, 15BCh
push    ax
mov     ax, 4730h
push    ax
mov     ax, 50h ; 'P'
push    ax
call    sub_1917C
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_15543
mov     ax, 4730h
push    ax
call    sub_1943A
lea     ax, [bp+var_50]
push    ax
mov     ax, 4730h
push    ax
xor     ax, ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_15543
lea     ax, [bp+var_50]
push    ax
call    sub_152EB
or      ax, ax
jnz     short loc_15535
mov     si, 0FFFFh
jmp     short loc_15543

loc_15535:
mov     byte ptr ds:98C7h, 0
xor     ax, ax
push    ax
call    sub_1AE6D
mov     si, 600h

loc_15543:
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn
sub_154E6 endp



; Attributes: bp-based frame

sub_1554A proc near

var_A2= word ptr -0A2h
var_A0= byte ptr -0A0h
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0A2h
push    si
push    di
mov     ax, [bp+arg_2]
mov     dx, 11h
mul     dx
mov     bx, ax
mov     di, [bx+48FCh]
mov     al, [di+3]
mov     ah, 0
mov     [bp+var_A2], ax
lea     ax, [bp+var_A0]
push    ax
push    [bp+arg_0]
call    sub_19458
mov     [bp+arg_0], ax

loc_15578:
push    [bp+var_A2]
xor     ax, ax
push    ax
call    sub_1D98E
push    [bp+arg_0]
mov     al, 0FFh
push    ax
call    sub_194AB
mov     si, ax
or      si, si
jnz     short loc_1559A
push    [bp+arg_0]
call    sub_1EB1F
jmp     loc_15615

loc_1559A:
mov     byte ptr [si], 0
inc     si
push    [bp+arg_0]
call    sub_1EB1F
mov     al, [si]
cbw
dec     ax              ; switch 6 cases
cmp     ax, 5
ja      short def_155B1 ; jumptable 000155B1 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_155B1[bx] ; switch jump
jpt_155B1 dw offset loc_155C2 ; jump table for switch statement
dw offset loc_155CC
dw offset loc_155D7
dw offset loc_155E2
dw offset loc_155ED
dw offset loc_155F8

loc_155C2:              ; jumptable 000155B1 case 1
mov     al, [di]
mov     ah, 0
mov     [bp+var_A2], ax
jmp     short loc_15615

loc_155CC:              ; jumptable 000155B1 case 2
mov     al, [di+1]
mov     ah, 0
mov     [bp+var_A2], ax
jmp     short loc_15615

loc_155D7:              ; jumptable 000155B1 case 3
mov     al, [di+2]
mov     ah, 0
mov     [bp+var_A2], ax
jmp     short loc_15615

loc_155E2:              ; jumptable 000155B1 case 4
mov     al, [di+3]
mov     ah, 0
mov     [bp+var_A2], ax
jmp     short loc_15615

loc_155ED:              ; jumptable 000155B1 case 5
mov     al, [di+4]
mov     ah, 0
mov     [bp+var_A2], ax
jmp     short loc_15615

loc_155F8:              ; jumptable 000155B1 case 6
mov     al, [di+5]
mov     ah, 0
mov     [bp+var_A2], ax
jmp     short loc_15615

def_155B1:              ; jumptable 000155B1 default case
test    byte ptr [si], 80h
jz      short loc_15615
mov     al, [si]
cbw
and     ax, 7Fh
push    ax
xor     ax, ax
push    ax
call    sub_1DC08

loc_15615:
mov     ax, si
inc     ax
mov     [bp+arg_0], ax
or      si, si
jz      short loc_15629
mov     bx, ax
cmp     byte ptr [bx], 0
jz      short loc_15629
jmp     loc_15578

loc_15629:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1554A endp



; Attributes: bp-based frame

sub_15631 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
push    word ptr ds:4966h
call    sub_1E8C0
mov     di, ax
mov     ax, 9
push    ax
mov     ax, ds:1D3Ch
and     ax, 40h
push    ax
call    sub_1ADEF
mov     ax, 8
push    ax
mov     ax, ds:1D3Ch
and     ax, 20h
push    ax
call    sub_1ADEF
mov     ax, 7
push    ax
mov     ax, ds:1D3Ch
and     ax, 10h
push    ax
call    sub_1ADEF
mov     bx, ds:4962h
mov     al, [bx+3]
mov     ah, 0
push    ax
xor     ax, ax
push    ax
call    sub_1D98E
call    sub_1DA26
mov     ax, 6
push    ax
push    [bp+arg_0]
call    sub_1554A
mov     bx, ds:4962h
mov     al, [bx+4]
mov     ah, 0
mov     si, ax
mov     ax, 9
push    ax
call    sub_1ACE5
mov     ax, 1
push    ax
push    ax
mov     ax, 14B2h
push    ax
push    si
call    sub_1EB3C
mov     ax, 8
push    ax
call    sub_1ACE5
mov     ax, 1
push    ax
push    ax
mov     ax, 14B9h
push    ax
push    si
call    sub_1EB3C
mov     ax, 7
push    ax
call    sub_1ACE5
mov     ax, 1
push    ax
push    ax
mov     ax, 14BFh
push    ax
push    si
call    sub_1EB3C
push    di
call    sub_1E8C0
pop     di
pop     si
pop     bp
retn    2
sub_15631 endp



; Attributes: bp-based frame

sub_156D7 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
cmp     byte ptr ds:1D40h, 0
jnz     short loc_156E6
jmp     loc_1576D

loc_156E6:
call    sub_107B7
mov     si, ax
xor     si, ds:1D3Ch
xor     ds:1D3Ch, si
test    si, 70h
jz      short loc_156FF
mov     word ptr ds:1D38h, 0FFFFh

loc_156FF:
mov     word ptr ds:1D3Ah, 0
test    word ptr ds:1D3Ch, 3
jz      short loc_15713
mov     word ptr ds:1D3Ah, 1

loc_15713:
test    word ptr ds:1D3Ch, 4
jz      short loc_15721
mov     word ptr ds:1D3Ah, 2

loc_15721:
test    word ptr ds:1D3Ch, 8
jz      short loc_1572F
mov     word ptr ds:1D3Ah, 3

loc_1572F:
mov     bx, ds:40DAh
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     ax, ds:1D3Ah
shl     ax, 1
add     bx, ax
mov     di, [bx+40DCh]
cmp     di, ds:1D38h
jnz     short loc_15751
cmp     [bp+arg_0], 3E7h
jnz     short loc_1576D

loc_15751:
cmp     word ptr ds:1D3Eh, 0
jz      short loc_1575D
mov     ax, ds:1D3Eh
jmp     short loc_15769

loc_1575D:
mov     bx, di
mov     ds:1D38h, bx
shl     bx, 1
mov     ax, [bx+418Ch]

loc_15769:
push    ax
call    sub_15631

loc_1576D:
pop     di
pop     si
pop     bp
retn    2
sub_156D7 endp



; Attributes: bp-based frame

sub_15773 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     word ptr ds:1D3Eh, 0
jnz     short loc_15787
mov     ax, [bp+arg_0]
mov     ds:1D3Eh, ax
push    ax
call    sub_15631

loc_15787:
pop     bp
retn    2
sub_15773 endp



; Attributes: bp-based frame

sub_1578B proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     ds:1D41h, ax
pop     bp
retn    2
sub_1578B endp




sub_15798 proc near
push    si
mov     si, ds:1D41h
mov     word ptr ds:1D41h, 0
mov     ax, si
pop     si
retn
sub_15798 endp




sub_157A7 proc near
push    si
push    di
mov     ax, 0FFFFh
push    ax
call    sub_156D7
mov     byte ptr ds:8BE8h, 0
cmp     word ptr ds:1D41h, 0
jz      short loc_157C2
mov     ax, ds:1D41h
jmp     loc_1584F

loc_157C2:
call    sub_107E7
mov     di, ax
mov     ax, di
or      ax, ax
jnz     short loc_157D0
jmp     loc_1584D

loc_157D0:
push    di
call    sub_11EA2
mov     si, ax
cmp     byte ptr ds:1D40h, 0
jz      short loc_15823
cmp     si, 0FFFBh
jz      short loc_157E7
cmp     si, 0FFFAh
jnz     short loc_15804

loc_157E7:
call    sub_1090A
cmp     si, 0FFFBh
jnz     short loc_157F3
xor     ax, ax
jmp     short loc_157F6

loc_157F3:
mov     ax, 1

loc_157F6:
push    ax
call    sub_1611D
mov     di, ax
mov     ax, di
push    ax
call    sub_1578B
jmp     short loc_1584D

loc_15804:
cmp     si, 0FFFEh
jnz     short loc_15823
call    sub_1090A
call    sub_165B3
mov     di, ax
mov     ax, di
push    ax
call    sub_11EA2
or      ax, ax
jle     short loc_1581D
xor     di, di

loc_1581D:
push    di
call    sub_1578B
jmp     short loc_1584D

loc_15823:
cmp     si, 0Fh
jz      short loc_15841
cmp     si, 11h
jz      short loc_15841
cmp     si, 10h
jz      short loc_15841
cmp     si, 14h
jz      short loc_15841
cmp     si, 13h
jz      short loc_15841
cmp     si, 12h
jnz     short loc_1584D

loc_15841:
call    sub_1090A
xor     di, di
push    si
call    sub_156D7
jmp     loc_157C2

loc_1584D:
mov     ax, di

loc_1584F:
pop     di
pop     si
retn
sub_157A7 endp




sub_15852 proc near
call    sub_157A7
or      ax, ax
jz      short sub_15852
cmp     word ptr ds:1D41h, 0
jz      short loc_15865
call    sub_15798
jmp     short locret_1586E

loc_15865:
mov     word ptr ds:1D3Eh, 0
call    sub_1090A

locret_1586E:
retn
sub_15852 endp



; Attributes: bp-based frame

sub_1586F proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
and     ax, 0FFFFh
and     dx, 0FFh
mov     [bp+var_2], dx
mov     [bp+var_4], ax
and     ax, 0
and     dx, 10h
or      dx, ax
jz      short loc_158AA
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
or      ax, 0
or      dx, 0FF00h
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_158AA:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     sp, bp
pop     bp
retn    4
sub_1586F endp



; Attributes: bp-based frame

sub_158B6 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    word ptr ds:1D53h
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_10792
pop     bp
retn    4
sub_158B6 endp



; Attributes: bp-based frame

sub_158CD proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    word ptr ds:1D53h
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 1
push    ax
call    sub_10792
pop     bp
retn    4
sub_158CD endp



; Attributes: bp-based frame

sub_158E5 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    word ptr ds:1D53h
push    ds
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_10740
pop     bp
retn    4
sub_158E5 endp




sub_158FA proc near
push    word ptr ds:1D53h
push    ds
mov     ax, 8BF5h
push    ax
mov     ax, 3
push    ax
call    sub_10740
or      ax, ax
jz      short loc_15913
mov     ax, 1
jmp     short locret_15915

loc_15913:
xor     ax, ax

locret_15915:
retn
sub_158FA endp



; Attributes: bp-based frame

sub_15916 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
xor     si, si
jmp     short loc_15942

loc_1591E:
call    sub_158FA
or      ax, ax
jz      short loc_15946
mov     al, ds:8BF5h
cbw
cmp     ax, [bp+arg_0]
jnz     short loc_15933
mov     si, 1
jmp     short loc_15935

loc_15933:
xor     si, si

loc_15935:
or      si, si
jnz     short loc_15942
mov     ax, ds:8BF6h
cwd
push    dx
push    ax
call    sub_158CD

loc_15942:
or      si, si
jz      short loc_1591E

loc_15946:
mov     ax, si
pop     si
pop     bp
retn    2
sub_15916 endp




sub_1594D proc near
push    word ptr ds:1D53h
call    sub_10728
retn
sub_1594D endp



; Attributes: bp-based frame

sub_15955 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
xor     ax, ax
push    ax
mov     ax, 0C52h
push    ax
push    [bp+arg_0]
mov     ax, 0FFFFh
push    ax
push    [bp+arg_2]
mov     ax, 0C7Fh
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 14h
push    ax
mov     ax, 0Dh
push    ax
call    sub_18EAD
mov     sp, bp
pop     bp
retn    4
sub_15955 endp



; Attributes: bp-based frame

sub_15982 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, [bp+arg_0]
mov     di, ds:8BEBh
mov     ax, di
mov     [bp+var_4], ax
mov     [bp+var_2], ax
mov     ax, 0C63h
push    ax
push    si
push    si
call    sub_14F85
cmp     byte ptr [si], 0
jnz     short loc_159AF
push    si
mov     ax, 0D15h
push    ax
call    sub_19458

loc_159AF:
push    ds
push    si
xor     ax, ax
push    ax
call    sub_106E6
mov     ds:1D53h, ax
or      ax, ax
jg      short loc_159C9
mov     ax, 0E1Fh
push    ax
push    si
call    sub_15955
jmp     loc_15A6A

loc_159C9:
push    word ptr ds:1D53h
push    ds
push    [bp+var_4]
mov     ax, 0D20h
push    ax
call    sub_19448
inc     ax
inc     ax
push    ax
call    sub_10740
push    [bp+var_4]
mov     ax, 0D20h
push    ax
call    sub_19497
or      ax, ax
jnz     short loc_15A0E
push    word ptr ds:1D53h
push    ds
push    [bp+var_2]
mov     ax, 1D44h
push    ax
call    sub_19448
inc     ax
push    ax
call    sub_10740
push    [bp+var_2]
mov     ax, 1D44h
push    ax
call    sub_19497
or      ax, ax
jz      short loc_15A18

loc_15A0E:
mov     ax, 14C8h
push    ax
push    si
call    sub_15955
jmp     short loc_15A6A

loc_15A18:
push    word ptr ds:1D53h
push    ds
push    di
mov     ax, 2
push    ax
call    sub_10740
cmp     byte ptr [di], 4
jz      short loc_15A34
mov     ax, 14DBh
push    ax
push    si
call    sub_15955
jmp     short loc_15A6A

loc_15A34:
xor     ax, ax
push    ax
call    sub_15916
or      ax, ax
jz      short loc_15A6A
mov     ax, 8BFAh
push    ax
push    word ptr ds:8BF6h
call    sub_158E5
mov     ax, 5
push    ax
call    sub_15916
or      ax, ax
jz      short loc_15A6A
mov     ax, 8C06h
push    ax
push    word ptr ds:8BF6h
call    sub_158E5
mov     ax, 1
push    ax
call    sub_15916
or      ax, ax
jnz     short loc_15A6E

loc_15A6A:
xor     ax, ax
jmp     short loc_15AA8

loc_15A6E:
push    word ptr ds:1D53h
push    ds
mov     ax, 8C42h
push    ax
mov     ax, 2
push    ax
call    sub_10740
xor     ax, ax
push    ax
push    ax
call    sub_158CD
mov     ds:8C40h, dx
mov     ds:8C3Eh, ax
mov     ax, ds:8C42h
mov     dx, 3
mul     dx
xor     dx, dx
add     ax, ds:8C3Eh
adc     dx, ds:8C40h
mov     ds:8C17h, dx
mov     ds:8C15h, ax
mov     ax, 1

loc_15AA8:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_15982 endp



; Attributes: bp-based frame

sub_15AB0 proc near

var_1= byte ptr -1
arg_0= byte ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
mov     ax, [bp+arg_2]
mov     dx, 9
mul     dx
mov     si, ax
add     si, ds:8BEDh
mov     al, [si+2]
sub     al, [si+1]
inc     al
mov     [bp+var_1], al
mov     al, [si+1]
cbw
push    ax
mov     al, [si]
cbw
push    ax
lea     ax, [bp+var_1]
push    ax
mov     al, [bp+arg_0]
mov     ah, 0
mov     cl, 8
shl     ax, cl
or      ax, 8
push    ax
call    sub_1EB6C
pop     si
mov     sp, bp
pop     bp
retn    4
sub_15AB0 endp



; Attributes: bp-based frame

sub_15AF4 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     bx, ds:1D55h
push    word ptr [bx]
mov     bx, ds:8C46h
push    word ptr [bx+4]
call    sub_15AB0
dec     [bp+arg_0]
mov     ax, [bp+arg_0]
mov     bx, ds:1D55h
mov     [bx], ax
push    ax
mov     bx, ds:8C46h
push    word ptr [bx+2]
call    sub_15AB0
pop     bp
retn    2
sub_15AF4 endp



; Attributes: bp-based frame

sub_15B22 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     bx, [bp+arg_0]
xor     word ptr [bx], 1
test    word ptr [bx], 1
jz      short loc_15B3D
mov     bx, [bp+arg_2]
mov     bx, [bx]
mov     al, [bx]
and     al, 0Fh
jmp     short loc_15B4E

loc_15B3D:
mov     bx, [bp+arg_2]
mov     ax, [bx]
inc     word ptr [bx]
mov     bx, ax
mov     al, [bx]
mov     cl, 4
sar     al, cl
and     al, 0Fh

loc_15B4E:
pop     bp
retn    4
sub_15B22 endp



; Attributes: bp-based frame

sub_15B52 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     si, [bp+arg_2]
cmp     word ptr ds:1DD5h, 0
jz      short loc_15B6D
dec     word ptr ds:1DD5h
mov     al, ds:8BEAh
jmp     short loc_15BDE

loc_15B6D:
push    si
push    di
call    sub_15B22
mov     ds:8BEAh, al
cmp     al, 0Fh
jnz     short loc_15B8F
push    si
push    di
call    sub_15B22
push    ax
push    si
push    di
call    sub_15B22
mov     cl, 4
shl     al, cl
mov     dl, al
pop     ax
or      al, dl
jmp     short loc_15BDE

loc_15B8F:
cmp     byte ptr ds:8BEAh, 0Eh
jnz     short loc_15BD4
push    si
push    di
call    sub_15B22
cbw
inc     ax
mov     ds:1DD5h, ax
push    si
push    di
call    sub_15B22
mov     ds:8BEAh, al
cmp     al, 0Fh
jnz     short loc_15BC5
push    si
push    di
call    sub_15B22
push    ax
push    si
push    di
call    sub_15B22
mov     cl, 4
shl     al, cl
mov     dl, al
pop     ax
or      al, dl
mov     ds:8BEAh, al
jmp     short loc_15BDE

loc_15BC5:
mov     al, ds:8BEAh
cbw
mov     bx, ax
mov     al, [bx-73F9h]
mov     ds:8BEAh, al
jmp     short loc_15BDE

loc_15BD4:
mov     al, ds:8BEAh
cbw
mov     bx, ax
mov     al, [bx-73F9h]

loc_15BDE:
pop     di
pop     si
pop     bp
retn    4
sub_15B52 endp



; Attributes: bp-based frame

sub_15BE4 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_6]
mov     ax, [bp+arg_4]
sub     ax, si
jz      short loc_15C10
mov     bx, [bp+arg_4]
sub     bx, si
add     bx, [bp+arg_0]
mov     byte ptr [bx], 0
mov     al, ds:8C02h
cbw
add     ax, si
inc     ax
push    ax
mov     ax, [bp+arg_2]
inc     ax
push    ax
push    [bp+arg_0]
call    sub_1ED32

loc_15C10:
pop     si
pop     bp
retn    8
sub_15BE4 endp



; Attributes: bp-based frame

sub_15C15 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
xor     si, si
cmp     ds:8C3Ch, si
jz      short loc_15C30
cmp     ds:8C44h, si
jz      short loc_15C30
mov     si, 14FBh
jmp     short loc_15C46

loc_15C30:
cmp     word ptr ds:8C3Ch, 0
jz      short loc_15C3C
mov     si, 1505h
jmp     short loc_15C46

loc_15C3C:
cmp     word ptr ds:8C44h, 0
jz      short loc_15C46
mov     si, 1500h

loc_15C46:
mov     bx, ds:1D51h
mov     al, [bx+0Ch]
mov     ah, 0
push    ax
mov     bx, [bx]
mov     al, [bx+1]
mov     ah, 0
push    ax
call    sub_1DA05
or      si, si
jz      short loc_15C8C
mov     al, ds:8C00h
cbw
mov     di, ax
inc     di
mov     al, ds:8C01h
cbw
mov     [bp+var_2], ax
push    ds
push    si
call    sub_46E60
mov     dx, [bp+var_2]
sub     dx, ax
mov     [bp+var_4], dx
push    dx
push    di
mov     ax, [bp+var_2]
dec     ax
push    ax
push    di
push    si
mov     ax, 1
push    ax
call    sub_1D8CC

loc_15C8C:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_15C15 endp



; Attributes: bp-based frame

sub_15C92 proc near

var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_53= byte ptr -53h
var_52= byte ptr -52h
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 5Ah
push    si
push    di
mov     [bp+var_5A], 0
mov     [bp+var_58], 0
xor     si, si
mov     [bp+var_56], si
call    sub_1DA26
mov     ax, ds:1DCFh
mov     dx, 6
mul     dx
mov     bx, ax
push    word ptr [bx+1D59h]
push    word ptr [bx+1D57h]
call    sub_158B6
call    sub_158FA
push    word ptr ds:8BEBh
push    word ptr ds:8BF6h
call    sub_158E5
mov     ax, ds:8BEBh
mov     [bp+var_2], ax
jmp     short loc_15D0C

loc_15CD7:
lea     ax, [bp+var_2]
push    ax
lea     ax, [bp+var_56]
push    ax
call    sub_15B52
mov     [bp+var_53], al
cbw
or      ax, ax
jz      short loc_15CEC
jmp     short loc_15D05

loc_15CEC:
push    [bp+var_58]
push    si
mov     ax, [bp+var_5A]
inc     [bp+var_5A]
push    ax
lea     ax, [bp+var_52]
push    ax
call    sub_15BE4
xor     si, si
mov     [bp+var_58], si
jmp     short loc_15D0C

loc_15D05:
mov     al, [bp+var_53]
mov     [bp+si+var_52], al
inc     si

loc_15D0C:
mov     ax, [bp+var_2]
sub     ax, ds:8BEBh
cmp     ax, ds:8BF6h
jl      short loc_15CD7
cmp     word ptr ds:1DD5h, 0
jnz     short loc_15CD7
push    [bp+var_58]
push    si
push    [bp+var_5A]
lea     ax, [bp+var_52]
push    ax
call    sub_15BE4
call    sub_158FA
xor     ax, ax
mov     ds:8BF1h, ax
mov     ds:8C44h, ax
mov     ds:8C3Ch, ax
mov     ax, 8C3Ch
push    ax
mov     ax, 2
push    ax
call    sub_158E5
mov     ax, 8C44h
push    ax
mov     ax, 2
push    ax
call    sub_158E5
mov     ax, 8BF1h
push    ax
mov     ax, 1
push    ax
call    sub_158E5
cmp     word ptr ds:8BF1h, 0
jnz     short loc_15D6E
mov     bx, ds:1D55h
mov     word ptr [bx], 0FFFFh
jmp     short loc_15DB1

loc_15D6E:
push    word ptr ds:8BEBh
mov     ax, ds:8BF1h
mov     dx, 9
mul     dx
push    ax
call    sub_158E5
xor     di, di
jmp     short loc_15D8E

loc_15D82:
push    di
mov     bx, ds:8C46h
push    word ptr [bx+4]
call    sub_15AB0
inc     di

loc_15D8E:
cmp     di, ds:8BF1h
jl      short loc_15D82
mov     bx, ds:1D55h
cmp     word ptr [bx], 0FFFFh
jnz     short loc_15DA1
mov     word ptr [bx], 0

loc_15DA1:
mov     bx, ds:1D55h
push    word ptr [bx]
mov     bx, ds:8C46h
push    word ptr [bx+2]
call    sub_15AB0

loc_15DB1:
call    sub_15C15
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_15C92 endp



; Attributes: bp-based frame

sub_15DBA proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
push    dx
push    ax
mov     ax, ds:1DCFh
mov     dx, 6
mul     dx
mov     bx, ax
pop     ax
pop     dx
mov     [bx+1D59h], dx
mov     [bx+1D57h], ax
mov     ax, ds:1DCFh
mov     dx, 6
mul     dx
add     ax, 1D5Bh
mov     ds:1D55h, ax
mov     bx, ax
mov     word ptr [bx], 0FFFFh
call    sub_15C92
pop     bp
retn    4
sub_15DBA endp



; Attributes: bp-based frame

sub_15DF4 proc near

arg_0= byte ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
cmp     word ptr ds:1DCFh, 0
jl      short loc_15E25
mov     ax, ds:1DCFh
mov     dx, 6
mul     dx
mov     bx, ax
mov     dx, [bx+1D59h]
mov     ax, [bx+1D57h]
cmp     dx, [bp+arg_4]
jnz     short loc_15E25
cmp     ax, [bp+arg_2]
jnz     short loc_15E25
cmp     [bp+arg_0], 0
jz      short loc_15E4E
call    sub_15C92
jmp     short loc_15E4E

loc_15E25:
cmp     word ptr ds:1DCFh, 13h
jnz     short loc_15E41
push    ds
mov     ax, 1D5Dh
push    ax
push    ds
mov     ax, 1D57h
push    ax
mov     ax, 72h ; 'r'
push    ax
call    sub_46A2C
jmp     short loc_15E45

loc_15E41:
inc     word ptr ds:1DCFh

loc_15E45:
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_15DBA

loc_15E4E:
pop     bp
retn    6
sub_15DF4 endp




sub_15E52 proc near
cmp     word ptr ds:1DCFh, 0
jle     short locret_15E6E
dec     word ptr ds:1DCFh
mov     ax, ds:1DCFh
mov     dx, 6
mul     dx
add     ax, 1D5Bh
mov     ds:1D55h, ax
call    sub_15C92

locret_15E6E:
retn
sub_15E52 endp



; Attributes: bp-based frame

sub_15E6F proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_0]
or      si, si
jl      short loc_15EC8
cmp     si, ds:8C42h
jge     short loc_15EC8
mov     ax, si
mov     dx, 3
mul     dx
xor     dx, dx
add     ax, ds:8C3Eh
adc     dx, ds:8C40h
push    dx
push    ax
call    sub_158B6
mov     ax, 8C03h
push    ax
mov     ax, 3
push    ax
call    sub_158E5
push    ds
mov     ax, 8C03h
push    ax
call    sub_1586F
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     dx, 0FFFFh
jnz     short loc_15EBC
cmp     ax, 0FFFFh
jz      short loc_15EC8

loc_15EBC:
cmp     [bp+var_2], 0FFFFh
jnz     short loc_15EE5
cmp     [bp+var_4], 0FFFEh
jnz     short loc_15EE5

loc_15EC8:
mov     dx, ds:8C40h
mov     ax, ds:8C3Eh
add     ax, 12Ch
adc     dx, 0
push    dx
push    ax
call    sub_158B6
mov     ax, 8C03h
push    ax
mov     ax, 3
push    ax
call    sub_158E5

loc_15EE5:
push    ds
mov     ax, 8C03h
push    ax
call    sub_1586F
pop     si
mov     sp, bp
pop     bp
retn    2
sub_15E6F endp



; Attributes: bp-based frame

sub_15EF4 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
call    sub_15E6F
push    dx
push    ax
push    [bp+arg_0]
call    sub_15DF4
pop     bp
retn    4
sub_15EF4 endp



; Attributes: bp-based frame

sub_15F09 proc near

var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di

def_15F92:              ; jumptable 00015F92 default case, cases 5-8
mov     word ptr ds:40DAh, 5
call    sub_15852
mov     [bp+var_2], ax
push    ax
call    sub_11EA2
mov     si, ax
cmp     si, 5
jnz     short loc_15F2D
xor     ax, ax
jmp     loc_15FF9

loc_15F2D:
cmp     si, 0FFFFh
jge     short loc_15F38
mov     ax, [bp+var_2]
jmp     loc_15FF9

loc_15F38:
cmp     si, 0Bh
jnz     short loc_15F52
cmp     word ptr ds:8C3Ch, 0
jz      short def_15F92 ; jumptable 00015F92 default case, cases 5-8
push    word ptr ds:8C3Ch
call    sub_15E6F
push    dx
push    ax
call    sub_15DBA
jmp     short def_15F92 ; jumptable 00015F92 default case, cases 5-8

loc_15F52:
cmp     si, 0Ch
jnz     short loc_15F6C
cmp     word ptr ds:8C44h, 0
jz      short def_15F92 ; jumptable 00015F92 default case, cases 5-8
push    word ptr ds:8C44h
call    sub_15E6F
push    dx
push    ax
call    sub_15DBA
jmp     short def_15F92 ; jumptable 00015F92 default case, cases 5-8

loc_15F6C:
cmp     word ptr ds:8BF1h, 0
jz      short def_15F92 ; jumptable 00015F92 default case, cases 5-8
mov     bx, ds:1D55h
mov     ax, [bx]
mov     dx, 9
mul     dx
mov     di, ax
add     di, ds:8BEDh
mov     ax, si
cmp     ax, 0Ah         ; switch 11 cases
jbe     short loc_15F8E
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15F8E:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_15F92[bx] ; switch jump
jpt_15F92 dw offset loc_15FC3 ; jump table for switch statement
dw offset loc_15FCE
dw offset loc_15FAD
dw offset loc_15FB8
dw offset loc_15FED
dw offset def_15F92
dw offset def_15F92
dw offset def_15F92
dw offset def_15F92
dw offset loc_15FD9
dw offset loc_15FE3

loc_15FAD:              ; jumptable 00015F92 case 2
mov     al, [di+3]
cbw
push    ax
call    sub_15AF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FB8:              ; jumptable 00015F92 case 3
mov     al, [di+4]
cbw
push    ax
call    sub_15AF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FC3:              ; jumptable 00015F92 case 0
mov     al, [di+5]
cbw
push    ax
call    sub_15AF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FCE:              ; jumptable 00015F92 case 1
mov     al, [di+6]
cbw
push    ax
call    sub_15AF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FD9:              ; jumptable 00015F92 case 9
mov     ax, 1
push    ax
call    sub_15AF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FE3:              ; jumptable 00015F92 case 10
push    word ptr ds:8BF1h
call    sub_15AF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FED:              ; jumptable 00015F92 case 4
push    word ptr [di+7]
xor     ax, ax
push    ax
call    sub_15EF4
jmp     def_15F92       ; jumptable 00015F92 default case, cases 5-8

loc_15FF9:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_15F09 endp




sub_15FFF proc near
mov     ax, ds:8BF3h
cmp     ax, ds:8BEFh
jnz     short loc_1602F
mov     word ptr ds:8BF3h, 0
mov     ax, ds:8BF8h
cmp     ax, ds:8C19h
jbe     short loc_1601C
mov     ax, ds:8C19h
jmp     short loc_1601F

loc_1601C:
mov     ax, ds:8BF8h

loc_1601F:
mov     ds:8BEFh, ax
push    word ptr ds:1D53h
push    ds
push    word ptr ds:8BEBh
push    ax
call    sub_10740

loc_1602F:
dec     word ptr ds:8BF8h
mov     ax, ds:8BF3h
inc     word ptr ds:8BF3h
mov     bx, ax
add     bx, ds:8BEBh
mov     al, [bx]
retn
sub_15FFF endp



; Attributes: bp-based frame

sub_16043 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_0]
call    sub_15FFF
cbw
mov     di, ax
mov     ax, di
mov     cl, 5
sar     ax, cl
and     ax, 7
add     ax, si
mov     si, ax
and     di, 1Fh
jmp     short loc_1606D

loc_16067:
call    sub_15FFF
mov     [si], al
inc     si

loc_1606D:
mov     ax, di
dec     di
or      ax, ax
jnz     short loc_16067
mov     byte ptr [si], 0
call    sub_15FFF
mov     byte ptr [bp+var_2], al
call    sub_15FFF
mov     byte ptr [bp+var_2+1], al
mov     ax, [bp+var_2]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_16043 endp



; Attributes: bp-based frame

sub_1608E proc near

var_22= byte ptr -22h
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 22h
push    si
mov     [bp+var_22], 0
xor     ax, ax
mov     ds:8BEFh, ax
mov     ds:8BF3h, ax
test    word ptr ds:8BFAh, 4
jnz     short loc_160B0
mov     ax, 8C1Bh
push    ax
call    sub_1943A

loc_160B0:
push    word ptr ds:8C17h
push    word ptr ds:8C15h
call    sub_158B6
call    sub_158FA
mov     ax, ds:8BF6h
mov     ds:8BF8h, ax
call    sub_15FFF
mov     byte ptr [bp+var_2], al
call    sub_15FFF
mov     byte ptr [bp+var_2+1], al
jmp     short loc_160EA

loc_160D2:
lea     ax, [bp+var_22]
push    ax
call    sub_16043
mov     si, ax
lea     ax, [bp+var_22]
push    ax
mov     ax, 8C1Bh
push    ax
call    sub_19497
or      ax, ax
jge     short loc_160F4

loc_160EA:
mov     ax, [bp+var_2]
dec     [bp+var_2]
or      ax, ax
jnz     short loc_160D2

loc_160F4:
lea     ax, [bp+var_22]
push    ax
mov     ax, 8C1Bh
push    ax
call    sub_19497
or      ax, ax
jz      short loc_16110
mov     ax, 0DCh
push    ax
mov     ax, 1
push    ax
call    sub_15EF4
jmp     short loc_16118

loc_16110:
push    si
mov     ax, 1
push    ax
call    sub_15EF4

loc_16118:
pop     si
mov     sp, bp
pop     bp
retn
sub_1608E endp



; Attributes: bp-based frame

sub_1611D proc near

var_54= byte ptr -54h
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 54h
push    si
push    di
mov     di, [bp+arg_0]
xor     si, si
mov     ax, ds:491Eh
mov     ds:8C46h, ax
cmp     ds:1DD1h, si
jz      short loc_16159
cmp     word ptr ds:1DD1h, 1
jle     short loc_16140
jmp     loc_16275

loc_16140:
cmp     di, 1
jnz     short loc_1614B
call    sub_15E52
jmp     loc_16275

loc_1614B:
mov     ax, 64h ; 'd'
push    ax
mov     ax, 1
push    ax
call    sub_15EF4
jmp     loc_16275

loc_16159:
mov     ax, ds:40DAh
mov     [bp+var_2], ax
lea     ax, [bp+var_54]
push    ax
mov     ax, 0D15h
push    ax
call    sub_19458
call    sub_1D8C0
mov     [bp+var_4], ax
mov     ax, sp
sub     ax, ds:20h
add     ax, 0FA88h
mov     ds:8C19h, ax
mov     ax, sp
sub     ax, ds:8C19h
mov     sp, ax
mov     ax, sp
mov     ds:8BEBh, ax
mov     ds:8BEDh, ax
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_161AB
xor     si, si
jmp     loc_1623F

loc_161AB:
mov     word ptr ds:1DD1h, 2
lea     ax, [bp+var_54]
push    ax
call    sub_15982
or      ax, ax
jnz     short loc_161BF
jmp     loc_1623F

loc_161BF:
mov     word ptr ds:1DD1h, 1
mov     al, ds:8C01h
cbw
mov     bx, 2
cwd
idiv    bx
mov     dl, 27h ; '''
sub     dl, al
mov     bx, ds:1D51h
mov     [bx+8], dl
mov     al, [bx+8]
add     al, ds:8C01h
inc     al
mov     [bx+0Ah], al
mov     al, ds:8C00h
cbw
mov     bx, 2
cwd
idiv    bx
mov     dl, 0Ch
sub     dl, al
mov     bx, ds:1D51h
mov     [bx+9], dl
mov     al, [bx+9]
add     al, ds:8C00h
inc     al
mov     [bx+0Bh], al
mov     ax, 2
push    ax
call    sub_1ACE5
mov     ax, 1
push    ax
call    sub_1DCE5
cmp     di, 2
jnz     short loc_1621F
call    sub_1608E
jmp     short loc_1623A

loc_1621F:
or      di, di
jz      short loc_1622A
cmp     word ptr ds:1DCFh, 0FFFFh
jnz     short loc_16237

loc_1622A:
push    word ptr ds:1DD3h
mov     ax, 1
push    ax
call    sub_15EF4
jmp     short loc_1623A

loc_16237:
call    sub_15C92

loc_1623A:
call    sub_15F09
mov     si, ax

loc_1623F:
mov     ax, sp
add     ax, ds:8C19h
mov     sp, ax
cmp     word ptr ds:1D53h, 0
jle     short loc_16251
call    sub_1594D

loc_16251:
dec     word ptr ds:1DE8h
mov     ax, 2
push    ax
call    sub_1AD85
push    [bp+var_4]
call    sub_1E8C0
mov     ax, [bp+var_2]
mov     ds:40DAh, ax
mov     ax, 0FFFFh
push    ax
call    sub_156D7
mov     word ptr ds:1DD1h, 0

loc_16275:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1611D endp



; Attributes: bp-based frame

sub_1627F proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
les     bx, ds:2274h
xor     word ptr es:[bx+10h], 10h
mov     al, [bp+arg_0]
cbw
mov     bx, ax
test    word ptr ds:91D3h, 200h
jz      short loc_1629F
mov     ax, 6F05h
jmp     short loc_162A1

loc_1629F:
mov     ax, bx

loc_162A1:
call    sub_10BFC
pop     bp
retn    2
sub_1627F endp




sub_162A8 proc near
mov     ax, 91D3h
push    ax
call    sub_1E87B
mov     al, ds:9224h
mov     ds:926Dh, al
mov     cl, ds:9274h
test    word ptr ds:91D3h, 2
jz      short loc_162D0
cmp     cl, 10h
jz      short loc_162CB
cmp     cl, 20h ; ' '
jnz     short loc_162D0

loc_162CB:
mov     byte ptr ds:9273h, 2

loc_162D0:
mov     ch, ds:9273h
mov     dl, ds:926Dh
mov     dh, ds:9240h
mov     al, dl
mov     ah, 0
cmp     ax, 2
jz      short loc_16306
cmp     ax, 3
jz      short loc_16306
cmp     ax, 7
jz      short loc_16306
jmp     short $+2

loc_162F1:
mov     dl, 3
mov     dh, 29h ; ')'
or      ch, ch
jnz     short loc_162FD
mov     dl, 7
jmp     short loc_16306

loc_162FD:
cmp     ch, 2
jnz     short loc_16306
mov     dl, 2
mov     dh, 2Dh ; '-'

loc_16306:
mov     ds:926Dh, dl
mov     ds:9240h, dh
mov     al, 0
mov     ds:923Dh, al
mov     ah, 0
mov     ds:9229h, ax
mov     ds:9241h, al
mov     word ptr ds:9225h, 50h ; 'P'
cmp     word ptr ds:472Ah, 0
jz      short loc_16350
cmp     word ptr ds:91D7h, 0
jz      short loc_16350
cmp     word ptr ds:1DD8h, 0
jnz     short loc_16356
cmp     byte ptr ds:926Dh, 7
jnz     short loc_16342
mov     ax, 3
jmp     short loc_16345

loc_16342:
mov     ax, 7

loc_16345:
mov     ds:0ECh, ax
mov     word ptr ds:1DD8h, 1
jmp     short loc_16356

loc_16350:
mov     word ptr ds:472Ah, 0

loc_16356:
cmp     word ptr ds:0ECh, 0FFh
jz      short loc_163A7
cmp     word ptr ds:0ECh, 7
jnz     short loc_1636F
test    word ptr ds:91D9h, 1
jz      short loc_163A7
jmp     short loc_1639C

loc_1636F:
test    word ptr ds:91D5h, 1
jnz     short loc_1638D
mov     al, ds:0ECh
mov     ds:926Dh, al
mov     al, 1
cmp     word ptr ds:0ECh, 2
jnz     short loc_16388
mov     al, 2

loc_16388:
mov     ds:9273h, al
jmp     short loc_163A7

loc_1638D:
cmp     word ptr ds:91D7h, 0
jz      short loc_163A7
test    word ptr ds:91D9h, 1
jnz     short loc_163A7

loc_1639C:
push    word ptr ds:0ECh
call    sub_1627F
xor     ax, ax
jmp     short locret_163AA

loc_163A7:
mov     ax, 1

locret_163AA:
retn
sub_162A8 endp




sub_163AB proc near
mov     ax, 931Bh
push    ax
call    sub_1E87B

loc_163B2:
call    sub_162A8
or      ax, ax
jz      short loc_163B2
test    word ptr ds:91D3h, 14h
jz      short loc_163C9
cmp     word ptr ds:9271h, 0C8h
jnz     short locret_163CE

loc_163C9:
or      byte ptr ds:2C62h, 1

locret_163CE:
retn
sub_163AB endp




sub_163CF proc near
push    si
push    di
mov     al, ds:9273h
mov     ah, 0
or      ax, ax
jz      short loc_163E6
cmp     ax, 1
jz      short loc_163F6
cmp     ax, 2
jz      short loc_163EE
jmp     short loc_163FC

loc_163E6:
mov     si, 2349h
mov     di, 4870h
jmp     short loc_163FC

loc_163EE:
mov     si, 236Ch
mov     di, 48B6h
jmp     short loc_163FC

loc_163F6:
mov     si, 2326h
mov     di, 482Ah

loc_163FC:
push    si
push    di
call    sub_1D02D
pop     di
pop     si
retn
sub_163CF endp




sub_16404 proc near
call    sub_1481D
mov     ax, ds:8BA3h
mov     ds:1C5Eh, ax
mov     ax, ds:1C09h
mov     ds:1C60h, ax
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_461DC
pop     cx
pop     cx
mov     word ptr ds:1C94h, 0
les     bx, ds:1C86h
mov     byte ptr es:[bx], 1Ah
call    sub_147BD
retn
sub_16404 endp




sub_16431 proc near
push    si
push    word ptr ds:0F4h
call    sub_468C2
mov     ds:8C4Ah, dx
mov     ds:8C48h, ax
xor     si, si
jmp     short loc_16459

loc_16446:
mov     bx, si
shl     bx, 1
mov     ax, seg seg000
mov     es, ax
assume es:seg000
cmp     word ptr es:[bx+126h], 9090h
jnz     short loc_1645F
inc     si

loc_16459:
cmp     si, 80h
jl      short loc_16446

loc_1645F:
cmp     si, 80h
jge     short loc_16476
push    word ptr ds:0F4h
mov     ax, seg seg000
push    ax
mov     ax, 0F6h
push    ax
call    sub_468D4

loc_16476:
pop     si
retn
sub_16431 endp




sub_16478 proc near
push    word ptr ds:0F4h
push    word ptr ds:8C4Ah
push    word ptr ds:8C48h
call    sub_468D4
retn
sub_16478 endp




sub_1648A proc near
cmp     word ptr ds:472Ah, 0
jz      short loc_16499
mov     al, ds:9224h
mov     ah, 0
call    sub_10BFC

loc_16499:
mov     word ptr ds:229Ch, 1
call    sub_1A45E
call    sub_1A0A9
call    sub_14E1B
call    sub_14E68
call    sub_125DD
call    sub_16A20
call    sub_16478
retn
sub_1648A endp



; Attributes: noreturn bp-based frame

sub_164B5 proc near

var_6= byte ptr -6
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
mov     di, [bp+arg_0]
call    sub_139EF
call    sub_1E88C
mov     si, ax
mov     word ptr ds:1DE8h, 0FFFFh
or      di, di
jnz     short loc_164D6
or      si, si
jz      short loc_164EF

loc_164D6:
or      si, si
jz      short loc_164E2
call    sub_1AE49
mov     byte ptr ds:1D40h, 0

loc_164E2:
call    sub_1A2B7
mov     ax, 15CDh
push    ax
xor     ax, ax
push    ax
call    sub_19065

loc_164EF:
mov     ax, 1
push    ax
call    sub_12268
call    sub_1648A
or      si, si
jnz     short loc_16501
or      di, di
jz      short loc_1653A

loc_16501:
mov     ax, 1609h
push    ax
call    sub_19BEC
push    di
push    ss
lea     ax, [bp+var_6]
push    ax
call    sub_472E0
lea     ax, [bp+var_6]
push    ax
call    sub_19BEC
mov     ax, 1617h
push    ax
call    sub_19BEC
push    si
push    ss
lea     ax, [bp+var_6]
push    ax
call    sub_472E0
lea     ax, [bp+var_6]
push    ax
call    sub_19BEC
mov     ax, 1DDAh
push    ax
call    sub_19BEC

loc_1653A:
push    di
call    far ptr sub_100ED
sub_164B5 endp

pop     cx
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2


; Attributes: noreturn bp-based frame

sub_16549 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     [bp+arg_0], 1
jnz     short loc_16573
mov     ax, 0E3Eh
push    ax
call    sub_19BEC
mov     ax, 1DDAh
push    ax
call    sub_19BEC
call    sub_125DD
call    sub_16A20
call    sub_16478
mov     ax, 1
push    ax
call    far ptr sub_100ED
pop     cx

loc_16573:
push    [bp+arg_0]
call    sub_164B5
sub_16549 endp

pop     bp
retn    2


; Attributes: bp-based frame

sub_1657D proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    [bp+arg_0]
call    sub_19448
mov     dl, ds:49F4h
mov     dh, 0
push    ax
mov     ax, dx
mov     dl, ds:49F2h
mov     dh, 0
sub     ax, dx
inc     ax
pop     dx
sub     ax, dx
mov     bx, 2
cwd
idiv    bx
mov     si, ax
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1ED32
pop     si
pop     bp
retn    4
sub_1657D endp




sub_165B3 proc near
push    si
push    di
cmp     word ptr ds:49EEh, 0FFFFh
jz      short loc_165C1
xor     ax, ax
jmp     loc_1664D

loc_165C1:
mov     ax, 0Eh
push    ax
call    sub_1ACE5
mov     ax, 2
push    ax
mov     ax, 1625h
push    ax
call    sub_1657D
mov     ax, 4
push    ax
mov     ax, 0DBh
push    ax
call    sub_1657D
mov     ax, 5
push    ax
mov     ax, 162Dh
push    ax
call    sub_1657D
mov     ax, 6
push    ax
mov     ax, 1649h
push    ax
call    sub_1657D
mov     ax, 1
push    ax
call    sub_1DCE5
mov     di, ds:1DD1h
mov     ax, di
cmp     ax, 1
jnz     short loc_1660C
mov     word ptr ds:1DD1h, 2

loc_1660C:
mov     word ptr ds:40DAh, 1
mov     word ptr ds:1DD3h, 1

loc_16618:
call    sub_15852
mov     si, ax
mov     ax, si
or      ax, ax
jz      short loc_16618
push    si
call    sub_11EA2
cmp     ax, 1Dh
jnz     short loc_16639
mov     ax, 7
push    ax
mov     ax, 0D33h
push    ax
call    sub_1657D
jmp     short loc_1660C

loc_16639:
cmp     ax, 0FFFFh
jl      short loc_16640
xor     si, si

loc_16640:
mov     ax, 0Eh
push    ax
call    sub_1AD85
mov     ds:1DD1h, di
mov     ax, si

loc_1664D:
pop     di
pop     si
retn
sub_165B3 endp



; Attributes: bp-based frame

sub_16650 proc near

var_50= byte ptr -50h

push    bp
mov     bp, sp
sub     sp, 50h
push    si
mov     si, 500h
cmp     word ptr ds:472Eh, 0
jz      short loc_1666E
lea     ax, [bp+var_50]
push    ax
mov     ax, 4730h
push    ax
call    sub_19458
jmp     short loc_16679

loc_1666E:
mov     ax, 0FFFFh
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_17D3E

loc_16679:
cmp     [bp+var_50], 0
jnz     short loc_1668C
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E50h
push    ax
call    sub_19458
jmp     short loc_1668F

loc_1668C:
mov     si, 600h

loc_1668F:
lea     ax, [bp+var_50]
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
or      ax, ax
jge     short loc_166B4
cmp     ax, 0FFFFh
jge     short loc_166A9
mov     si, ax

loc_166A9:
lea     ax, [bp+var_50]
push    ax
mov     ax, 0E50h
push    ax
call    sub_19458

loc_166B4:
lea     ax, [bp+var_50]
push    ax
call    sub_152EB
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn
sub_16650 endp




sub_166C2 proc near
cmp     word ptr ds:472Ch, 0
jnz     short loc_166EB
mov     ax, 9963h
push    ax
mov     ax, 1DDCh
push    ax
mov     ax, 9963h
push    ax
call    sub_14F85
cmp     byte ptr ds:9963h, 0
jz      short loc_166E4
mov     ax, 1
jmp     short loc_166E6

loc_166E4:
xor     ax, ax

loc_166E6:
mov     ds:472Ch, ax
jmp     short loc_16705

loc_166EB:
mov     ax, 9963h
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 1DE4h
push    ax
call    sub_19A67
test    ax, 20h
jnz     short loc_16705
mov     word ptr ds:472Ch, 0

loc_16705:
cmp     word ptr ds:472Ch, 0
jz      short loc_16716
mov     ax, 9963h
push    ax
call    sub_12223
mov     ds:472Ch, ax

loc_16716:
cmp     word ptr ds:472Ch, 0
jnz     short locret_16728
mov     ax, 9963h
push    ax
mov     ax, 1DDCh
push    ax
call    sub_19458

locret_16728:
retn
sub_166C2 endp




sub_16729 proc near
cmp     word ptr ds:1D20h, 0
jnz     short loc_16765
cmp     word ptr ds:1C09h, 1000h
jnb     short loc_1673C
xor     ax, ax
jmp     short locret_16768

loc_1673C:
push    word ptr ds:1C09h
call    sub_3193F
mov     ds:8BA3h, dx
mov     ds:8BA1h, ax
or      ax, ax
jz      short loc_16765
mov     ax, 10h
sub     ax, ds:8BA1h
sub     ds:1C09h, ax
mov     word ptr ds:8BA1h, 0
inc     word ptr ds:8BA3h

loc_16765:
mov     ax, 1

locret_16768:
retn
sub_16729 endp



; Attributes: bp-based frame

sub_16769 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
call    sub_12589
call    sub_16A05
call    sub_163AB
call    sub_163CF
call    sub_166C2
call    sub_31529
mov     [bp+var_2], dx
mov     [bp+var_4], ax
call    sub_19E1F
or      ax, ax
jz      short loc_16799
call    sub_1A628
or      ax, ax
jnz     short loc_167A0

loc_16799:
mov     ax, 1
push    ax
call    sub_16549

loc_167A0:
push    [bp+var_2]
push    [bp+var_4]
call    sub_14E7C
call    sub_16729
or      ax, ax
jnz     short loc_167B7
mov     ax, 1
push    ax
call    sub_16549

loc_167B7:
call    sub_1A236
call    sub_121AD
mov     al, ds:0F2h
mov     ds:926Eh, al
test    word ptr ds:91D3h, 1Ch
jz      short loc_167D3
mov     al, ds:0F2h
add     al, 0FFh
mov     ds:925Fh, al

loc_167D3:
call    sub_1A39F
push    ds
mov     ax, 931Bh
push    ax
push    ds
mov     ax, 9276h
push    ax
mov     ax, 0A3h
push    ax
call    sub_46A2C
call    sub_16404
mov     ax, ds:0F0h
mov     ds:23C5h, ax
call    sub_1A583
mov     ax, 1FA2h
push    ax
call    sub_17F56
call    sub_16650
mov     di, ax
mov     ax, di
cmp     ax, 500h
jnz     short loc_16836
cmp     word ptr ds:472Ch, 0
jnz     short loc_16836
cmp     word ptr ds:4728h, 0
jnz     short loc_16836
call    sub_157A7
mov     si, ax
mov     ax, si
or      ax, ax
jnz     short loc_16836
mov     ax, 3493h
push    ax
xor     ax, ax
push    ax
call    sub_177BE
call    sub_165B3
mov     si, ax
mov     ax, si
push    ax
call    sub_1578B

loc_16836:
push    si
call    sub_11EA2
mov     si, ax
cmp     ax, 0FFFFh
jge     short loc_1684A
call    sub_15852
or      ax, ax
jz      short loc_1684A
mov     di, si

loc_1684A:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_16769 endp



; Attributes: bp-based frame

sub_16852 proc near

var_1= byte ptr -1
arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_4]
xor     si, si
jmp     short loc_1687A

loc_16861:
les     bx, [bp+arg_0]
assume es:nothing
mov     al, es:[bx]
mov     [bp+var_1], al
inc     word ptr [bp+arg_0]
cmp     [bp+var_1], 20h ; ' '
jz      short loc_1687F
mov     al, [bp+var_1]
mov     [di], al
inc     di
inc     si

loc_1687A:
cmp     si, 8
jl      short loc_16861

loc_1687F:
mov     byte ptr [di], 0
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_16852 endp




sub_1688A proc near
push    si
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
mov     si, ax
add     si, 8C50h
cmp     word ptr ds:1DE8h, 0FFFFh
jz      short loc_168B1
cmp     word ptr [si+6], 0FFFFh
jz      short loc_168B1
push    ds
push    si
mov     ax, 1
push    ax
call    sub_4698B

loc_168B1:
pop     si
retn
sub_1688A endp ; sp-analysis failed

push    bp
mov     bp, sp
sub     sp, 6Ah
push    si
push    di
lea     ax, [bp-10h]
mov     [bp-6], ax
lea     si, [bp-60h]
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
mov     [bp-2], ax
test    word ptr [bp+0Ah], 8000h
jz      short loc_1690B
mov     es, word ptr [bp+8]
mov     bx, [bp+6]
mov     word ptr [bp-68h], es
mov     [bp-6Ah], bx
test    byte ptr es:[bx+5], 80h
jz      short loc_16904
lea     ax, [bp-10h]
push    ax
mov     dx, [bp-68h]
mov     ax, bx
add     ax, 0Ah
push    dx
push    ax
call    sub_16852
mov     word ptr [bp+0Ch], 0Fh
jmp     short loc_1691C

loc_16904:
mov     word ptr [bp+0Ch], 0Eh
jmp     short loc_1691C

loc_1690B:
cmp     word ptr [bp+0Ch], 0
jl      short loc_16917
cmp     word ptr [bp+0Ch], 0Ch
jle     short loc_1691C

loc_16917:
mov     word ptr [bp+0Ch], 0Dh

loc_1691C:
mov     bx, [bp+0Ch]
shl     bx, 1
mov     di, [bx+1DEAh]
jmp     short loc_1695B

loc_16927:
mov     al, [di]
cbw
cmp     ax, 24h ; '$'
jz      short loc_1694B
cmp     ax, 40h ; '@'
jz      short loc_16936
jmp     short loc_16955

loc_16936:
mov     al, [bp+0Ah]
add     al, 41h ; 'A'
mov     [si], al
inc     si
jmp     short loc_1695A

loc_16940:
mov     bx, [bp-6]
mov     al, [bx]
mov     [si], al
inc     word ptr [bp-6]
inc     si

loc_1694B:
mov     bx, [bp-6]
cmp     byte ptr [bx], 0
jnz     short loc_16940
jmp     short loc_1695A

loc_16955:
mov     al, [di]
mov     [si], al
inc     si

loc_1695A:
inc     di

loc_1695B:
cmp     byte ptr [di], 0
jnz     short loc_16927
mov     byte ptr [si], 0
call    sub_10944
mov     ax, [bp+0Ch]
add     ax, 64h ; 'd'
mov     [bp-66h], ax
cmp     word ptr ds:1DE8h, 0FFFFh
jnz     short loc_1697B
mov     ax, 0FFFFh
jmp     short loc_16981

loc_1697B:
mov     bx, [bp-2]
mov     ax, [bx+6]

loc_16981:
mov     [bp-4], ax
or      ax, ax
jz      short loc_169F5
mov     ax, ds:1DD1h
mov     [bp-64h], ax
mov     word ptr ds:1DD1h, 2
xor     ax, ax
push    ax
mov     ax, 0C85h
push    ax
lea     ax, [bp-60h]
push    ax
mov     ax, 0CA0h
push    ax
mov     ax, 14h
push    ax
push    ax
mov     ax, 0Bh
push    ax
call    sub_18EAD
add     sp, 0Eh
cbw
mov     [bp-62h], ax
mov     ax, [bp-64h]
mov     ds:1DD1h, ax
cmp     word ptr [bp-62h], 52h ; 'R'
jz      short loc_169F0
cmp     word ptr ds:1DE8h, 0FFFFh
jz      short loc_169D1
mov     bx, [bp-2]
mov     word ptr [bx+6], 0

loc_169D1:
call    sub_25ED6
call    sub_4B0DE
cmp     word ptr ds:1DE8h, 0FFFFh
jz      short loc_169F5
mov     ax, [bp-4]
mov     bx, [bp-2]
mov     [bx+6], ax
call    sub_1688A
jmp     short loc_169F5

loc_169F0:
mov     ax, 1
jmp     short loc_169FD

loc_169F5:
push    word ptr [bp-66h]
call    sub_4695A

loc_169FD:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8



sub_16A05 proc near
mov     ax, 24h ; '$'
push    ax
call    sub_468C2
mov     ds:8C4Eh, dx
mov     ds:8C4Ch, ax
push    cs
mov     ax, 68B3h
push    ax
call    sub_4691D
retn
sub_16A05 endp




sub_16A20 proc near
mov     ax, 24h ; '$'
push    ax
push    word ptr ds:8C4Eh
push    word ptr ds:8C4Ch
call    sub_468D4
retn
sub_16A20 endp



; Attributes: bp-based frame

sub_16A32 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
and     ax, 0FFh
add     ax, 41h ; 'A'
mov     [bp+arg_0], ax
call    sub_10944
mov     word ptr ds:1DD3h, 12Ah
xor     ax, ax
push    ax
mov     ax, 13D1h
push    ax
lea     ax, [bp+arg_0]
push    ax
mov     ax, 1238h
push    ax
mov     ax, 1E0Ah
push    ax
mov     ax, 14h
push    ax
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
mov     sp, bp
cmp     al, 1Bh
jnz     short loc_16A76
call    sub_1688A
xor     ax, ax
jmp     short loc_16A79

loc_16A76:
mov     ax, 1

loc_16A79:
pop     bp
retf    2
sub_16A32 endp




sub_16A7D proc near
cmp     word ptr ds:1F88h, 0
jz      short loc_16A93
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 1
jnz     short loc_16A93
mov     ax, 1
jmp     short loc_16A95

loc_16A93:
xor     ax, ax

loc_16A95:
mov     ds:1F9Ah, ax
retn
sub_16A7D endp



; Attributes: bp-based frame

sub_16A99 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     byte ptr [si+0Dh], 50h ; 'P'
jb      short loc_16AB6
mov     al, [si+0Dh]
add     al, 0B1h
sub     [si+0Bh], al
mov     al, [si+0Dh]
add     al, 0B1h
sub     [si+0Dh], al

loc_16AB6:
les     bx, ds:9A68h
mov     al, es:[bx+29h]
cmp     al, [si+0Eh]
ja      short loc_16ADF
mov     al, [si+0Eh]
mov     dl, es:[bx+29h]
sub     al, dl
inc     al
sub     [si+0Ch], al
mov     al, [si+0Eh]
mov     dl, es:[bx+29h]
sub     al, dl
inc     al
sub     [si+0Eh], al

loc_16ADF:
pop     si
pop     bp
retn    2
sub_16A99 endp



; Attributes: bp-based frame

sub_16AE4 proc near

var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
mov     si, [bp+arg_0]
xor     ax, ax
mov     [bp+var_C], ax
mov     [bp+var_8], ax
mov     [bp+var_12], ax
jmp     loc_16BE9

loc_16AFD:
mov     ax, [bp+var_12]
mov     dx, 0Bh
mul     dx
add     ax, [si+11h]
mov     [bp+var_4], ax
mov     bx, ax
mov     ax, [bx+7]
mov     [bp+var_2], ax
push    word ptr [bx]
call    sub_19448
mov     di, ax
cmp     di, [bp+var_C]
jle     short loc_16B22
mov     [bp+var_C], di

loc_16B22:
mov     [bp+var_A], 0
mov     bx, [bp+var_4]
mov     al, [bx+5]
mov     ah, 0
cmp     ax, 2
jz      short loc_16B3B
cmp     ax, 3
jz      short loc_16B46
jmp     short loc_16B53

loc_16B3B:
mov     bx, [bp+var_2]
mov     ax, [bx+2]
mov     [bp+var_E], ax
jmp     short loc_16B58

loc_16B46:
mov     bx, [bp+var_2]
mov     al, [bx+10h]
mov     ah, 0
mov     [bp+var_E], ax
jmp     short loc_16B58

loc_16B53:
mov     [bp+var_E], 0

loc_16B58:
cmp     [bp+var_E], 0
jz      short loc_16BB6
mov     [bp+var_10], 0
jmp     short loc_16BAC

loc_16B65:
mov     bx, [bp+var_4]
cmp     byte ptr [bx+5], 2
jnz     short loc_16B86
mov     bx, [bp+var_10]
shl     bx, 1
push    bx
mov     bx, [bp+var_2]
pop     ax
add     ax, [bx+4]
mov     bx, ax
push    word ptr [bx]
call    sub_19448
mov     di, ax
jmp     short loc_16BA1

loc_16B86:
mov     ax, [bp+var_10]
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, [bp+var_2]
pop     ax
add     ax, [bx+11h]
mov     bx, ax
push    word ptr [bx]
call    sub_19448
mov     di, ax

loc_16BA1:
cmp     di, [bp+var_A]
jle     short loc_16BA9
mov     [bp+var_A], di

loc_16BA9:
inc     [bp+var_10]

loc_16BAC:
mov     ax, [bp+var_10]
cmp     ax, [bp+var_E]
jl      short loc_16B65
jmp     short loc_16BDB

loc_16BB6:
mov     bx, [bp+var_4]
mov     al, [bx+5]
mov     ah, 0
cmp     ax, 4
jnz     short loc_16BCD
mov     bx, [bp+var_2]
mov     ax, [bx]
mov     [bp+var_A], ax
jmp     short loc_16BDB

loc_16BCD:
cmp     ax, 6
jnz     short loc_16BDB
mov     bx, [bp+var_2]
mov     ax, [bx+6]
mov     [bp+var_A], ax

loc_16BDB:
mov     ax, [bp+var_A]
cmp     ax, [bp+var_8]
jle     short loc_16BE6
mov     [bp+var_8], ax

loc_16BE6:
inc     [bp+var_12]

loc_16BE9:
mov     al, [si+10h]
mov     ah, 0
cmp     ax, [bp+var_12]
jle     short loc_16BF6
jmp     loc_16AFD

loc_16BF6:
mov     al, [si+0Ch]
add     al, [si+10h]
inc     al
mov     [si+0Eh], al
cmp     [bp+var_8], 0
jle     short loc_16C0C
mov     ax, 2
jmp     short loc_16C0E

loc_16C0C:
xor     ax, ax

loc_16C0E:
mov     dx, [bp+var_C]
add     dx, [bp+var_8]
add     ax, dx
inc     ax
inc     ax
mov     [bp+var_6], ax
cmp     word ptr [si], 0
jz      short loc_16C31
push    word ptr [si]
call    sub_19448
mov     di, ax
inc     di
inc     di
cmp     di, [bp+var_6]
jle     short loc_16C31
mov     [bp+var_6], di

loc_16C31:
mov     al, [si+0Bh]
add     al, byte ptr [bp+var_6]
inc     al
mov     [si+0Dh], al
mov     al, byte ptr [bp+var_C]
add     al, 3
mov     [si+0Fh], al
push    si
call    sub_16A99
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_16AE4 endp



; Attributes: bp-based frame

sub_16C50 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 0
jz      short loc_16C65
jmp     loc_16D24

loc_16C65:
call    sub_177F2
or      ax, ax
jz      short loc_16C71
mov     ax, 1
jmp     short loc_16C73

loc_16C71:
xor     ax, ax

loc_16C73:
mov     [bp+var_2], ax
mov     bx, ds:1F88h
mov     byte ptr [bx+0Bh], 1
mov     byte ptr [bx+0Ch], 1
mov     byte ptr [bx+0Dh], 50h ; 'P'
mov     al, byte ptr [bp+var_2]
shl     al, 1
inc     al
mov     [bx+0Eh], al
mov     word ptr ds:8D1Ch, 3
xor     si, si
jmp     short loc_16D03

loc_16C9A:
mov     ax, si
mov     dx, 0Bh
mul     dx
mov     di, ax
mov     bx, ds:1F88h
add     di, [bx+11h]
push    word ptr [di]
call    sub_19448
mov     [bp+var_4], ax
mov     bx, si
shl     bx, 1
mov     ax, [bx-72E4h]
add     ax, [bp+var_4]
add     ax, 3
mov     bx, si
inc     bx
shl     bx, 1
mov     [bx-72E4h], ax
cmp     word ptr [di+7], 0
jz      short loc_16D02
mov     bx, si
shl     bx, 1
mov     al, [bx-72E4h]
add     al, byte ptr [bp+var_2]
mov     bx, [di+7]
mov     [bx+0Bh], al
mov     bx, ds:1F88h
mov     al, [bx+0Eh]
mov     dl, byte ptr [bp+var_2]
add     dl, 0FFh
sub     al, dl
mov     bx, [di+7]
mov     [bx+0Ch], al
push    word ptr [di+7]
call    sub_16AE4
mov     bx, [di+7]
mov     byte ptr [bx+2], 1

loc_16D02:
inc     si

loc_16D03:
mov     bx, ds:1F88h
mov     al, [bx+10h]
mov     ah, 0
cmp     ax, si
jg      short loc_16C9A
mov     ax, [bp+var_2]
shl     ax, 1
mov     dx, 50h ; 'P'
sub     dx, ax
mov     bx, si
shl     bx, 1
mov     [bx-72E4h], dx
jmp     short loc_16D2B

loc_16D24:
push    word ptr ds:1F88h
call    sub_16AE4

loc_16D2B:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_16C50 endp



; Attributes: bp-based frame

sub_16D31 proc near

var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_2]
mov     [bp+var_2], 0
mov     bx, ds:1F88h
mov     al, [bx+10h]
mov     ah, 0
mov     di, ax
jmp     short loc_16D83

loc_16D4E:
add     si, [bp+arg_0]
mov     ax, si
cmp     ax, di
jl      short loc_16D5B
xor     si, si
jmp     short loc_16D62

loc_16D5B:
or      si, si
jge     short loc_16D62
mov     si, di
dec     si

loc_16D62:
mov     ax, si
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, ds:1F88h
pop     ax
add     ax, [bx+11h]
mov     bx, ax
test    byte ptr [bx+6], 1
jnz     short loc_16D80
mov     ax, si
jmp     short loc_16D8D

loc_16D80:
inc     [bp+var_2]

loc_16D83:
mov     ax, [bp+var_2]
cmp     ax, di
jl      short loc_16D4E
mov     ax, 0FFFFh

loc_16D8D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_16D31 endp



; Attributes: bp-based frame

sub_16D95 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     [bp+arg_0], 0FFFFh
jz      short loc_16DA4
push    [bp+arg_0]
call    sub_1787A

loc_16DA4:
mov     word ptr ds:1F98h, 1
pop     bp
retn    2
sub_16D95 endp



; Attributes: bp-based frame

sub_16DAE proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
cmp     si, 0FFFFh
jz      short loc_16DDA
mov     bx, ds:1F88h
mov     al, [bx+10h]
mov     ah, 0
cmp     ax, si
jle     short loc_16DDA
mov     di, ds:1F8Ch
mov     word ptr ds:1F8Ch, 0FFFFh
push    si
call    sub_1787A
mov     ds:1F8Ch, di

loc_16DDA:
mov     word ptr ds:1F98h, 0
pop     di
pop     si
pop     bp
retn    2
sub_16DAE endp



; Attributes: bp-based frame

sub_16DE6 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    word ptr ds:1F8Ch
call    sub_16DAE
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_16D31
mov     ds:1F8Ch, ax
mov     bx, ds:1F88h
mov     [bx+5], ax
push    ax
call    sub_16D95
pop     bp
retn    4
sub_16DE6 endp




sub_16E0B proc near
mov     bx, ds:1F88h
mov     ax, [bx+9]
mov     ds:1FA0h, ax
push    ax
call    sub_1E8C0
xor     ax, ax
push    ax
call    sub_1DCE5
call    sub_17BEB
mov     bx, ds:1F88h
mov     byte ptr [bx+3], 1
retn
sub_16E0B endp




sub_16E2B proc near
mov     word ptr ds:1F9Ch, 0
dec     word ptr ds:1F90h
dec     word ptr ds:1F8Ah
mov     bx, ds:1F90h
shl     bx, 1
shl     bx, 1
mov     ax, [bx-72BAh]
mov     ds:1F88h, ax
or      ax, ax
jz      short locret_16E54
mov     bx, ax
mov     ax, [bx+5]
mov     ds:1F8Ch, ax

locret_16E54:
retn
sub_16E2B endp




sub_16E55 proc near
mov     bx, ds:1F88h
cmp     byte ptr [bx+3], 0
jz      short loc_16E75
push    word ptr [bx+9]
call    sub_1E8C0
call    sub_1DA41
mov     bx, ds:1F88h
mov     word ptr [bx+9], 0FFFFh
mov     byte ptr [bx+3], 0

loc_16E75:
call    sub_16E2B
cmp     word ptr ds:1F88h, 0
jz      short loc_16E95
mov     bx, ds:1F88h
cmp     word ptr [bx+9], 0FFFFh
jz      short loc_16E95
mov     ax, [bx+9]
mov     ds:1FA0h, ax
push    ax
call    sub_1E8C0
jmp     short locret_16E9B

loc_16E95:
mov     word ptr ds:1FA0h, 0FFFFh

locret_16E9B:
retn
sub_16E55 endp




sub_16E9C proc near
push    word ptr ds:1F88h
call    sub_18039
mov     bx, ds:1F88h
cmp     byte ptr [bx+2], 0
jnz     short loc_16EB4
mov     byte ptr [bx+2], 1
call    sub_16C50

loc_16EB4:
mov     bx, ds:1F88h
cmp     word ptr [bx+5], 0FFFFh
jnz     short loc_16ECE
mov     ax, 0FFFFh
push    ax
mov     ax, 1
push    ax
call    sub_16D31
mov     ds:1F8Ch, ax
jmp     short loc_16EE1

loc_16ECE:
mov     bx, ds:1F88h
mov     ax, [bx+5]
dec     ax
push    ax
mov     ax, 1
push    ax
call    sub_16D31
mov     ds:1F8Ch, ax

loc_16EE1:
mov     ax, ds:1F8Ch
mov     bx, ds:1F88h
mov     [bx+5], ax
cmp     word ptr [bx+9], 0FFFFh
jnz     short loc_16EF4
call    sub_1782E

loc_16EF4:
mov     bx, ds:1F88h
cmp     byte ptr [bx+3], 0
jnz     short loc_16F03
call    sub_16E0B
jmp     short locret_16F0D

loc_16F03:
mov     bx, ds:1F88h
push    word ptr [bx+9]
call    sub_1E8C0

locret_16F0D:
retn
sub_16E9C endp



; Attributes: bp-based frame

sub_16F0E proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
inc     word ptr ds:1F90h
mov     bx, ds:1F90h
shl     bx, 1
shl     bx, 1
mov     [bx-72BAh], si
or      si, si
jnz     short loc_16F31
mov     word ptr ds:1F8Ah, 0
jmp     short loc_16F35

loc_16F31:
inc     word ptr ds:1F8Ah

loc_16F35:
mov     ds:1F88h, si
pop     si
pop     bp
retn    2
sub_16F0E endp



; Attributes: bp-based frame

sub_16F3E proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
jmp     short loc_16F7D

loc_16F44:
mov     bx, ds:1F90h
shl     bx, 1
shl     bx, 1
cmp     word ptr [bx-72BAh], 0
jnz     short loc_16F7A
call    sub_16E2B
mov     word ptr ds:1F8Ah, 0
mov     si, ds:1F90h
jmp     short loc_16F74

loc_16F62:
mov     bx, si
shl     bx, 1
shl     bx, 1
cmp     word ptr [bx-72BAh], 0
jz      short loc_16F7D
inc     word ptr ds:1F8Ah
dec     si

loc_16F74:
or      si, si
jnz     short loc_16F62
jmp     short loc_16F7D

loc_16F7A:
call    sub_16E55

loc_16F7D:
cmp     word ptr ds:1F90h, 0
jz      short loc_16F8E
mov     ax, [bp+arg_0]
dec     [bp+arg_0]
or      ax, ax
jnz     short loc_16F44

loc_16F8E:
pop     si
pop     bp
retn    2
sub_16F3E endp




sub_16F93 proc near
cmp     word ptr ds:1F8Ah, 1
jnz     short loc_16FF1
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 0
jnz     short loc_17002
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, ds:1F88h
pop     ax
add     ax, [bx+11h]
mov     bx, ax
test    byte ptr [bx+6], 4
jnz     short loc_17005

loc_16FBF:
push    word ptr ds:1F8Ch
call    sub_16DAE
jmp     short loc_17005

loc_16FC8:
call    sub_16E55
cmp     word ptr ds:1F88h, 0
jz      short loc_17005
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, ds:1F88h
pop     ax
add     ax, [bx+11h]
mov     bx, ax
test    byte ptr [bx+6], 4
jz      short loc_16FF1
xor     ax, ax
jmp     short locret_17008

loc_16FF1:
cmp     word ptr ds:1F8Ah, 1
jg      short loc_16FC8
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 0
jz      short loc_16FBF

loc_17002:
call    sub_16E55

loc_17005:
mov     ax, 1

locret_17008:
retn
sub_16F93 endp



; Attributes: bp-based frame

sub_17009 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     di, ax
mov     bx, ds:1F88h
add     di, [bx+11h]
mov     ax, [di+7]
mov     [bp+var_4], ax
mov     bx, ax
mov     si, [bx]
mov     bx, ax
mov     ax, [bx+2]
mov     [bp+var_2], ax
test    byte ptr [di+6], 10h
jz      short loc_1704A
inc     byte ptr [si]
mov     al, [si]
mov     ah, 0
cmp     ax, [bp+var_2]
jl      short loc_17057
mov     byte ptr [si], 0
jmp     short loc_17057

loc_1704A:
inc     word ptr [si]
mov     ax, [si]
cmp     ax, [bp+var_2]
jl      short loc_17057
mov     word ptr [si], 0

loc_17057:
push    word ptr ds:1F8Ch
call    sub_1787A
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_17009 endp



; Attributes: bp-based frame

sub_17064 proc near

var_86= word ptr -86h
var_84= word ptr -84h
var_82= word ptr -82h
var_80= byte ptr -80h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 86h
push    si
push    di
xor     di, di
mov     ax, ds:1F8Ch
cmp     ax, [bp+arg_0]
jz      short loc_1708C
push    ax
call    sub_16DAE
mov     ax, [bp+arg_0]
mov     ds:1F8Ch, ax
mov     bx, ds:1F88h
mov     [bx+5], ax
push    ax
call    sub_16D95

loc_1708C:
mov     ax, [bp+arg_0]
mov     dx, 0Bh
mul     dx
mov     si, ax
mov     bx, ds:1F88h
add     si, [bx+11h]
mov     ax, [si+3]
mov     bx, ds:1F90h
shl     bx, 1
shl     bx, 1
mov     [bx-72BCh], ax
mov     al, [si+5]
mov     ah, 0
cmp     ax, 6           ; switch 7 cases
jbe     short loc_170B9
jmp     def_170BD       ; jumptable 000170BD default case, cases 1,5

loc_170B9:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_170BD[bx] ; switch jump
jpt_170BD dw offset loc_170D6 ; jump table for switch statement
dw offset def_170BD
dw offset loc_17199
dw offset loc_170D0
dw offset loc_1722C
dw offset def_170BD
dw offset loc_1719F

loc_170D0:              ; jumptable 000170BD case 3
mov     word ptr ds:1F9Ch, 1

loc_170D6:              ; jumptable 000170BD case 0
cmp     word ptr [si+7], 0
jnz     short loc_170DF
jmp     loc_1722C       ; jumptable 000170BD case 4

loc_170DF:
mov     bx, ds:1F88h
mov     al, [bx+0Bh]
mov     ah, 0
inc     ax
inc     ax
mov     [bp+var_86], ax
cmp     word ptr ds:1F9Ch, 0
jz      short loc_170FF
mov     al, [bx+0Fh]
mov     ah, 0
dec     ax
add     [bp+var_86], ax

loc_170FF:
mov     bx, ds:1F88h
mov     al, [bx+0Ch]
mov     ah, 0
add     ax, ds:1F8Ch
inc     ax
inc     ax
mov     [bp+var_84], ax
mov     ax, [si+7]
mov     ds:1F88h, ax
cmp     word ptr ds:1F9Ch, 0
jz      short loc_1713F
mov     bx, ax
mov     bx, [bx+13h]
mov     ax, [bx]
mov     ds:1F8Ch, ax
test    byte ptr [si+6], 10h
jz      short loc_17135
and     word ptr ds:1F8Ch, 0FFh

loc_17135:
mov     ax, ds:1F8Ch
mov     bx, ds:1F88h
mov     [bx+5], ax

loc_1713F:
push    word ptr ds:1F88h
call    sub_16F0E
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 2
jnz     short loc_1718A
cmp     byte ptr [bx+2], 0
jz      short loc_1716E
mov     al, byte ptr [bp+var_86]
mov     dl, [bx+0Bh]
sub     al, dl
add     [bx+0Dh], al
mov     al, byte ptr [bp+var_84]
mov     dl, [bx+0Ch]
sub     al, dl
add     [bx+0Eh], al

loc_1716E:
mov     al, byte ptr [bp+var_86]
mov     bx, ds:1F88h
mov     [bx+0Bh], al
mov     al, byte ptr [bp+var_84]
mov     [bx+0Ch], al
cmp     byte ptr [bx+2], 0
jz      short loc_1718A
push    bx
call    sub_16A99

loc_1718A:
call    sub_16A7D
call    sub_16E9C
xor     ax, ax
push    ax
call    sub_17C15
jmp     def_170BD       ; jumptable 000170BD default case, cases 1,5

loc_17199:              ; jumptable 000170BD case 2
call    sub_17009
jmp     loc_1722C       ; jumptable 000170BD case 4

loc_1719F:              ; jumptable 000170BD case 6
mov     ax, [si+7]
mov     [bp+var_82], ax
lea     ax, [bp+var_80]
push    ax
mov     bx, [bp+var_82]
push    word ptr [bx+2]
call    sub_19458
mov     bx, [bp+var_82]
push    word ptr [bx]
push    word ptr [bx+2]
mov     bx, ds:1F88h
mov     al, [bx+0Bh]
mov     ah, 0
inc     ax
push    ax
mov     al, [bx+0Ch]
mov     ah, 0
add     ax, ds:1F8Ch
inc     ax
push    ax
mov     bx, [bp+var_82]
push    word ptr [bx+4]
mov     ax, [bx+4]
shr     ax, 1
push    ax
call    sub_18E6D
mov     di, ax
mov     ax, di
or      ax, ax
jge     short loc_17202
cmp     di, 0FFFFh
jnz     short loc_171F2
xor     di, di

loc_171F2:
mov     bx, [bp+var_82]
push    word ptr [bx+2]
lea     ax, [bp+var_80]
push    ax
call    sub_19458
jmp     short def_170BD ; jumptable 000170BD default case, cases 1,5

loc_17202:
test    byte ptr [si+6], 8
jnz     short loc_17212
mov     bx, [bp+var_82]
push    word ptr [bx+2]
call    sub_1943A

loc_17212:
xor     di, di
test    byte ptr [si+6], 80h
jnz     short loc_1722C ; jumptable 000170BD case 4
mov     bx, [bp+var_82]
push    word ptr [bx+2]
lea     ax, [bp+var_80]
push    ax
call    sub_19497
or      ax, ax
jz      short def_170BD ; jumptable 000170BD default case, cases 1,5

loc_1722C:              ; jumptable 000170BD case 4
mov     di, [si+3]

def_170BD:              ; jumptable 000170BD default case, cases 1,5
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_17064 endp



; Attributes: bp-based frame

sub_17239 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
cmp     [bp+arg_0], 0
jz      short loc_17288
xor     si, si
jmp     short loc_1727B

loc_17248:
mov     ax, si
mov     dx, 0Bh
mul     dx
mov     di, ax
mov     bx, ds:1F88h
add     di, [bx+11h]
push    [bp+arg_0]
call    sub_46F25
push    ax
mov     al, [di+2]
cbw
pop     dx
cmp     dx, ax
jnz     short loc_1727A
test    byte ptr [di+6], 1
jnz     short loc_1727A
mov     ax, [di+9]
mov     ds:1DD3h, ax
mov     ax, si
jmp     short loc_1728B

loc_1727A:
inc     si

loc_1727B:
mov     bx, ds:1F88h
mov     al, [bx+10h]
mov     ah, 0
cmp     ax, si
jg      short loc_17248

loc_17288:
mov     ax, 0FFFFh

loc_1728B:
pop     di
pop     si
pop     bp
retn    2
sub_17239 endp



; Attributes: bp-based frame

sub_17291 proc near

var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
xor     di, di
jmp     def_17308       ; jumptable 00017308 default case, cases 6-8

loc_1729E:
mov     word ptr ds:40DAh, 0
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, ds:1F88h
pop     ax
add     ax, [bx+11h]
mov     bx, ax
mov     ax, [bx+9]
mov     ds:1DD3h, ax
call    sub_15852
mov     [bp+var_2], ax
and     ax, 0FFh
push    ax
call    sub_17239
mov     [bp+var_4], ax
cmp     ax, 0FFFFh
jz      short loc_172D7
jmp     loc_173D9

loc_172D7:
push    [bp+var_2]
call    sub_11EA2
mov     [bp+var_4], ax
cmp     ax, 0FFFFh
jge     short loc_172EE
mov     ds:1F9Eh, ax
mov     ax, 0FFFCh
jmp     loc_173D9

loc_172EE:
mov     bx, ds:1F88h
mov     al, [bx+4]
mov     ah, 0
mov     si, ax
mov     ax, [bp+var_4]
cmp     ax, 0Ah         ; switch 11 cases
jbe     short loc_17304
jmp     def_17308       ; jumptable 00017308 default case, cases 6-8

loc_17304:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_17308[bx] ; switch jump
jpt_17308 dw offset loc_1738D ; jump table for switch statement
dw offset loc_1739E
dw offset loc_17344
dw offset loc_17365
dw offset loc_173BD
dw offset loc_173C8
dw offset def_17308
dw offset def_17308
dw offset def_17308
dw offset loc_17323
dw offset loc_17337

loc_17323:              ; jumptable 00017308 case 9
mov     bx, ds:1F88h
mov     al, [bx+10h]
mov     ah, 0
push    ax
mov     ax, 1
push    ax
call    sub_16DE6
jmp     def_17308       ; jumptable 00017308 default case, cases 6-8

loc_17337:              ; jumptable 00017308 case 10
xor     ax, ax
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_16DE6
jmp     def_17308       ; jumptable 00017308 default case, cases 6-8

loc_17344:              ; jumptable 00017308 case 2
cmp     si, 1
jz      short loc_17354
or      si, si
jnz     short loc_1735C
cmp     word ptr ds:1F9Ah, 0
jz      short loc_1735C

loc_17354:
mov     [bp+var_6], 0FFFEh
jmp     loc_173C3

loc_1735C:
or      si, si
jz      short loc_17363
jmp     def_17308       ; jumptable 00017308 default case, cases 6-8

loc_17363:
jmp     short loc_17391

loc_17365:              ; jumptable 00017308 case 3
cmp     si, 1
jz      short loc_17375
or      si, si
jnz     short loc_1737C
cmp     word ptr ds:1F9Ah, 0
jz      short loc_1737C

loc_17375:
mov     [bp+var_6], 0FFFDh
jmp     short loc_173C3

loc_1737C:
or      si, si
jnz     short def_17308 ; jumptable 00017308 default case, cases 6-8

loc_17380:
push    word ptr ds:1F8Ch
mov     ax, 1
push    ax
call    sub_16DE6
jmp     short def_17308 ; jumptable 00017308 default case, cases 6-8

loc_1738D:              ; jumptable 00017308 case 0
or      si, si
jz      short def_17308 ; jumptable 00017308 default case, cases 6-8

loc_17391:
push    word ptr ds:1F8Ch
mov     ax, 0FFFFh
push    ax
call    sub_16DE6
jmp     short def_17308 ; jumptable 00017308 default case, cases 6-8

loc_1739E:              ; jumptable 00017308 case 1
or      si, si
jnz     short loc_17380
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, ds:1F88h
pop     ax
add     ax, [bx+11h]
mov     bx, ax
cmp     word ptr [bx+7], 0
jz      short def_17308 ; jumptable 00017308 default case, cases 6-8

loc_173BD:              ; jumptable 00017308 case 4
mov     ax, ds:1F8Ch
mov     [bp+var_6], ax

loc_173C3:
mov     di, 1
jmp     short def_17308 ; jumptable 00017308 default case, cases 6-8

loc_173C8:              ; jumptable 00017308 case 5
mov     [bp+var_6], 0FFFFh
jmp     short loc_173C3

def_17308:              ; jumptable 00017308 default case, cases 6-8
or      di, di
jnz     short loc_173D6
jmp     loc_1729E

loc_173D6:
mov     ax, [bp+var_6]

loc_173D9:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_17291 endp




sub_173DF proc near
push    si
xor     si, si
jmp     short loc_17419

loc_173E4:
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     ax, [bx-72BAh]
mov     ds:1F88h, ax
or      ax, ax
jz      short loc_17418
mov     bx, ax
cmp     word ptr [bx+9], 0FFFFh
jnz     short loc_17408
mov     bx, ax
mov     byte ptr [bx+3], 1
call    sub_16E9C
jmp     short loc_17418

loc_17408:
mov     bx, ds:1F88h
push    word ptr [bx+9]
call    sub_1E8C0
xor     ax, ax
push    ax
call    sub_1DC5F

loc_17418:
inc     si

loc_17419:
cmp     si, ds:1F90h
jle     short loc_173E4
xor     si, si
jmp     short loc_17454

loc_17423:
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     ax, [bx-72BAh]
mov     ds:1F88h, ax
or      ax, ax
jz      short loc_17453
mov     bx, ax
push    word ptr [bx+9]
call    sub_1E8C0
xor     ax, ax
push    ax
call    sub_1DCE5
mov     bx, ds:1F88h
mov     ax, [bx+5]
mov     ds:1F8Ch, ax
mov     ax, 1
push    ax
call    sub_17C15

loc_17453:
inc     si

loc_17454:
cmp     si, ds:1F90h
jle     short loc_17423
call    sub_1DA35
mov     ds:1FA0h, ax
pop     si
retn
sub_173DF endp



; Attributes: bp-based frame

sub_17462 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     word ptr ds:8D6Ch, 0
jz      short loc_174AD
push    ds
mov     ax, 8D6Eh
push    ax
push    ds
mov     ax, 8D44h
push    ax
mov     ax, 28h ; '('
push    ax
call    sub_46A2C
mov     ax, ds:1F92h
mov     ds:1F88h, ax
mov     ax, ds:1F94h
mov     ds:1F8Ah, ax
mov     ax, ds:1F96h
mov     ds:1F8Ch, ax
mov     ax, ds:8D1Ah
mov     ds:1F90h, ax
push    [bp+arg_0]
push    word ptr ds:1F98h
call    sub_177BE
mov     ax, ds:8D18h
mov     ds:1F90h, ax
mov     word ptr ds:8D6Ch, 0

loc_174AD:
pop     bp
retn    2
sub_17462 endp



; Attributes: bp-based frame

sub_174B1 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
push    [bp+arg_0]
call    sub_17462
cmp     word ptr ds:1F90h, 0
jl      short loc_17524
mov     ax, [bp+arg_0]
mov     ds:1F8Eh, ax
mov     bx, ax
mov     byte ptr [bx+5], 0
call    sub_1DA35
cmp     ax, ds:1FA0h
jz      short loc_174E0
call    sub_173DF
jmp     short loc_1751D

loc_174E0:
xor     si, si
jmp     short loc_17517

loc_174E4:
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     ax, [bx-72BAh]
mov     ds:1F88h, ax
or      ax, ax
jz      short loc_17516
cmp     si, ds:1F90h
jz      short loc_17503
mov     bx, ax
cmp     word ptr [bx+9], 0FFFFh
jnz     short loc_17516

loc_17503:
mov     bx, ds:1F88h
mov     ax, [bx+5]
mov     ds:1F8Ch, ax
call    sub_16E9C
xor     ax, ax
push    ax
call    sub_17C15

loc_17516:
inc     si

loc_17517:
cmp     si, ds:1F90h
jle     short loc_174E4

loc_1751D:
cmp     word ptr ds:1F88h, 0
jnz     short loc_1752A

loc_17524:
mov     ax, 0FFFFh
jmp     loc_176F6

loc_1752A:
call    sub_16A7D
mov     [bp+var_8], 0
jmp     loc_1761A

loc_17535:
call    sub_17291
mov     di, ax
mov     ax, di
sub     ax, 0FFFCh      ; switch 4 cases
cmp     ax, 3
jbe     short loc_17547
jmp     def_1754B       ; jumptable 0001754B default case

loc_17547:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1754B[bx] ; switch jump
jpt_1754B dw offset loc_17594 ; jump table for switch statement
dw offset loc_17569
dw offset loc_17569
dw offset loc_17558

loc_17558:              ; jumptable 0001754B case -1
call    sub_16F93
mov     [bp+var_8], ax
call    sub_16A7D
mov     [bp+var_6], 0FFFFh
jmp     loc_1761A

loc_17569:              ; jumptable 0001754B cases -3,-2
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 1
jnz     short loc_17576
call    sub_16E55

loc_17576:
push    word ptr ds:1F8Ch
cmp     di, 0FFFDh
jnz     short loc_17584
mov     ax, 1
jmp     short loc_17587

loc_17584:
mov     ax, 0FFFFh

loc_17587:
push    ax
call    sub_16D31
mov     di, ax
push    di
call    sub_17064
jmp     loc_1761A

loc_17594:              ; jumptable 0001754B case -4
mov     [bp+var_8], 1
mov     ax, ds:1F9Eh
mov     [bp+var_6], ax
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, ds:1F88h
pop     ax
add     ax, [bx+11h]
mov     bx, ax
mov     ax, [bx+3]
mov     bx, ds:1F90h
shl     bx, 1
shl     bx, 1
mov     [bx-72BCh], ax
jmp     short loc_1761A

def_1754B:              ; jumptable 0001754B default case
push    di
call    sub_17064
mov     [bp+var_8], ax
or      ax, ax
jz      short loc_1761A
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ds:1F88h
add     ax, [bx+11h]
mov     [bp+var_2], ax
mov     ax, [bp+var_8]
mov     [bp+var_6], ax
cmp     word ptr ds:1F9Ch, 0
jz      short loc_1761A
mov     ax, [bx+13h]
mov     [bp+var_4], ax
mov     bx, [bp+var_2]
test    byte ptr [bx+6], 10h
jz      short loc_17608
mov     al, ds:1F8Ch
mov     bx, [bp+var_4]
mov     [bx], al
jmp     short loc_17610

loc_17608:
mov     ax, ds:1F8Ch
mov     bx, [bp+var_4]
mov     [bx], ax

loc_17610:
call    sub_16E55
push    word ptr ds:1F8Ch
call    sub_1787A

loc_1761A:
cmp     [bp+var_8], 0
jnz     short loc_17623
jmp     loc_17535

loc_17623:
xor     si, si
jmp     short loc_17646

loc_17627:
mov     bx, si
add     bx, ds:1F90h
sub     bx, ds:1F8Ah
inc     bx
shl     bx, 1
shl     bx, 1
mov     ax, [bx-72BCh]
mov     bx, si
shl     bx, 1
add     bx, ds:1F8Eh
mov     [bx+8], ax
inc     si

loc_17646:
mov     ax, ds:1F8Ah
dec     ax
cmp     ax, si
jge     short loc_17627
mov     ax, ds:1F8Ah
mov     bx, ds:1F8Eh
mov     [bx+6], ax
mov     bx, ds:1F88h
mov     al, [bx+0Bh]
mov     bx, ds:1F8Eh
mov     [bx+3], al
mov     bx, ds:1F88h
mov     al, [bx+0Ch]
add     al, ds:1F8Ch
inc     al
mov     bx, ds:1F8Eh
mov     [bx+4], al
or      di, di
jge     short loc_17695
mov     ax, [bp+var_6]
mov     bx, ds:1F8Ah
shl     bx, 1
add     bx, ds:1F8Eh
mov     [bx+8], ax
mov     bx, ds:1F8Eh
inc     word ptr [bx+6]

loc_17695:
cmp     di, 0FFFCh
jz      short loc_176F3
jmp     short loc_176C3

loc_1769C:
mov     ax, ds:1F8Ch
mov     dx, 0Bh
mul     dx
mov     bx, ds:1F88h
add     ax, [bx+11h]
mov     [bp+var_2], ax
mov     bx, ax
test    byte ptr [bx+6], 4
jnz     short loc_176CA
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 0
jz      short loc_176CA
call    sub_16E55

loc_176C3:
cmp     word ptr ds:1F88h, 0
jnz     short loc_1769C

loc_176CA:
cmp     word ptr ds:1F88h, 0
jz      short loc_176F3
mov     bx, [bp+var_2]
test    byte ptr [bx+6], 4
jnz     short loc_176F3
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 0
jnz     short loc_176F3
push    word ptr ds:1F8Ch
call    sub_16DAE
mov     bx, ds:1F8Eh
mov     byte ptr [bx+5], 1

loc_176F3:
mov     ax, [bp+var_6]

loc_176F6:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_174B1 endp




sub_176FE proc near
cmp     word ptr ds:1F88h, 0
jz      short locret_1771F
mov     bx, ds:1F88h
cmp     word ptr [bx+9], 0FFFFh
jz      short locret_1771F
push    word ptr [bx+9]
call    sub_1E8C0
mov     bx, ds:1F88h
push    word ptr [bx+5]
call    sub_16DAE

locret_1771F:
retn
sub_176FE endp



; Attributes: bp-based frame

sub_17720 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     si, ds:1F8Ah
or      di, di
jge     short loc_17737
or      si, si
jz      short loc_17749
dec     si
jmp     short loc_1773D

loc_17737:
cmp     di, si
jg      short loc_1773D
sub     si, di

loc_1773D:
push    si
call    sub_16F3E
cmp     di, 0FFFFh
jnz     short loc_17749
call    sub_176FE

loc_17749:
pop     di
pop     si
pop     bp
retn    2
sub_17720 endp



; Attributes: bp-based frame

sub_1774F proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
cmp     word ptr ds:8D6Ch, 0
jnz     short loc_177B9
push    ds
mov     ax, 8D44h
push    ax
push    ds
mov     ax, 8D6Eh
push    ax
mov     ax, 28h ; '('
push    ax
call    sub_46A2C
mov     ax, ds:1F90h
mov     ds:8D18h, ax
mov     ax, ds:1F88h
mov     ds:1F92h, ax
mov     ax, ds:1F8Ah
mov     ds:1F94h, ax
mov     ax, ds:1F8Ch
mov     ds:1F96h, ax
mov     si, ds:1F90h
jmp     short loc_177A5

loc_1778B:
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     ax, [bx-72BAh]
mov     ds:1F88h, ax
or      ax, ax
jz      short loc_177A4
mov     bx, ax
cmp     word ptr [bx+9], 0FFFFh
jnz     short loc_177A9

loc_177A4:
dec     si

loc_177A5:
or      si, si
jge     short loc_1778B

loc_177A9:
mov     ds:8D1Ah, si
push    [bp+arg_0]
call    sub_17720
mov     word ptr ds:8D6Ch, 1

loc_177B9:
pop     si
pop     bp
retn    2
sub_1774F endp



; Attributes: bp-based frame

sub_177BE proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     ax, [bp+arg_2]
mov     ds:1F8Eh, ax
mov     si, ds:1F88h
mov     di, ds:1F8Ch
call    sub_173DF
cmp     [bp+arg_0], 0
jnz     short loc_177DD
call    sub_176FE

loc_177DD:
mov     ds:1F88h, si
mov     ds:1F8Ch, di
pop     di
pop     si
pop     bp
retn    4
sub_177BE endp




sub_177EB proc near
mov     word ptr ds:8D6Ch, 0
retn
sub_177EB endp




sub_177F2 proc near
mov     bx, ds:1F88h
mov     al, [bx+4]
mov     ah, 0
or      ax, ax
jz      short loc_1780B
cmp     ax, 1
jz      short loc_17815
cmp     ax, 2
jz      short loc_17820
jmp     short loc_1782B

loc_1780B:
mov     bx, ds:1F8Eh
mov     al, [bx]
mov     ah, 0
jmp     short locret_1782D

loc_17815:
mov     bx, ds:1F8Eh
mov     al, [bx+1]
mov     ah, 0
jmp     short locret_1782D

loc_17820:
mov     bx, ds:1F8Eh
mov     al, [bx+2]
mov     ah, 0
jmp     short locret_1782D

loc_1782B:
xor     ax, ax

locret_1782D:
retn
sub_177F2 endp




sub_1782E proc near
mov     bx, ds:1F88h
mov     al, [bx+0Bh]
mov     ah, 0
push    ax
mov     al, [bx+0Ch]
mov     ah, 0
push    ax
mov     al, [bx+0Dh]
mov     ah, 0
push    ax
mov     al, [bx+0Eh]
mov     ah, 0
push    ax
call    sub_177F2
push    ax
mov     bx, ds:1F88h
mov     bx, [bx+7]
mov     al, [bx+1]
mov     ah, 0
push    ax
mov     bx, ds:1F88h
mov     bx, [bx+7]
mov     al, [bx+3]
mov     ah, 0
push    ax
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_1E93C
mov     bx, ds:1F88h
mov     [bx+9], ax
retn
sub_1782E endp



; Attributes: bp-based frame

sub_1787A proc near

var_110= byte ptr -110h
var_10F= byte ptr -10Fh
var_70= byte ptr -70h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= byte ptr -20h
var_1F= byte ptr -1Fh
var_1E= byte ptr -1Eh
var_1D= byte ptr -1Dh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 110h
push    si
push    di
mov     bx, ds:1F88h
mov     ax, [bx+7]
mov     [bp+var_24], ax
mov     ax, [bp+arg_0]
mov     dx, 0Bh
mul     dx
mov     di, ax
add     di, [bx+11h]
mov     ax, [di+7]
mov     [bp+var_22], ax
mov     ax, [bp+arg_0]
cmp     ax, ds:1F8Ch
jnz     short loc_178BD
mov     bx, [bp+var_24]
mov     al, [bx+2]
mov     [bp+var_1E], al
mov     [bp+var_1D], al
mov     al, [bx+3]
mov     [bp+var_1F], al
jmp     short loc_17903

loc_178BD:
cmp     byte ptr [di+5], 5
jnz     short loc_178D4
mov     bx, [bp+var_24]
mov     al, [bx+1]
mov     [bp+var_1E], al
call    sub_177F2
mov     [bp+var_10], ax
jmp     short loc_17903

loc_178D4:
test    byte ptr [di+6], 1
jz      short loc_178F1
cmp     byte ptr [di+5], 1
jz      short loc_178F1
mov     bx, [bp+var_24]
mov     al, [bx+4]
mov     [bp+var_1F], al
mov     [bp+var_1D], al
mov     [bp+var_1E], al
jmp     short loc_17903

loc_178F1:
mov     bx, [bp+var_24]
mov     al, [bx+3]
mov     [bp+var_1F], al
mov     [bp+var_1E], al
mov     al, [bx+5]
mov     [bp+var_1D], al

loc_17903:
cmp     byte ptr [di+5], 1
jnz     short loc_17912
mov     bx, [di]
mov     al, [bx]
mov     [bp+var_20], al
jmp     short loc_1792E

loc_17912:
cmp     byte ptr [di+5], 5
jnz     short loc_1792A
mov     bx, [bp+var_10]
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     al, [bx+1B0Ah]
mov     [bp+var_20], al
jmp     short loc_1792E

loc_1792A:
mov     [bp+var_20], 20h ; ' '

loc_1792E:
mov     si, [di]
push    si
call    sub_19448
mov     [bp+var_16], ax
mov     bx, ds:1F88h
cmp     byte ptr [bx+4], 0
jnz     short loc_17994
cmp     [bp+arg_0], 0
jz      short loc_1795B
mov     [bp+var_8], 0
mov     bx, [bp+arg_0]
shl     bx, 1
mov     ax, [bx-72E4h]
inc     ax
mov     [bp+var_E], ax
jmp     short loc_1796C

loc_1795B:
mov     bx, [bp+arg_0]
shl     bx, 1
mov     ax, [bx-72E4h]
mov     [bp+var_8], ax
mov     [bp+var_E], 1

loc_1796C:
mov     ax, [bp+var_8]
mov     [bp+var_6], ax
add     ax, [bp+var_16]
dec     ax
mov     [bp+var_4], ax
mov     bx, [bp+arg_0]
inc     bx
shl     bx, 1
mov     ax, [bx-72E4h]
mov     [bp+var_C], ax
mov     [bp+var_A], 1
sub     ax, [bp+var_E]
inc     ax
mov     [bp+var_2], ax
jmp     short loc_179D8

loc_17994:
cmp     byte ptr [di+5], 5
jz      short loc_1799F
mov     ax, 1
jmp     short loc_179A1

loc_1799F:
xor     ax, ax

loc_179A1:
mov     [bp+var_E], ax
mov     bx, ds:1F88h
mov     al, [bx+0Dh]
mov     ah, 0
mov     dl, [bx+0Bh]
mov     dh, 0
sub     ax, dx
sub     ax, [bp+var_E]
mov     [bp+var_C], ax
mov     ax, [bp+arg_0]
inc     ax
mov     [bp+var_A], ax
mov     [bp+var_8], 0
mov     [bp+var_6], 1
mov     ax, [bp+var_C]
sub     ax, [bp+var_E]
inc     ax
mov     [bp+var_2], ax
mov     [bp+var_4], ax

loc_179D8:
mov     [bp+var_1C], 0
jmp     short loc_17A14

loc_179DF:
mov     al, [bp+var_20]
mov     bx, [bp+var_1C]
shl     bx, 1
lea     dx, [bp+var_110]
add     bx, dx
mov     [bx], al
mov     ax, [bp+var_1C]
cmp     ax, [bp+var_8]
jl      short loc_179FC
cmp     ax, [bp+var_4]
jle     short loc_17A01

loc_179FC:
mov     al, [bp+var_1F]
jmp     short loc_17A04

loc_17A01:
mov     al, [bp+var_1E]

loc_17A04:
mov     bx, [bp+var_1C]
shl     bx, 1
lea     dx, [bp+var_10F]
add     bx, dx
mov     [bx], al
inc     [bp+var_1C]

loc_17A14:
mov     ax, [bp+var_1C]
cmp     ax, [bp+var_2]
jl      short loc_179DF
cmp     byte ptr [di+5], 5
jnz     short loc_17A4F
mov     bx, [bp+var_10]
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     al, [bx+1B0Ch]
mov     [bp+var_110], al
mov     bx, [bp+var_10]
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     al, [bx+1B0Dh]
mov     bx, [bp+var_C]
shl     bx, 1
lea     dx, [bp+var_110]
add     bx, dx
mov     [bx], al
jmp     short loc_17A96

loc_17A4F:
mov     ax, [bp+var_6]
mov     [bp+var_1C], ax
mov     [bp+var_14], 0
jmp     short loc_17A91

loc_17A5C:
mov     al, [si]
mov     bx, [bp+var_1C]
shl     bx, 1
lea     dx, [bp+var_110]
add     bx, dx
mov     [bx], al
cmp     [bp+var_14], 0
jnz     short loc_17A8D
mov     al, [si]
cmp     al, [di+2]
jnz     short loc_17A8D
mov     [bp+var_14], 1
mov     al, [bp+var_1D]
mov     bx, [bp+var_1C]
shl     bx, 1
lea     dx, [bp+var_10F]
add     bx, dx
mov     [bx], al

loc_17A8D:
inc     si
inc     [bp+var_1C]

loc_17A91:
cmp     byte ptr [si], 0
jnz     short loc_17A5C

loc_17A96:
mov     bx, ds:1F88h
mov     al, [bx+0Fh]
mov     ah, 0
mov     [bp+var_1C], ax
mov     al, [bx+0Dh]
mov     ah, 0
mov     dl, [bx+0Bh]
mov     dh, 0
sub     ax, dx
add     ax, 0FFFDh
mov     [bp+var_1A], ax
xor     si, si
mov     al, [di+5]
mov     ah, 0
dec     ax
dec     ax              ; switch 5 cases
cmp     ax, 4
jbe     short loc_17AC5
jmp     def_17AC9       ; jumptable 00017AC9 default case, case 4

loc_17AC5:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_17AC9[bx] ; switch jump
jpt_17AC9 dw offset loc_17AD8 ; jump table for switch statement
dw offset loc_17B05
dw offset loc_17B36
dw offset def_17AC9
dw offset loc_17B43

loc_17AD8:              ; jumptable 00017AC9 case 1
mov     bx, [bp+var_22]
mov     ax, [bx]
mov     [bp+var_12], ax
test    byte ptr [di+6], 10h
jz      short loc_17AF0
mov     bx, ax
mov     al, [bx]
mov     ah, 0
mov     bx, ax
jmp     short loc_17AF5

loc_17AF0:
mov     bx, [bp+var_12]
mov     bx, [bx]

loc_17AF5:
shl     bx, 1
push    bx
mov     bx, [bp+var_22]
pop     ax
add     ax, [bx+4]
mov     bx, ax
mov     si, [bx]
jmp     short def_17AC9 ; jumptable 00017AC9 default case, case 4

loc_17B05:              ; jumptable 00017AC9 case 2
mov     bx, [bp+var_22]
mov     ax, [bx+13h]
mov     [bp+var_12], ax
test    byte ptr [di+6], 10h
jz      short loc_17B1C
mov     bx, ax
mov     al, [bx]
mov     ah, 0
jmp     short loc_17B21

loc_17B1C:
mov     bx, [bp+var_12]
mov     ax, [bx]

loc_17B21:
mov     dx, 0Bh
mul     dx
mov     bx, ax
push    bx
mov     bx, [bp+var_22]
pop     ax
add     ax, [bx+11h]
mov     bx, ax
mov     si, [bx]
jmp     short def_17AC9 ; jumptable 00017AC9 default case, case 4

loc_17B36:              ; jumptable 00017AC9 case 3
mov     bx, [bp+var_22]
mov     si, [bx+2]
mov     ax, [bx]
mov     [bp+var_16], ax
jmp     short def_17AC9 ; jumptable 00017AC9 default case, case 4

loc_17B43:              ; jumptable 00017AC9 case 5
mov     bx, [bp+var_22]
mov     ax, [bx+6]
mov     [bp+var_16], ax
or      ax, ax
jz      short def_17AC9 ; jumptable 00017AC9 default case, case 4
mov     si, [bx+2]

def_17AC9:              ; jumptable 00017AC9 default case, case 4
test    byte ptr [di+6], 20h
jz      short loc_17B6B
push    si
call    sub_19C1B
mov     byte ptr ds:9179h, 0
lea     ax, [bp+var_70]
push    ax
call    sub_19C39
jmp     short loc_17B7C

loc_17B6B:
test    byte ptr [di+6], 40h
jz      short loc_17B7F
push    si
lea     ax, [bp+var_70]
push    ax
push    [bp+var_16]
call    sub_12515

loc_17B7C:
lea     si, [bp+var_70]

loc_17B7F:
or      si, si
jz      short loc_17BCC
test    byte ptr [di+6], 2
jz      short loc_17BBF
push    si
call    sub_19448
mov     bx, ds:1F88h
mov     dl, [bx+0Fh]
mov     dh, 0
mov     bx, [bp+var_1A]
sub     bx, dx
sub     bx, ax
inc     bx
mov     [bp+var_18], bx
or      bx, bx
jle     short loc_17BBF
mov     ax, bx
add     [bp+var_1C], ax
jmp     short loc_17BBF

loc_17BAC:
mov     al, [si]
mov     bx, [bp+var_1C]
shl     bx, 1
lea     dx, [bp+var_110]
add     bx, dx
mov     [bx], al
inc     si
inc     [bp+var_1C]

loc_17BBF:
cmp     byte ptr [si], 0
jz      short loc_17BCC
mov     ax, [bp+var_1C]
cmp     ax, [bp+var_1A]
jle     short loc_17BAC

loc_17BCC:
push    [bp+var_E]
push    [bp+var_A]
push    [bp+var_C]
push    [bp+var_A]
lea     ax, [bp+var_110]
push    ax
xor     ax, ax
push    ax
call    sub_1D8CC
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1787A endp




sub_17BEB proc near
push    si
mov     bx, ds:1F88h
mov     si, [bx+7]
call    sub_177F2
push    ax
mov     al, [si+1]
mov     ah, 0
push    ax
call    sub_1DA05
mov     bx, ds:1F88h
cmp     word ptr [bx], 0
jz      short loc_17C13
push    word ptr [bx]
mov     al, [si]
mov     ah, 0
push    ax
call    sub_1E90D

loc_17C13:
pop     si
retn
sub_17BEB endp



; Attributes: bp-based frame

sub_17C15 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
cmp     [bp+arg_0], 0
jz      short loc_17C35
mov     bx, ds:1F88h
mov     bx, [bx+7]
mov     al, [bx+3]
mov     ah, 0
push    ax
xor     ax, ax
push    ax
call    sub_1D98E
call    sub_17BEB

loc_17C35:
xor     si, si
jmp     short loc_17C3E

loc_17C39:
push    si
call    sub_1787A
inc     si

loc_17C3E:
mov     bx, ds:1F88h
mov     al, [bx+10h]
mov     ah, 0
cmp     ax, si
jg      short loc_17C39
pop     si
pop     bp
retn    2
sub_17C15 endp



; Attributes: bp-based frame

sub_17C50 proc near

var_4= word ptr -4
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, 2217h
mov     [bp+var_1], 11h
mov     [bp+var_4], 0
jmp     short loc_17CA1

loc_17C66:
mov     bx, [bp+var_4]
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     dx, 52h ; 'R'
mul     dx
mov     si, ax
add     si, 8E31h
cmp     byte ptr [si], 0
jz      short loc_17CA7
push    si
push    word ptr [di]
mov     ax, 32h ; '2'
push    ax
call    sub_12515
mov     bx, di
inc     di
inc     di
push    word ptr [bx]
call    sub_19448
mov     dl, [bp+var_1]
mov     dh, 0
cmp     ax, dx
jle     short loc_17C9E
mov     [bp+var_1], al

loc_17C9E:
inc     [bp+var_4]

loc_17CA1:
cmp     [bp+var_4], 9
jl      short loc_17C66

loc_17CA7:
inc     [bp+var_4]
mov     word ptr ds:30B1h, 1
mov     al, ds:30B7h
add     al, [bp+var_1]
add     al, 3
mov     ds:30B9h, al
mov     al, ds:30B8h
add     al, byte ptr [bp+var_4]
inc     al
mov     ds:30BAh, al
mov     al, byte ptr [bp+var_4]
mov     ds:30BCh, al
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_17C50 endp



; Attributes: bp-based frame

sub_17CD2 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
jmp     short loc_17CE0

loc_17CD7:
mov     bx, [bp+arg_2]
mov     byte ptr [bx], 0
inc     [bp+arg_2]

loc_17CE0:
mov     ax, [bp+arg_0]
dec     [bp+arg_0]
or      ax, ax
jnz     short loc_17CD7
pop     bp
retn    4
sub_17CD2 endp




sub_17CEE proc near
push    si
mov     ax, ds:1C96h
push    ax
mov     ax, ds:1FF2h
mov     dx, 52h ; 'R'
mul     dx
mov     bx, ax
pop     ax
mov     [bx-71D1h], ax
push    ds
mov     ax, 1CB5h
push    ax
push    ds
mov     ax, ds:1FF2h
mov     dx, 11h
mul     dx
add     ax, 8D96h
push    ax
mov     ax, 11h
push    ax
call    sub_46A2C
mov     ax, ds:1FF2h
mov     dx, 6
mul     dx
mov     si, ax
add     si, 2004h
mov     ax, ds:1C68h
and     ax, 10h
mov     [si], ax
call    sub_11C40
mov     [si+4], dx
mov     [si+2], ax
pop     si
retn
sub_17CEE endp



; Attributes: bp-based frame

sub_17D3E proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
inc     [bp+arg_2]
mov     ax, [bp+arg_2]
cmp     ax, 9
jl      short loc_17D54
mov     bx, [bp+arg_0]
mov     byte ptr [bx], 0
jmp     short loc_17D6C

loc_17D54:
push    [bp+arg_0]
mov     bx, [bp+arg_2]
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     dx, 52h ; 'R'
mul     dx
add     ax, 8E31h
push    ax
call    sub_19458

loc_17D6C:
pop     bp
retn    4
sub_17D3E endp



; Attributes: bp-based frame

sub_17D70 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
xor     si, si
jmp     short loc_17D9D

loc_17D79:
mov     bx, si
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     dx, 52h ; 'R'
mul     dx
mov     di, ax
add     di, 8E31h
cmp     byte ptr [di], 0
jz      short loc_17DA2
push    [bp+arg_0]
push    di
call    sub_19497
or      ax, ax
jz      short loc_17DA2
inc     si

loc_17D9D:
cmp     si, 9
jl      short loc_17D79

loc_17DA2:
or      di, di
jz      short loc_17DD2
mov     byte ptr [di], 0
mov     bx, si
shl     bx, 1
mov     dx, [bx+1FF2h]
jmp     short loc_17DC5

loc_17DB3:
mov     bx, si
inc     bx
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     bx, si
shl     bx, 1
mov     [bx+1FF2h], ax
inc     si

loc_17DC5:
cmp     si, 8
jl      short loc_17DB3
mov     bx, si
shl     bx, 1
mov     [bx+1FF2h], dx

loc_17DD2:
pop     di
pop     si
pop     bp
retn    2
sub_17D70 endp



; Attributes: bp-based frame

sub_17DD8 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
xor     si, si
jmp     short loc_17E0B

loc_17DE4:
mov     bx, si
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     dx, 52h ; 'R'
mul     dx
mov     di, ax
add     di, 8E31h
cmp     byte ptr [di], 0
jz      short loc_17E10
push    ds
mov     ax, 9877h
push    ax
push    ds
push    di
call    sub_19911
or      ax, ax
jnz     short loc_17E10
inc     si

loc_17E0B:
cmp     si, 9
jl      short loc_17DE4

loc_17E10:
cmp     si, 9
jz      short loc_17E1A
cmp     byte ptr [di], 0
jnz     short loc_17E1F

loc_17E1A:
mov     ax, 1
jmp     short loc_17E21

loc_17E1F:
xor     ax, ax

loc_17E21:
mov     [bp+var_8], ax
cmp     si, 9
jnz     short loc_17E2A
dec     si

loc_17E2A:
mov     bx, si
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     [bp+var_6], ax
push    di
mov     ax, 9877h
push    ax
call    sub_19458
jmp     short loc_17E51

loc_17E3F:
mov     bx, si
dec     bx
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     bx, si
shl     bx, 1
mov     [bx+1FF2h], ax
dec     si

loc_17E51:
or      si, si
jnz     short loc_17E3F
mov     ax, [bp+var_6]
mov     ds:1FF2h, ax
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_46233
pop     cx
pop     cx
cmp     [bp+var_8], 0
jz      short loc_17E7F
and     word ptr ds:1C68h, 0FFEFh
mov     word ptr ds:1C96h, 0
call    sub_17CEE
jmp     loc_17F0F

loc_17E7F:
mov     ax, ds:1FF2h
mov     dx, 6
mul     dx
add     ax, 2004h
mov     [bp+var_2], ax
inc     ax
inc     ax
mov     [bp+var_4], ax
call    sub_11C40
mov     bx, [bp+var_4]
cmp     dx, [bx+2]
jnz     short loc_17EEA
cmp     ax, [bx]
jnz     short loc_17EEA
mov     ax, ds:1FF2h
mov     dx, 52h ; 'R'
mul     dx
mov     bx, ax
mov     ax, [bx-71D1h]
mov     ds:1C96h, ax
push    ds
mov     ax, ds:1FF2h
mov     dx, 11h
mul     dx
add     ax, 8D96h
push    ax
push    ds
mov     ax, 1CB5h
push    ax
mov     ax, 11h
push    ax
call    sub_46A2C
mov     ax, ds:1FF2h
mov     dx, 6
mul     dx
mov     bx, ax
mov     ax, [bx+2004h]
mov     dx, ds:1C68h
and     dx, 0FFEFh
or      ax, dx
mov     ds:1C68h, ax
jmp     short loc_17F0F

loc_17EEA:
call    sub_11C40
mov     bx, [bp+var_4]
mov     [bx+2], dx
mov     [bx], ax
mov     bx, [bp+var_2]
mov     word ptr [bx], 0
mov     ax, ds:1FF2h
mov     dx, 11h
mul     dx
add     ax, 8D96h
push    ax
mov     ax, 11h
push    ax
call    sub_17CD2

loc_17F0F:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_17DD8 endp



; Attributes: bp-based frame

sub_17F15 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, 1
mov     bx, [bp+arg_0]
cmp     byte ptr [bx], 0
jz      short loc_17F41
mov     word ptr ds:40DAh, 0Bh
mov     ax, 0FFFFh
push    ax
call    sub_156D7
push    [bp+arg_0]
mov     ax, 33Ch
push    ax
mov     ax, 0B2h
push    ax
call    sub_12100
mov     si, ax

loc_17F41:
or      si, si
jz      short loc_17F4F
mov     ax, 33Ch
push    ax
call    sub_12397
mov     ds:9111h, ax

loc_17F4F:
mov     ax, si
pop     si
pop     bp
retn    2
sub_17F15 endp



; Attributes: bp-based frame

sub_17F56 proc near

var_50= byte ptr -50h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 50h
push    si
push    di
push    [bp+arg_0]
mov     ax, 222Bh
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_14F85
push    ss
lea     ax, [bp+var_50]
push    ax
push    ds
mov     ax, 9113h
push    ax
call    sub_19911
or      ax, ax
jz      short loc_17F80
jmp     loc_1802E

loc_17F80:
mov     ax, 33Ch
push    ax
push    word ptr ds:9111h
call    sub_123DA
or      ax, ax
jz      short loc_17F96
mov     ax, 9113h
push    ax
call    sub_17F15

loc_17F96:
mov     word ptr ds:9111h, 0
cmp     [bp+var_50], 0
jnz     short loc_17FA5
jmp     loc_1802E

loc_17FA5:
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19C57
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_105F1
or      ax, ax
jnz     short loc_17FCB
lea     ax, [bp+var_50]
push    ax
call    sub_17F15
or      ax, ax
jz      short loc_18029
jmp     short loc_1801C

loc_17FCB:
mov     word ptr ds:40DAh, 0Dh
mov     ax, 0FFFFh
push    ax
call    sub_156D7
lea     ax, [bp+var_50]
push    ax
mov     ax, 33Ch
push    ax
mov     ax, 0B2h
push    ax
call    sub_11FAE
or      ax, ax
jz      short loc_18029
xor     si, si
jmp     short loc_1800D

loc_17FEF:
mov     bx, si
shl     bx, 1
mov     ax, [bx+1FF2h]
mov     dx, 52h ; 'R'
mul     dx
mov     di, ax
add     di, 8E31h
cmp     byte ptr [di], 0
jz      short loc_18012
push    ds
push    di
call    sub_10505
inc     si

loc_1800D:
cmp     si, 9
jl      short loc_17FEF

loc_18012:
mov     ax, 33Ch
push    ax
call    sub_12397
mov     ds:9111h, ax

loc_1801C:
mov     ax, 9113h
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19458
jmp     short loc_1802E

loc_18029:
mov     byte ptr ds:9113h, 0

loc_1802E:
mov     ax, 1
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_17F56 endp



; Attributes: bp-based frame

sub_18039 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     [bp+arg_0], 30ACh
jnz     short loc_18046
call    sub_17C50

loc_18046:
pop     bp
retn    2
sub_18039 endp



; Attributes: bp-based frame

sub_1804A proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_0]
mov     byte ptr ds:97F0h, 0
cmp     di, 104h
jl      short loc_1808A
cmp     di, 10Dh
jg      short loc_1808A
mov     ax, di
add     ax, 0FEFBh
push    ax
mov     ax, 97F0h
push    ax
call    sub_17D3E
cmp     byte ptr ds:97F0h, 0
jz      short loc_1807F
mov     di, 111h
jmp     short loc_1808A

loc_1807F:
mov     di, 101h
mov     al, 4
mov     ds:3497h, al
mov     ds:3496h, al

loc_1808A:
mov     ax, di
sub     ax, 101h        ; switch 18 cases
cmp     ax, 11h
jbe     short loc_18097
jmp     def_1809B       ; jumptable 0001809B default case, cases 259-269

loc_18097:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1809B[bx] ; switch jump
jpt_1809B dw offset loc_180C4 ; jump table for switch statement
dw offset loc_18106
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset def_1809B
dw offset loc_1811F
dw offset loc_180CC
dw offset loc_1819A
dw offset loc_180E9
dw offset loc_1820F

loc_180C4:              ; jumptable 0001809B case 257
call    sub_154E6
mov     si, ax
jmp     loc_18223

loc_180CC:              ; jumptable 0001809B case 271
mov     ax, 97F0h
push    ax
mov     ax, 30C1h
push    ax
xor     ax, ax
push    ax
mov     ax, 2236h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_180E9 ; jumptable 0001809B case 273
jmp     loc_18223

loc_180E9:              ; jumptable 0001809B case 273
mov     ax, 97F0h
push    ax
call    sub_152EB
mov     si, ax
mov     ax, si
or      ax, ax
jg      short loc_180FB
jmp     loc_18223

loc_180FB:
mov     byte ptr ds:98C7h, 0
mov     si, 600h
jmp     loc_18223

loc_18106:              ; jumptable 0001809B case 258
call    sub_153A6
mov     si, ax
mov     ax, si
or      ax, ax
jnz     short loc_18114
jmp     loc_18223

loc_18114:
cmp     si, 0FFFFh
jge     short loc_1811C
jmp     loc_18223

loc_1811C:
jmp     loc_18204

loc_1811F:              ; jumptable 0001809B case 270
mov     ax, 97F0h
push    ax
mov     ax, 93DCh
push    ax
xor     ax, ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_1813C
jmp     loc_18223

loc_1813C:
push    ds
mov     ax, 97F0h
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_18156
mov     ax, 97F0h
push    ax
call    sub_1913E
or      ax, ax
jnz     short loc_18156
jmp     loc_18223

loc_18156:
mov     ax, 97F0h
push    ax
call    sub_151D5
or      ax, ax
jnz     short loc_18164
jmp     loc_18223

loc_18164:
mov     ax, 9877h
push    ax
mov     ax, 97F0h
push    ax
call    sub_19C57
push    ds
mov     ax, 9877h
push    ax
push    word ptr ds:1C6Ch
push    word ptr ds:1C6Ah
call    sub_463CE
add     sp, 8
call    sub_17DD8
mov     byte ptr ds:98C7h, 0
mov     ax, 0FFFFh
push    ax
call    sub_17720
call    sub_1492F
jmp     short loc_18204

loc_1819A:              ; jumptable 0001809B case 272
mov     al, 0
push    ax
push    ds
mov     ax, 97F0h
push    ax
call    sub_10534
mov     ax, 97F0h
push    ax
call    sub_19448
mov     [bp+var_2], ax
cmp     ax, 3
jle     short loc_181BB
mov     bx, ax
mov     byte ptr [bx-6811h], 0

loc_181BB:
mov     ax, 0FF9h
push    ax
mov     ax, 97F0h
push    ax
mov     ax, 44h ; 'D'
push    ax
call    sub_1917C
mov     si, ax
mov     ax, si
cmp     ax, 4
jnz     short loc_18209
mov     ax, 97F0h
push    ax
call    sub_1943A
mov     ax, 97F0h
push    ax
call    sub_15290
cmp     ax, 1
jz      short loc_18204
cmp     ax, 2
jz      short loc_181ED
jmp     short loc_181F9

loc_181ED:
mov     ax, 1009h
push    ax
xor     ax, ax
push    ax
call    sub_19065
jmp     short loc_18223

loc_181F9:
mov     ax, 99B9h
push    ax
mov     ax, 97F0h
push    ax
call    sub_19458

loc_18204:
mov     si, 0FFE5h
jmp     short loc_18223

loc_18209:
or      si, si
jle     short loc_18223
jmp     short def_1809B ; jumptable 0001809B default case, cases 259-269

loc_1820F:              ; jumptable 0001809B case 274
xor     ax, ax
push    ax
call    sub_12268
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_18223
call    sub_13A02

def_1809B:              ; jumptable 0001809B default case, cases 259-269
mov     si, 0FFFFh

loc_18223:
or      si, si
jz      short loc_1822C
cmp     si, 4
jnz     short loc_1822F

loc_1822C:
mov     si, 0FFFFh

loc_1822F:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1804A endp



; Attributes: bp-based frame

sub_18239 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     ax, [bp+arg_0]
sub     ax, 305h        ; switch 10 cases
cmp     ax, 9
jbe     short loc_1824B
jmp     def_1824F       ; jumptable 0001824F default case, cases 775-778,780,781

loc_1824B:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1824F[bx] ; switch jump
jpt_1824F dw offset loc_18268 ; jump table for switch statement
dw offset loc_18310
dw offset def_1824F
dw offset def_1824F
dw offset def_1824F
dw offset def_1824F
dw offset loc_1837D
dw offset def_1824F
dw offset def_1824F
dw offset loc_1842D

loc_18268:              ; jumptable 0001824F case 773
mov     ax, 97F0h
push    ax
mov     ax, 2F7Ch
push    ax
xor     ax, ax
push    ax
mov     ax, 2239h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_18285
jmp     loc_1844A

loc_18285:
cmp     word ptr ds:23BDh, 0
jz      short loc_182A9
mov     ax, 0F6h
push    ax
push    word ptr ds:8254h
call    sub_123DA
or      ax, ax
jz      short loc_182A9
mov     ax, 9963h
push    ax
call    sub_121DE
or      ax, ax
jnz     short loc_182A9
jmp     loc_1844A

loc_182A9:
mov     ax, 97F0h
push    ax
call    sub_12223
or      ax, ax
jz      short loc_18302
mov     byte ptr ds:98C7h, 0
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     si, 0FFE5h
call    sub_121AD
mov     al, ds:926Eh
mov     ah, 0
cmp     ax, ds:0F2h
jz      short loc_182DF
mov     ax, ds:0F0h
mov     ds:23C5h, ax
xor     ax, ax
push    ax
call    sub_1A4C4
jmp     short loc_182F1

loc_182DF:
mov     ax, ds:23C5h
cmp     ax, ds:0F0h
jz      short loc_182F1
mov     ax, ds:0F0h
mov     ds:23C5h, ax
call    sub_1AFE5

loc_182F1:
mov     ax, 1FA2h
push    ax
call    sub_17F56
or      ax, ax
jnz     short loc_182FF
jmp     loc_1844A

loc_182FF:
jmp     loc_183EF

loc_18302:
mov     ax, 9963h
push    ax
mov     ax, 223Dh
push    ax
call    sub_19458
jmp     loc_1844A

loc_18310:              ; jumptable 0001824F case 774
mov     ax, 97F0h
push    ax
mov     ax, 9963h
push    ax
call    sub_19458
mov     ax, 1032h
push    ax
mov     ax, 97F0h
push    ax
mov     ax, 50h ; 'P'
push    ax
call    sub_1917C
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_18335
jmp     loc_1844A

loc_18335:
mov     ax, 97F0h
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 2239h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_1834F
jmp     loc_1844A

loc_1834F:
push    ds
mov     ax, 97F0h
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_18369
mov     ax, 97F0h
push    ax
call    sub_1913E
or      ax, ax
jnz     short loc_18369
jmp     loc_1844A

loc_18369:
mov     ax, 97F0h
push    ax
call    sub_121DE
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     si, 0FFE5h
jmp     loc_1844A

loc_1837D:              ; jumptable 0001824F case 779
mov     ax, 97F0h
push    ax
mov     ax, 1FA2h
push    ax
call    sub_19458
cmp     byte ptr ds:97F0h, 0
jnz     short loc_1839A
mov     ax, 97F0h
push    ax
mov     ax, 2249h
push    ax
call    sub_19458

loc_1839A:
mov     ax, 1056h
push    ax
mov     ax, 97F0h
push    ax
mov     ax, 50h ; 'P'
push    ax
call    sub_1917C
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_183B4
jmp     loc_1844A

loc_183B4:
mov     ax, 97F0h
push    ax
call    sub_1943A
cmp     byte ptr ds:97F0h, 0
jz      short loc_183D9
mov     ax, 97F0h
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 2249h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_1844A

loc_183D9:
mov     ax, 97F0h
push    ax
call    sub_17F56
or      ax, ax
jz      short loc_1844A
mov     ax, 1FA2h
push    ax
mov     ax, 97F0h
push    ax
call    sub_19458

loc_183EF:
mov     ax, 0FFFFh
push    ax
mov     ax, 97F0h
push    ax
call    sub_17D3E
cmp     byte ptr ds:97F0h, 0
jnz     short loc_1840C
mov     ax, 97F0h
push    ax
mov     ax, 0E50h
push    ax
call    sub_19458

loc_1840C:
push    ds
mov     ax, 97F0h
push    ax
push    ds
mov     ax, 9877h
push    ax
call    sub_19911
or      ax, ax
jnz     short loc_1844A
mov     ax, 0FFFFh
push    ax
call    sub_1774F
mov     ax, 97F0h
push    ax
call    sub_152EB
jmp     short loc_1844A

loc_1842D:              ; jumptable 0001824F case 782
mov     ax, 1CB4h
push    ax
mov     ax, 2E83h
push    ax
mov     ax, 2
push    ax
mov     ax, 10h
push    ax
call    sub_190A1
or      ax, ax
jz      short def_1824F ; jumptable 0001824F default case, cases 775-778,780,781
call    sub_1492F

def_1824F:              ; jumptable 0001824F default case, cases 775-778,780,781
mov     si, 0FFFFh

loc_1844A:
or      si, si
jl      short loc_18453
mov     ax, 0FFFFh
jmp     short loc_18455

loc_18453:
mov     ax, si

loc_18455:
pop     si
pop     bp
retn    2
sub_18239 endp



; Attributes: bp-based frame

sub_1845A proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
cmp     al, ds:926Eh
jz      short loc_18474
mov     al, [bp+arg_0]
mov     ah, 0
mov     ds:0F2h, ax
xor     ax, ax
push    ax
call    sub_1A4C4

loc_18474:
mov     ax, 500h
pop     bp
retn    2
sub_1845A endp



; Attributes: bp-based frame

sub_1847B proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, 0FFFFh
mov     ax, [bp+arg_0]
mov     cx, 8           ; switch 8 cases
mov     bx, 849Bh

loc_1848B:
cmp     ax, cs:[bx]
jz      short loc_18497
inc     bx
inc     bx
loop    loc_1848B
jmp     def_18497       ; jumptable 00018497 default case

loc_18497:              ; switch jump
jmp     word ptr cs:[bx+10h]
dw 0FFE4h,0FFEFh,0FFF8h,0FFFCh ; value table for switch statement
dw   401h,  402h,  403h,  404h
jpt_18497 dw offset loc_184FE ; jump table for switch statement
dw offset loc_184BB
dw offset loc_184DA
dw offset loc_184F0
dw offset loc_184E5
dw offset loc_1852B
dw offset loc_18530
dw offset loc_184BB

loc_184BB:              ; jumptable 00018497 cases 65519,1028
cmp     word ptr ds:472Ah, 0
jz      short loc_184C5
jmp     def_18497       ; jumptable 00018497 default case

loc_184C5:
call    sub_1A45E
call    sub_15852
push    ax
call    sub_11EA2
mov     si, ax
call    sub_1A39F
mov     si, 0FFFFh
jmp     def_18497       ; jumptable 00018497 default case

loc_184DA:              ; jumptable 00018497 case 65528
mov     ax, ds:23C5h
neg     ax
sbb     ax, ax
inc     ax
mov     ds:23C5h, ax

loc_184E5:              ; jumptable 00018497 case 1025
mov     ax, ds:23C5h
mov     ds:0F0h, ax
call    sub_1AFE5
jmp     short def_18497 ; jumptable 00018497 default case

loc_184F0:              ; jumptable 00018497 case 65532
mov     ax, 0FFFFh
push    ax
call    sub_17720
call    sub_1AF1E
mov     si, ax
jmp     short def_18497 ; jumptable 00018497 default case

loc_184FE:              ; jumptable 00018497 case 65508
cmp     word ptr ds:4724h, 600h
jnz     short loc_1850B
mov     si, 105h
jmp     short def_18497 ; jumptable 00018497 default case

loc_1850B:
cmp     word ptr ds:4724h, 700h
jnz     short def_18497 ; jumptable 00018497 default case
cmp     word ptr ds:4722h, 0
jnz     short loc_1851F
mov     ax, 1
jmp     short loc_18521

loc_1851F:
xor     ax, ax

loc_18521:
push    ax
call    sub_1B2A2
mov     si, ds:4913h
jmp     short def_18497 ; jumptable 00018497 default case

loc_1852B:              ; jumptable 00018497 case 1026
mov     ax, 19h
jmp     short loc_18540

loc_18530:              ; jumptable 00018497 case 1027
test    word ptr ds:91D3h, 4
jz      short loc_1853D
mov     ax, 2Bh ; '+'
jmp     short loc_18540

loc_1853D:
mov     ax, 32h ; '2'

loc_18540:
push    ax
call    sub_1845A
mov     si, ax

def_18497:              ; jumptable 00018497 default case
mov     ax, si
pop     si
pop     bp
retn    2
sub_1847B endp



; Attributes: bp-based frame

sub_1854D proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, 500h
mov     bx, ds:1F90h
shl     bx, 1
shl     bx, 1
mov     di, [bx-72BAh]
mov     ax, [bp+arg_0]
sub     ax, 0FFDCh      ; switch 34 cases
cmp     ax, 21h
jbe     short loc_18572
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_18572:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_18576[bx] ; switch jump
jpt_18576 dw offset loc_185BF ; jump table for switch statement
dw offset loc_186F2
dw offset loc_185BF
dw offset loc_185BF
dw offset loc_185BF
dw offset loc_185BF
dw offset loc_185BF
dw offset loc_185BF
dw offset loc_18601
dw offset loc_186D6
dw offset loc_18729
dw offset loc_18724
dw offset loc_18706
dw offset loc_1870B
dw offset loc_186BF
dw offset loc_1871A
dw offset loc_18715
dw offset loc_18710
dw offset loc_1871F
dw offset loc_18601
dw offset loc_18701
dw offset loc_186FC
dw offset loc_1860C
dw offset loc_1860C
dw offset loc_186F7
dw offset loc_1869B
dw offset loc_18678
dw offset loc_186CE
dw offset loc_18601
dw offset def_18576
dw offset def_18576
dw offset def_18576
dw offset loc_18601
dw offset loc_186ED

loc_185BF:              ; jumptable 00018576 cases -36,-34--29
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     ax, [bp+arg_0]
add     ax, 24h ; '$'
mov     ds:3483h, ax
mov     dx, 0Bh
mul     dx
add     ax, ds:348Fh
mov     [bp+var_4], ax
mov     bx, ax
cmp     word ptr [bx+7], 0
jnz     short loc_185EA
mov     bx, ax
mov     si, [bx+3]
jmp     short loc_185F5

loc_185EA:
mov     ax, 3493h
push    ax
mov     ax, 1
push    ax
call    sub_177BE

loc_185F5:
mov     bx, [bp+var_4]
push    word ptr [bx+7]
call    sub_16F0E
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_18601:              ; jumptable 00018576 cases -28,-17,-8,-4
push    [bp+arg_0]
call    sub_1847B
mov     si, ax
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_1860C:              ; jumptable 00018576 cases -14,-13
mov     si, 0FFFFh
cmp     word ptr ds:4726h, 0
jnz     short loc_18619
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_18619:
mov     ax, si
push    ax
call    sub_17720
mov     ax, [bp+arg_0]
add     ax, 0Eh
shl     ax, 1
dec     ax
push    ax
call    sub_1BFAB
mov     [bp+var_2], ax
cmp     ax, ds:4068h
jnz     short loc_18638
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_18638:
push    word ptr ds:4068h
call    sub_1BF54
mov     ax, [bp+var_2]
mov     ds:4068h, ax
call    sub_1BF6A
mov     si, ds:23C1h
mov     word ptr ds:23C1h, 1
call    sub_1C033
mov     ds:23C1h, si
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_18667
mov     si, 600h
jmp     short loc_18675

loc_18667:
mov     ax, ds:4720h
mov     dx, 11h
mul     dx
mov     bx, ax
mov     si, [bx+4902h]

loc_18675:              ; jumptable 00018576 default case, cases -7--5
jmp     def_18576

loc_18678:              ; jumptable 00018576 case -10
cmp     di, 30ACh
jnz     short loc_18684
mov     ax, 500h
jmp     loc_18741

loc_18684:
cmp     di, 3184h
jz      short loc_18691
mov     ax, 0FFDCh
push    ax
call    sub_1854D

loc_18691:
mov     ax, 50h ; 'P'
push    ax
call    sub_1578B
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_1869B:              ; jumptable 00018576 case -11
cmp     di, 30ACh
jnz     short loc_186A8
mov     ax, 1
push    ax
call    sub_16F3E

loc_186A8:
cmp     di, 3184h
jz      short loc_186B5
mov     ax, 0FFDCh
push    ax
call    sub_1854D

loc_186B5:
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1578B
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_186BF:              ; jumptable 00018576 case -22
mov     ax, 0FFFFh
push    ax
call    sub_17720
call    sub_1300A
mov     si, ax
jmp     def_18576       ; jumptable 00018576 default case, cases -7--5

loc_186CE:              ; jumptable 00018576 case -9
cmp     word ptr ds:4724h, 500h
jnz     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_186D6:              ; jumptable 00018576 case -27
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     ax, ds:4720h
mov     dx, 11h
mul     dx
mov     bx, ax
mov     si, [bx+4902h]
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_186ED:              ; jumptable 00018576 case -3
mov     si, 800h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_186F2:              ; jumptable 00018576 case -35
mov     si, 600h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_186F7:              ; jumptable 00018576 case -12
mov     si, 102h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_186FC:              ; jumptable 00018576 case -15
mov     si, 0A01h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18701:              ; jumptable 00018576 case -16
mov     si, 0A04h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18706:              ; jumptable 00018576 case -24
mov     si, 0C01h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_1870B:              ; jumptable 00018576 case -23
mov     si, 0C05h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18710:              ; jumptable 00018576 case -19
mov     si, 904h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18715:              ; jumptable 00018576 case -20
mov     si, 905h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_1871A:              ; jumptable 00018576 case -21
mov     si, 902h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_1871F:              ; jumptable 00018576 case -18
mov     si, 901h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18724:              ; jumptable 00018576 case -25
mov     si, 903h
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18729:              ; jumptable 00018576 case -26
cmp     word ptr ds:0C0EFh, 2
jz      short loc_18735
mov     si, 0FFFFh
jmp     short def_18576 ; jumptable 00018576 default case, cases -7--5

loc_18735:
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     si, 0B01h

def_18576:              ; jumptable 00018576 default case, cases -7--5
mov     ax, si

loc_18741:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1854D endp



; Attributes: bp-based frame

sub_18749 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
sub     ax, 0C01h       ; switch 7 cases
cmp     ax, 6
ja      short def_1875B ; jumptable 0001875B default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1875B[bx] ; switch jump
jpt_1875B dw offset loc_1876E ; jump table for switch statement
dw offset loc_1877B
dw offset loc_18797
dw offset loc_18792
dw offset loc_187A1
dw offset loc_1879C
dw offset loc_187A6

loc_1876E:              ; jumptable 0001875B case 3073
mov     al, 5
mov     ds:3497h, al
mov     ds:3496h, al
call    sub_1A8D3
jmp     short loc_187B1

loc_1877B:              ; jumptable 0001875B case 3074
mov     ax, 1
push    ax
call    sub_1B056
or      ax, ax
jz      short def_1875B ; jumptable 0001875B default case
cmp     word ptr ds:4722h, 0
jnz     short def_1875B ; jumptable 0001875B default case
call    sub_1A932
jmp     short loc_187B1

loc_18792:              ; jumptable 0001875B case 3076
call    sub_1AB6A
jmp     short def_1875B ; jumptable 0001875B default case

loc_18797:              ; jumptable 0001875B case 3075
call    sub_1A9AD
jmp     short loc_187B1

loc_1879C:              ; jumptable 0001875B case 3078
call    sub_12C60
jmp     short def_1875B ; jumptable 0001875B default case

loc_187A1:              ; jumptable 0001875B case 3077
call    sub_12CFE
jmp     short loc_187A9

loc_187A6:              ; jumptable 0001875B case 3079
call    sub_12C8C

loc_187A9:
mov     ax, 600h
jmp     short loc_187B1

def_1875B:              ; jumptable 0001875B default case
mov     ax, 0FFFFh

loc_187B1:
pop     bp
retn    2
sub_18749 endp



; Attributes: bp-based frame

sub_187B5 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, 0FFFFh
mov     ax, [bp+arg_0]
sub     ax, 0B01h       ; switch 4 cases
cmp     ax, 3
jbe     short loc_187CD
jmp     def_187D1       ; jumptable 000187D1 default case

loc_187CD:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_187D1[bx] ; switch jump
jpt_187D1 dw offset loc_187DE ; jump table for switch statement
dw offset loc_18802
dw offset loc_18815
dw offset loc_18809

loc_187DE:              ; jumptable 000187D1 case 2817
lea     ax, [bp+var_4]
push    ax
call    sub_129CB
mov     si, ax
mov     ax, si
cmp     ax, 4
jnz     short loc_187FB
push    [bp+var_2]
push    [bp+var_4]
call    sub_126B4
mov     si, ax
jmp     short def_187D1 ; jumptable 000187D1 default case

loc_187FB:
cmp     si, 0FFFFh
jl      short def_187D1 ; jumptable 000187D1 default case
jmp     short loc_18810

loc_18802:              ; jumptable 000187D1 case 2818
call    sub_1300A
mov     si, ax
jmp     short def_187D1 ; jumptable 000187D1 default case

loc_18809:              ; jumptable 000187D1 case 2820
mov     ax, 1
push    ax
call    sub_1A4C4

loc_18810:
mov     si, 0FFE5h
jmp     short def_187D1 ; jumptable 000187D1 default case

loc_18815:              ; jumptable 000187D1 case 2819
call    sub_40223
push    ds
mov     ax, 9A13h
push    ax
call    sub_3F39D
mov     [bp+var_2], dx
mov     [bp+var_4], ax
call    sub_402B3
cmp     [bp+var_4], 0
jnz     short loc_18841
mov     ax, 10A6h
push    ax
xor     ax, ax
push    ax
call    sub_19065
jmp     short def_187D1 ; jumptable 000187D1 default case

loc_18841:
push    [bp+var_2]
push    [bp+var_4]
call    sub_126B4
mov     si, 600h

def_187D1:              ; jumptable 000187D1 default case
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn    2
sub_187B5 endp




sub_18856 proc near
xor     ax, ax
push    ax
call    sub_1AE6D
mov     al, 0
push    ax
call    sub_14C12
retn
sub_18856 endp



; Attributes: bp-based frame

sub_18863 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     si, di
and     si, 0FF00h
cmp     si, 100h
jnz     short loc_1887E
push    di
call    sub_1804A
jmp     loc_188ED

loc_1887E:
cmp     si, 900h
jnz     short loc_1888B
push    di
call    sub_13946
jmp     loc_188ED

loc_1888B:
cmp     si, 0D00h
jnz     short loc_18897
push    di
call    sub_1D117
jmp     short loc_188ED

loc_18897:
cmp     si, 0A00h
jnz     short loc_188A3
push    di
call    sub_1D38B
jmp     short loc_188ED

loc_188A3:
cmp     si, 200h
jnz     short loc_188AE
call    sub_1D1C6
jmp     short loc_188ED

loc_188AE:
cmp     si, 300h
jnz     short loc_188BA
push    di
call    sub_18239
jmp     short loc_188ED

loc_188BA:
cmp     si, 400h
jnz     short loc_188C6
push    di
call    sub_1847B
jmp     short loc_188ED

loc_188C6:
cmp     si, 0B00h
jnz     short loc_188D2
push    di
call    sub_187B5
jmp     short loc_188ED

loc_188D2:
cmp     si, 0C00h
jnz     short loc_188DE
push    di
call    sub_18749
jmp     short loc_188ED

loc_188DE:
cmp     si, 0FF00h
jnz     short loc_188EA
push    di
call    sub_1854D
jmp     short loc_188ED

loc_188EA:
mov     ax, 500h

loc_188ED:
pop     di
pop     si
pop     bp
retn    2
sub_18863 endp



; Attributes: bp-based frame

sub_188F3 proc near

var_102= word ptr -102h
var_100= byte ptr -100h
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 102h
push    si
push    di
mov     di, [bp+arg_6]
push    ds
push    [bp+arg_8]
call    sub_46E60
mov     si, ax
inc     si
cmp     si, di
jl      short loc_18922
mov     bx, [bp+arg_2]
mov     ax, [bx]
mov     dx, si
sub     dx, di
cmp     ax, dx
jle     short loc_18922
mov     ax, si
sub     ax, di
mov     [bx], ax

loc_18922:
dec     si
cmp     [bp+arg_0], 0
jz      short loc_1893B
cmp     si, 100h
jnz     short loc_18934
mov     ax, si
dec     ax
jmp     short loc_18936

loc_18934:
mov     ax, si

loc_18936:
mov     bx, [bp+arg_4]
mov     [bx], ax

loc_1893B:
mov     bx, [bp+arg_4]
mov     ax, [bx]
mov     bx, [bp+arg_2]
cmp     ax, [bx]
jge     short loc_18951
mov     bx, [bp+arg_4]
mov     ax, [bx]
mov     bx, [bp+arg_2]
mov     [bx], ax

loc_18951:
mov     bx, [bp+arg_4]
mov     ax, [bx]
mov     bx, [bp+arg_2]
mov     dx, [bx]
add     dx, di
dec     dx
cmp     ax, dx
jl      short loc_1896F
mov     bx, [bp+arg_4]
mov     ax, [bx]
sub     ax, di
inc     ax
mov     bx, [bp+arg_2]
mov     [bx], ax

loc_1896F:
xor     ax, ax
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB
mov     ax, 1
push    ax
push    ax
mov     bx, [bp+arg_2]
cmp     word ptr [bx], 0
jz      short loc_1898B
mov     ax, 2254h
jmp     short loc_1898E

loc_1898B:
mov     ax, 2256h

loc_1898E:
push    ax
call    sub_1ED32
mov     bx, ds:9164h
mov     al, [bx+3]
mov     ah, 0
mov     [bp+var_102], ax
cmp     [bp+arg_0], 0
jz      short loc_189AC
mov     al, [bx+2]
mov     ah, 0
jmp     short loc_189B0

loc_189AC:
mov     ax, [bp+var_102]

loc_189B0:
push    ax
xor     ax, ax
push    ax
call    sub_1D98E
lea     ax, [bp+var_100]
push    ax
push    [bp+arg_8]
call    sub_19458
mov     bx, [bp+arg_2]
mov     ax, [bx]
add     di, ax
mov     ax, di
cmp     ax, 100h
jge     short loc_189D5
mov     [bp+di+var_100], 0

loc_189D5:
mov     bx, [bp+arg_2]
mov     ax, [bx]
lea     dx, [bp+var_100]
add     ax, dx
push    ax
call    sub_1EB1F
push    [bp+var_102]
xor     ax, ax
push    ax
call    sub_1D98E
cmp     si, di
jge     short loc_18A13
lea     ax, [bp+var_100]
push    ax
mov     ax, 0DCEh
push    ax
call    sub_19458
mov     bx, di
sub     bx, si
lea     ax, [bp+var_100]
add     bx, ax
mov     byte ptr [bx], 0
lea     ax, [bp+var_100]
push    ax
call    sub_1EB1F

loc_18A13:
cmp     si, di
jle     short loc_18A1C
mov     ax, 2258h
jmp     short loc_18A1F

loc_18A1C:
mov     ax, 2256h

loc_18A1F:
push    ax
call    sub_1EB1F
mov     bx, [bp+arg_4]
mov     ax, [bx]
inc     ax
inc     ax
mov     bx, [bp+arg_2]
sub     ax, [bx]
push    ax
mov     ax, 1
push    ax
call    sub_1DC08
mov     ax, 1
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ah
sub_188F3 endp



; Attributes: bp-based frame

sub_18A4A proc near

var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh
arg_C= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
mov     di, [bp+arg_6]
mov     [bp+var_8], 0
mov     ax, sp
mov     [bp+var_E], ax
push    [bp+arg_C]
call    sub_19448
mov     [bp+var_10], ax
inc     ax
mov     dx, sp
sub     dx, ax
mov     sp, dx
mov     ax, sp
mov     [bp+var_2], ax
push    ax
push    [bp+arg_C]
call    sub_19458
mov     bx, ds:40DAh
mov     [bp+var_C], bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     ax, [bx+40E0h]
mov     [bp+var_A], ax
mov     bx, ds:40DAh
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     word ptr [bx+40E0h], 4
push    [bp+arg_C]
push    [bp+arg_A]
push    di
push    [bp+arg_4]
mov     bx, [bp+arg_2]
push    word ptr [bx]
call    sub_188F3
jmp     loc_18CB9

loc_18AB4:
mov     ax, [bp+var_C]
mov     ds:40DAh, ax
call    sub_15852
mov     [bp+var_6], ax
push    ax
call    sub_11EA2
mov     [bp+var_12], ax
cmp     ax, 0FFFFh
jge     short loc_18ACF
jmp     loc_18CC2

loc_18ACF:
cmp     ax, 3
jnz     short loc_18B24
mov     ax, [di]
cmp     ax, [bp+var_10]
jge     short loc_18AE9
mov     ax, [di]
mov     dx, [bp+arg_8]
dec     dx
cmp     ax, dx
jge     short loc_18AE9
inc     word ptr [di]
jmp     short loc_18B24

loc_18AE9:
cmp     word ptr ds:8B9Dh, 0
jz      short loc_18B24

loc_18AF0:
push    word ptr [di]
call    sub_14B16
cbw
mov     [bp+var_6], ax
cmp     ax, 20h ; ' '
jnz     short loc_18B12
cmp     word ptr [di], 0
jz      short loc_18B12
mov     bx, [di]
add     bx, [bp+arg_C]
cmp     byte ptr [bx-1], 20h ; ' '
jnz     short loc_18B12
inc     word ptr [di]
jmp     short loc_18AF0

loc_18B12:
cmp     [bp+var_6], 0
jz      short loc_18B24
mov     [bp+var_12], 0FFFFh
mov     bx, [bp+arg_2]
mov     word ptr [bx], 0

loc_18B24:
mov     ax, [bp+var_6]
and     ax, 0FFh
mov     [bp+var_4], ax
cmp     [bp+arg_0], 0
jz      short loc_18B81
cmp     ax, 20h ; ' '
jb      short loc_18B81
mov     bx, [bp+arg_2]
cmp     word ptr [bx], 0
jz      short loc_18B52
xor     ax, ax
mov     [bp+var_10], ax
mov     [di], ax
mov     bx, [bp+arg_4]
mov     [bx], ax
mov     bx, [bp+arg_C]
mov     byte ptr [bx], 0

loc_18B52:
mov     ax, [bp+arg_8]
dec     ax
cmp     ax, [bp+var_10]
jg      short loc_18B5E
jmp     loc_18CB9

loc_18B5E:
mov     si, [di]
add     si, [bp+arg_C]
push    ds
push    si
push    ds
mov     ax, si
inc     ax
push    ax
mov     ax, [di]
inc     word ptr [di]
inc     [bp+var_10]
mov     dx, [bp+var_10]
sub     dx, ax
push    dx
call    sub_46A2C
mov     al, byte ptr [bp+var_4]
mov     [si], al

loc_18B81:
mov     ax, [bp+var_12]
cmp     ax, 1Fh         ; switch 32 cases
jbe     short loc_18B8C
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18B8C:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_18B90[bx] ; switch jump
jpt_18B90 dw offset loc_18C73 ; jump table for switch statement
dw offset loc_18C73
dw offset loc_18BF2
dw offset def_18B90
dw offset loc_18C73
dw offset loc_18C4C
dw offset def_18B90
dw offset loc_18BFF
dw offset loc_18C25
dw offset loc_18BD5
dw offset loc_18BDC
dw offset loc_18C56
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset loc_18C39
dw offset def_18B90
dw offset def_18B90
dw offset def_18B90
dw offset loc_18C73
dw offset loc_18C73

loc_18BD5:              ; jumptable 00018B90 case 9
mov     word ptr [di], 0
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18BDC:              ; jumptable 00018B90 case 10
mov     ax, [bp+arg_8]
dec     ax
mov     [di], ax
cmp     ax, [bp+var_10]
jg      short loc_18BEA
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18BEA:
mov     ax, [bp+var_10]
mov     [di], ax
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18BF2:              ; jumptable 00018B90 case 2
cmp     word ptr [di], 0
jnz     short loc_18BFA
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18BFA:
dec     word ptr [di]
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18BFF:              ; jumptable 00018B90 case 7
cmp     [bp+arg_0], 0
jnz     short loc_18C08
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18C08:
mov     ax, [di]
cmp     ax, [bp+var_10]
jl      short loc_18C12
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18C12:
mov     si, [di]
add     si, [bp+arg_C]

loc_18C17:
push    si
mov     ax, si
inc     ax
push    ax
call    sub_19458
dec     [bp+var_10]
jmp     def_18B90       ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18C25:              ; jumptable 00018B90 case 8
cmp     [bp+arg_0], 0
jz      short def_18B90 ; jumptable 00018B90 default case, cases 3,6,12-25,27-29
cmp     word ptr [di], 0
jz      short def_18B90 ; jumptable 00018B90 default case, cases 3,6,12-25,27-29
dec     word ptr [di]
mov     si, [di]
add     si, [bp+arg_C]
jmp     short loc_18C17

loc_18C39:              ; jumptable 00018B90 case 26
cmp     [bp+arg_0], 0
jz      short def_18B90 ; jumptable 00018B90 default case, cases 3,6,12-25,27-29
mov     bx, [bp+arg_C]
mov     byte ptr [bx], 0
mov     [bp+var_10], 0
jmp     short loc_18C68

loc_18C4C:              ; jumptable 00018B90 case 5
mov     [bp+var_12], 0FFFFh
mov     [bp+var_8], 1

loc_18C56:              ; jumptable 00018B90 case 11
push    [bp+arg_C]
push    [bp+var_2]
call    sub_19458
push    [bp+arg_C]
call    sub_19448
mov     [bp+var_10], ax

loc_18C68:
xor     ax, ax
mov     [di], ax
mov     bx, [bp+arg_4]
mov     [bx], ax
jmp     short def_18B90 ; jumptable 00018B90 default case, cases 3,6,12-25,27-29

loc_18C73:              ; jumptable 00018B90 cases 0,1,4,30,31
push    ds
push    [bp+arg_C]
call    sub_46E60
mov     si, ax
add     si, [bp+arg_C]
dec     si
jmp     short loc_18C85

loc_18C84:
dec     si

loc_18C85:
cmp     si, [bp+arg_C]
jbe     short loc_18C8F
cmp     byte ptr [si], 20h ; ' '
jz      short loc_18C84

loc_18C8F:
inc     si
mov     byte ptr [si], 0
mov     [bp+var_8], 1

def_18B90:              ; jumptable 00018B90 default case, cases 3,6,12-25,27-29
cmp     [bp+var_12], 0FFFFh
jl      short loc_18CB9
cmp     [bp+var_8], 0
jnz     short loc_18CB9
push    [bp+arg_C]
push    [bp+arg_A]
push    di
push    [bp+arg_4]
xor     ax, ax
mov     bx, [bp+arg_2]
mov     [bx], ax
push    ax
call    sub_188F3

loc_18CB9:
cmp     [bp+var_8], 0
jnz     short loc_18CC2
jmp     loc_18AB4

loc_18CC2:
mov     ax, [bp+var_A]
mov     bx, [bp+var_C]
mov     ds:40DAh, bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     [bx+40E0h], ax
mov     ax, 0FFFFh
push    ax
call    sub_156D7
mov     si, [bp+arg_C]
jmp     short loc_18CE3

loc_18CE2:
inc     si

loc_18CE3:
cmp     byte ptr [si], 20h ; ' '
jz      short loc_18CE2
cmp     si, [bp+arg_C]
jz      short loc_18CF4
push    [bp+arg_C]
push    si
call    sub_19458

loc_18CF4:
push    ds
push    [bp+arg_C]
call    sub_46E60
mov     si, ax
add     si, [bp+arg_C]
dec     si
jmp     short loc_18D09

loc_18D05:
mov     byte ptr [si], 0
dec     si

loc_18D09:
cmp     si, [bp+arg_C]
jb      short loc_18D13
cmp     byte ptr [si], 20h ; ' '
jz      short loc_18D05

loc_18D13:
mov     word ptr ds:8B9Dh, 0
mov     sp, [bp+var_E]
mov     ax, [bp+var_12]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Eh
sub_18A4A endp



; Attributes: bp-based frame

sub_18D27 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
push    [bp+arg_0]
call    sub_19448
mov     [bp+var_2], ax
mov     di, [bp+arg_0]
xor     si, si
jmp     short loc_18D46

loc_18D3F:
cmp     byte ptr [di], 0FFh
jnz     short loc_18D45
inc     si

loc_18D45:
inc     di

loc_18D46:
cmp     byte ptr [di], 0
jnz     short loc_18D3F
mov     ax, si
shl     ax, 1
mov     si, ax
mov     ax, [bp+var_2]
sub     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_18D27 endp



; Attributes: bp-based frame

sub_18D5E proc near

var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
mov     ax, [bp+arg_A]
mov     dx, 11h
mul     dx
mov     si, ax
add     si, 48FCh
cmp     [bp+arg_0], 0
jz      short loc_18D80
mov     ax, [bp+arg_0]
mov     [si+2], ax

loc_18D80:
push    word ptr [si+2]
call    sub_19448
mov     di, ax
mov     ax, di
mov     bx, [bp+arg_4]
cmp     ax, [bx]
jle     short loc_18D93
mov     [bx], di

loc_18D93:
mov     ax, [bp+arg_6]
add     ax, [bp+arg_2]
inc     ax
mov     [bp+var_4], ax
mov     bx, [bp+arg_4]
mov     ax, [bx]
add     ax, [bp+arg_8]
add     ax, 3
mov     [bp+var_6], ax
cmp     ax, 50h ; 'P'
jl      short loc_18DC5
mov     di, ax
add     di, 0FFB1h
sub     [bp+var_6], di
sub     [bp+arg_8], di
jge     short loc_18DC5
mov     [bp+arg_8], 0
inc     [bp+var_4]

loc_18DC5:
mov     al, ds:926Eh
mov     ah, 0
dec     ax
cmp     ax, [bp+var_4]
jg      short loc_18DE3
mov     al, ds:926Eh
mov     ah, 0
add     ax, 0FFFEh
mov     di, [bp+var_4]
sub     di, ax
sub     [bp+arg_6], di
sub     [bp+var_4], di

loc_18DE3:
mov     al, byte ptr [bp+arg_8]
mov     [si+8], al
mov     al, byte ptr [bp+arg_6]
mov     [si+9], al
mov     al, byte ptr [bp+var_6]
mov     [si+0Ah], al
mov     al, byte ptr [bp+var_4]
mov     [si+0Bh], al
call    sub_1D8C0
mov     [bp+var_2], ax
push    [bp+arg_A]
call    sub_1ACE5
mov     ax, 2
push    ax
mov     ax, 1
push    ax
call    sub_1DC08
mov     ax, 1
push    ax
call    sub_1DCE5
mov     ax, [si]
mov     ds:9164h, ax
mov     ax, [bp+var_2]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_18D5E endp



; Attributes: bp-based frame

sub_18E29 proc near

var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 6
push    si
xor     ax, ax
mov     [bp+var_4], ax
mov     [bp+var_6], ax
mov     [bp+var_2], 1

loc_18E3D:
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
lea     ax, [bp+var_6]
push    ax
lea     ax, [bp+var_4]
push    ax
lea     ax, [bp+var_2]
push    ax
mov     ax, 1
push    ax
call    sub_18A4A
mov     si, ax
or      si, si
jl      short loc_18E64
cmp     si, 4
jnz     short loc_18E3D

loc_18E64:
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn    6
sub_18E29 endp



; Attributes: bp-based frame

sub_18E6D proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
push    si
push    di
mov     ax, 0Ah
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
lea     ax, [bp+arg_0]
push    ax
mov     ax, 1
push    ax
push    [bp+arg_A]
call    sub_18D5E
mov     di, ax
push    [bp+arg_8]
push    [bp+arg_0]
push    [bp+arg_2]
call    sub_18E29
mov     si, ax
mov     ax, 0Ah
push    ax
call    sub_1AD85
push    di
call    sub_1E8C0
mov     ax, si
pop     di
pop     si
pop     bp
retn    0Ch
sub_18E6D endp



; Attributes: bp-based frame

sub_18EAD proc near

var_E0= word ptr -0E0h
var_DE= word ptr -0DEh
var_DC= word ptr -0DCh
var_D9= word ptr -0D9h
var_D7= word ptr -0D7h
var_58= byte ptr -58h
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= byte ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0E0h
push    si
push    di
mov     [bp+var_8], 0
mov     byte ptr [bp+var_D9+1], 0
mov     bx, ss
mov     es, bx
lea     bx, [bp+arg_8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_18EFD

loc_18ECF:
cmp     di, 0FFFFh
jnz     short loc_18EF4
lea     ax, [bp+var_D9+1]
push    ax
call    sub_19448
lea     dx, [bp+var_D9+1]
add     ax, dx
mov     [bp+var_6], ax
les     bx, [bp+var_4]
mov     ax, es:[bx]
mov     [bp+var_8], ax
add     word ptr [bp+var_4], 2
jmp     short loc_18EFD

loc_18EF4:
lea     ax, [bp+var_D9+1]
push    ax
push    di
call    sub_19483

loc_18EFD:
les     bx, [bp+var_4]
mov     di, es:[bx]
add     word ptr [bp+var_4], 2
or      di, di
jnz     short loc_18ECF
cmp     [bp+var_8], 0
jz      short loc_18F6A
mov     bx, [bp+var_8]
cmp     byte ptr [bx], 0
jz      short loc_18F6A
lea     ax, [bp+var_D9+1]
push    ax
call    sub_18D27
mov     si, 4Ch ; 'L'
sub     si, ax
push    [bp+var_8]
lea     ax, [bp+var_58]
push    ax
push    si
call    sub_12515
lea     ax, [bp+var_58]
push    ax
call    sub_19448
mov     si, ax
push    ds
push    [bp+var_6]
push    ds
mov     ax, [bp+var_6]
add     ax, si
push    ax
lea     ax, [bp+var_D9+1]
mov     dx, [bp+var_6]
sub     dx, ax
mov     ax, 80h
sub     ax, dx
sub     ax, si
push    ax
call    sub_46A2C
push    ss
lea     ax, [bp+var_58]
push    ax
push    ds
push    [bp+var_6]
push    si
call    sub_46A2C

loc_18F6A:
cmp     byte ptr ds:1D40h, 0
jz      short loc_18FA6
lea     ax, [bp+var_D9+1]
push    ax
call    sub_18D27
mov     [bp+var_DE], ax
push    [bp+arg_0]
push    [bp+arg_2]
push    [bp+arg_4]
lea     ax, [bp+var_DE]
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
call    sub_18D5E
mov     [bp+var_E0], ax
push    [bp+arg_0]
lea     ax, [bp+var_D9+1]
push    ax
call    sub_1554A
jmp     short loc_18FB5

loc_18FA6:
lea     ax, [bp+var_D9+1]
push    ax
call    sub_19BEC
mov     ax, 0D66h
push    ax
call    sub_19BEC

loc_18FB5:
cmp     [bp+arg_6], 0
jnz     short loc_18FC0
mov     al, 0
jmp     loc_1905F

loc_18FC0:
mov     ax, ds:40DAh
mov     [bp+var_DC], ax

loc_18FC7:
cmp     word ptr ds:1DD1h, 2
jnz     short loc_18FD6
mov     word ptr ds:40DAh, 10h
jmp     short loc_18FF1

loc_18FD6:
push    [bp+arg_6]
mov     al, 1Bh
push    ax
call    sub_194AB
or      ax, ax
jz      short loc_18FEB
mov     word ptr ds:40DAh, 6
jmp     short loc_18FF1

loc_18FEB:
mov     word ptr ds:40DAh, 7

loc_18FF1:
call    sub_15852
and     ax, 0FFh
push    ax
call    sub_46F25
mov     byte ptr [bp+var_D9], al
cmp     byte ptr [bp+var_D9], 0
jz      short loc_18FC7
push    [bp+arg_6]
push    [bp+var_D9]
call    sub_194AB
or      ax, ax
jz      short loc_18FC7
mov     ax, [bp+var_DC]
mov     ds:40DAh, ax
mov     ax, 0FFFFh
push    ax
call    sub_156D7
cmp     byte ptr ds:1D40h, 0
jz      short loc_1903A
push    [bp+arg_0]
call    sub_1AD85
push    [bp+var_E0]
call    sub_1E8C0
jmp     short loc_1905B

loc_1903A:
cmp     byte ptr [bp+var_D9], 20h ; ' '
jge     short loc_19045
mov     al, 20h ; ' '
jmp     short loc_19049

loc_19045:
mov     al, byte ptr [bp+var_D9]

loc_19049:
mov     byte ptr [bp+var_D9+1], al
mov     [bp+var_D7], 0Ah
lea     ax, [bp+var_D9+1]
push    ax
call    sub_19BEC

loc_1905B:
mov     al, byte ptr [bp+var_D9]

loc_1905F:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_18EAD endp



; Attributes: bp-based frame

sub_19065 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     si, 0FFFFh
or      di, di
jnz     short loc_19079
mov     di, 0C63h
mov     si, di

loc_19079:
xor     ax, ax
push    ax
mov     ax, 0C52h
push    ax
push    di
push    si
push    [bp+arg_2]
mov     ax, 0C7Fh
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 14h
push    ax
mov     ax, 5
push    ax
call    sub_18EAD
add     sp, 12h
pop     di
pop     si
pop     bp
retn    4
sub_19065 endp



; Attributes: bp-based frame

sub_190A1 proc near

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= byte ptr -0Ch
var_6= byte ptr -6
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 10h
push    [bp+arg_4]
lea     ax, [bp+var_E]
push    ax
call    sub_11E72
mov     [bp+var_10], ax
cmp     ax, [bp+arg_2]
jb      short loc_190CE
cmp     ax, [bp+arg_0]
ja      short loc_190CE
cmp     [bp+var_E], 0
jz      short loc_190CE
mov     al, byte ptr [bp+var_10]
mov     bx, [bp+arg_6]
mov     [bx], al
jmp     short loc_19129

loc_190CE:
push    [bp+arg_2]
push    ss
lea     ax, [bp+var_C]
push    ax
call    sub_472C8
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_6]
push    ax
call    sub_472C8
xor     ax, ax
push    ax
mov     ax, 0C52h
push    ax
lea     ax, [bp+var_6]
push    ax
mov     ax, 225Ah
push    ax
lea     ax, [bp+var_C]
push    ax
mov     ax, 1556h
push    ax
mov     ax, 0C7Fh
push    ax
mov     al, ds:3497h
mov     ah, 0
push    ax
mov     al, ds:3496h
mov     ah, 0
inc     ax
push    ax
mov     ax, 5
push    ax
call    sub_18EAD
add     sp, 14h
mov     bx, [bp+arg_6]
mov     al, [bx]
mov     ah, 0
mov     [bp+var_10], ax
mov     [bp+var_E], 0

loc_19129:
push    [bp+var_10]
push    ds
push    [bp+arg_4]
call    sub_472C8
mov     ax, [bp+var_E]
mov     sp, bp
pop     bp
retn    8
sub_190A1 endp



; Attributes: bp-based frame

sub_1913E proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
push    [bp+arg_0]
mov     ax, 0FFFFh
push    ax
mov     ax, 156Fh
push    ax
mov     ax, 0C81h
push    ax
mov     al, ds:3497h
mov     ah, 0
push    ax
mov     al, ds:3496h
mov     ah, 0
inc     ax
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
mov     sp, bp
cmp     al, 59h ; 'Y'
jnz     short loc_19176
mov     ax, 1
jmp     short loc_19178

loc_19176:
xor     ax, ax

loc_19178:
pop     bp
retn    2
sub_1913E endp



; Attributes: bp-based frame

sub_1917C proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_4]
push    [bp+arg_2]
mov     al, ds:3496h
mov     ah, 0
inc     ax
push    ax
mov     al, ds:3497h
mov     ah, 0
push    ax
push    [bp+arg_0]
mov     ax, [bp+arg_0]
mov     bx, 2
cwd
idiv    bx
push    ax
call    sub_18E6D
pop     bp
retn    6
sub_1917C endp




sub_191A6 proc near
cmp     word ptr ds:916Ah, 1
jle     short locret_191B1
dec     word ptr ds:916Ah

locret_191B1:
retn
sub_191A6 endp




sub_191B2 proc near
mov     ax, ds:916Ah
cmp     ax, ds:916Eh
jge     short locret_191BF
inc     word ptr ds:916Ah

locret_191BF:
retn
sub_191B2 endp




sub_191C0 proc near
cmp     word ptr ds:916Ah, 1
jle     short locret_191E5
mov     ax, ds:9168h
sub     ds:916Ch, ax
jg      short loc_191D6
mov     word ptr ds:916Ch, 1

loc_191D6:
mov     ax, ds:9168h
sub     ds:916Ah, ax
jg      short locret_191E5
mov     word ptr ds:916Ah, 1

locret_191E5:
retn
sub_191C0 endp




sub_191E6 proc near
mov     ax, ds:916Ah
cmp     ax, ds:916Eh
jge     short locret_1923E
mov     cx, ds:916Ch
add     cx, ds:9168h
cmp     cx, ds:916Eh
ja      short loc_19201
mov     ds:916Ch, cx

loc_19201:
mov     ax, ds:916Ch
add     ax, ds:9168h
dec     ax
cmp     ax, ds:916Eh
jle     short loc_19228
mov     ax, ds:916Eh
cmp     ax, ds:9168h
jge     short loc_1921D
mov     ax, 1
jmp     short loc_19225

loc_1921D:
mov     ax, ds:916Eh
sub     ax, ds:9168h
inc     ax

loc_19225:
mov     ds:916Ch, ax

loc_19228:
mov     cx, ds:916Ah
add     cx, ds:9168h
cmp     cx, ds:916Eh
jbe     short loc_1923A
mov     cx, ds:916Eh

loc_1923A:
mov     ds:916Ah, cx

locret_1923E:
retn
sub_191E6 endp




sub_1923F proc near
cmp     word ptr ds:916Ah, 1
jle     short locret_1924C
mov     word ptr ds:916Ah, 1

locret_1924C:
retn
sub_1923F endp




sub_1924D proc near
mov     ax, ds:916Ah
cmp     ax, ds:916Eh
jge     short locret_1925C
mov     ax, ds:916Eh
mov     ds:916Ah, ax

locret_1925C:
retn
sub_1924D endp




sub_1925D proc near
cmp     word ptr ds:9166h, 0
jz      short locret_19268
dec     word ptr ds:9166h

locret_19268:
retn
sub_1925D endp




sub_19269 proc near
inc     word ptr ds:9166h
retn
sub_19269 endp




sub_1926E proc near
mov     word ptr ds:9166h, 0
retn
sub_1926E endp




sub_19275 proc near
mov     word ptr ds:9166h, 100h
retn
sub_19275 endp



; Attributes: bp-based frame

sub_1927C proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
mov     si, 0FFFFh
call    sub_157A7
or      ax, ax
jnz     short loc_1928D
jmp     loc_19329

loc_1928D:
call    sub_15852
push    ax
call    sub_11EA2
mov     si, ax
cmp     [bp+arg_6], 0
jnz     short loc_1929F
jmp     loc_19329

loc_1929F:
mov     ax, [bp+arg_6]
mov     ds:916Eh, ax
mov     ax, [bp+arg_4]
mov     ds:9168h, ax
mov     bx, [bp+arg_2]
mov     ax, [bx]
mov     ds:916Ah, ax
mov     bx, [bp+arg_0]
mov     ax, [bx]
mov     ds:916Ch, ax
mov     ax, si
cmp     ax, 0Eh         ; switch 15 cases
ja      short def_192C6 ; jumptable 000192C6 default case, cases 4-8
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_192C6[bx] ; switch jump
jpt_192C6 dw offset loc_192E9 ; jump table for switch statement
dw offset loc_192EE
dw offset loc_19311
dw offset loc_19316
dw offset def_192C6
dw offset def_192C6
dw offset def_192C6
dw offset def_192C6
dw offset def_192C6
dw offset loc_19307
dw offset loc_1930C
dw offset loc_192F3
dw offset loc_192F8
dw offset loc_192FD
dw offset loc_19302

loc_192E9:              ; jumptable 000192C6 case 0
call    sub_191A6
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_192EE:              ; jumptable 000192C6 case 1
call    sub_191B2
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_192F3:              ; jumptable 000192C6 case 11
call    sub_191C0
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_192F8:              ; jumptable 000192C6 case 12
call    sub_191E6
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_192FD:              ; jumptable 000192C6 case 13
call    sub_1923F
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_19302:              ; jumptable 000192C6 case 14
call    sub_1924D
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_19307:              ; jumptable 000192C6 case 9
call    sub_1926E
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_1930C:              ; jumptable 000192C6 case 10
call    sub_19275
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_19311:              ; jumptable 000192C6 case 2
call    sub_1925D
jmp     short def_192C6 ; jumptable 000192C6 default case, cases 4-8

loc_19316:              ; jumptable 000192C6 case 3
call    sub_19269

def_192C6:              ; jumptable 000192C6 default case, cases 4-8
mov     ax, ds:916Ah
mov     bx, [bp+arg_2]
mov     [bx], ax
mov     ax, ds:916Ch
mov     bx, [bp+arg_0]
mov     [bx], ax

loc_19329:
mov     ax, si
pop     si
pop     bp
retn    8
sub_1927C endp



; Attributes: bp-based frame

sub_19330 proc near

var_2= byte ptr -2
var_1= byte ptr -1
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_0]
mov     si, [bp+arg_2]
jmp     short loc_19375

loc_19340:
mov     al, [si]
mov     ah, 0
push    ax
call    sub_46F01
mov     [bp+var_2], al
mov     al, [di]
mov     ah, 0
push    ax
call    sub_46F01
mov     [bp+var_1], al
mov     al, [bp+var_2]
cmp     al, [bp+var_1]
jbe     short loc_19367
mov     ax, 1
jmp     short loc_19383

loc_19367:
mov     al, [bp+var_2]
cmp     al, [bp+var_1]
jnb     short loc_19373
xor     ax, ax
jmp     short loc_19383

loc_19373:
inc     si
inc     di

loc_19375:
cmp     byte ptr [si], 0
jz      short loc_1937F
cmp     byte ptr [di], 0
jnz     short loc_19340

loc_1937F:
mov     al, [si]
mov     ah, 0

loc_19383:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_19330 endp



; Attributes: bp-based frame

sub_1938B proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, 1

loc_19396:
mov     ax, si
mov     dx, 3
mul     dx
inc     ax
mov     si, ax
cmp     si, [bp+arg_2]
jle     short loc_19396
jmp     short loc_19406

loc_193A7:
mov     [bp+var_4], si
jmp     short loc_193FE

loc_193AC:
mov     bx, [bp+var_4]
shl     bx, 1
add     bx, [bp+arg_0]
mov     ax, [bx]
mov     [bp+var_2], ax
mov     di, [bp+var_4]
sub     di, si
jmp     short loc_193E9

loc_193C0:
mov     bx, di
shl     bx, 1
add     bx, [bp+arg_0]
push    word ptr [bx]
push    [bp+var_2]
call    sub_19330
or      ax, ax
jz      short loc_193ED
mov     bx, di
shl     bx, 1
add     bx, [bp+arg_0]
mov     ax, [bx]
mov     bx, di
add     bx, si
shl     bx, 1
add     bx, [bp+arg_0]
mov     [bx], ax
sub     di, si

loc_193E9:
or      di, di
jge     short loc_193C0

loc_193ED:
mov     ax, [bp+var_2]
mov     bx, di
add     bx, si
shl     bx, 1
add     bx, [bp+arg_0]
mov     [bx], ax
inc     [bp+var_4]

loc_193FE:
mov     ax, [bp+var_4]
cmp     ax, [bp+arg_2]
jl      short loc_193AC

loc_19406:
mov     ax, si
mov     bx, 3
cwd
idiv    bx
mov     si, ax
or      si, si
jg      short loc_193A7
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1938B endp



; Attributes: bp-based frame

sub_1941C proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
jmp     short loc_19426

loc_19425:
inc     si

loc_19426:
mov     al, [si]
cbw
push    ax
call    sub_46F25
mov     [si], al
or      al, al
jnz     short loc_19425
pop     si
pop     bp
retf    2
sub_1941C endp



; Attributes: bp-based frame

sub_1943A proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    [bp+arg_0]
push    cs
call    near ptr sub_1941C
pop     bp
retn    2
sub_1943A endp



; Attributes: bp-based frame

sub_19448 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    ds
push    [bp+arg_0]
call    sub_46E60
pop     bp
retn    2
sub_19448 endp



; Attributes: bp-based frame

sub_19458 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    ds
push    [bp+arg_2]
push    ds
push    [bp+arg_0]
call    sub_46D76
pop     bp
retn    4
sub_19458 endp



; Attributes: bp-based frame

sub_1946C proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    ds
push    [bp+arg_4]
push    ds
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46DA1
pop     bp
retn    6
sub_1946C endp



; Attributes: bp-based frame

sub_19483 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    ds
push    [bp+arg_2]
push    ds
push    [bp+arg_0]
call    sub_46C3E
pop     bp
retn    4
sub_19483 endp



; Attributes: bp-based frame

sub_19497 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    ds
push    [bp+arg_2]
push    ds
push    [bp+arg_0]
call    sub_46D55
pop     bp
retn    4
sub_19497 endp



; Attributes: bp-based frame

sub_194AB proc near

arg_0= byte ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    ds
push    [bp+arg_2]
mov     al, [bp+arg_0]
cbw
push    ax
call    sub_46CCE
pop     bp
retn    4
sub_194AB endp



; Attributes: bp-based frame

sub_194C0 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_2]
mov     si, [bp+arg_4]
or      si, si
jz      short loc_194FA
jmp     short loc_194ED

loc_194D1:
cmp     byte ptr [di], 2Fh ; '/'
jz      short loc_194DB
cmp     byte ptr [di], 5Ch ; '\'
jnz     short loc_194E0

loc_194DB:
mov     al, ds:226Eh
jmp     short loc_194E2

loc_194E0:
mov     al, [di]

loc_194E2:
mov     [si], al
inc     si
mov     bx, di
inc     di
cmp     byte ptr [bx], 0
jz      short loc_194F7

loc_194ED:
mov     ax, [bp+arg_0]
dec     [bp+arg_0]
or      ax, ax
jnz     short loc_194D1

loc_194F7:
mov     byte ptr [si], 0

loc_194FA:
pop     di
pop     si
pop     bp
retn    6
sub_194C0 endp



; Attributes: bp-based frame

sub_19500 proc near

var_58= word ptr -58h
var_56= byte ptr -56h
var_55= byte ptr -55h
var_54= byte ptr -54h
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 58h
push    si
push    di
lea     ax, [bp+var_54]
mov     [bp+var_4], ax
xor     di, di
cmp     [bp+arg_6], di
jz      short loc_1951B
mov     bx, [bp+arg_6]
mov     byte ptr [bx], 0

loc_1951B:
cmp     [bp+arg_4], 0
jz      short loc_19527
mov     bx, [bp+arg_4]
mov     byte ptr [bx], 0

loc_19527:
cmp     [bp+arg_2], 0
jz      short loc_19533
mov     bx, [bp+arg_2]
mov     byte ptr [bx], 0

loc_19533:
cmp     [bp+arg_0], 0
jz      short loc_1953F
mov     bx, [bp+arg_0]
mov     byte ptr [bx], 0

loc_1953F:
mov     ax, word ptr [bp+arg_8]
or      ax, word ptr [bp+arg_8+2]
jnz     short loc_1954D
jmp     loc_196FC

loc_1954A:
inc     word ptr [bp+arg_8]

loc_1954D:
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_1954A
mov     [bp+var_56], 0
mov     [bp+var_2], 0
jmp     short loc_195CB

loc_19561:
les     bx, [bp+arg_8]
add     bx, [bp+var_2]
mov     al, es:[bx]
mov     cl, al
or      al, al
jz      short loc_195D1
cmp     cl, 20h ; ' '
jb      short loc_19581
mov     ax, 225Eh
push    ax
push    cx
call    sub_194AB
or      ax, ax
jz      short loc_195C8

loc_19581:
cmp     word ptr ds:225Ch, 0
jz      short loc_1958B
jmp     loc_196FC

loc_1958B:
xor     ax, ax
push    ax
mov     ax, 0C52h
push    ax
mov     ax, 2269h
push    ax
push    ss
lea     ax, [bp+var_56]
push    ax
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_46D76
push    ax
mov     ax, 2269h
push    ax
mov     ax, 1665h
push    ax
mov     ax, 0C7Fh
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 14h
push    ax
mov     ax, 5
push    ax
call    sub_18EAD
add     sp, 14h
jmp     loc_196FC

loc_195C8:
inc     [bp+var_2]

loc_195CB:
cmp     [bp+var_2], 50h ; 'P'
jl      short loc_19561

loc_195D1:
push    ss
lea     ax, [bp+var_55]
push    ax
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_46D76
lea     ax, [bp+var_55]
push    ax
call    sub_19448
mov     si, ax
lea     ax, [bp+var_56]
add     si, ax
mov     [bp+var_58], si

loc_195F2:
mov     al, [si]
cbw
mov     cx, 7           ; switch 7 cases
mov     bx, 960Ah

loc_195FB:
cmp     ax, cs:[bx]
jz      short loc_19606
inc     bx
inc     bx
loop    loc_195FB
jmp     short def_19606 ; jumptable 00019606 default case

loc_19606:              ; switch jump
jmp     word ptr cs:[bx+0Eh]
dw      0,   2Ah,   2Eh,   2Fh ; value table for switch statement
dw    3Ah,   3Fh,   5Ch
jpt_19606 dw offset loc_1963F ; jump table for switch statement
dw offset loc_19644
dw offset loc_19626
dw offset loc_1963B
dw offset loc_1963B
dw offset loc_19644
dw offset loc_1963B

loc_19626:              ; jumptable 00019606 case 46
or      di, 2
push    [bp+arg_0]
push    si
mov     ax, 4
push    ax
call    sub_194C0
mov     byte ptr [si], 0
dec     si
jmp     short loc_1964B

loc_1963B:              ; jumptable 00019606 cases 47,58,92
and     di, 0FFFEh

loc_1963F:              ; jumptable 00019606 case 0
mov     si, [bp+var_58]
jmp     short loc_1964B

loc_19644:              ; jumptable 00019606 cases 42,63
or      di, 1

def_19606:              ; jumptable 00019606 default case
dec     si
jmp     short loc_195F2

loc_1964B:
mov     al, [si]
cbw
mov     cx, 6           ; switch 6 cases
mov     bx, 9663h

loc_19654:
cmp     ax, cs:[bx]
jz      short loc_1965F
inc     bx
inc     bx
loop    loc_19654
jmp     short def_1965F ; jumptable 0001965F default case

loc_1965F:              ; switch jump
jmp     word ptr cs:[bx+0Ch]
dw      0,   2Ah,   2Fh,   3Ah ; value table for switch statement
dw    3Fh,   5Ch
jpt_1965F dw offset loc_19680 ; jump table for switch statement
dw offset loc_196A0
dw offset loc_19680
dw offset loc_1967B
dw offset loc_196A0
dw offset loc_19680

loc_1967B:              ; jumptable 0001965F case 58
cmp     si, [bp+var_4]
jnz     short def_1965F ; jumptable 0001965F default case

loc_19680:              ; jumptable 0001965F cases 0,47,92
inc     si
cmp     byte ptr [si], 0
jz      short loc_1968A
or      di, 4

loc_1968A:
push    [bp+arg_2]
push    si
mov     ax, 8
push    ax
call    sub_194C0
mov     byte ptr [si], 0
dec     si
cmp     byte ptr [si], 0
jnz     short loc_196A7
jmp     short loc_196FC

loc_196A0:              ; jumptable 0001965F cases 42,63
or      di, 1

def_1965F:              ; jumptable 0001965F default case
dec     si
jmp     short loc_1964B

loc_196A7:
cmp     si, [bp+var_4]
jb      short loc_196E2
mov     si, [bp+var_4]
cmp     byte ptr [si], 3Ah ; ':'
jnz     short loc_196E2
inc     si
mov     bx, si
cmp     byte ptr [bx], 0
jz      short loc_196C0
or      di, 8

loc_196C0:
push    [bp+arg_4]
push    si
mov     ax, 41h ; 'A'
push    ax
call    sub_194C0
mov     byte ptr [si], 0
or      di, 10h
push    [bp+arg_6]
lea     ax, [bp+var_55]
push    ax
mov     ax, 2
push    ax
call    sub_194C0
jmp     short loc_196FC

loc_196E2:
push    [bp+arg_4]
lea     ax, [bp+var_55]
push    ax
mov     ax, 41h ; 'A'
push    ax
call    sub_194C0
mov     bx, [bp+arg_4]
cmp     byte ptr [bx], 0
jz      short loc_196FC
or      di, 8

loc_196FC:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_19500 endp



; Attributes: bp-based frame

sub_19706 proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
jmp     short loc_1970E

loc_1970B:
inc     word ptr [bp+arg_2]

loc_1970E:
mov     bx, [bp+arg_0]
inc     [bp+arg_0]
mov     al, [bx]
les     bx, [bp+arg_2]
mov     es:[bx], al
or      al, al
jnz     short loc_1970B
mov     dx, word ptr [bp+arg_2+2]
mov     ax, bx
pop     bp
retn    6
sub_19706 endp



; Attributes: bp-based frame

sub_19729 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
cmp     [bp+arg_0], 5Ch ; '\'
jz      short loc_19738
cmp     [bp+arg_0], 2Fh ; '/'
jnz     short loc_1973D

loc_19738:
mov     ax, 1
jmp     short loc_1973F

loc_1973D:
xor     ax, ax

loc_1973F:
pop     bp
retn    2
sub_19729 endp



; Attributes: bp-based frame

sub_19743 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
or      si, si
jz      short loc_1976F
cmp     byte ptr [si], 0
jz      short loc_1976F
cmp     word ptr [si+1], 3Ah ; ':'
jz      short loc_1976F
push    si
call    sub_19448
add     si, ax
push    word ptr [si-1]
call    sub_19729
or      al, al
jnz     short loc_1976F
mov     al, ds:226Eh
cbw
mov     [si], ax

loc_1976F:
mov     ax, [bp+arg_0]
pop     si
pop     bp
retn    2
sub_19743 endp



; Attributes: bp-based frame

sub_19777 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_4]
mov     si, [bp+arg_6]
les     bx, [bp+arg_8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
or      si, si
jz      short loc_197B8
cmp     byte ptr [si], 0
jz      short loc_197B8
push    word ptr [bp+var_4+2]
push    bx
push    si
call    sub_19706
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
dec     bx
cmp     byte ptr es:[bx], 3Ah ; ':'
jz      short loc_197B8
mov     bx, ax
mov     byte ptr es:[bx], 3Ah ; ':'
inc     word ptr [bp+var_4]

loc_197B8:
or      di, di
jz      short loc_197EC
cmp     byte ptr [di], 0
jz      short loc_197EC
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    di
call    sub_19706
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
dec     bx
mov     al, es:[bx]
push    ax
call    sub_19729
or      al, al
jnz     short loc_197EC
mov     al, ds:226Eh
les     bx, [bp+var_4]
mov     es:[bx], al
inc     word ptr [bp+var_4]

loc_197EC:
cmp     [bp+arg_2], 0
jz      short loc_19804
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    [bp+arg_2]
call    sub_19706
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_19804:
cmp     [bp+arg_0], 0
jz      short loc_1981C
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    [bp+arg_0]
call    sub_19706
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_1981C:
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 0
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_19777 endp



; Attributes: bp-based frame

sub_1982B proc near

var_84= byte ptr -84h
var_82= byte ptr -82h
var_1= byte ptr -1
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 84h
push    si
push    di
lea     si, [bp+var_84]
mov     [bp+var_84], 0
mov     bx, [bp+arg_2]
cmp     byte ptr [bx], 0
jnz     short loc_1984D
call    sub_10490
mov     bx, [bp+arg_2]
mov     [bx], al

loc_1984D:
mov     bx, [bp+arg_0]
mov     al, [bx]
cmp     al, 5Ch ; '\'
jz      short loc_19875
cmp     al, 2Fh ; '/'
jz      short loc_19875
mov     bx, [bp+arg_2]
push    word ptr [bx]
push    ss
lea     ax, [bp+var_84]
push    ax
call    sub_10534
lea     ax, [bp+var_84]
push    ax
lea     ax, [bp+var_82]
push    ax
call    sub_19458

loc_19875:
lea     ax, [bp+var_84]
push    ax
push    [bp+arg_0]
call    sub_19483
jmp     loc_198F2

loc_19883:
inc     si
mov     di, si
jmp     short loc_19889

loc_19888:
inc     di

loc_19889:
mov     al, [di]
or      al, al
jz      short loc_19897
cmp     al, 5Ch ; '\'
jz      short loc_19897
cmp     al, 2Fh ; '/'
jnz     short loc_19888

loc_19897:
mov     al, [di]
mov     [bp+var_1], al
mov     byte ptr [di], 0
cmp     byte ptr [si], 2Eh ; '.'
jnz     short loc_198EB
mov     ax, [si+1]
or      al, al
jnz     short loc_198BA
mov     al, [bp+var_1]
mov     [di], al
dec     si
mov     ax, si
push    ax
push    di
call    sub_19458
jmp     short loc_198F2

loc_198BA:
cmp     ax, 2Eh ; '.'
jnz     short loc_198F2
mov     al, [bp+var_1]
mov     [di], al
dec     si
jmp     short loc_198D1

loc_198C7:
mov     al, [si]
cmp     al, 5Ch ; '\'
jz      short loc_198DC
cmp     al, 2Fh ; '/'
jz      short loc_198DC

loc_198D1:
dec     si
mov     ax, si
lea     dx, [bp+var_84]
cmp     ax, dx
jnb     short loc_198C7

loc_198DC:
lea     ax, [bp+var_84]
cmp     ax, si
ja      short loc_198F2
push    si
push    di
call    sub_19458
jmp     short loc_198F2

loc_198EB:
mov     al, [bp+var_1]
mov     [di], al
mov     si, di

loc_198F2:
cmp     byte ptr [si], 0
jz      short loc_198FA
jmp     loc_19883

loc_198FA:
push    ds
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_84]
push    ax
call    sub_46D76
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1982B endp



; Attributes: bp-based frame

sub_19911 proc near

var_AC= byte ptr -0ACh
var_AB= byte ptr -0ABh
var_AA= byte ptr -0AAh
var_A8= byte ptr -0A8h
var_A7= byte ptr -0A7h
var_A6= byte ptr -0A6h
var_A4= word ptr -0A4h
var_62= word ptr -62h
var_20= byte ptr -20h
var_16= byte ptr -16h
var_C= byte ptr -0Ch
var_6= byte ptr -6
var_1= byte ptr -1
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0ACh
push    si
push    [bp+arg_6]
push    [bp+arg_4]
lea     ax, [bp+var_AC]
push    ax
lea     ax, [bp+var_A4]
push    ax
lea     ax, [bp+var_20]
push    ax
lea     ax, [bp+var_C]
push    ax
call    sub_19500
push    [bp+arg_2]
push    [bp+arg_0]
lea     ax, [bp+var_A8]
push    ax
lea     ax, [bp+var_62]
push    ax
lea     ax, [bp+var_16]
push    ax
lea     ax, [bp+var_6]
push    ax
call    sub_19500
lea     ax, [bp+var_20]
push    ax
lea     ax, [bp+var_16]
push    ax
call    sub_19497
or      ax, ax
jz      short loc_19960
jmp     loc_19A59

loc_19960:
lea     ax, [bp+var_C]
push    ax
lea     ax, [bp+var_6]
push    ax
call    sub_19497
or      ax, ax
jz      short loc_19972
jmp     loc_19A59

loc_19972:
call    sub_10490
mov     [bp+var_1], al
cmp     [bp+var_AC], 0
jnz     short loc_19986
cmp     [bp+var_A8], 0
jz      short loc_199C5

loc_19986:
cmp     [bp+var_AC], 0
jnz     short loc_199A0
mov     al, [bp+var_1]
mov     [bp+var_AC], al
mov     [bp+var_AB], 3Ah ; ':'
mov     [bp+var_AA], 0
jmp     short loc_199B8

loc_199A0:
cmp     [bp+var_A8], 0
jnz     short loc_199B8
mov     al, [bp+var_1]
mov     [bp+var_A8], al
mov     [bp+var_A7], 3Ah ; ':'
mov     [bp+var_A6], 0

loc_199B8:
mov     al, [bp+var_AC]
cmp     al, [bp+var_A8]
jz      short loc_199C5
jmp     loc_19A59

loc_199C5:
cmp     byte ptr [bp+var_A4], 0
jnz     short loc_199D5
cmp     byte ptr [bp+var_62], 0
jnz     short loc_199D5
jmp     loc_19A5D

loc_199D5:
lea     ax, [bp+var_A4]
push    ax
lea     ax, [bp+var_62]
push    ax
call    sub_19497
or      ax, ax
jnz     short loc_199E8
jmp     loc_19A5D

loc_199E8:
push    [bp+var_A4]
call    sub_19729
push    ax
push    [bp+var_62]
call    sub_19729
mov     dl, al
pop     ax
xor     al, dl
cbw
mov     si, ax
cmp     byte ptr [bp+var_A4], 0
jz      short loc_19A18
or      si, si
jnz     short loc_19A18
lea     ax, [bp+var_A4]
push    ax
mov     al, 2Eh ; '.'
push    ax
call    sub_194AB
or      ax, ax
jz      short loc_19A25

loc_19A18:
lea     ax, [bp+var_AC]
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1982B

loc_19A25:
cmp     byte ptr [bp+var_62], 0
jz      short loc_19A3D
or      si, si
jnz     short loc_19A3D
lea     ax, [bp+var_62]
push    ax
mov     al, 2Eh ; '.'
push    ax
call    sub_194AB
or      ax, ax
jz      short loc_19A49

loc_19A3D:
lea     ax, [bp+var_A8]
push    ax
lea     ax, [bp+var_62]
push    ax
call    sub_1982B

loc_19A49:
lea     ax, [bp+var_A4]
push    ax
lea     ax, [bp+var_62]
push    ax
call    sub_19497
or      ax, ax
jz      short loc_19A5D

loc_19A59:
xor     ax, ax
jmp     short loc_19A60

loc_19A5D:
mov     ax, 1

loc_19A60:
pop     si
mov     sp, bp
pop     bp
retn    8
sub_19911 endp



; Attributes: bp-based frame

sub_19A67 proc near

var_94= byte ptr -94h
var_44= byte ptr -44h
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 94h
push    si
push    di
mov     di, [bp+arg_4]
xor     si, si
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_19A94
xor     si, si
jmp     loc_19BCD

loc_19A94:
lea     ax, [bp+var_94]
push    ax
push    [bp+arg_6]
call    sub_19458
push    ax
call    sub_1943A
push    ss
lea     ax, [bp+var_94]
push    ax
call    sub_10652
or      ax, ax
jz      short loc_19ABC
lea     ax, [bp+var_94]
push    ax
call    sub_19743
or      si, 20h

loc_19ABC:
lea     ax, [bp+var_94]
push    ax
call    sub_19C1B
mov     si, ax
test    si, 18h
jnz     short loc_19B16
or      di, di
jz      short loc_19B16
cmp     byte ptr [di], 0
jz      short loc_19B16
lea     ax, [bp+var_44]
push    ax
push    di
call    sub_19458
lea     ax, [bp+var_44]
push    ax
call    sub_19743
lea     ax, [bp+var_44]
push    ax
call    sub_1943A
push    ss
lea     ax, [bp+var_44]
push    ax
call    sub_10652
or      ax, ax
jnz     short loc_19AFA
jmp     loc_19BCD

loc_19AFA:
push    ss
lea     ax, [bp+var_44]
push    ax
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_19500
and     ax, 18h
or      ax, 20h
or      si, ax

loc_19B16:
test    si, 18h
jz      short loc_19B44
test    si, 20h
jnz     short loc_19B44
lea     ax, [bp+var_44]
push    ax
mov     ax, 91CDh
push    ax
call    sub_19458
push    ax
mov     ax, 9179h
push    ax
call    sub_19483
push    ss
lea     ax, [bp+var_44]
push    ax
call    sub_10652
or      ax, ax
jnz     short loc_19B44
jmp     loc_19BCD

loc_19B44:
or      si, 20h
test    si, 4
jnz     short loc_19B8F
cmp     [bp+arg_2], 0
jz      short loc_19B60
mov     ax, 9170h
push    ax
push    [bp+arg_2]
call    sub_19458
jmp     short loc_19B66

loc_19B60:
mov     word ptr ds:9170h, 2Ah ; '*'

loc_19B66:
cmp     byte ptr ds:9170h, 0
jz      short loc_19B78
or      si, 4
mov     ax, 9170h
push    ax
call    sub_1943A

loc_19B78:
push    ds
mov     ax, 9170h
push    ax
push    ds
mov     ax, 226Bh
push    ax
call    sub_46EB6
or      dx, ax
jz      short loc_19B8F
or      si, 1

loc_19B8F:
test    si, 2
jnz     short loc_19BC7
mov     ax, 91C8h
push    ax
push    [bp+arg_0]
call    sub_19458
cmp     byte ptr ds:91C8h, 0
jz      short loc_19BB1
or      si, 2
mov     ax, 91C8h
push    ax
call    sub_1943A

loc_19BB1:
push    ds
push    [bp+arg_0]
push    ds
mov     ax, 226Bh
push    ax
call    sub_46EB6
or      dx, ax
jz      short loc_19BC7
or      si, 1

loc_19BC7:
push    [bp+arg_6]
call    sub_19C39

loc_19BCD:
dec     word ptr ds:1DE8h
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_19A67 endp



; Attributes: bp-based frame

sub_19BDB proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     ah, 0Eh
mov     bl, 7
call    sub_10BFC
pop     bp
retn    2
sub_19BDB endp



; Attributes: bp-based frame

sub_19BEC proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
jmp     short loc_19C11

loc_19BF5:
cmp     byte ptr [si], 0FFh
jnz     short loc_19BFE
inc     si
inc     si
jmp     short loc_19C11

loc_19BFE:
cmp     byte ptr [si], 0Ah
jnz     short loc_19C09
mov     al, 0Dh
push    ax
call    sub_19BDB

loc_19C09:
mov     bx, si
inc     si
push    word ptr [bx]
call    sub_19BDB

loc_19C11:
cmp     byte ptr [si], 0
jnz     short loc_19BF5
pop     si
pop     bp
retn    2
sub_19BEC endp



; Attributes: bp-based frame

sub_19C1B proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    ds
push    [bp+arg_0]
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
mov     ax, 9170h
push    ax
mov     ax, 91C8h
push    ax
call    sub_19500
pop     bp
retn    2
sub_19C1B endp



; Attributes: bp-based frame

sub_19C39 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    ds
push    [bp+arg_0]
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
mov     ax, 9170h
push    ax
mov     ax, 91C8h
push    ax
call    sub_19777
pop     bp
retn    2
sub_19C39 endp



; Attributes: bp-based frame

sub_19C57 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_0]
call    sub_19C1B
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
call    sub_1982B
push    [bp+arg_2]
call    sub_19C39
pop     bp
retf    4
sub_19C57 endp




sub_19C75 proc near
mov     ax, 3700h
int     21h             ; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
                        ; Return: AL = FFh unsupported subfunction
                        ; DL = current switch character
mov     al, dl
mov     ds:91D0h, al
cmp     al, 2Fh ; '/'
jz      short locret_19C88
mov     byte ptr ds:226Eh, 2Fh ; '/'

locret_19C88:
retn
sub_19C75 endp



; Attributes: bp-based frame

sub_19C89 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
mov     si, [bp+arg_0]
mov     al, [si+6Ah]
mov     ah, 0
mov     [bp+var_2], ax
test    word ptr [si], 1
jnz     short loc_19CA9
mov     al, byte ptr [bp+var_2]
mov     ah, 5
call    sub_10BFC

loc_19CA9:
mov     bx, [bp+var_2]
shl     bx, 1
add     bx, si
mov     dx, [bx+58h]
mov     bh, byte ptr [bp+var_2]
mov     ah, 2
call    sub_10BFC
mov     cx, [si+9Ch]
mov     ah, 1
call    sub_10BFC
mov     ds:229Eh, si
pop     si
mov     sp, bp
pop     bp
retn    2
sub_19C89 endp



; Attributes: bp-based frame

sub_19CCF proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     ax, [si+18h]
les     bx, ds:2274h
mov     es:[bx+10h], ax
push    ds
mov     ax, si
add     ax, 51h ; 'Q'
push    ax
mov     dx, ds:2276h
mov     ax, bx
add     ax, 49h ; 'I'
push    dx
push    ax
mov     ax, 1Eh
push    ax
call    sub_46A2C
push    ds
mov     ax, si
add     ax, 8Ch
push    ax
mov     dx, ds:2276h
mov     ax, ds:2274h
add     ax, 84h
push    dx
push    ax
mov     ax, 0Ch
push    ax
call    sub_46A2C
push    si
call    sub_19C89
pop     si
pop     bp
retn    2
sub_19CCF endp



; Attributes: bp-based frame

sub_19D21 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
push    [bp+arg_2]
push    si
call    sub_10AB4
mov     al, [si+9Ah]
cmp     al, 3
jbe     short loc_19D3E
cmp     al, 7
jz      short loc_19D3E
jmp     loc_19DBF

loc_19D3E:
mov     cl, [si+9Bh]
mov     dx, [si]
les     bx, ds:2274h
mov     al, es:[bx+84h]
inc     al
cmp     al, cl
jz      short loc_19D86
test    dx, 14h
jz      short loc_19D86
cmp     cl, 19h
jnz     short loc_19D7D
mov     ax, [si+9Eh]
mov     bx, 19h
xor     dx, dx
div     bx
cmp     al, 8
jz      short loc_19D7D
cmp     al, 0Eh
jnz     short loc_19D75
mov     al, 11h
jmp     short loc_19D7F

loc_19D75:
cmp     al, 10h
jnz     short loc_19D7F
mov     al, 14h
jmp     short loc_19D7F

loc_19D7D:
mov     al, 12h

loc_19D7F:
mov     ah, 11h
mov     bl, 0
call    sub_10BFC

loc_19D86:
mov     ax, [si]
and     ax, 24h
cmp     ax, 4
jnz     short loc_19DBF
les     bx, ds:2274h
cmp     byte ptr es:[bx+84h], 18h
jnz     short loc_19DA6
les     bx, ds:2280h
and     byte ptr es:[bx], 0FEh
jmp     short loc_19DBF

loc_19DA6:
les     bx, ds:2280h
or      byte ptr es:[bx], 1
mov     dx, [si+6Bh]
mov     al, 14h
out     dx, al
inc     dx
mov     al, 7
out     dx, al
mov     ah, 12h
mov     bl, 20h ; ' '
call    sub_10BFC

loc_19DBF:
pop     si
pop     bp
retn    4
sub_19D21 endp



; Attributes: bp-based frame

sub_19DC4 proc near

var_A4= byte ptr -0A4h
var_52= word ptr -52h
var_A= byte ptr -0Ah
var_9= byte ptr -9
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 0A4h
push    si
mov     si, [bp+arg_0]
lea     ax, [bp+var_A4]
push    ax
call    sub_1E87B
push    si
call    sub_19CCF
mov     al, [bp+var_A]
mov     ah, 0
and     ax, 7Fh
mov     dl, [si+9Ah]
mov     dh, 0
and     dx, 7Fh
cmp     ax, dx
jnz     short loc_19E02
mov     al, [si+9Bh]
cmp     al, [bp+var_9]
jnz     short loc_19E02
mov     ax, [si+52h]
cmp     ax, [bp+var_52]
jz      short loc_19E10

loc_19E02:
or      byte ptr [si+9Ah], 80h
lea     ax, [bp+var_A4]
push    ax
push    si
call    sub_19D21

loc_19E10:
push    si
call    sub_19C89
push    si
call    sub_1E87B
pop     si
mov     sp, bp
pop     bp
retn    2
sub_19DC4 endp




sub_19E1F proc near
push    si
push    di
xor     si, si
mov     di, si
mov     ax, di
mov     ds:9319h, ax
cmp     ds:472Ah, ax
jz      short loc_19E33
jmp     def_19E46       ; jumptable 00019E46 default case, cases 3,5-7,9-15

loc_19E33:
mov     ax, ds:91D3h
and     ax, 1Fh
dec     ax              ; switch 16 cases
cmp     ax, 0Fh
jbe     short loc_19E42
jmp     def_19E46       ; jumptable 00019E46 default case, cases 3,5-7,9-15

loc_19E42:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_19E46[bx] ; switch jump
jpt_19E46 dw offset loc_19E6B ; jump table for switch statement
dw offset loc_19E73
dw offset def_19E46
dw offset loc_19E88
dw offset def_19E46
dw offset def_19E46
dw offset def_19E46
dw offset loc_19EBF
dw offset def_19E46
dw offset def_19E46
dw offset def_19E46
dw offset def_19E46
dw offset def_19E46
dw offset def_19E46
dw offset def_19E46
dw offset loc_19EA7

loc_19E6B:              ; jumptable 00019E46 case 1
mov     word ptr ds:9319h, 0FA0h
jmp     short loc_19E80

loc_19E73:              ; jumptable 00019E46 case 2
mov     word ptr ds:9319h, 0FA0h
mov     si, 2
or      ds:2294h, si

loc_19E80:
mov     word ptr ds:2298h, 0
jmp     short def_19E46 ; jumptable 00019E46 default case, cases 3,5-7,9-15

loc_19E88:              ; jumptable 00019E46 case 4
mov     word ptr ds:9319h, 1AE0h
cmp     word ptr ds:2296h, 0
jz      short loc_19ED5
cmp     byte ptr ds:9273h, 0
jz      short loc_19ED5
mov     si, 146h
or      word ptr ds:2294h, 4
jmp     short loc_19ED5

loc_19EA7:              ; jumptable 00019E46 case 16
mov     word ptr ds:9319h, 1F40h
cmp     byte ptr ds:9273h, 0
jz      short loc_19ED5
mov     si, 22h ; '"'
or      word ptr ds:2294h, 10h
jmp     short loc_19ED5

loc_19EBF:              ; jumptable 00019E46 case 8
mov     word ptr ds:9319h, 0FA0h
cmp     byte ptr ds:9273h, 0
jz      short loc_19ED5
mov     si, 2
or      word ptr ds:2294h, 8

loc_19ED5:
mov     di, 2000h

def_19E46:              ; jumptable 00019E46 default case, cases 3,5-7,9-15
call    sub_1BEA3
mov     dx, ds:9319h
add     dx, di
add     dx, si
add     dx, 1896h
cmp     ax, dx
jnb     short loc_19EEF
xor     ax, ax
jmp     short loc_19F42

loc_19EEF:
mov     ax, 1896h
push    ax
call    sub_3193F
mov     ds:9A6Eh, dx
mov     ds:9A6Ch, ax
cmp     word ptr ds:9319h, 0
jz      short loc_19F16
push    word ptr ds:9319h
call    sub_3193F
mov     ds:228Ah, dx
mov     ds:2288h, ax

loc_19F16:
or      si, si
jz      short loc_19F27
push    si
call    sub_3193F
mov     ds:2292h, dx
mov     ds:2290h, ax

loc_19F27:
cmp     word ptr ds:2298h, 0
jz      short loc_19F3F
or      di, di
jz      short loc_19F3F
push    di
call    sub_3193F
mov     ds:228Eh, dx
mov     ds:228Ch, ax

loc_19F3F:
mov     ax, 1

loc_19F42:
pop     di
pop     si
retn
sub_19E1F endp



; Attributes: bp-based frame

sub_19F45 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, ds:2294h
and     si, ds:9276h
test    si, 2
jnz     short loc_19F60
test    si, 8
jz      short loc_19F8D

loc_19F60:
les     bx, ds:2290h
mov     dl, es:[bx]
mov     al, dl
mov     ah, 0
mov     bx, ax
and     bx, 20h
mov     cl, 5
sar     bx, cl
or      bx, 100h
mov     ah, 0Bh
call    sub_10BFC
mov     al, dl
mov     ah, 0
mov     bx, ax
and     bx, 1Fh
mov     ah, 0Bh
call    sub_10BFC

loc_19F8D:
test    si, 4
jz      short loc_19FAE
les     bx, ds:2290h
add     bx, 120h
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     dx, bx
mov     ax, [bp+var_2]
mov     es, ax
mov     ax, 1002h
call    sub_10BFC

loc_19FAE:
test    si, 10h
jz      short loc_19FBF
push    word ptr ds:2292h
push    word ptr ds:2290h
call    sub_10BA4

loc_19FBF:
pop     si
mov     sp, bp
pop     bp
retn
sub_19F45 endp




sub_19FC4 proc near
push    si
mov     si, ds:2294h
and     si, ds:9276h
test    si, 2
jnz     short loc_19FD9
test    si, 8
jz      short loc_19FE8

loc_19FD9:
les     bx, ds:2274h
mov     al, es:[bx+66h]
les     bx, ds:2290h
mov     es:[bx], al

loc_19FE8:
test    si, 4
jz      short loc_1A012
les     bx, ds:2284h
les     bx, es:[bx]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
mov     dx, ds:2292h
mov     ax, ds:2290h
add     ax, 120h
push    dx
push    ax
mov     ax, 11h
push    ax
call    sub_46A2C

loc_1A012:
test    si, 10h
jz      short loc_1A023
push    word ptr ds:2292h
push    word ptr ds:2290h
call    sub_10B65

loc_1A023:
pop     si
retn
sub_19FC4 endp



; Attributes: bp-based frame

sub_1A025 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
test    word ptr ds:2294h, 2
jnz     short loc_1A03B
test    word ptr ds:2294h, 8
jz      short loc_1A069

loc_1A03B:
les     bx, ds:2290h
mov     dl, es:[bx+1]
mov     al, dl
mov     ah, 0
mov     bx, ax
and     bx, 20h
mov     cl, 5
sar     bx, cl
or      bx, 100h
mov     ah, 0Bh
call    sub_10BFC
mov     al, dl
mov     ah, 0
mov     bx, ax
and     bx, 1Fh
mov     ah, 0Bh
call    sub_10BFC

loc_1A069:
test    word ptr ds:2294h, 4
jz      short loc_1A08E
les     bx, ds:2290h
add     bx, 131h
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     dx, bx
mov     ax, [bp+var_2]
mov     es, ax
mov     ax, 1002h
call    sub_10BFC
jmp     short loc_1A0A5

loc_1A08E:
test    word ptr ds:2294h, 10h
jz      short loc_1A0A5
mov     dx, ds:2292h
mov     ax, ds:2290h
add     ax, 11h
push    dx
push    ax
call    sub_10BA4

loc_1A0A5:
mov     sp, bp
pop     bp
retn
sub_1A025 endp




sub_1A0A9 proc near
test    word ptr ds:2294h, 4
jz      short locret_1A0D0
les     bx, ds:2290h
mov     dx, es:[bx+144h]
mov     ax, es:[bx+142h]
les     bx, ds:2284h
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:2294h, 0

locret_1A0D0:
retn
sub_1A0A9 endp



; Attributes: bp-based frame

sub_1A0D1 proc near

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    si
les     bx, ds:2284h
mov     dx, es:[bx+2]
mov     ax, es:[bx]
les     bx, ds:2290h
mov     es:[bx+144h], dx
mov     es:[bx+142h], ax
les     bx, ds:2284h
les     bx, es:[bx]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jnz     short loc_1A141
les     bx, ds:2284h
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr ds:2292h
push    word ptr ds:2290h
mov     ax, 20h ; ' '
push    ax
call    sub_46A2C
mov     dx, ds:2292h
mov     ax, ds:2290h
add     ax, 20h ; ' '
les     bx, ds:2290h
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     ax, bx
les     bx, ds:2284h
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_1A141:
xor     si, si
les     bx, ds:2284h
les     bx, es:[bx]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_1A161

loc_1A156:
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 0
inc     word ptr [bp+var_4]
inc     si

loc_1A161:
cmp     si, 11h
jl      short loc_1A156
mov     ax, 931Bh
push    ax
call    sub_1E87B
or      byte ptr ds:93B5h, 80h
mov     ax, 931Bh
push    ax
mov     ax, 931Bh
push    ax
call    sub_19D21
mov     ax, 931Bh
push    ax
call    sub_19C89
mov     ax, 931Bh
push    ax
call    sub_1E87B
xor     si, si
les     bx, ds:2284h
les     bx, es:[bx]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_1A1AD

loc_1A1A0:
les     bx, [bp+var_4]
inc     word ptr [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_1A1B2
inc     si

loc_1A1AD:
cmp     si, 11h
jl      short loc_1A1A0

loc_1A1B2:
cmp     si, 11h
jnz     short loc_1A1BA
call    sub_1A0A9

loc_1A1BA:
pop     si
mov     sp, bp
pop     bp
retn
sub_1A0D1 endp




sub_1A1BF proc near
test    word ptr ds:2294h, 2
jz      short loc_1A1D7
les     bx, ds:2274h
mov     al, es:[bx+66h]
les     bx, ds:2290h
mov     es:[bx+1], al

loc_1A1D7:
test    word ptr ds:2294h, 8
jz      short loc_1A1EF
les     bx, ds:2274h
mov     al, es:[bx+66h]
les     bx, ds:2290h
mov     es:[bx+1], al

loc_1A1EF:
test    word ptr ds:2294h, 4
jz      short loc_1A21E
call    sub_1A0D1
les     bx, ds:2284h
les     bx, es:[bx]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
mov     dx, ds:2292h
mov     ax, ds:2290h
add     ax, 131h
push    dx
push    ax
mov     ax, 11h
push    ax
call    sub_46A2C

loc_1A21E:
test    word ptr ds:2294h, 10h
jz      short locret_1A235
mov     dx, ds:2292h
mov     ax, ds:2290h
add     ax, 11h
push    dx
push    ax
call    sub_10B65

locret_1A235:
retn
sub_1A1BF endp



; Attributes: bp-based frame

sub_1A236 proc near

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    si
cmp     word ptr ds:472Ah, 0
jnz     short loc_1A26B
xor     si, si
les     bx, ds:2288h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_1A25F

loc_1A252:
les     bx, [bp+var_4]
mov     word ptr es:[bx], 720h
add     word ptr [bp+var_4], 2
inc     si

loc_1A25F:
mov     ax, ds:9319h
shr     ax, 1
cmp     ax, si
ja      short loc_1A252
call    sub_1A1BF

loc_1A26B:
pop     si
mov     sp, bp
pop     bp
retn
sub_1A236 endp




sub_1A270 proc near
test    byte ptr ds:91D2h, 4
jz      short locret_1A27A
call    sub_10A5B

locret_1A27A:
retn
sub_1A270 endp




sub_1A27B proc near
mov     cl, ds:92C7h
mov     ch, ds:9305h
mov     dx, ds:9276h
cmp     word ptr ds:2298h, 0
jz      short locret_1A2B6
cmp     cl, 0Dh
jb      short locret_1A2B6
cmp     cl, 13h
ja      short locret_1A2B6
test    dx, 1Ch
jz      short locret_1A2B6
test    dx, 4
jz      short loc_1A2B3
test    ch, 60h
jnz     short loc_1A2B3
cmp     cl, 0Fh
jb      short loc_1A2B3
or      byte ptr ds:91D2h, 3

loc_1A2B3:
call    sub_10A03

locret_1A2B6:
retn
sub_1A27B endp



; Attributes: bp-based frame

sub_1A2B7 proc near

var_A4= byte ptr -0A4h
var_52= byte ptr -52h
var_9= byte ptr -9

push    bp
mov     bp, sp
sub     sp, 0A4h
lea     ax, [bp+var_A4]
push    ax
call    sub_1E87B
mov     dh, [bp+var_9]
mov     dl, [bp+var_52]
mov     ax, 600h
mov     bh, 7
xor     cx, cx
call    sub_10BFC
mov     sp, bp
pop     bp
retn
sub_1A2B7 endp



; Attributes: bp-based frame

sub_1A2DA proc near

var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
cmp     word ptr ds:472Ah, 0
jz      short loc_1A2EC
jmp     loc_1A399

loc_1A2EC:
mov     ax, sp
sub     ax, ds:20h
add     ax, 0FC00h
mov     [bp+var_4], ax
mov     dx, sp
sub     dx, ax
mov     sp, dx
mov     [bp+var_6], dx
cmp     byte ptr ds:9275h, 0
jz      short loc_1A30F
mov     ax, 91D3h
push    ax
call    sub_10953

loc_1A30F:
mov     si, ds:9319h
xor     di, di
jmp     short loc_1A380

loc_1A317:
mov     dx, ds:926Bh
mov     ax, di
mov     [bp+var_C], dx
mov     [bp+var_E], ax
mov     ax, di
mov     [bp+var_8], dx
mov     [bp+var_A], ax
les     bx, ds:2288h
add     bx, di
mov     [bp+var_10], es
mov     [bp+var_12], bx
cmp     si, [bp+var_4]
jnb     short loc_1A340
mov     ax, si
jmp     short loc_1A343

loc_1A340:
mov     ax, [bp+var_4]

loc_1A343:
mov     [bp+var_2], ax
sub     si, ax
add     di, ax
push    [bp+var_C]
push    [bp+var_E]
push    ds
push    [bp+var_6]
push    ax
call    sub_46A2C
push    [bp+var_10]
push    [bp+var_12]
push    [bp+var_8]
push    [bp+var_A]
push    [bp+var_2]
call    sub_46A2C
push    ds
push    [bp+var_6]
push    [bp+var_10]
push    [bp+var_12]
push    [bp+var_2]
call    sub_46A2C

loc_1A380:
or      si, si
jnz     short loc_1A317
mov     ax, sp
add     ax, [bp+var_4]
mov     sp, ax
cmp     byte ptr ds:9275h, 0
jz      short loc_1A399
mov     ax, 91D3h
push    ax
call    sub_10999

loc_1A399:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1A2DA endp




sub_1A39F proc near
push    si
and     byte ptr ds:91D2h, 0F8h
call    sub_1A521
mov     si, ax
mov     ax, 9276h
push    ax
call    sub_1E87B
or      si, si
jnz     short loc_1A3BC
call    sub_1A521
or      ax, ax
jz      short loc_1A3CE

loc_1A3BC:
call    sub_19FC4
call    sub_1A27B
mov     ax, 91D3h
push    ax
call    sub_19DC4
call    sub_1A025
jmp     short loc_1A3D5

loc_1A3CE:
mov     ax, 91D3h
push    ax
call    sub_19CCF

loc_1A3D5:
call    sub_1A2DA
mov     word ptr ds:229Ah, 0
mov     byte ptr ds:1D40h, 1
pop     si
retn
sub_1A39F endp




sub_1A3E5 proc near
mov     ax, ds:9276h
cmp     ax, ds:931Bh
jnz     short loc_1A43C
test    byte ptr ds:92E3h, 2
jnz     short loc_1A42F
mov     al, ds:9310h
cmp     al, ds:93B5h
jnz     short loc_1A42F
mov     al, ds:9311h
cmp     al, ds:93B6h
jnz     short loc_1A42F
mov     ax, ds:92C8h
cmp     ax, ds:936Dh
jnz     short loc_1A42F
cmp     byte ptr ds:92E0h, 0
jnz     short loc_1A42F
mov     ax, ds:92CEh
mov     cl, 8
shr     ax, cl
cmp     al, ds:9311h
jnb     short loc_1A42F
mov     al, ds:92CEh
mov     ah, 0
cmp     ax, ds:92C8h
jb      short loc_1A44E

loc_1A42F:
mov     ax, 9276h
push    ax
mov     ax, 931Bh
push    ax
call    sub_19D21
jmp     short loc_1A44E

loc_1A43C:
mov     al, ds:9333h
les     bx, ds:2278h
mov     es:[bx], al
mov     al, ds:936Ch
mov     ah, 0
call    sub_10BFC

loc_1A44E:
mov     cx, ds:93B7h
mov     ah, 1
call    sub_10BFC
mov     word ptr ds:229Ch, 0
retn
sub_1A3E5 endp




sub_1A45E proc near
cmp     word ptr ds:229Eh, 91D3h
jnz     short loc_1A46D
mov     ax, 91D3h
push    ax
call    sub_1E87B

loc_1A46D:
call    sub_1A2DA
call    sub_1A521
or      ax, ax
jz      short loc_1A486
mov     ax, 9276h
push    ax
call    sub_19DC4
call    sub_1A270
call    sub_19F45
jmp     short loc_1A48D

loc_1A486:
mov     ax, 9276h
push    ax
call    sub_19CCF

loc_1A48D:
mov     word ptr ds:229Ah, 1
mov     byte ptr ds:1D40h, 0
cmp     word ptr ds:229Ch, 0
jz      short locret_1A4A2
call    sub_1A3E5

locret_1A4A2:
retn
sub_1A45E endp




sub_1A4A3 proc near
push    si
xor     ax, ax
push    ax
call    sub_17720
mov     ax, 1
push    ax
call    sub_16F3E
xor     si, si
jmp     short loc_1A4BA

loc_1A4B5:
push    si
call    sub_1AD85
inc     si

loc_1A4BA:
cmp     si, 12h
jl      short loc_1A4B5
call    sub_1AE49
pop     si
retn
sub_1A4A3 endp



; Attributes: bp-based frame

sub_1A4C4 proc near

var_A4= byte ptr -0A4h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 0A4h
mov     ax, 0FFFFh
push    ax
call    sub_1774F
call    sub_1A4A3
mov     al, ds:0F2h
mov     ds:926Eh, al
or      byte ptr ds:926Dh, 80h
cmp     [bp+arg_0], 0
jz      short loc_1A511
lea     ax, [bp+var_A4]
push    ax
call    sub_1E87B
mov     ax, 91D3h
push    ax
call    sub_19CCF
lea     ax, [bp+var_A4]
push    ax
mov     ax, 91D3h
push    ax
call    sub_19D21
mov     ax, 91D3h
push    ax
call    sub_19C89
mov     ax, 91D3h
push    ax
call    sub_1E87B
jmp     short loc_1A518

loc_1A511:
mov     ax, 91D3h
push    ax
call    sub_19DC4

loc_1A518:
call    sub_1A583
mov     sp, bp
pop     bp
retn    2
sub_1A4C4 endp




sub_1A521 proc near
mov     ax, ds:91D3h
cmp     ax, ds:9276h
jnz     short loc_1A52F
mov     ax, 1
jmp     short locret_1A531

loc_1A52F:
xor     ax, ax

locret_1A531:
retn
sub_1A521 endp




sub_1A532 proc near
push    word ptr ds:0EEh
call    sub_1DD0C
call    sub_1DD32
or      ax, ax
jnz     short loc_1A544
mov     al, 0
jmp     short loc_1A546

loc_1A544:
mov     al, 0FFh

loc_1A546:
mov     ds:1B82h, al
mov     al, ds:926Eh
add     al, 0FFh
mov     ds:49A0h, al
mov     ds:499Eh, al
mov     ds:498Fh, al
mov     ds:498Dh, al
mov     ds:497Eh, al
mov     ds:497Ch, al
mov     ds:496Dh, al
mov     ds:496Bh, al
mov     ax, 6
push    ax
call    sub_1ACE5
mov     ax, 7
push    ax
call    sub_1ACE5
mov     ax, 8
push    ax
call    sub_1ACE5
mov     ax, 9
push    ax
call    sub_1ACE5
retn
sub_1A532 endp




sub_1A583 proc near
call    sub_1AE25
call    sub_1A532
xor     ax, ax
push    ax
call    sub_16F0E
mov     ax, 347Eh
push    ax
call    sub_16F0E
mov     ax, 3493h
push    ax
xor     ax, ax
push    ax
call    sub_177BE
mov     ax, 6
push    ax
mov     ax, 1
push    ax
call    sub_1ADEF
mov     ax, 3E7h
push    ax
call    sub_156D7
call    sub_1AFE5
retn
sub_1A583 endp



; Attributes: bp-based frame

sub_1A5B6 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 8
push    si
les     bx, ds:93BEh
add     bx, ds:93C2h
mov     [bp+var_6], es
mov     [bp+var_8], bx
push    [bp+var_6]
push    bx
push    ds
push    [bp+arg_0]
call    sub_46D76
push    [bp+var_6]
push    [bp+var_8]
call    sub_46E60
inc     ax
add     ds:93C2h, ax
inc     word ptr ds:93C4h
les     bx, ds:93BEh
add     bx, 7D0h
mov     ax, ds:93C4h
shl     ax, 1
sub     bx, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     si, ds:22A6h
jmp     short loc_1A615

loc_1A607:
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
mov     es:[bx], ax
add     word ptr [bp+var_4], 2

loc_1A615:
dec     si
jnz     short loc_1A607
mov     ax, [bp+var_8]
les     bx, [bp+var_4]
mov     es:[bx], ax
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1A5B6 endp




sub_1A628 proc near
call    sub_1BEA3
cmp     ax, 7D0h
jnb     short loc_1A634
xor     ax, ax
jmp     short locret_1A64E

loc_1A634:
mov     ax, 7D0h
push    ax
call    sub_3193F
mov     ds:93C0h, dx
mov     ds:93BEh, ax
mov     ax, 22A8h
push    ax
call    sub_1A5B6
mov     ax, 1

locret_1A64E:
retn
sub_1A628 endp



; Attributes: bp-based frame

sub_1A64F proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
les     bx, ds:93BEh
add     bx, 7D0h
mov     ax, ds:93C4h
shl     ax, 1
sub     bx, ax
mov     ax, [bp+arg_0]
dec     ax
shl     ax, 1
add     bx, ax
mov     ax, es:[bx]
mov     dx, ds:93C0h
pop     bp
retn    2
sub_1A64F endp



; Attributes: bp-based frame

sub_1A674 proc near

var_102= byte ptr -102h
var_2= byte ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 102h
push    si
mov     si, [bp+arg_0]
mov     ax, [bp+arg_2]
cmp     ax, ds:93C4h
jb      short loc_1A68D
mov     byte ptr [si], 0
jmp     short loc_1A6C5

loc_1A68D:
push    ds
push    si
push    [bp+arg_2]
call    sub_1A64F
push    dx
push    ax
call    sub_46D76
push    ds
push    si
push    ss
lea     ax, [bp+var_102]
push    ax
push    ss
lea     ax, [bp+var_2]
push    ax
xor     ax, ax
push    ax
call    sub_4031D
call    sub_13469
push    si
mov     ax, 22A9h
push    ax
call    sub_19483
push    si
lea     ax, [bp+var_102]
push    ax
call    sub_19483

loc_1A6C5:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1A674 endp



; Attributes: bp-based frame

sub_1A6CC proc near

var_204= byte ptr -204h
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 204h
push    si
push    di
mov     di, [bp+arg_2]
lea     si, [bp+var_204]
mov     ax, 1
push    ax
call    sub_1B056
or      ax, ax
jz      short loc_1A749
cmp     word ptr ds:4722h, 0
jnz     short loc_1A749
push    word ptr ds:4911h
call    sub_1E8C0
mov     [bp+var_2], ax
cmp     di, ds:22A6h
jnz     short loc_1A708
push    si
push    word ptr ds:93C6h
call    sub_19458
jmp     short loc_1A70D

loc_1A708:
push    di
push    si
call    sub_1A674

loc_1A70D:
mov     ax, ds:490Dh
mov     ds:93C8h, ax
push    si
mov     ax, di
sub     ax, ds:22A2h
inc     ax
push    ax
cmp     [bp+arg_0], 1
jnz     short loc_1A72D
cmp     word ptr ds:93C4h, 1
jnz     short loc_1A72D
xor     ax, ax
jmp     short loc_1A730

loc_1A72D:
mov     ax, [bp+arg_0]

loc_1A730:
push    ax
mov     al, ds:4917h
mov     ah, 0
mov     dl, ds:4915h
mov     dh, 0
sub     ax, dx
dec     ax
push    ax
call    sub_1B181
push    [bp+var_2]
call    sub_1E8C0

loc_1A749:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1A6CC endp



; Attributes: bp-based frame

sub_1A751 proc near

var_202= byte ptr -202h

push    bp
mov     bp, sp
sub     sp, 202h
cmp     word ptr ds:22A0h, 0
jnz     short loc_1A766
lea     ax, [bp+var_202]
mov     ds:93C6h, ax

loc_1A766:
cmp     word ptr ds:4722h, 0
jnz     short loc_1A79D
call    sub_40223
push    word ptr ds:22A6h
push    word ptr ds:93C6h
call    sub_1A674
push    word ptr ds:93C4h
push    word ptr ds:22A6h
push    word ptr ds:22A0h
mov     ax, 22A2h
push    ax
mov     ax, 22A4h
push    ax
mov     ax, 0A6CCh
push    ax
call    sub_1B085
call    sub_402B3

loc_1A79D:
mov     sp, bp
pop     bp
retn
sub_1A751 endp



; Attributes: bp-based frame

sub_1A7A1 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     ax, ds:93C4h
inc     ax
shl     ax, 1
mov     dx, 7D0h
sub     dx, ax
add     si, dx
mov     ax, si
cmp     ax, ds:93C2h
jnb     short loc_1A7C1
xor     si, si
jmp     short loc_1A7C5

loc_1A7C1:
sub     si, ds:93C2h

loc_1A7C5:
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, 0Ah
push    ax
mov     ax, 7
push    ax
mov     ax, 100h
push    ax
mov     ax, 21h ; '!'
push    ax
call    sub_18E6D
or      ax, ax
jge     short loc_1A7E4
jmp     short loc_1A805

loc_1A7E4:
push    [bp+arg_2]
call    sub_19448
or      ax, ax
jnz     short loc_1A7F3
mov     ax, 0FFFFh
jmp     short loc_1A805

loc_1A7F3:
cmp     ax, si
jb      short loc_1A803
mov     ax, 1700h
push    ax
xor     ax, ax
push    ax
call    sub_19065
jmp     short loc_1A7C5

loc_1A803:
xor     ax, ax

loc_1A805:
pop     si
pop     bp
retn    6
sub_1A7A1 endp



; Attributes: bp-based frame

sub_1A80A proc near

var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
push    word ptr ds:22A6h
call    sub_1A64F
mov     [bp+var_6], dx
mov     [bp+var_8], ax
push    dx
push    ax
call    sub_46E60
mov     di, ax
inc     di
sub     ds:93C2h, di
mov     ax, [bp+var_8]
xor     dx, dx
sub     ax, ds:93BEh
sbb     dx, 0
mov     [bp+var_A], ax
mov     ax, ds:93C2h
sub     ax, [bp+var_A]
or      ax, ax
jbe     short loc_1A860
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
add     ax, di
push    dx
push    ax
push    dx
push    [bp+var_8]
mov     ax, ds:93C2h
sub     ax, [bp+var_A]
push    ax
call    sub_46A2C

loc_1A860:
les     bx, ds:93BEh
add     bx, 7CEh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     si, ds:93C4h
jmp     short loc_1A897

loc_1A874:
les     bx, [bp+var_4]
mov     ax, es:[bx]
cmp     ax, [bp+var_8]
jbe     short loc_1A882
sub     es:[bx], di

loc_1A882:
cmp     si, ds:22A6h
jge     short loc_1A892
les     bx, [bp+var_4]
mov     ax, es:[bx]
mov     es:[bx+2], ax

loc_1A892:
dec     si
sub     word ptr [bp+var_4], 2

loc_1A897:
or      si, si
jnz     short loc_1A874
dec     word ptr ds:93C4h
mov     ax, ds:93C4h
cmp     ax, ds:22A6h
jge     short loc_1A8B4
or      ax, ax
jz      short loc_1A8AE
jmp     short loc_1A8B1

loc_1A8AE:
mov     ax, 1

loc_1A8B1:
mov     ds:22A6h, ax

loc_1A8B4:
cmp     word ptr ds:22A2h, 1
jle     short loc_1A8CD
call    sub_1B243
add     ax, ds:22A2h
dec     ax
cmp     ax, ds:93C4h
jle     short loc_1A8CD
dec     word ptr ds:22A2h

loc_1A8CD:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1A80A endp



; Attributes: bp-based frame

sub_1A8D3 proc near

var_100= byte ptr -100h

push    bp
mov     bp, sp
sub     sp, 100h
lea     ax, [bp+var_100]
push    ax
call    sub_1B1FB
mov     word ptr ds:1DD3h, 108h
cmp     word ptr ds:8B9Dh, 0
jz      short loc_1A8F4
mov     ax, 15h
jmp     short loc_1A8F7

loc_1A8F4:
mov     ax, 1

loc_1A8F7:
mov     ds:40DAh, ax
mov     ax, 171Dh
push    ax
lea     ax, [bp+var_100]
push    ax
xor     ax, ax
push    ax
call    sub_1A7A1
or      ax, ax
jge     short loc_1A90F
jmp     short loc_1A92E

loc_1A90F:
lea     ax, [bp+var_100]
push    ax
call    sub_1A5B6
xor     ax, ax
push    ax
call    sub_1B2A2
or      ax, ax
jnz     short loc_1A924
call    sub_1A751

loc_1A924:
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     ax, 0FFE5h

loc_1A92E:
mov     sp, bp
pop     bp
retn
sub_1A8D3 endp




sub_1A932 proc near
mov     ax, ds:22A6h
cmp     ax, ds:93C4h
jge     short loc_1A941
call    sub_1A80A
call    sub_1A751

loc_1A941:
mov     ax, 0FFFFh
retn
sub_1A932 endp



; Attributes: bp-based frame

sub_1A945 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     word ptr ds:9166h, 0
call    sub_40223
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_1A6CC
call    sub_402B3
pop     bp
retn    2
sub_1A945 endp




sub_1A965 proc near
mov     ax, ds:22A6h
cmp     ax, ds:22A2h
jl      short loc_1A97B
mov     ax, ds:22A2h
add     ax, ds:22A4h
cmp     ax, ds:22A6h
jg      short loc_1A980

loc_1A97B:
call    sub_1A751
jmp     short locret_1A9AC

loc_1A980:
call    sub_40223
push    word ptr ds:22A6h
push    word ptr ds:93C6h
call    sub_1A674
push    word ptr ds:22A6h
cmp     word ptr ds:22A0h, 0
jz      short loc_1A9A0
mov     ax, 2
jmp     short loc_1A9A3

loc_1A9A0:
mov     ax, 1

loc_1A9A3:
push    ax
call    sub_1A6CC
call    sub_402B3

locret_1A9AC:
retn
sub_1A965 endp



; Attributes: bp-based frame

sub_1A9AD proc near

var_202= byte ptr -202h

push    bp
mov     bp, sp
sub     sp, 202h
cmp     word ptr ds:22A0h, 0
jnz     short loc_1A9C2
lea     ax, [bp+var_202]
mov     ds:93C6h, ax

loc_1A9C2:
push    ss
lea     ax, [bp+var_202]
push    ax
push    word ptr ds:22A6h
call    sub_1A64F
push    dx
push    ax
call    sub_46D76
mov     word ptr ds:1DD3h, 10Ah
mov     word ptr ds:40DAh, 1
mov     ax, 1729h
push    ax
lea     ax, [bp+var_202]
push    ax
mov     ax, ds:22A6h
cmp     ax, ds:93C4h
jge     short loc_1AA04
push    ss
lea     ax, [bp+var_202]
push    ax
call    sub_46E60
add     ax, 3
jmp     short loc_1AA06

loc_1AA04:
xor     ax, ax

loc_1AA06:
push    ax
call    sub_1A7A1
or      ax, ax
jge     short loc_1AA10
jmp     short loc_1AA3E

loc_1AA10:
mov     ax, ds:22A6h
cmp     ax, ds:93C4h
jge     short loc_1AA29
call    sub_1A80A
lea     ax, [bp+var_202]
push    ax
call    sub_1A5B6
call    sub_1A965
jmp     short loc_1AA34

loc_1AA29:
lea     ax, [bp+var_202]
push    ax
call    sub_1A5B6
call    sub_1A751

loc_1AA34:
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     ax, 0FFE5h

loc_1AA3E:
mov     sp, bp
pop     bp
retn
sub_1A9AD endp



; Attributes: bp-based frame

sub_1AA42 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     word ptr ds:9166h, 0
mov     ax, [bp+arg_0]
mov     ds:22A0h, ax
or      ax, ax
jz      short loc_1AA69
xor     ax, ax
push    ax
call    sub_1B2A2
mov     ax, 1
push    ax
call    sub_1AE6D
call    sub_40223
jmp     short loc_1AA6E

loc_1AA69:
call    sub_402B3

loc_1AA6E:
call    sub_1A965
pop     bp
retn    2
sub_1AA42 endp



; Attributes: bp-based frame

sub_1AA75 proc near

var_206= word ptr -206h
var_204= word ptr -204h
var_202= byte ptr -202h

push    bp
mov     bp, sp
sub     sp, 206h
push    si
push    di
lea     ax, [bp+var_202]
mov     ds:93C6h, ax
mov     di, ds:22A6h
mov     ax, ds:22A2h
mov     [bp+var_206], ax
mov     ax, ds:9166h
mov     [bp+var_204], ax
mov     ax, 1
push    ax
call    sub_1AA42
xor     ax, ax
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB

loc_1AAA8:
mov     word ptr ds:40DAh, 2
mov     word ptr ds:1DD3h, 0CDh
push    word ptr ds:93C4h
push    word ptr ds:22A4h
mov     ax, 22A6h
push    ax
mov     ax, 22A2h
push    ax
call    sub_1927C
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jge     short loc_1AAD3
jmp     loc_1AB5C

loc_1AAD3:
mov     ax, ds:22A2h
cmp     ax, [bp+var_206]
jz      short loc_1AAE1
call    sub_1A751
jmp     short loc_1AB06

loc_1AAE1:
mov     ax, ds:22A6h
cmp     ax, di
jz      short loc_1AAF1
push    di
call    sub_1A945
call    sub_1A965
jmp     short loc_1AB06

loc_1AAF1:
mov     ax, [bp+var_204]
cmp     ax, ds:9166h
jz      short loc_1AB06
push    word ptr ds:22A6h
mov     ax, 2
push    ax
call    sub_1A6CC

loc_1AB06:
mov     ax, ds:22A2h
mov     [bp+var_206], ax
mov     di, ds:22A6h
mov     ax, ds:9166h
mov     [bp+var_204], ax
mov     ax, si
mov     cx, 5           ; switch 5 cases
mov     bx, 0AB2Fh

loc_1AB20:
cmp     ax, cs:[bx]
jz      short loc_1AB2B
inc     bx
inc     bx
loop    loc_1AB20
jmp     short def_1AB2B ; jumptable 0001AB2B default case

loc_1AB2B:              ; switch jump
jmp     word ptr cs:[bx+0Ah]
dw      4,     6,     7,   1Ah ; value table for switch statement
dw    1Bh
jpt_1AB2B dw offset loc_1AB43 ; jump table for switch statement
dw offset loc_1AB4A
dw offset loc_1AB51
dw offset loc_1AB51
dw offset loc_1AB4A

loc_1AB43:              ; jumptable 0001AB2B case 4
call    sub_1A9AD
mov     si, ax
jmp     short def_1AB2B ; jumptable 0001AB2B default case

loc_1AB4A:              ; jumptable 0001AB2B cases 6,27
call    sub_1A8D3
mov     si, ax
jmp     short def_1AB2B ; jumptable 0001AB2B default case

loc_1AB51:              ; jumptable 0001AB2B cases 7,26
call    sub_1A932

def_1AB2B:              ; jumptable 0001AB2B default case
cmp     si, 0FFFFh
jl      short loc_1AB5C
jmp     loc_1AAA8

loc_1AB5C:
xor     ax, ax
push    ax
call    sub_1AA42
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1AA75 endp




sub_1AB6A proc near
mov     word ptr ds:22A6h, 1
jmp     short loc_1AB75

loc_1AB72:
call    sub_1A80A

loc_1AB75:
cmp     word ptr ds:93C4h, 1
jg      short loc_1AB72
call    sub_1A751
retn
sub_1AB6A endp



; Attributes: bp-based frame

sub_1AB80 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
call    sub_1E8A9
or      ax, ax
jz      short loc_1AB94
xor     ax, ax
push    ax
call    sub_164B5

loc_1AB94:
or      si, si
jl      short loc_1AB9D
cmp     si, 12h
jle     short loc_1ABA6

loc_1AB9D:
mov     ax, si
add     ax, 0C8h
push    ax
call    sub_164B5

loc_1ABA6:
pop     si
pop     bp
retn    2
sub_1AB80 endp



; Attributes: bp-based frame

sub_1ABAB proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     al, [di+0Ch]
mov     ah, 0
mov     si, ax
cmp     word ptr ds:23C5h, 0
jz      short loc_1ABCE
cmp     byte ptr [di+10h], 0
jz      short loc_1ABCE
mov     al, [di+0Dh]
mov     ah, 0
mov     si, ax

loc_1ABCE:
mov     ax, si
pop     di
pop     si
pop     bp
retn    2
sub_1ABAB endp



; Attributes: bp-based frame

sub_1ABD6 proc near

var_4= byte ptr -4
var_2= byte ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
cmp     [bp+arg_0], 0
jz      short loc_1ABE9
cmp     word ptr ds:23C5h, 0
jz      short loc_1AC04

loc_1ABE9:
cmp     word ptr ds:4720h, 0
jnz     short loc_1ABFA
mov     [bp+var_4], 0D5h
mov     [bp+var_2], 0B8h
jmp     short loc_1AC1F

loc_1ABFA:
mov     [bp+var_4], 0DAh
mov     [bp+var_2], 0BFh
jmp     short loc_1AC1F

loc_1AC04:
mov     ax, [bp+arg_0]
cmp     ax, ds:4720h
jnz     short loc_1AC17
mov     [bp+var_4], 0C6h
mov     [bp+var_2], 0B5h
jmp     short loc_1AC1F

loc_1AC17:
mov     [bp+var_4], 0C3h
mov     [bp+var_2], 0B4h

loc_1AC1F:
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
lea     ax, [bp+var_4]
push    ax
mov     ax, 1
push    ax
call    sub_1D8CC
mov     ax, 4Fh ; 'O'
push    ax
xor     ax, ax
push    ax
mov     ax, 4Fh ; 'O'
push    ax
xor     ax, ax
push    ax
lea     ax, [bp+var_2]
push    ax
mov     ax, 1
push    ax
call    sub_1D8CC
mov     sp, bp
pop     bp
retn    2
sub_1ABD6 endp



; Attributes: bp-based frame

sub_1AC4F proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_1= byte ptr -1
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     si, [bp+arg_0]
mov     ax, si
mov     dx, 11h
mul     dx
mov     di, ax
add     di, 48FCh
push    si
call    sub_1AB80
mov     ax, [di+2]
mov     [bp+var_6], ax
or      ax, ax
jz      short loc_1ACDD
push    di
call    sub_1ABAB
or      ax, ax
jz      short loc_1ACDD
push    word ptr [di+4]
call    sub_1E8C0
mov     [bp+var_8], ax
or      si, si
jz      short loc_1AC8F
cmp     si, 1
jnz     short loc_1AC93

loc_1AC8F:
push    si
call    sub_1ABD6

loc_1AC93:
mov     al, [di+0Ch]
mov     ah, 0
shl     ax, 1
shl     ax, 1
shl     ax, 1
add     ax, 1B0Ah
mov     [bp+var_4], ax
mov     bx, ax
mov     al, [bx]
mov     [bp+var_1], al
mov     bx, [di]
cmp     si, ds:4720h
jnz     short loc_1ACBE
mov     cl, [bx+6]
mov     bx, [bp+var_4]
mov     byte ptr [bx], 0CDh
jmp     short loc_1ACC0

loc_1ACBE:
mov     cl, [bx]

loc_1ACC0:
push    [bp+var_6]
mov     al, cl
mov     ah, 0
push    ax
call    sub_1E90D
mov     al, [bp+var_1]
mov     bx, [bp+var_4]
mov     [bx], al
push    [bp+var_8]
call    sub_1E8C0
push    si
call    sub_1AB80

loc_1ACDD:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1AC4F endp



; Attributes: bp-based frame

sub_1ACE5 proc near

var_1= byte ptr -1
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_0]
mov     ax, di
mov     dx, 11h
mul     dx
mov     si, ax
add     si, 48FCh
push    di
call    sub_1AB80
cmp     word ptr [si+4], 0FFFFh
jz      short loc_1AD0F
push    word ptr [si+4]
call    sub_1E8C0
jmp     short loc_1AD7A

loc_1AD0F:
or      di, di
jz      short loc_1AD1D
cmp     di, 1
jz      short loc_1AD1D
mov     ax, 1
jmp     short loc_1AD1F

loc_1AD1D:
xor     ax, ax

loc_1AD1F:
mov     [bp+var_1], al
mov     al, [si+8]
mov     ah, 0
inc     ax
push    ax
mov     al, [si+9]
mov     ah, 0
inc     ax
push    ax
mov     al, [si+0Ah]
mov     ah, 0
inc     ax
push    ax
mov     al, [si+0Bh]
mov     ah, 0
inc     ax
push    ax
push    si
call    sub_1ABAB
push    ax
mov     bx, [si]
mov     al, [bx+1]
mov     ah, 0
push    ax
mov     bx, [si]
mov     al, [bx+3]
mov     ah, 0
push    ax
mov     al, [si+0Fh]
cbw
push    ax
mov     al, [bp+var_1]
cbw
push    ax
call    sub_1E93C
mov     [si+4], ax
cmp     [bp+var_1], 0
jz      short loc_1AD6D
push    di
call    sub_1AC4F

loc_1AD6D:
mov     al, [si+0Eh]
mov     ah, 0
push    ax
call    sub_1DC4A
push    di
call    sub_1AB80

loc_1AD7A:
mov     ax, [si+4]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1ACE5 endp



; Attributes: bp-based frame

sub_1AD85 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     ax, di
mov     dx, 11h
mul     dx
mov     si, ax
add     si, 48FCh
push    di
call    sub_1AB80
cmp     word ptr [si+4], 0FFFFh
jz      short loc_1ADB6
push    word ptr [si+4]
call    sub_1E8C0
call    sub_1DA41
mov     word ptr [si+4], 0FFFFh
push    di
call    sub_1AB80

loc_1ADB6:
pop     di
pop     si
pop     bp
retn    2
sub_1AD85 endp



; Attributes: bp-based frame

sub_1ADBC proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     ax, di
mov     dx, 11h
mul     dx
mov     si, ax
add     si, 48FCh
push    di
call    sub_1AB80
push    si
call    sub_1ABAB
push    ax
mov     bx, [si]
mov     al, [bx+1]
mov     ah, 0
push    ax
call    sub_1DA05
push    di
call    sub_1AB80
pop     di
pop     si
pop     bp
retn    2
sub_1ADBC endp



; Attributes: bp-based frame

sub_1ADEF proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     ax, [bp+arg_2]
mov     dx, 11h
mul     dx
mov     bx, ax
push    word ptr [bx+4900h]
call    sub_1E8C0
mov     si, ax
cmp     [bp+arg_0], 0
jz      short loc_1AE15
mov     ax, 1
push    ax
call    sub_1DCE5
jmp     short loc_1AE1C

loc_1AE15:
mov     ax, 1
push    ax
call    sub_1EA98

loc_1AE1C:
push    si
call    sub_1E8C0
pop     si
pop     bp
retn    4
sub_1ADEF endp




sub_1AE25 proc near
push    word ptr ds:9A6Eh
push    word ptr ds:9A6Ch
mov     ax, 1896h
push    ax
mov     ax, 12h
push    ax
push    ds
mov     ax, 1B06h
push    ax
mov     ax, 8
push    ax
call    sub_1DABB
mov     ds:9A6Ah, dx
mov     ds:9A68h, ax
retn
sub_1AE25 endp




sub_1AE49 proc near
push    si
xor     si, si
jmp     short loc_1AE53

loc_1AE4E:
push    si
call    sub_1AD85
inc     si

loc_1AE53:
cmp     si, 12h
jl      short loc_1AE4E
mov     ax, 1
push    ax
call    sub_1EACC
mov     word ptr ds:9A6Ah, 0
mov     word ptr ds:9A68h, 0
pop     si
retn
sub_1AE49 endp



; Attributes: bp-based frame

sub_1AE6D proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
xor     si, si
mov     ax, ds:4720h
cmp     ax, [bp+arg_0]
jz      short loc_1AEA3
mov     ax, [bp+arg_0]
mov     ds:4720h, ax
cmp     ds:23C5h, si
jz      short loc_1AE8F
call    sub_1AFE5
mov     si, 1
jmp     short loc_1AEA3

loc_1AE8F:
mov     ax, 0FFFFh
push    ax
call    sub_1774F
mov     ax, 1
push    ax
call    sub_1AC4F
xor     ax, ax
push    ax
call    sub_1AC4F

loc_1AEA3:
push    word ptr ds:4720h
call    sub_1ACE5
xor     ax, ax
push    ax
call    sub_1DC5F
mov     ax, si
pop     si
pop     bp
retn    2
sub_1AE6D endp




sub_1AEB7 proc near
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_4623D
pop     cx
pop     cx
and     word ptr ds:1C68h, 0EFDFh
cmp     byte ptr ds:9877h, 0
jz      short loc_1AED8
mov     al, 1Bh
push    ax
call    sub_14C12
jmp     short locret_1AEE1

loc_1AED8:
xor     ax, ax
push    ax
call    sub_1ACE5
call    sub_1DA26

locret_1AEE1:
retn
sub_1AEB7 endp



; Attributes: bp-based frame

sub_1AEE2 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     ax, 0FFFFh
push    ax
call    sub_1774F
push    si
call    sub_1ACE5
xor     ax, ax
push    ax
call    sub_1DCE5
cmp     word ptr ds:23C5h, 0
jz      short loc_1AF05
or      si, si
jz      short loc_1AF0D

loc_1AF05:
push    si
call    sub_1ADBC
push    si
call    sub_1AC4F

loc_1AF0D:
or      si, si
jnz     short loc_1AF16
call    sub_1AEB7
jmp     short loc_1AF19

loc_1AF16:
call    sub_1B2D9

loc_1AF19:
pop     si
pop     bp
retn    2
sub_1AEE2 endp




sub_1AF1E proc near
cmp     word ptr ds:4720h, 0
jnz     short loc_1AF2A
mov     ax, 1
jmp     short loc_1AF2C

loc_1AF2A:
xor     ax, ax

loc_1AF2C:
mov     ds:4720h, ax
cmp     word ptr ds:23C5h, 0
jz      short loc_1AF3B
call    sub_1AFE5
jmp     short loc_1AF4F

loc_1AF3B:
mov     ax, 1
push    ax
call    sub_1AC4F
xor     ax, ax
push    ax
call    sub_1AC4F
push    word ptr ds:4720h
call    sub_1ACE5

loc_1AF4F:
mov     ax, ds:4720h
mov     dx, 11h
mul     dx
mov     bx, ax
mov     ax, [bx+4902h]
retn
sub_1AF1E endp




sub_1AF5E proc near
push    si
push    di
cmp     word ptr ds:23C5h, 0
jz      short loc_1AF79
mov     byte ptr ds:4916h, 1
mov     al, ds:926Eh
add     al, 0FEh
mov     ds:4918h, al
mov     ds:4907h, al
jmp     short loc_1AF9B

loc_1AF79:
call    sub_1B243
mov     dl, ds:926Eh
mov     dh, 0
mov     di, dx
dec     di
mov     si, di
sub     si, ax
dec     si
mov     ax, si
add     al, 0FFh
mov     ds:4916h, al
mov     ds:4907h, al
mov     ax, di
add     al, 0FFh
mov     ds:4918h, al

loc_1AF9B:
call    sub_1481D
push    ds
mov     ax, 1C5Eh
push    ax
call    sub_4623D
pop     cx
pop     cx
pop     di
pop     si
retn
sub_1AF5E endp



; Attributes: bp-based frame

sub_1AFAD proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
push    si
call    sub_1ACE5
xor     ax, ax
push    ax
call    sub_1DCE5
push    si
call    sub_1ADBC
push    si
call    sub_1AC4F
pop     si
pop     bp
retn    2
sub_1AFAD endp




sub_1AFCB proc near
mov     cx, 100h
mov     dh, ds:926Eh
add     dh, 0FDh
mov     dl, ds:9225h
add     dl, 0FFh
mov     bh, 7
mov     ax, 600h
call    sub_10BFC
retn
sub_1AFCB endp




sub_1AFE5 proc near
call    sub_1AF5E
xor     ax, ax
push    ax
call    sub_1AD85
mov     ax, 1
push    ax
call    sub_1AD85
call    sub_1DD32
or      ax, ax
jz      short loc_1AFFF
call    sub_1AFCB

loc_1AFFF:
cmp     word ptr ds:23C5h, 0
jz      short loc_1B014
mov     byte ptr ds:4908h, 0
push    word ptr ds:4720h
call    sub_1AEE2
jmp     short loc_1B047

loc_1B014:
mov     byte ptr ds:4908h, 1
mov     ax, 0FFFFh
push    ax
call    sub_1774F
xor     ax, ax
push    ax
call    sub_1AFAD
mov     ax, 1
push    ax
call    sub_1AFAD
call    sub_1AEB7
call    sub_1B2D9
cmp     word ptr ds:4720h, 0
jnz     short loc_1B047
push    word ptr ds:4720h
call    sub_1ACE5
xor     ax, ax
push    ax
call    sub_1DC5F

loc_1B047:
mov     ax, ds:4720h
mov     dx, 11h
mul     dx
mov     bx, ax
mov     ax, [bx+4902h]
retn
sub_1AFE5 endp



; Attributes: bp-based frame

sub_1B056 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     dx, 11h
mul     dx
mov     bx, ax
cmp     word ptr [bx+4900h], 0FFFFh
jz      short loc_1B06F
mov     ax, 1
jmp     short loc_1B071

loc_1B06F:
xor     ax, ax

loc_1B071:
pop     bp
retn    2
sub_1B056 endp




sub_1B075 proc near
xor     ax, ax
push    ax
push    ax
mov     ax, 0DCEh
push    ax
mov     ax, 22h ; '"'
push    ax
call    sub_1EB6C
retn
sub_1B075 endp



; Attributes: bp-based frame

sub_1B085 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     si, [bp+arg_4]
mov     di, [bp+arg_8]
mov     [bp+var_8], 490Dh
mov     ax, 1
push    ax
call    sub_1B056
or      ax, ax
jnz     short loc_1B0A6
jmp     loc_1B179

loc_1B0A6:
mov     word ptr ds:9166h, 0
mov     bx, [bp+var_8]
mov     al, [bx+0Bh]
mov     ah, 0
mov     dl, [bx+9]
mov     dh, 0
sub     ax, dx
dec     ax
mov     bx, [bp+arg_2]
mov     [bx], ax
call    sub_1B243
mov     bx, [bp+arg_2]
cmp     ax, [bx]
jz      short loc_1B0D8
cmp     word ptr [si], 1
jle     short loc_1B0D2
dec     word ptr [si]

loc_1B0D2:
call    sub_1AFE5
jmp     loc_1B179

loc_1B0D8:
cmp     [bp+arg_A], 0
jnz     short loc_1B107
mov     bx, [bp+var_8]
push    word ptr [bx+4]
call    sub_1E8C0
mov     [bp+var_2], ax
mov     bx, [bp+var_8]
mov     bx, [bx]
mov     al, [bx+3]
mov     ah, 0
push    ax
xor     ax, ax
push    ax
call    sub_1D98E
call    sub_1DA26
push    [bp+var_2]
call    sub_1E8C0
jmp     loc_1B179

loc_1B107:
cmp     di, [bp+arg_A]
jle     short loc_1B10F
mov     di, [bp+arg_A]

loc_1B10F:
mov     ax, [si]
cmp     ax, di
jle     short loc_1B117
mov     [si], di

loc_1B117:
cmp     word ptr [si], 0
jnz     short loc_1B120
mov     word ptr [si], 1

loc_1B120:
mov     ax, [si]
mov     bx, [bp+arg_2]
add     ax, [bx]
cmp     ax, di
jg      short loc_1B136
mov     ax, [si]
add     ax, [bx]
mov     dx, di
sub     dx, ax
inc     dx
add     [si], dx

loc_1B136:
mov     ax, 0FFFFh
push    ax
call    sub_1774F
mov     ax, [si]
mov     [bp+var_6], ax
mov     [bp+var_4], 1
jmp     short loc_1B16F

loc_1B149:
push    [bp+var_6]
mov     ax, [bp+var_6]
cmp     ax, di
jnz     short loc_1B163
cmp     [bp+arg_6], 0
jz      short loc_1B15E
mov     ax, 2
jmp     short loc_1B161

loc_1B15E:
mov     ax, 1

loc_1B161:
jmp     short loc_1B165

loc_1B163:
xor     ax, ax

loc_1B165:
push    ax
call    [bp+arg_0]
inc     [bp+var_6]
inc     [bp+var_4]

loc_1B16F:
mov     bx, [bp+arg_2]
mov     ax, [bx]
cmp     ax, [bp+var_4]
jge     short loc_1B149

loc_1B179:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_1B085 endp



; Attributes: bp-based frame

sub_1B181 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     si, [bp+arg_6]
dec     di
dec     di
push    si
call    sub_19448
mov     cx, ax
cmp     cx, di
jbe     short loc_1B19C
sub     cx, di
jmp     short loc_1B19E

loc_1B19C:
xor     cx, cx

loc_1B19E:
mov     ax, ds:9166h
cmp     ax, cx
jbe     short loc_1B1A9
mov     ds:9166h, cx

loc_1B1A9:
add     si, ds:9166h
cmp     [bp+arg_2], 2
jnz     short loc_1B1BC
mov     bx, ds:93C8h
mov     cl, [bx+2]
jmp     short loc_1B1C3

loc_1B1BC:
mov     bx, ds:93C8h
mov     cl, [bx+3]

loc_1B1C3:
mov     al, cl
mov     ah, 0
push    ax
xor     ax, ax
push    ax
call    sub_1D98E
mov     ax, 1
push    ax
push    [bp+arg_4]
cmp     [bp+arg_2], ax
jnz     short loc_1B1DF
mov     ax, 22ACh
jmp     short loc_1B1E2

loc_1B1DF:
mov     ax, 22AEh

loc_1B1E2:
push    ax
call    sub_1ED32
push    si
call    sub_1EB1F
push    si
call    sub_19448
cmp     ax, di
jg      short loc_1B1F5
call    sub_1B075

loc_1B1F5:
pop     di
pop     si
pop     bp
retn    8
sub_1B181 endp



; Attributes: bp-based frame

sub_1B1FB proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     byte ptr [si], 0
cmp     word ptr ds:4720h, 0
jnz     short loc_1B220
push    si
mov     ax, 16DAh
push    ax
mov     ax, 0FFh
push    ax
call    sub_14B7E
mov     word ptr ds:8B9Dh, 1
jmp     short loc_1B23E

loc_1B220:
cmp     word ptr ds:4720h, 1
jnz     short loc_1B23E
cmp     word ptr ds:4722h, 0
jnz     short loc_1B23E
push    ds
push    si
push    word ptr ds:22A6h
call    sub_1A64F
push    dx
push    ax
call    sub_46D76

loc_1B23E:
pop     si
pop     bp
retn    2
sub_1B1FB endp




sub_1B243 proc near
les     bx, ds:9A68h
mov     cl, es:[bx+29h]
add     cl, 0FFh
cmp     word ptr ds:23C5h, 0
jz      short loc_1B25E
mov     al, cl
mov     ah, 0
add     ax, 0FFFDh
jmp     short locret_1B2A1

loc_1B25E:
mov     al, cl
mov     ah, 0
mul     word ptr ds:0EAh
mov     bx, 18h
cwd
idiv    bx
sub     cl, al
cmp     word ptr ds:4722h, 0
jnz     short loc_1B289
cmp     word ptr ds:93C4h, 1
jnz     short loc_1B280
mov     ch, 1
jmp     short loc_1B287

loc_1B280:
mov     ch, ds:93C4h
add     ch, 0FFh

loc_1B287:
jmp     short loc_1B28D

loc_1B289:
mov     ch, ds:0BFBAh

loc_1B28D:
mov     al, ch
cmp     al, cl
jnb     short loc_1B29D
or      ch, ch
jz      short loc_1B29B
mov     cl, ch
jmp     short loc_1B29D

loc_1B29B:
mov     cl, 1

loc_1B29D:
mov     al, cl
mov     ah, 0

locret_1B2A1:
retn
sub_1B243 endp



; Attributes: bp-based frame

sub_1B2A2 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
cmp     ax, ds:4722h
jz      short loc_1B2CB
mov     ds:4722h, ax
or      ax, ax
jnz     short loc_1B2BA
mov     ax, 13F3h
jmp     short loc_1B2BD

loc_1B2BA:
mov     ax, 13FBh

loc_1B2BD:
mov     ds:490Fh, ax
mov     ax, 1
push    ax
call    sub_1B056
or      ax, ax
jnz     short loc_1B2CF

loc_1B2CB:
xor     ax, ax
jmp     short loc_1B2D5

loc_1B2CF:
call    sub_1AFE5
mov     ax, 1

loc_1B2D5:
pop     bp
retn    2
sub_1B2A2 endp




sub_1B2D9 proc near
cmp     word ptr ds:4722h, 0
jnz     short loc_1B2E5
call    sub_1A751
jmp     short locret_1B2E8

loc_1B2E5:
call    sub_1BF31

locret_1B2E8:
retn
sub_1B2D9 endp



; Attributes: bp-based frame

sub_1B2E9 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
push    [bp+arg_2]
push    ds
push    si
mov     ax, 3
push    ax
call    sub_10740
cmp     ax, 3
jnz     short loc_1B35A
cmp     byte ptr [si], 80h
jz      short loc_1B30C
cmp     byte ptr [si], 88h
jnz     short loc_1B35A

loc_1B30C:
mov     di, [si+1]
cmp     di, 7Dh ; '}'
jle     short loc_1B348
push    [bp+arg_2]
push    ds
mov     ax, si
add     ax, 3
push    ax
mov     ax, 7Dh ; '}'
push    ax
call    sub_10740
cmp     ax, 7Dh ; '}'
jnz     short loc_1B35A
push    [bp+arg_2]
mov     ax, di
add     ax, 0FF83h
cwd
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_10792
or      dx, dx
jl      short loc_1B35A
jnz     short loc_1B346
or      ax, ax
jb      short loc_1B35A

loc_1B346:
jmp     short loc_1B35E

loc_1B348:
push    [bp+arg_2]
push    ds
mov     ax, si
add     ax, 3
push    ax
push    di
call    sub_10740
cmp     ax, di
jz      short loc_1B35E

loc_1B35A:
xor     ax, ax
jmp     short loc_1B362

loc_1B35E:
mov     al, [si]
mov     ah, 0

loc_1B362:
pop     di
pop     si
pop     bp
retn    4
sub_1B2E9 endp



; Attributes: bp-based frame

sub_1B368 proc near

var_D6= word ptr -0D6h
var_D4= word ptr -0D4h
var_D2= word ptr -0D2h
var_D0= byte ptr -0D0h
var_CF= word ptr -0CFh
var_CC= byte ptr -0CCh
var_CB= word ptr -0CBh
var_C9= word ptr -0C9h
var_C7= byte ptr -0C7h
var_C6= byte ptr -0C6h
var_50= byte ptr -50h
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0D6h
push    si
push    di
mov     di, 1
push    ds
push    [bp+arg_4]
xor     ax, ax
push    ax
call    sub_106E6
mov     si, ax
or      si, si
jge     short loc_1B387
jmp     loc_1B42D

loc_1B387:
push    si
lea     ax, [bp+var_D0]
push    ax
call    sub_1B2E9
mov     [bp+var_D6], ax
cmp     ax, 80h
jnz     short loc_1B39C
jmp     loc_1B414

loc_1B39C:
jmp     loc_1B429

loc_1B39F:
cmp     [bp+var_CC], 0E9h
jnz     short loc_1B414
cmp     [bp+var_CF], 3
jnz     short loc_1B3B0
jmp     loc_1B429

loc_1B3B0:
push    ss
lea     ax, [bp+var_C6]
push    ax
push    ss
lea     ax, [bp+var_50]
push    ax
mov     al, [bp+var_C7]
mov     ah, 0
push    ax
call    sub_46A2C
mov     al, [bp+var_C7]
mov     ah, 0
mov     bx, ax
lea     ax, [bp+var_50]
add     bx, ax
mov     byte ptr [bx], 0
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_11CC1
mov     [bp+var_D2], dx
mov     [bp+var_D4], ax
xor     di, di
cmp     dx, [bp+var_C9]
jnz     short loc_1B40B
cmp     ax, [bp+var_CB]
jnz     short loc_1B40B
mov     dx, [bp+var_D2]
mov     ax, [bp+var_D4]
cmp     dx, [bp+arg_2]
jl      short loc_1B414
jg      short loc_1B40B
cmp     ax, [bp+arg_0]
jbe     short loc_1B414

loc_1B40B:
push    si
call    sub_10728
mov     ax, 1
jmp     short loc_1B42F

loc_1B414:
push    si
lea     ax, [bp+var_D0]
push    ax
call    sub_1B2E9
mov     [bp+var_D6], ax
cmp     ax, 88h
jnz     short loc_1B429
jmp     loc_1B39F

loc_1B429:
push    si
call    sub_10728

loc_1B42D:
mov     ax, di

loc_1B42F:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_1B368 endp



; Attributes: bp-based frame

sub_1B437 proc near

var_8= byte ptr -8

push    bp
mov     bp, sp
sub     sp, 8
push    si
call    sub_31529
mov     cl, 0Ah
call    sub_1EE15
mov     si, ax
push    si
push    ss
lea     ax, [bp+var_8]
push    ax
call    sub_472C8
lea     ax, [bp+var_8]
push    ax
mov     ax, 1736h
push    ax
call    sub_19483
mov     ax, 15h
push    ax
mov     ax, 0Ah
push    ax
lea     ax, [bp+var_8]
push    ax
call    sub_1ED32
pop     si
mov     sp, bp
pop     bp
retn
sub_1B437 endp



; Attributes: bp-based frame

sub_1B476 proc far

var_72= byte ptr -72h
var_6C= byte ptr -6Ch
var_50= byte ptr -50h
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 72h
call    sub_12609
or      ax, ax
jz      short loc_1B49C
mov     word ptr ds:968Ah, 0
cmp     word ptr ds:93CAh, 0
jz      short loc_1B497
call    sub_4B0DE
jmp     short loc_1B49C

loc_1B497:
call    sub_25ED6

loc_1B49C:
call    sub_1B437
cmp     word ptr ds:93CEh, 0
jnz     short loc_1B4A9
jmp     loc_1B59D

loc_1B4A9:
mov     word ptr ds:93CEh, 0
cmp     word ptr ds:93CAh, 0
jz      short loc_1B4B9
jmp     loc_1B53F

loc_1B4B9:
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jnz     short loc_1B4C5
jmp     loc_1B59D

loc_1B4C5:
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_11C48
or      ax, ax
jz      short loc_1B50A
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
xor     ax, ax
push    ax
push    ax
mov     ax, 9170h
push    ax
mov     ax, 91C8h
push    ax
call    sub_19500
lea     ax, [bp+var_6C]
push    ax
mov     ax, 173Ah
push    ax
call    sub_19458
push    ax
mov     ax, 9170h
push    ax
call    sub_19483
push    ax
mov     ax, 91C8h
push    ax
call    sub_19483
jmp     short loc_1B52B

loc_1B50A:
push    ss
lea     ax, [bp+var_50]
push    ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46D76
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_6C]
push    ax
mov     ax, 1Ah
push    ax
call    sub_12515

loc_1B52B:
mov     ax, 0Dh
push    ax
mov     ax, 3
push    ax
lea     ax, [bp+var_6C]
push    ax
call    sub_1ED32
call    sub_1B075
jmp     short loc_1B59D

loc_1B53F:
mov     ax, ds:0BFB0h
or      ax, ds:0BFB2h
jz      short loc_1B59D
push    ss
lea     ax, [bp+var_50]
push    ax
push    word ptr ds:0BFB2h
push    word ptr ds:0BFB0h
call    sub_46D76
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_6C]
push    ax
mov     ax, 1Ah
push    ax
call    sub_12515
mov     ax, 0Dh
push    ax
mov     ax, 3
push    ax
lea     ax, [bp+var_6C]
push    ax
call    sub_1ED32
call    sub_1B075
cmp     word ptr ds:93CCh, 1
jnz     short loc_1B59D
cmp     [bp+arg_0], 2
jnz     short loc_1B59D
mov     ax, [bp+arg_0]
mov     ds:93CCh, ax
mov     ax, 1Eh
push    ax
mov     ax, 6
push    ax
mov     ax, 18D1h
push    ax
call    sub_1ED32

loc_1B59D:
cmp     word ptr ds:93CAh, 0
jnz     short loc_1B5E9
push    word ptr ds:0BEE4h
push    ss
lea     ax, [bp+var_72]
push    ax
call    sub_472C8
mov     ax, 1Eh
push    ax
mov     ax, 6
push    ax
lea     ax, [bp+var_72]
push    ax
call    sub_1ED32
mov     ax, ds:0BEE4h
xor     dx, dx
add     ax, ds:99B5h
adc     dx, ds:99B7h
push    dx
push    ax
push    ss
lea     ax, [bp+var_72]
push    ax
call    sub_47298
mov     ax, 15h
push    ax
mov     ax, 6
push    ax
lea     ax, [bp+var_72]
push    ax
call    sub_1ED32

loc_1B5E9:
mov     ax, ds:0BFAAh
cmp     ax, ds:93D0h
jnz     short loc_1B5F5
jmp     loc_1B682

loc_1B5F5:
mov     ds:93D0h, ax
mov     ax, ds:9961h
sub     ax, ds:995Fh
mov     dx, ds:0BFAAh
sub     dx, ds:0BFA8h
add     ax, dx
push    ax
push    ss
lea     ax, [bp+var_72]
push    ax
call    sub_472C8
mov     ax, 15h
push    ax
mov     ax, 7
push    ax
lea     ax, [bp+var_72]
push    ax
call    sub_1ED32
mov     ax, ds:0BFAAh
sub     ax, ds:0BFA8h
push    ax
push    ss
lea     ax, [bp+var_72]
push    ax
call    sub_472C8
mov     ax, 1Eh
push    ax
mov     ax, 7
push    ax
lea     ax, [bp+var_72]
push    ax
call    sub_1ED32
mov     ax, ds:995Fh
add     ax, ds:0BFA8h
push    ax
push    ss
lea     ax, [bp+var_72]
push    ax
call    sub_472C8
mov     ax, 15h
push    ax
mov     ax, 8
push    ax
lea     ax, [bp+var_72]
push    ax
call    sub_1ED32
push    word ptr ds:0BFA8h
push    ss
lea     ax, [bp+var_72]
push    ax
call    sub_472C8
mov     ax, 1Eh
push    ax
mov     ax, 8
push    ax
lea     ax, [bp+var_72]
push    ax
call    sub_1ED32

loc_1B682:
mov     sp, bp
pop     bp
retf    2
sub_1B476 endp



; Attributes: bp-based frame

sub_1B688 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, 1
push    ax
mov     ax, 0Bh
push    ax
push    [bp+arg_0]
mov     bx, ds:49C8h
mov     al, [bx+2]
mov     ah, 0
push    ax
call    sub_1EB3C
pop     bp
retn    2
sub_1B688 endp



; Attributes: bp-based frame

sub_1B6A7 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    [bp+arg_0]
call    sub_1B688
mov     ax, 14h
push    ax
mov     ax, 0Bh
push    ax
mov     ax, 17E8h
push    ax
mov     bx, ds:49C8h
mov     al, [bx+2]
mov     ah, 0
or      ax, 80h
push    ax
call    sub_1EB3C
pop     bp
retn    2
sub_1B6A7 endp



; Attributes: bp-based frame

sub_1B6D0 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
mov     ax, 0FFFFh
push    ax
call    sub_17720
mov     ax, ds:4720h
mov     dx, 11h
mul     dx
mov     bx, ax
mov     ax, [bx+4902h]
mov     ds:4724h, ax
push    word ptr ds:23C3h
call    sub_1C23E
mov     ax, 0Ch
push    ax
call    sub_1ACE5
cmp     di, 7
jz      short loc_1B732
cmp     di, 2
jz      short loc_1B712
cmp     di, 6
jz      short loc_1B712
mov     si, 18D8h
jmp     short loc_1B715

loc_1B712:
mov     si, 18F4h

loc_1B715:
mov     ax, 2
push    ax
push    ax
push    si
call    sub_1ED32
mov     ax, 1744h
push    ax
call    sub_1B688
mov     word ptr ds:825Dh, 0
mov     ax, 1
push    ax
call    sub_1DCE5

loc_1B732:
pop     di
pop     si
pop     bp
retn    2
sub_1B6D0 endp




sub_1B738 proc near
call    sub_1DA26
mov     ax, 5
push    ax
mov     ax, 6
push    ax
mov     ax, 1792h
push    ax
call    sub_1ED32
mov     ax, 0Bh
push    ax
mov     ax, 7
push    ax
mov     ax, 17C0h
push    ax
call    sub_1ED32
mov     ax, 0Dh
push    ax
mov     ax, 8
push    ax
mov     ax, 17D5h
push    ax
call    sub_1ED32
mov     ax, 3
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 17ADh
push    ax
call    sub_1ED32
mov     ax, 1744h
push    ax
call    sub_1B688
retn
sub_1B738 endp



; Attributes: bp-based frame

sub_1B77F proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     word ptr ds:93D2h, 0
jnz     short loc_1B7C8
mov     word ptr ds:93D2h, 1
mov     word ptr ds:93CAh, 0
cmp     [bp+arg_0], 2
jz      short loc_1B7C8
call    sub_1B738
mov     ax, 2
push    ax
push    ax
mov     ax, 176Eh
push    ax
call    sub_1ED32
mov     ax, 2
push    ax
mov     ax, 3
push    ax
mov     ax, 1779h
push    ax
call    sub_1ED32
mov     ax, 15h
push    ax
mov     ax, 5
push    ax
mov     ax, 1784h
push    ax
call    sub_1ED32

loc_1B7C8:
pop     bp
retn    2
sub_1B77F endp



; Attributes: bp-based frame

sub_1B7CC proc near

var_1C= byte ptr -1Ch
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 1Ch
mov     word ptr ds:93D0h, 0FFFFh
push    [bp+arg_0]
lea     ax, [bp+var_1C]
push    ax
mov     ax, 1Ah
push    ax
call    sub_12515
mov     ax, 0Dh
push    ax
mov     ax, 2
push    ax
lea     ax, [bp+var_1C]
push    ax
call    sub_1ED32
mov     ax, 0DCEh
push    ax
call    sub_1EB1F
mov     ax, 0Dh
push    ax
mov     ax, 3
push    ax
mov     ax, 0DCEh
push    ax
call    sub_1ED32
mov     ax, 1Fh
push    ax
mov     ax, 6
push    ax
mov     ax, 0DCEh
push    ax
call    sub_1ED32
mov     ax, 1Fh
push    ax
mov     ax, 7
push    ax
mov     ax, 0DCEh
push    ax
call    sub_1ED32
mov     ax, 1Fh
push    ax
mov     ax, 8
push    ax
mov     ax, 0DCEh
push    ax
call    sub_1ED32
xor     ax, ax
push    ax
push    cs
call    near ptr sub_1B476
mov     sp, bp
pop     bp
retn    2
sub_1B7CC endp



; Attributes: bp-based frame

sub_1B845 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     di, 1903h
cmp     [bp+arg_0], 4
jnz     short loc_1B859
mov     di, 1967h
jmp     loc_1B8BA

loc_1B859:
cmp     [bp+arg_0], 5
jz      short loc_1B8AB
cmp     [bp+arg_0], 3
jnz     short loc_1B875
cmp     word ptr ds:995Fh, 0
jnz     short loc_1B883
cmp     word ptr ds:9961h, 0
jz      short loc_1B8BA
jmp     short loc_1B898

loc_1B875:
cmp     word ptr ds:31C5h, 1
jg      short loc_1B888
cmp     word ptr ds:995Fh, 0
jz      short loc_1B888

loc_1B883:
mov     di, 192Bh
jmp     short loc_1B8BA

loc_1B888:
cmp     word ptr ds:31C5h, 0
jnz     short loc_1B89D
mov     ax, ds:9961h
sub     ax, ds:995Fh
jz      short loc_1B89D

loc_1B898:
mov     di, 1917h
jmp     short loc_1B8BA

loc_1B89D:
cmp     word ptr ds:31C5h, 2
jg      short loc_1B8B0
cmp     word ptr ds:995Fh, 0
jz      short loc_1B8B0

loc_1B8AB:
mov     di, 193Fh
jmp     short loc_1B8BA

loc_1B8B0:
cmp     word ptr ds:31C5h, 3
jnz     short loc_1B8BA
mov     di, 1953h

loc_1B8BA:
push    di
call    sub_1B6A7
cmp     [bp+arg_0], 1
jnz     short loc_1B8D7
cmp     word ptr ds:968Ah, 0
jz      short loc_1B8D7
cmp     word ptr ds:995Fh, 0
jnz     short loc_1B8D7
mov     si, 900h
jmp     short loc_1B90A

loc_1B8D7:
mov     si, 0FFFDh
cmp     word ptr ds:4728h, 0
jnz     short loc_1B90A
mov     word ptr ds:40DAh, 1
mov     word ptr ds:1DD3h, 0F3h
call    sub_15852
push    ax
call    sub_11EA2
mov     si, ax
cmp     si, 0FFFFh
jl      short loc_1B90A
cmp     si, 5
jnz     short loc_1B905
mov     ax, 0E00h
jmp     short loc_1B908

loc_1B905:
mov     ax, 0FFFFh

loc_1B908:
mov     si, ax

loc_1B90A:
mov     ax, 0Ch
push    ax
call    sub_1AD85
call    sub_1BFE3
call    sub_1BF31
cmp     si, 0E00h
jz      short loc_1B94C
cmp     si, 0FFFDh
jz      short loc_1B94E
or      si, si
jge     short loc_1B934
cmp     word ptr ds:9961h, 0
jz      short loc_1B934
mov     ax, 1
push    ax
call    sub_1B2A2

loc_1B934:
cmp     si, 0FFFFh
jnz     short loc_1B94E
cmp     word ptr ds:9961h, 0
jz      short loc_1B94C
mov     ax, 1
push    ax
call    sub_1AE6D
mov     si, 700h
jmp     short loc_1B94E

loc_1B94C:
xor     si, si

loc_1B94E:
mov     ax, si
pop     di
pop     si
pop     bp
retn    2
sub_1B845 endp



; Attributes: bp-based frame

sub_1B956 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, 0Ch
push    ax
call    sub_1ACE5
mov     ax, 197Bh
push    ax
mov     bx, ds:49C8h
mov     al, [bx]
mov     ah, 0
push    ax
call    sub_1E90D
cmp     word ptr ds:93D2h, 0
jnz     short loc_1B97A
call    sub_1B738

loc_1B97A:
push    [bp+arg_0]
call    sub_1B7CC
mov     ax, 2
push    ax
push    ax
mov     ax, 1985h
push    ax
call    sub_1ED32
mov     ax, 2
push    ax
mov     ax, 3
push    ax
mov     ax, 1990h
push    ax
call    sub_1ED32
mov     ax, 15h
push    ax
mov     ax, 5
push    ax
mov     ax, 199Bh
push    ax
call    sub_1ED32
mov     ax, 1Eh
push    ax
mov     ax, 6
push    ax
mov     ax, 18CAh
push    ax
call    sub_1ED32
mov     ax, 1
mov     ds:93CAh, ax
mov     ds:93D2h, ax
mov     ds:93CCh, ax
pop     bp
retn    2
sub_1B956 endp



; Attributes: bp-based frame

sub_1B9C9 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, 0Ch
push    ax
call    sub_1ACE5
mov     ax, 19A9h
push    ax
mov     bx, ds:49C8h
mov     al, [bx]
mov     ah, 0
push    ax
call    sub_1E90D
call    sub_1DA26
mov     ax, 2
push    ax
push    ax
push    [bp+arg_0]
call    sub_1ED32
mov     ax, 0Dh
push    ax
mov     ax, 6
push    ax
mov     ax, 19B2h
push    ax
call    sub_1ED32
mov     ax, 1903h
push    ax
call    sub_1B688
pop     bp
retn    2
sub_1B9C9 endp




sub_1BA0B proc far
call    sub_12609
or      ax, ax
jz      short locret_1BA1D
mov     word ptr ds:968Ah, 0
call    sub_25ED6

locret_1BA1D:
retf
sub_1BA0B endp




sub_1BA1E proc near
mov     ah, 48h ; 'H'
mov     bx, 0FFFFh
call    sub_10BD7
mov     ax, bx
retn
sub_1BA1E endp



; Attributes: bp-based frame

sub_1BA2B proc near

var_A6= word ptr -0A6h
var_A4= byte ptr -0A4h
var_55= byte ptr -55h
var_54= byte ptr -54h
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 0A6h
push    si
push    di
mov     si, 0FFFFh
mov     ax, 0Fh
push    ax
call    sub_1ACE5
lea     ax, [bp+var_A4]
push    ax
mov     ax, 183Bh
push    ax
call    sub_19458
mov     al, 0
push    ax
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_10534
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_46E60
mov     [bp+var_A6], ax
cmp     ax, 3
jle     short loc_1BA70
lea     bx, [bp+var_55]
add     bx, ax
mov     byte ptr [bx], 0

loc_1BA70:
lea     ax, [bp+var_A4]
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 3
push    ax
mov     ax, 2
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
lea     ax, [bp+var_A4]
push    ax
mov     ax, 1850h
push    ax
call    sub_19458
mov     ax, 9877h
push    ax
call    sub_19C1B
mov     ax, 2Ah ; '*'
push    ax
call    sub_12493
lea     ax, [bp+var_54]
push    ax
call    sub_19C39
lea     ax, [bp+var_A4]
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 3
push    ax
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
mov     ax, ds:1C94h
xor     dx, dx
push    dx
push    ax
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_47298
lea     ax, [bp+var_A4]
push    ax
mov     ax, 1865h
push    ax
call    sub_19458
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, ds:1C8Ah
add     ax, 0FFFEh
xor     dx, dx
push    dx
push    ax
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_47298
lea     ax, [bp+var_A4]
push    ax
mov     ax, 188Fh
push    ax
call    sub_19483
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
push    ax
mov     ax, 0C7Dh
push    ax
call    sub_19483
mov     ax, 3
push    ax
mov     ax, 4
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
mov     ax, ds:1D22h
mov     cl, 4
shl     ax, cl
push    ax
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_472C8
lea     ax, [bp+var_A4]
push    ax
mov     ax, 187Ah
push    ax
call    sub_19458
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
push    ax
mov     ax, 1736h
push    ax
call    sub_19483
mov     ax, 3
push    ax
mov     ax, 5
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
push    word ptr ds:99B7h
push    word ptr ds:99B5h
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_47298
lea     ax, [bp+var_A4]
push    ax
mov     ax, 1897h
push    ax
call    sub_19458
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 3
push    ax
mov     ax, 7
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
mov     ax, ds:9961h
sub     ax, ds:995Fh
push    ax
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_472C8
lea     ax, [bp+var_A4]
push    ax
mov     ax, 18B9h
push    ax
call    sub_19458
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 3
push    ax
mov     ax, 8
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
push    word ptr ds:995Fh
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_472C8
lea     ax, [bp+var_A4]
push    ax
mov     ax, 18A8h
push    ax
call    sub_19458
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 3
push    ax
mov     ax, 9
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
mov     ax, ds:0C0EFh
cmp     ax, 2
jz      short loc_1BC16
cmp     ax, 3
jz      short loc_1BC1B
jmp     short loc_1BC20

loc_1BC16:
mov     di, 19D4h
jmp     short loc_1BC23

loc_1BC1B:
mov     di, 19E5h
jmp     short loc_1BC23

loc_1BC20:
mov     di, 19C1h

loc_1BC23:
lea     ax, [bp+var_A4]
push    ax
push    di
call    sub_19458
mov     ax, 21h ; '!'
push    ax
mov     ax, 7
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
mov     [bp+var_54], 0
cmp     word ptr ds:1B44h, 0FFFFh
jz      short loc_1BC55
push    word ptr ds:1B44h
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_472C8

loc_1BC55:
lea     ax, [bp+var_A4]
push    ax
mov     ax, 19F9h
push    ax
call    sub_19458
lea     ax, [bp+var_A4]
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 21h ; '!'
push    ax
mov     ax, 8
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
cmp     word ptr ds:0C0EFh, 2
jnz     short loc_1BC98
call    sub_1BA1E
xor     dx, dx
mov     cl, 4
call    sub_1EDF6
mov     [bp+var_2], dx
mov     [bp+var_4], ax
jmp     short loc_1BCEE

loc_1BC98:
cmp     word ptr ds:0C0EFh, 0
jnz     short loc_1BCCA
call    sub_31529
push    dx
push    ax
cmp     word ptr ds:1D20h, 0
jz      short loc_1BCB3
xor     dx, dx
mov     ax, dx
jmp     short loc_1BCBC

loc_1BCB3:
mov     ax, ds:1C8Ah
sub     ax, ds:1C94h
xor     dx, dx

loc_1BCBC:
pop     bx
pop     cx
add     bx, ax
adc     cx, dx
mov     [bp+var_2], cx
mov     [bp+var_4], bx
jmp     short loc_1BCEE

loc_1BCCA:
cmp     word ptr ds:1D20h, 0
jz      short loc_1BCD7
xor     dx, dx
mov     ax, dx
jmp     short loc_1BCE0

loc_1BCD7:
mov     ax, ds:1C8Ah
sub     ax, ds:1C94h
xor     dx, dx

loc_1BCE0:
add     ax, ds:93D8h
adc     dx, ds:93DAh
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_1BCEE:
xor     dx, dx
mov     ax, 400h
push    dx
push    ax
push    [bp+var_2]
push    [bp+var_4]
call    sub_1ED51
push    ax
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_472C8
lea     ax, [bp+var_54]
push    ax
mov     ax, 1736h
push    ax
call    sub_19483
lea     ax, [bp+var_A4]
push    ax
mov     ax, 17ADh
push    ax
call    sub_19458
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19483
mov     ax, 21h ; '!'
push    ax
mov     ax, 9
push    ax
lea     ax, [bp+var_A4]
push    ax
call    sub_1ED32
mov     ax, 1
push    ax
mov     ax, 0Bh
push    ax
mov     ax, 17FDh
push    ax
mov     bx, ds:49C8h
mov     al, [bx+2]
mov     ah, 0
push    ax
call    sub_1EB3C
mov     ax, 1
push    ax
call    sub_1DCE5
mov     word ptr ds:40DAh, 1
mov     word ptr ds:1DD3h, 12Ch
call    sub_15852
push    ax
call    sub_11EA2
mov     si, ax
mov     ax, 0Fh
push    ax
call    sub_1AD85
or      si, si
jl      short loc_1BD7D
mov     si, 0FFFFh

loc_1BD7D:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1BA2B endp




sub_1BD85 proc near
push    si
xor     si, si
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jnz     short loc_1BDC9
cmp     byte ptr ds:47D0h, 20h ; ' '
jnz     short loc_1BDAE
mov     byte ptr ds:47D0h, 0

loc_1BDAE:
push    ds
mov     ax, 0C63h
push    ax
call    sub_30A40
call    sub_4B10F
mov     si, ax
or      si, si
jnz     short loc_1BDC9
mov     word ptr ds:99FDh, 0

loc_1BDC9:
dec     word ptr ds:1DE8h
mov     ax, si
pop     si
retn
sub_1BD85 endp




sub_1BDD1 proc near
cmp     word ptr ds:1D20h, 0
jz      short loc_1BDE6
les     bx, ds:0Ah
mov     word ptr ds:93D6h, es
mov     ds:93D4h, bx
jmp     short locret_1BE14

loc_1BDE6:
mov     ax, ds:1C86h
add     ax, ds:1C94h
inc     ax
inc     ax
and     ax, 0FFFEh
mov     ds:2324h, ax
mov     dx, ds:1C5Eh
xor     ax, ax
mov     bx, ds:2324h
xor     cx, cx
call    sub_46B23
mov     ds:93D6h, dx
mov     ds:93D4h, ax
push    dx
push    ax
call    sub_31B0C

locret_1BE14:
retn
sub_1BDD1 endp



; Attributes: bp-based frame

sub_1BE15 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
cmp     word ptr ds:1D20h, 0
jz      short loc_1BE32
push    word ptr ds:93D6h
push    word ptr ds:93D4h
call    sub_31B0C
jmp     short loc_1BE96

loc_1BE32:
call    sub_31529
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     si, ds:1C60h
sub     si, ds:2324h
mov     word ptr ds:2324h, 0
mov     dx, ds:18h
mov     ax, ds:16h
mov     cx, ds:14h
mov     bx, ds:12h
call    sub_46BA0
add     ax, [bp+var_4]
adc     dx, [bp+var_2]
mov     bx, si
xor     cx, cx
sub     ax, bx
sbb     dx, cx
push    dx
push    ax
call    sub_30789
or      ax, ax
jz      short loc_1BE83
mov     ax, 1A0Fh
push    ax
mov     ax, 0C63h
push    ax
call    sub_19065

loc_1BE83:
push    word ptr ds:93D6h
push    word ptr ds:93D4h
call    sub_31B0C
push    si
call    sub_3193F

loc_1BE96:
call    sub_30959
mov     ds:4726h, ax
pop     si
mov     sp, bp
pop     bp
retn
sub_1BE15 endp




sub_1BEA3 proc near
call    sub_31529
or      dx, dx
jg      short loc_1BEB6
jl      short loc_1BEB2
or      ax, ax
jnb     short loc_1BEB6

loc_1BEB2:
xor     ax, ax
jmp     short locret_1BEC1

loc_1BEB6:
mov     cx, 0FFFEh
or      dx, dx
jnz     short loc_1BEBF
and     cx, ax

loc_1BEBF:
mov     ax, cx

locret_1BEC1:
retn
sub_1BEA3 endp



; Attributes: bp-based frame

sub_1BEC2 proc near

var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_2]
mov     di, 9A78h
mov     ax, 1
push    ax
call    sub_1B056
or      ax, ax
jz      short loc_1BF29
cmp     word ptr ds:4722h, 1
jnz     short loc_1BF29
push    word ptr ds:4911h
call    sub_1E8C0
mov     [bp+var_2], ax
cmp     si, ds:0BFBAh
ja      short loc_1BEFA
push    si
call    sub_30C40
jmp     short loc_1BEFF

loc_1BEFA:
mov     byte ptr ds:9A78h, 0

loc_1BEFF:
mov     ax, ds:490Dh
mov     ds:93C8h, ax
push    di
mov     ax, si
sub     ax, ds:947Ch
inc     ax
push    ax
push    [bp+arg_0]
mov     al, ds:4917h
mov     ah, 0
mov     dl, ds:4915h
mov     dh, 0
sub     ax, dx
dec     ax
push    ax
call    sub_1B181
push    [bp+var_2]
call    sub_1E8C0

loc_1BF29:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1BEC2 endp




sub_1BF31 proc near
cmp     word ptr ds:4722h, 1
jnz     short locret_1BF53
push    word ptr ds:0BFBAh
push    word ptr ds:4068h
push    word ptr ds:4066h
mov     ax, 947Ch
push    ax
mov     ax, 947Eh
push    ax
mov     ax, 0BEC2h
push    ax
call    sub_1B085

locret_1BF53:
retn
sub_1BF31 endp



; Attributes: bp-based frame

sub_1BF54 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     word ptr ds:9166h, 0
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_1BEC2
pop     bp
retn    2
sub_1BF54 endp




sub_1BF6A proc near
cmp     word ptr ds:0BFBAh, 0
jz      short locret_1BFAA
mov     ax, ds:4068h
cmp     ax, ds:947Ch
jl      short loc_1BF8E
cmp     word ptr ds:947Ch, 0
jz      short loc_1BF8E
mov     ax, ds:947Ch
add     ax, ds:947Eh
cmp     ax, ds:4068h
jg      short loc_1BF93

loc_1BF8E:
call    sub_1BF31
jmp     short locret_1BFAA

loc_1BF93:
push    word ptr ds:4068h
cmp     word ptr ds:4066h, 0
jz      short loc_1BFA3
mov     ax, 2
jmp     short loc_1BFA6

loc_1BFA3:
mov     ax, 1

loc_1BFA6:
push    ax
call    sub_1BEC2

locret_1BFAA:
retn
sub_1BF6A endp



; Attributes: bp-based frame

sub_1BFAB proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     si, ds:4068h

loc_1BFB4:
mov     ax, si
add     ax, [bp+arg_0]
jnz     short loc_1BFC0
mov     ax, ds:4068h
jmp     short loc_1BFDD

loc_1BFC0:
add     si, [bp+arg_0]
mov     ax, si
push    ax
call    sub_30C40
mov     di, ax
cmp     di, 6
jge     short loc_1BFB4
or      di, di
jnz     short loc_1BFDB
mov     ax, ds:4068h
jmp     short loc_1BFDD

loc_1BFDB:
mov     ax, si

loc_1BFDD:
pop     di
pop     si
pop     bp
retn    2
sub_1BFAB endp




sub_1BFE3 proc near
cmp     byte ptr ds:47D0h, 20h ; ' '
jz      short locret_1C032
mov     word ptr ds:4068h, 1
jmp     short loc_1C019

loc_1BFF2:
push    word ptr ds:4068h
call    sub_30C40
or      ax, ax
jz      short loc_1C015
push    ds
mov     ax, 47D0h
push    ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46D55
or      ax, ax
jz      short loc_1C022

loc_1C015:
inc     word ptr ds:4068h

loc_1C019:
mov     ax, ds:4068h
cmp     ax, ds:0BFBAh
jle     short loc_1BFF2

loc_1C022:
mov     word ptr ds:947Ch, 0
mov     ax, 1
push    ax
call    sub_1BFAB
mov     ds:4068h, ax

locret_1C032:
retn
sub_1BFE3 endp



; Attributes: bp-based frame

sub_1C033 proc near

var_56= word ptr -56h
var_54= dword ptr -54h
var_50= byte ptr -50h

push    bp
mov     bp, sp
sub     sp, 56h
push    si
push    di
mov     ax, ds:0BFBAh
cmp     ax, ds:4068h
jl      short loc_1C088
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_1C088
les     bx, ds:0BFACh
cmp     byte ptr es:[bx], 0
jz      short loc_1C088
push    word ptr ds:0BFAEh
push    bx
push    ds
mov     ax, 9877h
push    ax
call    sub_19911
or      ax, ax
jnz     short loc_1C08D
push    ss
lea     ax, [bp+var_50]
push    ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46D76
lea     ax, [bp+var_50]
push    ax
call    sub_152EB
or      ax, ax
jnz     short loc_1C08D
call    sub_147A2

loc_1C088:
xor     ax, ax
jmp     loc_1C16B

loc_1C08D:
push    ds
mov     ax, 942Ch
push    ax
push    ds
mov     ax, 9877h
push    ax
call    sub_19911
or      ax, ax
jnz     short loc_1C0C8
mov     ax, 942Ch
push    ax
mov     ax, 9877h
push    ax
call    sub_19458
push    ds
mov     ax, 942Ch
push    ax
call    sub_30B00
push    word ptr ds:4068h
call    sub_30C40
les     bx, ds:0BFBCh
mov     word ptr ds:1C7Ch, es
mov     ds:1C7Ah, bx

loc_1C0C8:
mov     ax, ds:1C68h
and     ax, 0FFDFh
or      ax, 300h
mov     ds:1C68h, ax
les     bx, ds:0BFBCh
mov     word ptr [bp+var_54+2], es
mov     word ptr [bp+var_54], bx
xor     si, si
jmp     short loc_1C0E7

loc_1C0E2:
add     word ptr [bp+var_54], 4
inc     si

loc_1C0E7:
les     bx, [bp+var_54]
mov     ax, es:[bx+2]
cmp     ax, ds:4068h
jz      short loc_1C0FA
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_1C0E2

loc_1C0FA:
les     bx, [bp+var_54]
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_1C11C
and     word ptr ds:1C68h, 0FEFFh
mov     ax, ds:1FF2h
mov     dx, 52h ; 'R'
mul     dx
mov     bx, ax
mov     ax, [bx-71D1h]
mov     ds:1C96h, ax
jmp     short loc_1C13E

loc_1C11C:
les     bx, [bp+var_54]
mov     ax, es:[bx]
mov     [bp+var_56], ax
cmp     ax, ds:1C94h
jbe     short loc_1C134
mov     ax, ds:1C94h
mov     [bp+var_56], ax
mov     es:[bx], ax

loc_1C134:
mov     ax, [bp+var_56]
mov     ds:1C96h, ax
mov     ds:1CB2h, si

loc_1C13E:
mov     di, ds:4068h
jmp     short loc_1C164

loc_1C144:
push    di
call    sub_30C40
cmp     ax, 6
jnz     short loc_1C163
push    ds
mov     ax, 98C7h
push    ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46D76
jmp     short loc_1C168

loc_1C163:
dec     di

loc_1C164:
or      di, di
jg      short loc_1C144

loc_1C168:
mov     ax, 1

loc_1C16B:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1C033 endp



; Attributes: bp-based frame

sub_1C171 proc near

var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 2
push    si
cmp     word ptr ds:23C1h, 0
jnz     short loc_1C182
jmp     loc_1C239

loc_1C182:
xor     ax, ax
push    ax
call    sub_1B056
or      ax, ax
jnz     short loc_1C18F
jmp     loc_1C239

loc_1C18F:
cmp     word ptr ds:4066h, 0
jz      short loc_1C1CF
push    word ptr ds:4068h
call    sub_30C40
cmp     ax, 7
jz      short loc_1C1CF
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_1C1CF
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
push    ds
mov     ax, 9877h
push    ax
call    sub_19911
or      ax, ax
jnz     short loc_1C1C8
cmp     word ptr ds:23C1h, 2
jz      short loc_1C1CF

loc_1C1C8:
call    sub_1C033
or      ax, ax
jnz     short loc_1C1D7

loc_1C1CF:
mov     al, 1Bh
push    ax
call    sub_14C12
jmp     short loc_1C239

loc_1C1D7:
xor     ax, ax
push    ax
call    sub_1ACE5
and     word ptr ds:1C68h, 0FEFFh
mov     al, 1Bh
push    ax
call    sub_14C12
mov     [bp+var_1], 50h ; 'P'
mov     bx, ds:490Dh
mov     al, [bx+4]
mov     ah, 0
mov     si, ax
mov     cl, 8
shl     si, cl
or      si, 2Ah
mov     ax, 1
push    ax
xor     ax, ax
push    ax
lea     ax, [bp+var_1]
push    ax
push    si
call    sub_1EB6C
mov     [bp+var_1], 1
mov     bx, ds:490Dh
mov     al, [bx+5]
mov     ah, 0
mov     si, ax
mov     cl, 8
shl     si, cl
or      si, 2Ah
xor     ax, ax
push    ax
push    ax
lea     ax, [bp+var_1]
push    ax
push    si
call    sub_1EB6C
mov     ax, 1
push    ax
call    sub_1ACE5

loc_1C239:
pop     si
mov     sp, bp
pop     bp
retn
sub_1C171 endp



; Attributes: bp-based frame

sub_1C23E proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     word ptr ds:0BFBAh, 0
jz      short loc_1C28B
mov     word ptr ds:4066h, 0
mov     ax, 47D0h
push    ax
mov     ax, 406Ah
push    ax
call    sub_19458
call    sub_147A2
push    [bp+arg_0]
call    sub_30913
xor     ax, ax
mov     ds:4726h, ax
mov     ds:9961h, ax
mov     ds:995Fh, ax
mov     ds:0BFAAh, ax
mov     ds:0BFA8h, ax
cwd
mov     ds:99B7h, dx
mov     ds:99B5h, ax
cmp     [bp+arg_0], ax
jnz     short loc_1C28B
mov     ax, 1
mov     ds:4068h, ax
mov     ds:947Ch, ax

loc_1C28B:
pop     bp
retn    2
sub_1C23E endp



; Attributes: bp-based frame

sub_1C28F proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     word ptr ds:9166h, 0
mov     ax, [bp+arg_0]
mov     ds:4066h, ax
or      ax, ax
jz      short loc_1C2B0
mov     ax, 1
push    ax
call    sub_1B2A2
mov     ax, 1
push    ax
call    sub_1AE6D

loc_1C2B0:
call    sub_1BF6A
cmp     word ptr ds:0BFBAh, 0
jz      short loc_1C2BD
call    sub_1C171

loc_1C2BD:
pop     bp
retn    2
sub_1C28F endp



; Attributes: bp-based frame

sub_1C2C1 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     [bp+var_2], 0FFFFh
mov     di, ds:4068h
mov     [bp+var_6], di
mov     ax, ds:947Ch
mov     [bp+var_8], ax
mov     ax, ds:9166h
mov     [bp+var_4], ax
mov     ax, 1
push    ax
call    sub_1C28F
cmp     word ptr ds:0BFBAh, 0
jz      short loc_1C2FB
xor     ax, ax
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB
jmp     short loc_1C306

loc_1C2FB:
mov     ax, 1
push    ax
call    sub_1DC39
push    ax
call    sub_1DCCB

loc_1C306:
push    word ptr ds:4068h
call    sub_30C40
dec     ax              ; switch 5 cases
cmp     ax, 4
ja      short def_1C319 ; jumptable 0001C319 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1C319[bx] ; switch jump
jpt_1C319 dw offset loc_1C328 ; jump table for switch statement
dw offset loc_1C328
dw offset loc_1C328
dw offset loc_1C328
dw offset loc_1C328

loc_1C328:              ; jumptable 0001C319 cases 1-5
mov     ax, ds:0BFC4h
add     ax, 1F4h
mov     ds:1DD3h, ax
jmp     short loc_1C339

def_1C319:              ; jumptable 0001C319 default case
mov     word ptr ds:1DD3h, 0F1h

loc_1C339:
mov     word ptr ds:40DAh, 0
push    word ptr ds:0BFBAh
push    word ptr ds:947Eh
mov     ax, 4068h
push    ax
mov     ax, 947Ch
push    ax
call    sub_1927C
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jge     short loc_1C35E
jmp     loc_1C3FA

loc_1C35E:
mov     ax, ds:947Ch
cmp     ax, [bp+var_8]
jz      short loc_1C36B
call    sub_1BF31
jmp     short loc_1C384

loc_1C36B:
mov     ax, ds:4068h
cmp     ax, di
jz      short loc_1C378
push    di
call    sub_1BF54
jmp     short loc_1C381

loc_1C378:
mov     ax, [bp+var_4]
cmp     ax, ds:9166h
jz      short loc_1C384

loc_1C381:
call    sub_1BF6A

loc_1C384:
mov     ax, ds:947Ch
mov     [bp+var_8], ax
mov     di, ds:4068h
mov     ax, ds:9166h
mov     [bp+var_4], ax
cmp     si, 4
jnz     short loc_1C3D9
push    di
call    sub_30C40
cmp     ax, 7
jz      short loc_1C3D9
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_1C3D9
xor     ax, ax
push    ax
call    sub_1C28F
xor     ax, ax
push    ax
call    sub_1AE6D
mov     ax, ds:23C1h
mov     [bp+var_2], ax
mov     word ptr ds:23C1h, 1
push    word ptr ds:4068h
call    sub_30C40
call    sub_1C033
mov     ax, [bp+var_2]
mov     ds:23C1h, ax
jmp     short loc_1C3FA

loc_1C3D9:
mov     ax, ds:4068h
cmp     ax, [bp+var_6]
jnz     short loc_1C3E4
jmp     loc_1C306

loc_1C3E4:
call    sub_157A7
or      ax, ax
jz      short loc_1C3EE
jmp     loc_1C306

loc_1C3EE:
mov     ax, ds:4068h
mov     [bp+var_6], ax
call    sub_1C171
jmp     loc_1C306

loc_1C3FA:
call    sub_17CEE
cmp     si, 4
jnz     short loc_1C407
mov     si, 600h
jmp     short loc_1C412

loc_1C407:
cmp     si, 0FFFDh
jz      short loc_1C412
xor     ax, ax
push    ax
call    sub_1C28F

loc_1C412:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1C2C1 endp



; Attributes: bp-based frame

sub_1C41A proc near

var_46= byte ptr -46h
var_42= byte ptr -42h
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 46h
push    ds
push    [bp+arg_4]
lea     ax, [bp+var_46]
push    ax
lea     ax, [bp+var_42]
push    ax
mov     ax, 96E2h
push    ax
mov     ax, 96F6h
push    ax
call    sub_19500
mov     ds:974Dh, ax
cmp     [bp+arg_0], 0
jnz     short loc_1C445
test    ax, 2
jnz     short loc_1C465

loc_1C445:
push    ds
push    [bp+arg_4]
lea     ax, [bp+var_46]
push    ax
lea     ax, [bp+var_42]
push    ax
mov     ax, 96E2h
push    ax
push    [bp+arg_2]
call    sub_19777
mov     ax, 96F6h
push    ax
push    [bp+arg_2]
call    sub_19458

loc_1C465:
mov     sp, bp
pop     bp
retn    6
sub_1C41A endp



; Attributes: bp-based frame

sub_1C46B proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    word ptr ds:40BEh
push    [bp+arg_0]
call    sub_19458
push    word ptr ds:40BEh
call    sub_19448
mov     ds:9482h, ax
mov     ds:968Ch, ax
les     bx, ds:40BEh
add     bx, ax
mov     byte ptr es:[bx], 1Ah
mov     word ptr ds:9484h, 0
pop     bp
retn    2
sub_1C46B endp




sub_1C499 proc near
push    si
push    di
xor     di, di
mov     ax, di
mov     ds:9484h, ax
mov     ds:9482h, ax
mov     word ptr ds:40C0h, ds
mov     word ptr ds:40BEh, 948Ah
cmp     byte ptr ds:406Ch, 0
jnz     short loc_1C4D9
mov     ax, 96FDh
push    ax
call    sub_1D347
push    ax
call    sub_19458
push    ax
mov     ax, 0E56h
push    ax
xor     ax, ax
push    ax
call    sub_1C41A
mov     ax, 96FDh
push    ax
call    sub_1C46B
mov     si, 0FFFEh
jmp     loc_1C54A

loc_1C4D9:
mov     ax, 96FDh
push    ax
mov     ax, 406Ch
push    ax
call    sub_19458
push    ax
mov     ax, 1AF6h
push    ax
xor     ax, ax
push    ax
call    sub_1C41A
push    ds
mov     ax, 96FDh
push    ax
call    sub_11C48
or      ax, ax
jz      short loc_1C51D
mov     si, 0FFFFh
mov     ax, ds:1C94h
mov     ds:9482h, ax
mov     ds:968Ch, ax
mov     word ptr ds:9484h, 0
les     bx, ds:1C86h
mov     word ptr ds:40C0h, es
mov     ds:40BEh, bx
jmp     short loc_1C54A

loc_1C51D:
push    ds
mov     ax, 96FDh
push    ax
xor     ax, ax
push    ax
call    sub_106E6
mov     si, ax
cmp     si, 0FFFEh
jz      short loc_1C534
cmp     si, 0FFFDh
jnz     short loc_1C539

loc_1C534:
mov     di, 0E1Fh
jmp     short loc_1C54A

loc_1C539:
cmp     si, 0FFFBh
jnz     short loc_1C543
mov     di, 0E30h
jmp     short loc_1C54A

loc_1C543:
or      si, si
jg      short loc_1C54A
mov     di, 1A35h

loc_1C54A:
or      di, di
jz      short loc_1C558
push    di
mov     ax, 96FDh
push    ax
call    sub_19065
xor     si, si

loc_1C558:
mov     ax, 96EDh
push    ax
mov     ax, 96E2h
push    ax
call    sub_19458
mov     ax, si
pop     di
pop     si
retn
sub_1C499 endp



; Attributes: bp-based frame

sub_1C568 proc near

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:9484h
cmp     ax, ds:9482h
jb      short loc_1C5AD
cmp     word ptr ds:96FBh, 0
jl      short loc_1C5AD
push    word ptr ds:96FBh
push    word ptr ds:40C0h
push    word ptr ds:40BEh
mov     ax, 200h
push    ax
call    sub_10740
mov     ds:9482h, ax
or      ax, ax
jge     short loc_1C5A7
mov     ax, 1A53h
push    ax
xor     ax, ax
push    ax
call    sub_19065
mov     ax, 0FFFFh
jmp     short loc_1C5DA

loc_1C5A7:
mov     word ptr ds:9484h, 0

loc_1C5AD:
cmp     word ptr ds:9482h, 0
jz      short loc_1C5C8
les     bx, ds:40BEh
add     bx, ds:9484h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
cmp     byte ptr es:[bx], 1Ah
jnz     short loc_1C5CC

loc_1C5C8:
xor     ax, ax
jmp     short loc_1C5DA

loc_1C5CC:
les     bx, [bp+var_4]
mov     al, es:[bx]
mov     ah, 0
push    ax
call    sub_46F25

loc_1C5DA:
mov     sp, bp
pop     bp
retn
sub_1C568 endp




sub_1C5DE proc near
push    si
call    sub_1C568
mov     si, ax
inc     word ptr ds:9484h
mov     ax, si
pop     si
retn
sub_1C5DE endp




sub_1C5EC proc near
mov     ax, 1A79h
push    ax
xor     ax, ax
push    ax
call    sub_19065
retn
sub_1C5EC endp



; Attributes: bp-based frame

sub_1C5F7 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
jmp     short loc_1C60F

loc_1C5FF:
push    [bp+arg_0]
push    [bp+var_2]
call    sub_194AB
or      ax, ax
jz      short loc_1C619
call    sub_1C5DE

loc_1C60F:
call    sub_1C568
mov     [bp+var_2], ax
or      ax, ax
jg      short loc_1C5FF

loc_1C619:
mov     ax, [bp+var_2]
mov     sp, bp
pop     bp
retn    2
sub_1C5F7 endp



; Attributes: bp-based frame

sub_1C622 proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_0]
mov     di, 1

loc_1C630:
mov     ax, 40C4h
push    ax
call    sub_1C5F7
mov     [bp+var_2], ax
cmp     ax, 28h ; '('
jnz     short loc_1C670
cmp     word ptr ds:9480h, 0
jnz     short loc_1C670
jmp     short loc_1C656

loc_1C648:
call    sub_1C5DE
call    sub_1C568
cmp     ax, 28h ; '('
jnz     short loc_1C656
jmp     loc_1C6ED

loc_1C656:
call    sub_1C568
mov     [bp+var_2], ax
or      ax, ax
jle     short loc_1C665
cmp     ax, 29h ; ')'
jnz     short loc_1C648

loc_1C665:
cmp     [bp+var_2], 0
jle     short loc_1C689
call    sub_1C5DE
jmp     short loc_1C630

loc_1C670:
cmp     [bp+var_2], 28h ; '('
jnz     short loc_1C679
jmp     loc_1C6ED

loc_1C679:
cmp     [bp+var_2], 29h ; ')'
jnz     short loc_1C689
cmp     word ptr ds:9480h, 0
jnz     short loc_1C689
jmp     loc_1C6ED

loc_1C689:
cmp     [bp+var_2], 0
jle     short loc_1C6DE
jmp     short loc_1C6C1

loc_1C691:
mov     ax, 40C2h
push    ax
push    [bp+var_2]
call    sub_194AB
or      ax, ax
jnz     short loc_1C6B2
mov     al, byte ptr [bp+var_2]
mov     [si], al
inc     si
inc     di
mov     ax, di
cmp     ax, 4Fh ; 'O'
jz      short loc_1C6CB
call    sub_1C5DE
jmp     short loc_1C6C1

loc_1C6B2:
cmp     [bp+var_2], 28h ; '('
jnz     short loc_1C6CB
cmp     word ptr ds:9480h, 0
jz      short loc_1C6CB
jmp     short loc_1C6ED

loc_1C6C1:
call    sub_1C568
mov     [bp+var_2], ax
or      ax, ax
jg      short loc_1C691

loc_1C6CB:
mov     byte ptr [si], 0
cmp     [bp+var_2], 0FFFFh
jnz     short loc_1C6D9
mov     ax, 0FFFFh
jmp     short loc_1C6DC

loc_1C6D9:
mov     ax, 1

loc_1C6DC:
jmp     short loc_1C6F3

loc_1C6DE:
cmp     [bp+var_2], 0FFFFh
jnz     short loc_1C6E9
mov     ax, 0FFFFh
jmp     short loc_1C6EB

loc_1C6E9:
xor     ax, ax

loc_1C6EB:
jmp     short loc_1C6F3

loc_1C6ED:
call    sub_1C5EC
mov     ax, 0FFFEh

loc_1C6F3:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1C622 endp



; Attributes: bp-based frame

sub_1C6FB proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, 96F6h
push    ax
push    [bp+arg_0]
call    sub_19497
or      ax, ax
jnz     short loc_1C711
mov     ax, 1
jmp     short loc_1C713

loc_1C711:
xor     ax, ax

loc_1C713:
pop     bp
retn    2
sub_1C6FB endp




sub_1C717 proc near
cmp     byte ptr ds:96E2h, 43h ; 'C'
jnz     short loc_1C732
mov     ax, 1AA0h
push    ax
push    word ptr ds:96E3h
call    sub_194AB
or      ax, ax
jz      short loc_1C732
mov     ax, 1
jmp     short locret_1C734

loc_1C732:
xor     ax, ax

locret_1C734:
retn
sub_1C717 endp



; Attributes: bp-based frame

sub_1C735 proc near

var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, [bp+arg_2]
or      si, si
jz      short loc_1C749
cmp     byte ptr [si], 0
jnz     short loc_1C74E

loc_1C749:
xor     ax, ax
jmp     short loc_1C794

loc_1C74D:
inc     si

loc_1C74E:
cmp     byte ptr [si], 0
jz      short loc_1C760
mov     ax, 40D4h
push    ax
push    word ptr [si]
call    sub_194AB
or      ax, ax
jnz     short loc_1C74D

loc_1C760:
mov     di, si
jmp     short loc_1C765

loc_1C764:
inc     di

loc_1C765:
cmp     byte ptr [di], 0
jz      short loc_1C777
mov     ax, 40D4h
push    ax
push    word ptr [di]
call    sub_194AB
or      ax, ax
jz      short loc_1C764

loc_1C777:
push    [bp+arg_0]
push    si
mov     ax, di
sub     ax, si
mov     [bp+var_2], ax
push    ax
call    sub_1946C
mov     bx, [bp+arg_0]
add     bx, [bp+var_2]
mov     byte ptr [bx], 0
mov     ax, si
add     ax, [bp+var_2]

loc_1C794:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1C735 endp



; Attributes: bp-based frame

sub_1C79C proc near

var_116= byte ptr -116h
var_115= byte ptr -115h
var_114= byte ptr -114h
var_D2= byte ptr -0D2h
var_50= byte ptr -50h
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 116h
push    si
lea     si, [bp+var_D2]
lea     ax, [bp+var_50]
push    ax
push    [bp+arg_2]
call    sub_19458
push    ax
call    sub_19C1B
cmp     [bp+arg_0], 0
jz      short loc_1C7D3
lea     ax, [bp+var_D2]
push    ax
mov     ax, 40D7h
push    ax
call    sub_19458
push    ax
mov     ax, 2D84h
push    ax
call    sub_19483
jmp     loc_1C849

loc_1C7D3:
cmp     byte ptr ds:2D84h, 0
jz      short loc_1C7E8
lea     ax, [bp+var_D2]
push    ax
mov     ax, 2D84h
push    ax
call    sub_19458
jmp     short loc_1C849

loc_1C7E8:
lea     ax, [bp+var_D2]
push    ax
mov     ax, 40D7h
push    ax
call    sub_19458
jmp     short loc_1C849

loc_1C7F6:
cmp     [bp+var_115], 3Ah ; ':'
jnz     short loc_1C819
mov     al, [bp+var_116]
mov     ds:91CDh, al
mov     word ptr ds:91CEh, 3Ah ; ':'
lea     ax, [bp+var_116]
push    ax
lea     ax, [bp+var_114]
push    ax
call    sub_19458
jmp     short loc_1C81E

loc_1C819:
mov     byte ptr ds:91CDh, 0

loc_1C81E:
mov     ax, 9179h
push    ax
lea     ax, [bp+var_116]
push    ax
call    sub_19458
lea     ax, [bp+var_50]
push    ax
call    sub_19C39
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_105F1
or      ax, ax
jz      short loc_1C849
push    [bp+arg_2]
lea     ax, [bp+var_50]
push    ax
call    sub_19458
jmp     short loc_1C858

loc_1C849:
push    si
lea     ax, [bp+var_116]
push    ax
call    sub_1C735
mov     si, ax
or      ax, ax
jnz     short loc_1C7F6

loc_1C858:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1C79C endp




sub_1C85F proc near
push    ds
mov     ax, 96E2h
push    ax
push    ds
mov     ax, 1AFBh
push    ax
mov     ax, 2
push    ax
call    sub_46E7B
or      ax, ax
jnz     short loc_1C886
mov     ax, 120Ah
push    ax
call    sub_1C6FB
or      ax, ax
jz      short loc_1C886
mov     ax, 1
jmp     short locret_1C888

loc_1C886:
xor     ax, ax

locret_1C888:
retn
sub_1C85F endp



; Attributes: bp-based frame

sub_1C889 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
cmp     word ptr ds:96EBh, 0
jnz     short loc_1C8CC
push    ds
push    [bp+arg_0]
call    sub_11CC1
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     dx, 0FFFFh
jnz     short loc_1C8AF
cmp     ax, 0FFFFh
jz      short loc_1C8C6

loc_1C8AF:
push    ds
push    [bp+arg_0]
call    sub_11CC1
cmp     dx, ds:9488h
jl      short loc_1C8CC
jg      short loc_1C8C6
cmp     ax, ds:9486h
jbe     short loc_1C8CC

loc_1C8C6:
mov     word ptr ds:96EBh, 1

loc_1C8CC:
mov     sp, bp
pop     bp
retn    2
sub_1C889 endp



; Attributes: bp-based frame

sub_1C8D2 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_4]
mov     ax, 2D40h
push    ax
call    sub_19458
push    ax
call    sub_19743
push    ax
push    [bp+arg_2]
call    sub_19483
push    ax
push    [bp+arg_0]
call    sub_19483
pop     bp
retn    6
sub_1C8D2 endp



; Attributes: bp-based frame

sub_1C8F5 proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_4]
push    si
call    sub_1943A
push    ds
push    si
call    sub_46E60
add     ax, 5
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_0]
mov     es:[bx+2], dx
mov     es:[bx], ax
add     ax, 4
push    dx
push    ax
push    ds
push    si
call    sub_46D76
les     bx, [bp+var_4]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
pop     si
mov     sp, bp
pop     bp
retn    6
sub_1C8F5 endp



; Attributes: bp-based frame

sub_1C949 proc near

var_50= byte ptr -50h
var_4E= byte ptr -4Eh
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 50h
lea     ax, [bp+var_50]
push    ax
mov     ax, 1AFEh
push    ax
call    sub_19458
mov     al, ds:22B1h
cbw
mov     dx, 0Bh
mul     dx
mov     bx, ax
mov     al, [bx+2B13h]
mov     [bp+var_4E], al
lea     ax, [bp+var_50]
push    ax
xor     ax, ax
push    ax
call    sub_1C79C
lea     ax, [bp+var_50]
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1C8F5
mov     sp, bp
pop     bp
retn    4
sub_1C949 endp



; Attributes: bp-based frame

sub_1C989 proc near

var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     si, 7
mov     di, 0FFFFh
mov     ax, 2
push    ax
call    sub_1B6D0
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_1C9BB
jmp     loc_1CA3C

loc_1C9BB:
call    sub_1C499
mov     ds:96FBh, ax
or      ax, ax
jnz     short loc_1C9C8
jmp     loc_1CA3C

loc_1C9C8:
jmp     short loc_1CA26

loc_1C9CA:
cmp     [bp+var_2], 0
jge     short loc_1C9D5
mov     si, 5
jmp     short loc_1CA34

loc_1C9D5:
mov     ax, 96FDh
push    ax
mov     ax, 0E56h
push    ax
xor     ax, ax
push    ax
call    sub_1C41A
call    sub_12609
or      ax, ax
jz      short loc_1C9EF
mov     si, 4
jmp     short loc_1CA34

loc_1C9EF:
mov     ax, 120Ah
push    ax
call    sub_1C6FB
or      ax, ax
jnz     short loc_1CA26
mov     ax, 1ACAh
push    ax
call    sub_1C6FB
or      ax, ax
jnz     short loc_1CA26
mov     ax, 96FDh
push    ax
call    sub_19C1B
mov     ax, 96FDh
push    ax
mov     ax, 9170h
push    ax
mov     ax, 120Ah
push    ax
call    sub_1C8D2
mov     ax, 96FDh
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_11CE4

loc_1CA26:
mov     ax, 96FDh
push    ax
call    sub_1C622
mov     [bp+var_2], ax
or      ax, ax
jnz     short loc_1C9CA

loc_1CA34:
cmp     si, 7
jnz     short loc_1CA3C
mov     di, 7

loc_1CA3C:
cmp     di, 0FFFFh
jnz     short loc_1CA4B
push    si
call    sub_1B845
or      ax, ax
jz      short loc_1CA4B
mov     di, ax

loc_1CA4B:
cmp     word ptr ds:96FBh, 0
jle     short loc_1CA59
push    word ptr ds:96FBh
call    sub_10728

loc_1CA59:
dec     word ptr ds:1DE8h
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_1C989 endp



; Attributes: bp-based frame

sub_1CA65 proc near

var_54= byte ptr -54h
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 54h
push    si
push    di
xor     si, si
mov     ax, 40C3h
push    ax
call    sub_1C5F7
cmp     ax, 28h ; '('
jz      short loc_1CA7E
jmp     loc_1CAED

loc_1CA7E:
call    sub_1C5DE
inc     word ptr ds:9480h
jmp     short loc_1CACE

loc_1CA87:
push    ss
lea     ax, [bp+var_54]
push    ax
call    sub_11CC1
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     dx, [bp+arg_2]
jl      short loc_1CAA6
jg      short loc_1CAA3
cmp     ax, [bp+arg_0]
jbe     short loc_1CAA6

loc_1CAA3:
mov     si, 1

loc_1CAA6:
cmp     [bp+var_2], 0FFFFh
jnz     short loc_1CAC2
cmp     [bp+var_4], 0FFFFh
jnz     short loc_1CAC2
mov     ax, 1AA7h
push    ax
lea     ax, [bp+var_54]
push    ax
call    sub_19065
mov     di, 0FFFFh
jmp     short loc_1CADD

loc_1CAC2:
mov     ax, 40C4h
push    ax
call    sub_1C5F7
cmp     ax, 29h ; ')'
jz      short loc_1CADD

loc_1CACE:
lea     ax, [bp+var_54]
push    ax
call    sub_1C622
mov     di, ax
mov     ax, di
or      ax, ax
jg      short loc_1CA87

loc_1CADD:
dec     word ptr ds:9480h
or      di, di
jge     short loc_1CAEA
mov     si, 0FFFFh
jmp     short loc_1CAED

loc_1CAEA:
call    sub_1C5DE

loc_1CAED:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_1CA65 endp



; Attributes: bp-based frame

sub_1CAF7 proc near

var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= byte ptr -50h
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 58h
push    si
xor     si, si
mov     ax, 96FDh
push    ax
call    sub_19C1B
lea     ax, [bp+var_50]
push    ax
mov     ax, 9170h
push    ax
mov     ax, 120Ah
push    ax
call    sub_1C8D2
lea     ax, [bp+var_50]
push    ax
push    word ptr ds:40CEh
push    word ptr ds:40CCh
call    sub_1C8F5
mov     ds:40CEh, dx
mov     ds:40CCh, ax
cmp     [bp+arg_0], 6
jnz     short loc_1CB35
jmp     loc_1CC09

loc_1CB35:
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_11CC1
mov     [bp+var_52], dx
mov     [bp+var_54], ax
or      ax, dx
jnz     short loc_1CB4C
jmp     loc_1CBE3

loc_1CB4C:
cmp     dx, 0FFFFh
jnz     short loc_1CB5A
cmp     [bp+var_54], 0FFFFh
jnz     short loc_1CB5A
jmp     loc_1CBE3

loc_1CB5A:
mov     dx, ds:9488h
mov     ax, ds:9486h
cmp     dx, [bp+var_52]
jg      short loc_1CB72
jl      short loc_1CB6D
cmp     ax, [bp+var_54]
jnb     short loc_1CB72

loc_1CB6D:
mov     ax, 1
jmp     short loc_1CB74

loc_1CB72:
xor     ax, ax

loc_1CB74:
or      ds:96EBh, ax
cmp     word ptr ds:31E0h, 0
jz      short loc_1CB95
lea     ax, [bp+var_50]
push    ax
push    [bp+var_52]
push    [bp+var_54]
call    sub_1B368
or      ax, ax
jnz     short loc_1CB93
jmp     loc_1CC09

loc_1CB93:
jmp     short loc_1CBE3

loc_1CB95:
push    ds
mov     ax, 96FDh
push    ax
call    sub_11CC1
mov     [bp+var_56], dx
mov     [bp+var_58], ax
or      dx, ax
jz      short loc_1CBE3
cmp     [bp+var_56], 0FFFFh
jnz     short loc_1CBB4
cmp     ax, 0FFFFh
jz      short loc_1CBE3

loc_1CBB4:
mov     dx, [bp+var_52]
mov     ax, [bp+var_54]
cmp     dx, [bp+var_56]
jl      short loc_1CBE3
jnz     short loc_1CBC6
cmp     ax, [bp+var_58]
jb      short loc_1CBE3

loc_1CBC6:
push    [bp+var_52]
push    [bp+var_54]
call    sub_1CA65
mov     si, ax
mov     ax, si
or      ax, ax
jg      short loc_1CBE3
cmp     si, 0FFFFh
jnz     short loc_1CC09
mov     [bp+arg_0], 5
jmp     short loc_1CC03

loc_1CBE3:
mov     word ptr ds:96EBh, 1
cmp     word ptr ds:93D2h, 0
jnz     short loc_1CBF6
xor     ax, ax
push    ax
call    sub_1B77F

loc_1CBF6:
mov     ax, 96FDh
push    ax
call    sub_1D234
cmp     ax, ds:31C5h
jle     short loc_1CC09

loc_1CC03:
mov     word ptr ds:968Ah, 0

loc_1CC09:
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1CAF7 endp



; Attributes: bp-based frame

sub_1CC10 proc near

var_5= byte ptr -5
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
mov     si, [bp+arg_0]
mov     [bp+var_4], 0FFFFh
mov     [bp+var_2], 0
mov     word ptr ds:96FBh, 0
mov     word ptr ds:40CEh, ds
mov     word ptr ds:40CCh, 2314h
mov     word ptr ds:40D2h, ds
mov     word ptr ds:40D0h, 2320h
cmp     si, 6
jnz     short loc_1CC49
mov     ax, 1
jmp     short loc_1CC4B

loc_1CC49:
xor     ax, ax

loc_1CC4B:
mov     ds:96EBh, ax
mov     word ptr ds:968Ah, 1
call    sub_1BDD1
push    si
call    sub_1B6D0
mov     word ptr ds:93D2h, 0
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_1CC7E
jmp     loc_1CFF3

loc_1CC7E:
call    sub_1C499
mov     ds:96FBh, ax
or      ax, ax
jnz     short loc_1CC8B
jmp     loc_1CFF3

loc_1CC8B:
mov     word ptr ds:2322h, 0
mov     word ptr ds:2320h, 0
xor     bx, bx
mov     es, bx
assume es:nothing
mov     word ptr ds:231Eh, es
mov     ds:231Ch, bx
mov     word ptr ds:2316h, es
mov     ds:2314h, bx
mov     word ptr ds:231Ah, es
mov     ds:2318h, bx
mov     ax, 96FDh
push    ax
mov     ax, 96EDh
push    ax
mov     ax, 120Fh
push    ax
call    sub_1C8D2
mov     ax, 9692h
push    ax
mov     ax, 96FDh
push    ax
call    sub_19C57
push    ds
mov     ax, 9692h
push    ax
call    sub_11CC1
mov     ds:9488h, dx
mov     ds:9486h, ax
mov     word ptr ds:231Ah, ds
mov     word ptr ds:2318h, 968Eh
cmp     word ptr ds:96EBh, 0
jnz     short loc_1CD3B
push    ds
mov     ax, 96FDh
push    ax
call    sub_105F1
or      ax, ax
jnz     short loc_1CD05
mov     word ptr ds:96EBh, 1
jmp     short loc_1CD16

loc_1CD05:
push    ds
mov     ax, 96FDh
push    ax
call    sub_11CC1
mov     ds:9488h, dx
mov     ds:9486h, ax

loc_1CD16:
cmp     word ptr ds:96FBh, 0FFFFh
jl      short loc_1CD3B
push    ds
mov     ax, 406Ch
push    ax
call    sub_11CC1
cmp     dx, ds:9488h
jl      short loc_1CD3B
jg      short loc_1CD35
cmp     ax, ds:9486h
jbe     short loc_1CD3B

loc_1CD35:
mov     word ptr ds:96EBh, 1

loc_1CD3B:
cmp     byte ptr ds:230Ch, 0
jz      short loc_1CD68
mov     ax, 96FDh
push    ax
mov     ax, 9692h
push    ax
call    sub_19458
mov     ax, 96FDh
push    ax
mov     ax, 1205h
push    ax
mov     ax, 1
push    ax
call    sub_1C41A
mov     ax, 96FDh
push    ax
push    ds
mov     ax, 231Ch
push    ax
call    sub_1C8F5

loc_1CD68:
mov     ax, 96FDh
push    ax
call    sub_1C622
or      ax, ax
jg      short loc_1CD76
jmp     loc_1CFF3

loc_1CD76:
mov     ax, 96FDh
push    ax
mov     ax, 0E56h
push    ax
xor     ax, ax
push    ax
call    sub_1C41A
mov     ax, 96FDh
push    ax
call    sub_1C889
call    sub_1C85F
or      ax, ax
jz      short loc_1CDA8
mov     ax, 96FDh
push    ax
push    ds
mov     ax, 2314h
push    ax
call    sub_1C8F5
mov     ds:40CEh, dx
mov     ds:40CCh, ax
jmp     loc_1CE63

loc_1CDA8:
push    ds
mov     ax, 2314h
push    ax
call    sub_1C949
mov     ds:40CEh, dx
mov     ds:40CCh, ax
jmp     short loc_1CDD0

loc_1CDB9:
or      di, di
jge     short loc_1CDC2
mov     si, 5
jmp     short loc_1CDDA

loc_1CDC2:
mov     ax, 96FDh
push    ax
mov     ax, 0E56h
push    ax
xor     ax, ax
push    ax
call    sub_1C41A

loc_1CDD0:
call    sub_12609
or      ax, ax
jz      short loc_1CDE3
mov     si, 4

loc_1CDDA:
mov     word ptr ds:968Ah, 0
jmp     loc_1CE7C

loc_1CDE3:
mov     ax, 1ACAh
push    ax
call    sub_1C6FB
or      ax, ax
jz      short loc_1CE1F
test    word ptr ds:974Dh, 18h
jnz     short loc_1CE01
mov     ax, 96FDh
push    ax
mov     ax, 1
push    ax
call    sub_1C79C

loc_1CE01:
mov     ax, 96FDh
push    ax
push    word ptr ds:40D2h
push    word ptr ds:40D0h
call    sub_1C8F5
mov     ds:40D2h, dx
mov     ds:40D0h, ax
call    sub_1C717
or      [bp+var_2], ax
jmp     short loc_1CE5C

loc_1CE1F:
mov     ax, 120Ah
push    ax
call    sub_1C6FB
or      ax, ax
jz      short loc_1CE42
mov     ax, 96FDh
push    ax
push    word ptr ds:40CEh
push    word ptr ds:40CCh
call    sub_1C8F5
mov     ds:40CEh, dx
mov     ds:40CCh, ax
jmp     short loc_1CE5C

loc_1CE42:
mov     ax, 120Ah
push    ax
call    sub_1C6FB
or      ax, ax
jnz     short loc_1CE5C
mov     ax, 1ACAh
push    ax
call    sub_1C6FB
or      ax, ax
jnz     short loc_1CE5C
push    si
call    sub_1CAF7

loc_1CE5C:
mov     ax, 96FDh
push    ax
call    sub_1C889

loc_1CE63:
cmp     word ptr ds:968Ah, 0
jz      short loc_1CE7C
mov     ax, 96FDh
push    ax
call    sub_1C622
mov     di, ax
mov     ax, di
or      ax, ax
jz      short loc_1CE7C
jmp     loc_1CDB9

loc_1CE7C:
cmp     word ptr ds:995Fh, 0
jz      short loc_1CE86
jmp     loc_1CFF3

loc_1CE86:
cmp     word ptr ds:968Ah, 0
jnz     short loc_1CE90
jmp     loc_1CFF3

loc_1CE90:
cmp     word ptr ds:31C5h, 3
jnz     short loc_1CE9F
cmp     si, 6
jz      short loc_1CE9F
jmp     loc_1CFED

loc_1CE9F:
cmp     si, 1
jnz     short loc_1CEAE
cmp     word ptr ds:96EBh, 0
jnz     short loc_1CEAE
jmp     loc_1CFF3

loc_1CEAE:
cmp     word ptr ds:96EBh, 0
jnz     short loc_1CEBF
mov     ax, 9692h
push    ax
call    sub_1B9C9
jmp     loc_1CFF3

loc_1CEBF:
mov     ax, 9692h
push    ax
call    sub_1B956
cmp     [bp+var_2], 0
jz      short loc_1CECF
jmp     loc_1CFAE

loc_1CECF:
mov     al, ds:22B1h
cbw
mov     bx, ax
mov     al, [bx+1AA0h]
mov     [bp+var_5], al
cmp     byte ptr ds:22B5h, 0
jz      short loc_1CF4B
mov     ax, 96FDh
push    ax
cmp     byte ptr ds:22B5h, 1
jnz     short loc_1CEF3
mov     ax, 1AC7h
jmp     short loc_1CEF6

loc_1CEF3:
mov     ax, 1ADCh

loc_1CEF6:
push    ax
call    sub_19458
mov     ax, 96FDh
push    ax
xor     ax, ax
push    ax
call    sub_1C79C
mov     ax, 96FDh
push    ax
push    word ptr ds:40D2h
push    word ptr ds:40D0h
call    sub_1C8F5
mov     ds:40D2h, dx
mov     ds:40D0h, ax
mov     ax, 96FDh
push    ax
mov     ax, 1AE5h
push    ax
call    sub_19458
mov     al, [bp+var_5]
mov     ds:9701h, al
mov     ax, 96FDh
push    ax
xor     ax, ax
push    ax
call    sub_1C79C
mov     ax, 96FDh
push    ax
push    word ptr ds:40D2h
push    word ptr ds:40D0h
call    sub_1C8F5
mov     ds:40D2h, dx
mov     ds:40D0h, ax

loc_1CF4B:
cmp     word ptr ds:23C9h, 0
jz      short loc_1CF7D
mov     ax, 96FDh
push    ax
mov     ax, 1ACFh
push    ax
call    sub_19458
mov     ax, 96FDh
push    ax
xor     ax, ax
push    ax
call    sub_1C79C
mov     ax, 96FDh
push    ax
push    word ptr ds:40D2h
push    word ptr ds:40D0h
call    sub_1C8F5
mov     ds:40D2h, dx
mov     ds:40D0h, ax

loc_1CF7D:
mov     ax, 96FDh
push    ax
mov     ax, 1AEFh
push    ax
call    sub_19458
mov     al, [bp+var_5]
mov     ds:96FEh, al
mov     ax, 96FDh
push    ax
xor     ax, ax
push    ax
call    sub_1C79C
mov     ax, 96FDh
push    ax
push    word ptr ds:40D2h
push    word ptr ds:40D0h
call    sub_1C8F5
mov     ds:40D2h, dx
mov     ds:40D0h, ax

loc_1CFAE:
call    sub_1BD85
mov     di, ax
mov     word ptr ds:0BFB2h, 0
mov     word ptr ds:0BFB0h, 0
xor     ax, ax
push    ax
call    sub_1B476
mov     ax, ds:0BFA8h
add     ds:995Fh, ax
mov     ax, ds:0BFAAh
add     ds:9961h, ax
xor     ax, ax
mov     ds:0BFAAh, ax
mov     ds:0BFA8h, ax
cmp     di, ax
jnz     short loc_1CFED
cmp     ds:9961h, ax
jz      short loc_1CFF3
cmp     ds:31C5h, ax
jnz     short loc_1CFF3

loc_1CFED:
mov     word ptr ds:968Ah, 0

loc_1CFF3:
call    sub_1BE15
cmp     word ptr ds:93D2h, 0
jz      short loc_1D000
call    sub_1B437

loc_1D000:
push    si
call    sub_1B845
or      ax, ax
jz      short loc_1D00B
mov     [bp+var_4], ax

loc_1D00B:
cmp     word ptr ds:96FBh, 0
jle     short loc_1D019
push    word ptr ds:96FBh
call    sub_10728

loc_1D019:
dec     word ptr ds:1DE8h
mov     byte ptr ds:98C7h, 0
mov     ax, [bp+var_4]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_1CC10 endp



; Attributes: bp-based frame

sub_1D02D proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
mov     di, [bp+arg_2]
mov     ds:3485h, di
mov     ax, di
add     ax, 7
mov     ds:3293h, ax
mov     ds:335Eh, ax
mov     ds:3030h, ax
mov     ds:3226h, ax
mov     ds:3418h, ax
mov     ds:33B5h, ax
mov     ds:318Bh, ax
mov     ax, di
add     ax, 0Eh
mov     ds:2EEEh, ax
mov     ds:2E75h, ax
mov     ds:29AAh, ax
mov     ds:2C43h, ax
mov     ds:30B3h, ax
mov     ds:31CEh, ax
mov     ax, di
add     ax, 15h
mov     ds:2C6Eh, ax
mov     ds:2AC2h, ax
mov     ds:28D1h, ax
mov     ds:2948h, ax
mov     ds:26A3h, ax
mov     ds:2A80h, ax
mov     ds:2B03h, ax
mov     ds:2B5Ah, ax
mov     ds:32D1h, ax
mov     ds:3307h, ax
mov     ax, di
add     ax, 1Ch
mov     ds:289Bh, ax
mov     ds:27F3h, ax
mov     ds:274Bh, ax
mov     ds:2621h, ax
mov     ds:25CAh, ax
mov     ds:2568h, ax
mov     ds:24FBh, ax
mov     ds:48FCh, si
mov     ax, si
add     ax, 7
mov     ds:490Dh, ax
mov     ax, si
add     ax, 0Eh
mov     ds:491Eh, ax
mov     ax, si
add     ax, 38h ; '8'
mov     ds:492Fh, ax
mov     ds:4A0Ch, ax
mov     ax, si
add     ax, 15h
mov     ds:49EAh, ax
mov     ds:4940h, ax
mov     ax, si
add     ax, 31h ; '1'
mov     ds:49B7h, ax
mov     ds:49D9h, ax
mov     ds:4951h, ax
mov     ax, si
add     ax, 1Ch
mov     ds:4962h, ax
mov     ds:4995h, ax
mov     ds:4984h, ax
mov     ds:4973h, ax
mov     ax, si
add     ax, 2Ah ; '*'
mov     ds:49A6h, ax
mov     ds:4A1Dh, ax
mov     ax, si
add     ax, 3Fh ; '?'
mov     ds:49C8h, ax
mov     ds:49FBh, ax
mov     ax, si
add     ax, 23h ; '#'
mov     ds:9A66h, ax
pop     di
pop     si
pop     bp
retn    4
sub_1D02D endp



; Attributes: bp-based frame

sub_1D117 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     ax, [bp+arg_0]
cmp     ax, 0D01h
jz      short loc_1D136
cmp     ax, 0D07h
jnz     short loc_1D12B
jmp     loc_1D1A0

loc_1D12B:
cmp     ax, 0D08h
jnz     short loc_1D133
jmp     loc_1D1A5

loc_1D133:
jmp     loc_1D1BC

loc_1D136:
mov     ax, 406Ch
push    ax
call    sub_19448
or      ax, ax
jz      short loc_1D14E
mov     ax, 97F0h
push    ax
mov     ax, 406Ch
push    ax
call    sub_19458
jmp     short loc_1D159

loc_1D14E:
mov     ax, 97F0h
push    ax
mov     ax, 4820h
push    ax
call    sub_19458

loc_1D159:
mov     ax, 10DFh
push    ax
mov     ax, 97F0h
push    ax
mov     ax, 50h ; 'P'
push    ax
call    sub_1917C
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_1D1BF
cmp     byte ptr ds:97F0h, 0
jz      short loc_1D18E
mov     ax, 97F0h
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 4821h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jl      short loc_1D1BF

loc_1D18E:
mov     ax, 406Ch
push    ax
mov     ax, 97F0h
push    ax
call    sub_19458
mov     byte ptr ds:98C7h, 0
jmp     short loc_1D1BC

loc_1D1A0:
mov     byte ptr ds:406Ch, 0

loc_1D1A5:
cmp     word ptr ds:0BFBAh, 0
jz      short loc_1D1BC
mov     ax, 0FFFFh
push    ax
call    sub_1774F
xor     ax, ax
push    ax
call    sub_1C23E
call    sub_1BF31

loc_1D1BC:
mov     si, 0FFFFh

loc_1D1BF:
mov     ax, si
pop     si
pop     bp
retn    2
sub_1D117 endp




sub_1D1C6 proc near
mov     al, ds:4FE1h
mov     ds:4FE5h, al
mov     ds:2310h, al
mov     al, ds:4FCDh
mov     ds:4FD9h, al
push    word ptr ds:22B8h
call    sub_1494A
mov     al, ds:23CDh
mov     ds:22C0h, al
cmp     word ptr ds:23CBh, 2
jz      short loc_1D1EE
mov     ax, 1
jmp     short loc_1D1F0

loc_1D1EE:
xor     ax, ax

loc_1D1F0:
mov     ds:2312h, al
mov     al, ds:22C1h
mov     ds:230Dh, al
mov     ax, 22BCh
push    ax
mov     ax, 2A8Eh
push    ax
mov     ax, 1
push    ax
mov     ax, 20h ; ' '
push    ax
call    sub_190A1
mov     ax, 22BAh
push    ax
mov     ax, 2635h
push    ax
xor     ax, ax
push    ax
mov     ax, 0FFh
push    ax
call    sub_190A1
mov     ax, 22BBh
push    ax
mov     ax, 263Ah
push    ax
xor     ax, ax
push    ax
mov     ax, 0FFh
push    ax
call    sub_190A1
mov     ax, 0FFFFh
retn
sub_1D1C6 endp



; Attributes: bp-based frame

sub_1D234 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, 7FFFh
push    ds
mov     ax, 986Fh
push    ax
call    sub_46805
push    ds
mov     ax, 9873h
push    ax
call    sub_4681A
mov     word ptr ds:0BEE4h, 0
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_1D272
jmp     loc_1D316

loc_1D272:
mov     ax, 97F0h
push    ax
push    [bp+arg_0]
call    sub_19C57
cmp     byte ptr ds:47D0h, 20h ; ' '
jnz     short loc_1D290
mov     ax, 47D0h
push    ax
mov     ax, 97F0h
push    ax
call    sub_19458

loc_1D290:
push    ds
mov     ax, 97F0h
push    ax
call    sub_30A40
les     bx, ds:1C86h
assume es:nothing
mov     word ptr ds:9919h, es
mov     ds:9917h, bx
mov     ax, ds:1C94h
inc     ax
mov     ds:99B3h, ax
mov     ax, 97F0h
push    ax
call    sub_19C1B
call    sub_123F3
mov     ax, 97F0h
push    ax
call    sub_19C39
mov     ax, 97F0h
push    ax
call    sub_1B7CC
mov     word ptr ds:225Ch, 1
push    ds
mov     ax, 97F0h
push    ax
call    sub_259FD
mov     si, ax
mov     word ptr ds:225Ch, 0
push    ds
mov     ax, 99FFh
push    ax
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 14h
push    ax
call    sub_46A2C
mov     ax, ds:0BEE4h
xor     dx, dx
add     ds:99B5h, ax
adc     ds:99B7h, dx
mov     ax, ds:0BFA8h
add     ds:995Fh, ax
mov     ax, ds:0BFAAh
add     ds:9961h, ax
xor     ax, ax
mov     ds:0BFAAh, ax
mov     ds:0BFA8h, ax
mov     ds:0BEE4h, ax

loc_1D316:
dec     word ptr ds:1DE8h
mov     ax, si
pop     si
pop     bp
retn    2
sub_1D234 endp



; Attributes: bp-based frame

sub_1D321 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
call    sub_139EF
mov     ax, 1
push    ax
call    sub_1CC10
mov     si, ax
mov     ax, si
cmp     ax, 900h
jnz     short loc_1D340
push    [bp+arg_0]
call    sub_1379C
mov     si, ax

loc_1D340:
mov     ax, si
pop     si
pop     bp
retn    2
sub_1D321 endp




sub_1D347 proc near
cmp     byte ptr ds:406Ch, 0
jz      short loc_1D353
mov     ax, 406Ch
jmp     short locret_1D36E

loc_1D353:
cmp     byte ptr ds:4780h, 0
jz      short loc_1D35F
mov     ax, 4780h
jmp     short locret_1D36E

loc_1D35F:
cmp     byte ptr ds:98C7h, 0
jz      short loc_1D36B
mov     ax, 98C7h
jmp     short locret_1D36E

loc_1D36B:
mov     ax, 9877h

locret_1D36E:
retn
sub_1D347 endp




sub_1D36F proc near
cmp     byte ptr ds:4780h, 0
jz      short loc_1D37B
mov     ax, 4780h
jmp     short locret_1D38A

loc_1D37B:
cmp     byte ptr ds:98C7h, 0
jz      short loc_1D387
mov     ax, 98C7h
jmp     short locret_1D38A

loc_1D387:
mov     ax, 9877h

locret_1D38A:
retn
sub_1D36F endp



; Attributes: bp-based frame

sub_1D38B proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     ax, [bp+arg_0]
cmp     ax, 0A02h
jz      short loc_1D3A3
cmp     ax, 0A06h
jnz     short loc_1D3A0
jmp     loc_1D424

loc_1D3A0:
jmp     loc_1D42C

loc_1D3A3:
mov     ax, 4780h
push    ax
call    sub_19448
or      ax, ax
jz      short loc_1D3BB
mov     ax, 97F0h
push    ax
mov     ax, 4780h
push    ax
call    sub_19458
jmp     short loc_1D3C6

loc_1D3BB:
mov     ax, 97F0h
push    ax
mov     ax, 4826h
push    ax
call    sub_19458

loc_1D3C6:
mov     ax, 1079h
push    ax
mov     ax, 97F0h
push    ax
mov     ax, 50h ; 'P'
push    ax
call    sub_1917C
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_1D3E0
jmp     def_1D441       ; jumptable 0001D441 default case, case 2562

loc_1D3E0:
cmp     byte ptr ds:97F0h, 0
jz      short loc_1D401
mov     ax, 97F0h
push    ax
xor     ax, ax
push    ax
push    ax
mov     ax, 0E56h
push    ax
call    sub_14398
mov     si, ax
mov     ax, si
or      ax, ax
jge     short loc_1D401
jmp     def_1D441       ; jumptable 0001D441 default case, case 2562

loc_1D401:
mov     ax, 4780h
push    ax
mov     ax, 97F0h
push    ax
call    sub_19458
cmp     byte ptr ds:97F0h, 0
jnz     short loc_1D41E
mov     ax, 97F0h
push    ax
mov     ax, 4730h
push    ax
call    sub_19458

loc_1D41E:
mov     si, 500h
jmp     def_1D441       ; jumptable 0001D441 default case, case 2562

loc_1D424:
call    sub_1BA2B
mov     si, ax
jmp     def_1D441       ; jumptable 0001D441 default case, case 2562

loc_1D42C:
call    sub_139EF
mov     ax, [bp+arg_0]
sub     ax, 0A01h       ; switch 5 cases
cmp     ax, 4
jbe     short loc_1D43D
jmp     def_1D441       ; jumptable 0001D441 default case, case 2562

loc_1D43D:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1D441[bx] ; switch jump
jpt_1D441 dw offset loc_1D479 ; jump table for switch statement
dw offset def_1D441
dw offset loc_1D46E
dw offset loc_1D464
dw offset loc_1D450

loc_1D450:              ; jumptable 0001D441 case 2565
call    sub_1C989
mov     si, ax
mov     ax, si
cmp     ax, 7
jnz     short def_1D441 ; jumptable 0001D441 default case, case 2562
push    si
call    sub_1CC10
mov     si, ax
jmp     short def_1D441 ; jumptable 0001D441 default case, case 2562

loc_1D464:              ; jumptable 0001D441 case 2564
xor     ax, ax
push    ax
call    sub_1CC10
mov     si, ax
jmp     short def_1D441 ; jumptable 0001D441 default case, case 2562

loc_1D46E:              ; jumptable 0001D441 case 2563
mov     ax, 6
push    ax
call    sub_1CC10
mov     si, ax
jmp     short def_1D441 ; jumptable 0001D441 default case, case 2562

loc_1D479:              ; jumptable 0001D441 case 2561
mov     ax, 98C7h
push    ax
call    sub_1D36F
mov     di, ax
mov     ax, di
push    ax
call    sub_19458
mov     word ptr ds:93D2h, 0
xor     ax, ax
push    ax
call    sub_1B6D0
xor     ax, ax
push    ax
call    sub_1B77F
call    sub_1BDD1
push    di
call    sub_1D234
call    sub_1B437
call    sub_1BE15
mov     si, 0FFFFh
mov     ax, 3
push    ax
call    sub_1B845
or      ax, ax
jz      short def_1D441 ; jumptable 0001D441 default case, case 2562
mov     si, ax

def_1D441:              ; jumptable 0001D441 default case, case 2562
mov     ax, si
pop     di
pop     si
pop     bp
retn    2
sub_1D38B endp



; Attributes: bp-based frame

sub_1D4BF proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    ds
push    [bp+arg_0]
mov     ax, 91CDh
push    ax
mov     ax, 9179h
push    ax
mov     ax, 9170h
push    ax
mov     ax, 91C8h
push    ax
call    sub_19500
pop     bp
retn    2
sub_1D4BF endp




sub_1D4DD proc near
push    si
mov     si, 4Eh ; 'N'
cmp     word ptr ds:99FDh, 0
jz      short loc_1D51F
mov     word ptr ds:1DD3h, 12Bh
xor     ax, ax
push    ax
mov     ax, 0C6Fh
push    ax
mov     ax, 108Dh
push    ax
mov     ax, 0C81h
push    ax
mov     ax, 5
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 4
push    ax
call    sub_18EAD
add     sp, 0Eh
cbw
mov     si, ax
mov     ax, si
cmp     ax, 1Bh
jz      short loc_1D51F
mov     word ptr ds:99FDh, 0

loc_1D51F:
mov     ax, si
pop     si
retn
sub_1D4DD endp




sub_1D523 proc near
cmp     byte ptr ds:2D40h, 0
jz      short loc_1D539
cmp     byte ptr ds:2D41h, 3Ah ; ':'
jnz     short loc_1D539
mov     ax, ds:2D40h
mov     ds:9750h, ax
jmp     short loc_1D544

loc_1D539:
call    sub_10490
mov     ds:9750h, al
mov     byte ptr ds:9751h, 3Ah ; ':'

loc_1D544:
mov     al, ds:9750h
cbw
push    ax
call    sub_46F25
mov     ds:9750h, al
call    sub_1D347
push    ax
call    sub_1D4BF
mov     ax, 9752h
push    ax
mov     ax, 9170h
push    ax
call    sub_19458
push    ax
mov     ax, 120Fh
push    ax
call    sub_19483
mov     ax, ds:9750h
mov     ds:97A0h, ax
call    sub_1D36F
push    ax
call    sub_1D4BF
mov     ax, 97A2h
push    ax
mov     ax, 9170h
push    ax
call    sub_19458
push    ax
mov     ax, 120Ah
push    ax
call    sub_19483
cmp     word ptr ds:0C0EFh, 2
jnz     short loc_1D596
mov     al, 88h
jmp     short loc_1D598

loc_1D596:
mov     al, 1

loc_1D598:
mov     ds:3326h, al
cmp     word ptr ds:0C0EFh, 0
jle     short loc_1D5A6
mov     al, 88h
jmp     short loc_1D5A8

loc_1D5A6:
mov     al, 1

loc_1D5A8:
mov     ds:3331h, al
cmp     byte ptr ds:22B9h, 0
jz      short loc_1D5B6
mov     al, 1
jmp     short loc_1D5B8

loc_1D5B6:
mov     al, 4

loc_1D5B8:
mov     ds:2697h, al
mov     ds:268Ch, al
mov     ds:2681h, al
mov     ds:2676h, al
mov     ax, 3493h
push    ax
call    sub_174B1
retn
sub_1D523 endp



; Attributes: bp-based frame

sub_1D5CC proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     si, 0FFFFh
jle     short loc_1D5DC
mov     ds:4724h, si

loc_1D5DC:
push    ds
inc     word ptr ds:1DE8h
mov     ax, ds:1DE8h
mov     dx, 14h
mul     dx
add     ax, 8C50h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_1D5F9

loc_1D5F6:
mov     si, 500h

loc_1D5F9:
cmp     si, 0FFFFh
jnz     short loc_1D602
mov     si, ds:4724h

loc_1D602:
cmp     si, 500h
jnz     short loc_1D62C
call    sub_1D523
mov     si, ax
cmp     byte ptr ds:3498h, 0
jz      short loc_1D624
mov     ax, ds:4720h
mov     dx, 11h
mul     dx
mov     bx, ax
mov     ax, [bx+4902h]
jmp     short loc_1D627

loc_1D624:
mov     ax, 500h

loc_1D627:
mov     ds:4724h, ax
jmp     short loc_1D5F9

loc_1D62C:
call    sub_177EB
mov     ax, si
cmp     ax, 600h
jz      short loc_1D642
cmp     ax, 700h
jz      short loc_1D656
cmp     ax, 800h
jz      short loc_1D679
jmp     short loc_1D687

loc_1D642:
mov     ax, 0FFFFh
push    ax
call    sub_17720
call    sub_18856
mov     si, ax
mov     word ptr ds:4724h, 600h
jmp     short loc_1D5F9

loc_1D656:
mov     ax, 0FFFFh
push    ax
call    sub_17720
cmp     word ptr ds:4722h, 0
jnz     short loc_1D66B
call    sub_1AA75
mov     si, ax
jmp     short loc_1D670

loc_1D66B:
call    sub_1C2C1
mov     si, ax

loc_1D670:
mov     word ptr ds:4724h, 700h
jmp     loc_1D5F9

loc_1D679:
mov     ax, 1
push    ax
call    sub_12268
or      ax, ax
jge     short loc_1D690
jmp     loc_1D5F6

loc_1D687:
push    si
call    sub_18863
mov     si, ax
jmp     loc_1D5F9

loc_1D690:
pop     si
pop     bp
retn    2
sub_1D5CC endp



; Attributes: bp-based frame

sub_1D695 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     dl, [bp+arg_0]
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output
pop     di
pop     si
pop     bp
retn    2
sub_1D695 endp



; Attributes: bp-based frame

sub_1D6A7 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
jmp     short loc_1D6B7

loc_1D6AC:
mov     bx, [bp+arg_0]
inc     [bp+arg_0]
push    word ptr [bx]
call    sub_1D695

loc_1D6B7:
mov     bx, [bp+arg_0]
cmp     byte ptr [bx], 0
jnz     short loc_1D6AC
mov     al, 0Dh
push    ax
call    sub_1D695
mov     al, 0Ah
push    ax
call    sub_1D695
pop     bp
retn    2
sub_1D6A7 endp



; Attributes: bp-based frame

sub_1D6CF proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
call    sub_16431
call    sub_19C75
mov     si, 1
jmp     loc_1D7E4

loc_1D6DF:
mov     ax, si
shl     ax, 1
shl     ax, 1
les     bx, [bp+arg_2]
add     bx, ax
les     bx, es:[bx]
mov     al, es:[bx]
cmp     al, ds:91D0h
jz      short loc_1D6F9
jmp     loc_1D7BA

loc_1D6F9:
mov     ax, si
shl     ax, 1
shl     ax, 1
les     bx, [bp+arg_2]
add     bx, ax
les     bx, es:[bx]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_46F25
sub     ax, 42h ; 'B'   ; switch 15 cases
cmp     ax, 0Eh
jbe     short loc_1D71D
jmp     def_1D721       ; jumptable 0001D721 default case, cases 69-76,78,79

loc_1D71D:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1D721[bx] ; switch jump
jpt_1D721 dw offset loc_1D74D ; jump table for switch statement
dw offset loc_1D756
dw offset loc_1D7AA
dw offset def_1D721
dw offset def_1D721
dw offset def_1D721
dw offset def_1D721
dw offset def_1D721
dw offset def_1D721
dw offset def_1D721
dw offset def_1D721
dw offset loc_1D744
dw offset def_1D721
dw offset def_1D721
dw offset loc_1D7B2

loc_1D744:              ; jumptable 0001D721 case 77
mov     word ptr ds:4728h, 1
jmp     def_1D721       ; jumptable 0001D721 default case, cases 69-76,78,79

loc_1D74D:              ; jumptable 0001D721 case 66
mov     word ptr ds:4728h, 2
jmp     def_1D721       ; jumptable 0001D721 default case, cases 69-76,78,79

loc_1D756:              ; jumptable 0001D721 case 67
push    ds
mov     ax, 9963h
push    ax
mov     ax, si
shl     ax, 1
shl     ax, 1
les     bx, [bp+arg_2]
add     bx, ax
mov     dx, es:[bx+2]
mov     ax, es:[bx]
inc     ax
inc     ax
push    dx
push    ax
call    sub_46D76
cmp     byte ptr ds:9963h, 0
jnz     short loc_1D7A1
inc     si
mov     ax, si
cmp     ax, [bp+arg_0]
jge     short loc_1D7A1
push    ds
mov     ax, 9963h
push    ax
mov     ax, si
shl     ax, 1
shl     ax, 1
les     bx, [bp+arg_2]
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D76

loc_1D7A1:
mov     al, ds:9963h
cbw
mov     ds:472Ch, ax
jmp     short def_1D721 ; jumptable 0001D721 default case, cases 69-76,78,79

loc_1D7AA:              ; jumptable 0001D721 case 68
mov     word ptr ds:472Ah, 1
jmp     short def_1D721 ; jumptable 0001D721 default case, cases 69-76,78,79

loc_1D7B2:              ; jumptable 0001D721 case 80
mov     word ptr ds:2296h, 1
jmp     short def_1D721 ; jumptable 0001D721 default case, cases 69-76,78,79

loc_1D7BA:
push    ds
mov     ax, 4730h
push    ax
mov     ax, si
shl     ax, 1
shl     ax, 1
les     bx, [bp+arg_2]
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D76
mov     ax, 4730h
push    ax
call    sub_1943A
mov     word ptr ds:472Eh, 1

def_1D721:              ; jumptable 0001D721 default case, cases 69-76,78,79
inc     si

loc_1D7E4:
cmp     si, [bp+arg_0]
jge     short loc_1D7EC
jmp     loc_1D6DF

loc_1D7EC:
push    ds
mov     ax, 99FFh
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_1D803
mov     ax, 3
push    ax
call    sub_16549
jmp     short loc_1D816

loc_1D803:
push    ds
mov     ax, 99FFh
push    ax
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 14h
push    ax
call    sub_46A2C

loc_1D816:
les     bx, [bp+arg_2]
les     bx, es:[bx]
cmp     byte ptr es:[bx], 0
jz      short loc_1D84C
push    ds
mov     ax, 991Bh
push    ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D76
mov     ax, 991Bh
push    ax
call    sub_19C1B
mov     al, 0
mov     ds:91C8h, al
mov     ds:9170h, al
mov     ax, 991Bh
push    ax
call    sub_19C39

loc_1D84C:
call    sub_16769
mov     si, ax
cmp     word ptr ds:4728h, 0
jz      short loc_1D8B1
mov     ax, 0F9Dh
push    ax
call    sub_15773
cmp     word ptr ds:1D20h, 0
jnz     short loc_1D87B
cmp     byte ptr ds:406Ch, 0
jnz     short loc_1D874
cmp     byte ptr ds:4780h, 0
jz      short loc_1D87B

loc_1D874:
mov     ax, 111h
push    ax
call    sub_1804A

loc_1D87B:
mov     ax, ds:4728h
add     ax, 0A03h
push    ax
call    sub_1D38B
call    sub_1648A
mov     si, 1
jmp     short loc_1D89B

loc_1D88D:
push    si
call    sub_30C40
mov     ax, 9A78h
push    ax
call    sub_1D6A7
inc     si

loc_1D89B:
cmp     si, ds:0BFBAh
jle     short loc_1D88D
cmp     word ptr ds:995Fh, 0
jz      short loc_1D8AD
mov     ax, 1
jmp     short loc_1D8AF

loc_1D8AD:
xor     ax, ax

loc_1D8AF:
jmp     short loc_1D8BD

loc_1D8B1:
push    si
call    sub_1D5CC
xor     ax, ax
push    ax
call    sub_16549
xor     ax, ax

loc_1D8BD:
pop     si
pop     bp
retf
sub_1D6CF endp




sub_1D8C0 proc near
call    sub_1E13A
jb      short loc_1D8C8
mov     ax, ds:0

loc_1D8C8:
call    sub_1E160
retn
sub_1D8C0 endp




sub_1D8CC proc near
sub     sp, 0A0h
call    sub_1E13A
call    sub_1E6F6
jnb     short loc_1D8DB
jmp     loc_1D984

loc_1D8DB:
mov     cl, [bp+0AEh]
mov     ch, [bp+0ACh]
mov     dl, [bp+0AAh]
mov     dh, [bp+0A8h]
cmp     byte ptr [bx+4], 0
jz      short loc_1D901
mov     ax, [bx+6]
push    ax
neg     al
neg     ah
add     al, [bx+8]
add     ah, [bx+9]
jmp     short loc_1D916

loc_1D901:
dec     cl
dec     ch
dec     dl
dec     dh
mov     ax, [bx]
push    ax
neg     al
neg     ah
add     al, [bx+2]
add     ah, [bx+3]

loc_1D916:
pop     ax
add     cl, al
add     dl, al
add     ch, ah
add     dh, ah
mov     si, [bp+0A6h]

loc_1D923:
lea     di, [bp+2]
cmp     byte ptr [bp+0A4h], 0
jz      short loc_1D95E
push    ss
push    di
push    dx
push    cx
mov     al, ch
push    ax
call    sub_1E2D6
push    cx
push    di
push    ds
push    es
push    ss
pop     es
pop     ds
mov     al, cl
shl     al, 1
xor     ah, ah
add     di, ax

loc_1D946:
movsb
inc     di
inc     cl
cmp     cl, dl
jbe     short loc_1D946
pop     ds
pop     di
pop     cx
push    es
push    di
push    dx
push    cx
mov     al, ch
push    ax
call    sub_1E2DA
jmp     short loc_1D97E
align 2

loc_1D95E:
mov     al, cl
xor     ah, ah
shl     ax, 1
neg     ax
add     ax, si
push    es
push    ax
push    dx
push    cx
mov     al, ch
push    ax
call    sub_1E2DA
mov     al, dl
sub     al, cl
inc     al
xor     ah, ah
shl     ax, 1
add     si, ax

loc_1D97E:
inc     ch
cmp     ch, dh
jbe     short loc_1D923

loc_1D984:
call    sub_1E160
add     sp, 0A0h
retn    0Ch
sub_1D8CC endp




sub_1D98E proc near
sub     sp, 0A0h
call    sub_1E13A
jb      short loc_1D9B8
push    word ptr [bx+0Bh]
mov     al, [bp+0A6h]
mov     [bx+0Bh], al
cmp     byte ptr [bp+0A4h], 0
jz      short loc_1D9B5
call    sub_1E6F6
jb      short loc_1D9B8
push    ss
pop     es
lea     di, [bp+2]
call    sub_1D9C2

loc_1D9B5:
pop     ax
xor     ah, ah

loc_1D9B8:
call    sub_1E160
add     sp, 0A0h
retn    4
sub_1D98E endp ; sp-analysis failed




sub_1D9C2 proc near
mov     dl, [bx+1]
xor     dh, dh
mov     cl, [bx+3]
xor     ch, ch
sub     cx, dx
inc     cx

loc_1D9CF:
push    cx
push    es
push    di
push    word ptr [bx+2]
push    word ptr [bx]
push    dx
call    sub_1E2D6
push    di
mov     al, [bx]
xor     ah, ah
mov     cl, [bx+2]
xor     ch, ch
sub     cx, ax
inc     cx
shl     ax, 1
add     di, ax
mov     al, [bp+0A6h]

loc_1D9F0:
inc     di
stosb
loop    loc_1D9F0
pop     di
push    es
push    di
push    word ptr [bx+2]
push    word ptr [bx]
push    dx
call    sub_1E2DA
inc     dx
pop     cx
loop    loc_1D9CF
retn
sub_1D9C2 endp




sub_1DA05 proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1DA20
mov     al, [bp+6]
mov     [bx+4], al
mov     al, [bp+4]
cmp     al, 0FFh
jz      short loc_1DA1D
mov     [bx+5], al

loc_1DA1D:
call    sub_1E3DF

loc_1DA20:
call    sub_1E160
retn    4
sub_1DA05 endp




sub_1DA26 proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1DA31
call    sub_1E6A9

loc_1DA31:
call    sub_1E160
retn
sub_1DA26 endp




sub_1DA35 proc near
call    sub_1E13A
jb      short loc_1DA3D
mov     ax, ds:2

loc_1DA3D:
call    sub_1E160
retn
sub_1DA35 endp




sub_1DA41 proc near
call    sub_1E13A
jb      short loc_1DA5F
cmp     bx, 30h ; '0'
jnz     short loc_1DA53
mov     word ptr ds:4, 7
jmp     short loc_1DA5F

loc_1DA53:
call    sub_1DA63
mov     bx, ds:2
mov     ax, bx
mov     ds:0, ax

loc_1DA5F:
call    sub_1E160
retn
sub_1DA41 endp




sub_1DA63 proc near
cmp     byte ptr [bx+20h], 2
jnz     short loc_1DA72
push    bx
push    word ptr ds:11h
call    sub_1EA98
pop     bx

loc_1DA72:
call    sub_1E4FA
mov     di, [bx+12h]
or      di, di
jz      short locret_1DABA
mov     ax, [bx+8]
sub     ah, [bx+7]
inc     ah
sub     al, [bx+6]
inc     al
mul     ah
mov     si, di
add     si, ax
add     si, ax
mov     cx, ds:6
sub     cx, si
push    ds
pop     es
rep movsb
shl     ax, 1
sub     ds:6, ax
mov     dx, [bx+12h]
mov     bx, ds:16h

loc_1DAA8:
cmp     bx, 30h ; '0'
jz      short locret_1DABA
cmp     [bx+12h], dx
jb      short loc_1DAB5
sub     [bx+12h], ax

loc_1DAB5:
mov     bx, [bx+14h]
jmp     short loc_1DAA8

locret_1DABA:
retn
sub_1DA63 endp




sub_1DABB proc near
sub     sp, 0A3h
call    sub_1E13A
jb      short loc_1DAC7
jmp     loc_1DBE8

loc_1DAC7:
push    es
push    ax
les     di, [bp+0B1h]
add     di, 0Fh
mov     cl, 4
shr     di, cl
mov     ax, es
add     ax, di
pop     bx
mov     cs:[bx-1EF7h], ax
mov     ds, ax
mov     word ptr ds:4, 0
mov     ds:8, bx
mov     word ptr ds:6, 0
les     di, [bp+0A9h]
mov     ds:2Ch, di
mov     word ptr ds:2Eh, es
mov     al, [bp+0A7h]
mov     ds:2Bh, al
pop     es
mov     word ptr ds:0Ah, es
mov     ax, [bp+0AFh]
mov     di, [bp+0B1h]
and     di, 0Fh
jz      short loc_1DB1A
sub     ax, 10h
add     ax, di

loc_1DB1A:
cmp     ax, 31h ; '1'
jnb     short loc_1DB28
mov     word ptr ds:4, 4
jmp     loc_1DBE8

loc_1DB28:
mov     ds:0Eh, ax
mov     al, [bp+0ADh]
mov     ds:2Ah, al
push    ss
lea     ax, [bp+2]
push    ax
call    sub_1DD40
mov     ax, [bp+2]
mov     ds:22h, ax
mov     ax, [bp+6Dh]
mov     ds:24h, ax
mov     al, [bp+0A4h]
mov     ah, al
mov     ds:26h, ax
mov     al, [bp+54h]
mov     ah, [bp+9Dh]
mov     ds:28h, ax
mov     ax, [bp+9Ah]
mov     ds:0Ch, ax
mov     ax, 22h ; '"'
mov     cl, [bp+0ADh]
inc     cl
mov     ch, 0
mul     cx
add     ax, 31h ; '1'
dec     ax
mov     ds:1Ah, ax
mov     ds:6, ax
cmp     ax, ds:0Eh
jb      short loc_1DB86
mov     word ptr ds:4, 4
jmp     short loc_1DBE8
align 2

loc_1DB86:
mov     bx, 30h ; '0'
call    sub_1E71C
xor     ax, ax
mov     ds:1Ch, ax
mov     ds:1Eh, ax
inc     al
mov     ds:20h, al
xor     ax, ax
mov     [bx+12h], ax
mov     [bx+10h], ax
mov     [bx], ax
mov     [bx+6], ax
mov     ax, ds:28h
dec     al
dec     ah
mov     [bx+2], ax
mov     [bx+8], ax
mov     byte ptr [bx+4], 0
mov     byte ptr [bx+0Bh], 7
mov     ax, [bp+5Ah]
mov     [bx+0Ch], ax
mov     ax, [bp+9Eh]
mov     [bx+0Eh], ax
mov     byte ptr [bx+20h], 2
mov     al, 0
mov     ds:10h, al
mov     ds:11h, al
mov     al, 0
mov     cl, [bp+0ADh]
mov     ch, 0

loc_1DBDC:
add     bx, 22h ; '"'
mov     [bx+20h], al
loop    loc_1DBDC
mov     dx, ds
xor     ax, ax

loc_1DBE8:
call    sub_1E160
add     sp, 0A3h
retn    0Eh
sub_1DABB endp




sub_1DBF2 proc near
call    sub_1E13A
jb      short loc_1DC04
call    sub_1E1AD
mov     cx, [bx]
sub     ah, ch
sub     al, cl
inc     ah
inc     al

loc_1DC04:
call    sub_1E160
retn
sub_1DBF2 endp




sub_1DC08 proc near
call    sub_1E13A
jb      short loc_1DC33
mov     al, [bp+6]
mov     ah, [bp+4]
mov     dx, [bx]
or      al, al
jz      short loc_1DC1D
dec     al
add     dl, al

loc_1DC1D:
or      ah, ah
jz      short loc_1DC25
dec     ah
add     dh, ah

loc_1DC25:
mov     [bx+0Ch], dx
cmp     bx, ds:2
jnz     short loc_1DC33
mov     ax, dx
call    sub_1E846

loc_1DC33:
call    sub_1E160
retn    4
sub_1DC08 endp




sub_1DC39 proc near
call    sub_1E13A
jb      short loc_1DC44
mov     al, [bp+4]
call    sub_1E1D1

loc_1DC44:
call    sub_1E160
retn    2
sub_1DC39 endp




sub_1DC4A proc near
call    sub_1E13A
jb      short loc_1DC59
push    word ptr [bx+10h]
mov     ax, [bp+4]
mov     [bx+10h], ax
pop     ax

loc_1DC59:
call    sub_1E160
retn    2
sub_1DC4A endp




sub_1DC5F proc near
call    sub_1E13A
jb      short loc_1DC6A
call    sub_1DC8B
call    sub_1E53F

loc_1DC6A:
call    sub_1E160
retn    2
sub_1DC5F endp

push    bx

loc_1DC71:
cmp     word ptr [bx+12h], 0
jz      short loc_1DC82
mov     bx, [bx+14h]
cmp     bx, 30h ; '0'
jnz     short loc_1DC71
clc
jmp     short loc_1DC89

loc_1DC82:
mov     word ptr ds:4, 0Bh
stc

loc_1DC89:
pop     bx
retn



sub_1DC8B proc near
push    si
push    di
mov     si, 30h ; '0'
cmp     bx, ds:14h
jz      short loc_1DCC8
mov     di, [bx+14h]
mov     ax, [bx+16h]
mov     [di+16h], ax
cmp     ax, si
jnz     short loc_1DCAC
mov     ds:16h, di
mov     [si+14h], di
jmp     short loc_1DCB1

loc_1DCAC:
mov     si, ax
mov     [si+14h], di

loc_1DCB1:
mov     si, ds:14h
mov     [si+14h], bx
mov     [bx+16h], si
mov     di, 30h ; '0'
mov     [bx+14h], di
mov     ds:14h, bx
mov     [di+16h], bx

loc_1DCC8:
pop     di
pop     si
retn
sub_1DC8B endp




sub_1DCCB proc near
call    sub_1E13A
jb      short loc_1DCDF
mov     ax, [bp+4]
mov     [bx+0Eh], ax
cmp     bx, ds:2
jnz     short loc_1DCDF
call    sub_1E853

loc_1DCDF:
call    sub_1E160
retn    2
sub_1DCCB endp




sub_1DCE5 proc near
call    sub_1E13A
jb      short loc_1DD06
cmp     byte ptr [bx+20h], 1
jnz     short loc_1DD06
cmp     byte ptr [bp+4], 0
jnz     short loc_1DCFE
xor     al, al
push    ax
call    sub_1E5E9
jmp     short loc_1DD06

loc_1DCFE:
call    sub_1E70E
jb      short loc_1DD06
call    sub_1E687

loc_1DD06:
call    sub_1E160
retn    2
sub_1DCE5 endp




sub_1DD0C proc near
call    sub_1E13A
jb      short loc_1DD2A
mov     ax, ds:26h
or      ah, ah
jz      short loc_1DD2A
mov     bl, [bp+4]
cmp     bl, 2
jz      short loc_1DD26
mov     ds:26h, bl
jmp     short loc_1DD2A

loc_1DD26:
mov     ds:26h, ah

loc_1DD2A:
xor     ah, ah
call    sub_1E160
retn    2
sub_1DD0C endp




sub_1DD32 proc near
call    sub_1E13A
jb      short loc_1DD3C
mov     al, ds:26h
xor     ah, ah

loc_1DD3C:
call    sub_1E160
retn
sub_1DD32 endp



; Attributes: bp-based frame

sub_1DD40 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
call    sub_1E10B
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
les     di, [bp+arg_0]
call    sub_1DF8A
mov     al, byte_539CE
mov     es:[di+0A1h], al
mov     ax, word_539CC
mov     es:[di+6], ax
mov     ax, word_539CA
mov     es:[di+2], ax
mov     ax, word_539C8
mov     es:[di+4], ax
mov     ax, word_539C6
mov     es:[di], ax
or      ax, ax
jz      short loc_1DD7D
call    sub_1DEF2
jmp     short loc_1DDC2

loc_1DD7D:
mov     cx, 4
lea     si, byte_53984

loc_1DD84:
cld
lodsb
test    al, al
lodsw
jz      short loc_1DD91
push    si
push    cx
call    ax
pop     cx
pop     si

loc_1DD91:
loop    loc_1DD84
call    sub_1DEF2
call    sub_1DF29
call    sub_1DF4E
call    sub_1DFA3
mov     ax, es:[di]
mov     word_539C6, ax
mov     ax, es:[di+4]
mov     word_539C8, ax
mov     ax, es:[di+2]
mov     word_539CA, ax
mov     ax, es:[di+6]
mov     word_539CC, ax
mov     al, es:[di+0A1h]
mov     byte_539CE, al

loc_1DDC2:
call    sub_1DFE1
call    sub_1E118
pop     bp
retn    4
sub_1DD40 endp




sub_1DDCC proc near
push    si
lea     si, [di]
cmp     byte ptr es:[si], 0
jz      short loc_1DDD8
lea     si, [di+4]

loc_1DDD8:
mov     es:[si], ax
mov     es:[si+2], bx
pop     si
retn
sub_1DDCC endp

mov     ax, 1A00h
int     10h             ; - VIDEO - DISPLAY COMBINATION (PS,VGA/MCGA): read display combination code
cmp     al, 1Ah
jnz     short loc_1DE47
mov     cx, bx
mov     bh, 0
or      ch, ch
jz      short loc_1DE0C
mov     bl, ch
shl     bx, 1
shl     bx, 1
mov     ax, [bx-7F60h]
mov     es:[di+4], ax
mov     ax, [bx-7F5Eh]
mov     es:[di+6], ax
mov     bl, cl
mov     bh, 0

loc_1DE0C:
shl     bx, 1
shl     bx, 1
mov     ax, [bx-7F60h]
mov     es:[di], ax
mov     ax, [bx-7F5Eh]
mov     es:[di+2], ax
mov     al, 0
mov     byte_5398A, al
mov     byte_53987, al
mov     byte_5398D, al
lea     bx, [di]
test    word ptr es:[bx], 1
jnz     short loc_1DE3D
lea     bx, [di+4]
test    word ptr es:[bx], 1
jz      short loc_1DE47

loc_1DE3D:
mov     word ptr es:[bx], 0
mov     byte_5398D, 0FFh

loc_1DE47:
mov     byte_53984, 0
retn
mov     bl, 10h
mov     ah, 12h
int     10h             ; - VIDEO - ALTERNATE FUNCTION SELECT (PS, EGA, VGA, MCGA) - GET EGA INFO
                        ; Return: BH = 00h color mode in effect CH = feature bits, CL = switch settings
cmp     bl, 10h
jz      short loc_1DE7C
mov     ax, 4
lea     bx, unk_53944
and     cx, 0FEh
add     bx, cx
mov     bx, [bx]
call    sub_1DDCC
test    bx, 1
jnz     short loc_1DE77
mov     byte_5398A, 0
jmp     short loc_1DE7C

loc_1DE77:
mov     byte_5398D, 0

loc_1DE7C:
mov     byte_53987, 0
retn
mov     dx, 3D4h
call    sub_1DED8
jb      short loc_1DE93
mov     ax, 2
mov     bx, 2
call    sub_1DDCC

loc_1DE93:
mov     byte_5398A, 0
retn
mov     dx, 3B4h
call    sub_1DED8
jb      short loc_1DED2
mov     cx, 0FFFFh
call    sub_1E0D2
jcxz    short loc_1DEC9
mov     dl, 0BAh
in      al, dx
mov     cl, al
and     cl, 70h
mov     ax, 141h
mov     bx, 4
cmp     cl, 50h ; 'P'
jz      short loc_1DECF
mov     ax, 0C1h
cmp     cl, 10h
jz      short loc_1DECC
mov     ax, 41h ; 'A'
jmp     short loc_1DECC

loc_1DEC9:
mov     ax, 1

loc_1DECC:
mov     bx, 1

loc_1DECF:
call    sub_1DDCC

loc_1DED2:
mov     byte_5398D, 0
retn



sub_1DED8 proc near
mov     al, 0Fh
out     dx, al
inc     dx
in      al, dx
mov     ah, al
mov     al, 66h ; 'f'
out     dx, al
mov     cx, 100h

loc_1DEE5:
loop    loc_1DEE5
in      al, dx
xchg    ah, al
out     dx, al
cmp     ah, 66h ; 'f'
jz      short locret_1DEF1
stc

locret_1DEF1:
retn
sub_1DED8 endp




sub_1DEF2 proc near
cmp     word ptr es:[di+4], 0
jz      short locret_1DF28
cmp     byte ptr es:[di+6Bh], 0B4h
jz      short loc_1DF0A
test    word ptr es:[di+2], 1
jz      short locret_1DF28
jmp     short loc_1DF12

loc_1DF0A:
test    word ptr es:[di+2], 1
jnz     short locret_1DF28

loc_1DF12:
mov     ax, es:[di]
xchg    ax, es:[di+4]
mov     es:[di], ax
mov     ax, es:[di+2]
xchg    ax, es:[di+6]
mov     es:[di+2], ax

locret_1DF28:
retn
sub_1DEF2 endp




sub_1DF29 proc near
cmp     word ptr es:[di+4], 0
jz      short locret_1DF4D
mov     dx, 3B4h
test    word ptr es:[di+6], 1
jnz     short loc_1DF3E
mov     dx, 3D4h

loc_1DF3E:
call    sub_1DED8
jnb     short locret_1DF4D
xor     ax, ax
mov     es:[di+4], ax
mov     es:[di+6], ax

locret_1DF4D:
retn
sub_1DF29 endp




sub_1DF4E proc near
lea     bx, [di]
call    sub_1DF5A
lea     bx, [di+4]
call    sub_1DF5A
retn
sub_1DF4E endp




sub_1DF5A proc near
test    word ptr es:[bx], 4
jz      short loc_1DF6F
lea     ax, unk_53990
call    sub_1E0BA
mov     ax, 20h ; ' '
jz      short loc_1DF86
jmp     short locret_1DF89

loc_1DF6F:
test    word ptr es:[bx], 10h
jz      short locret_1DF89
push    bx
mov     ax, 6F00h
int     10h             ; - VIDEO - INSTALLATION CHECK (Video7 VGA,VEGA VGA)
                        ; Return: BX = 5637h ('V7') indicates Video7 VGA/VEGA VGA extensions are present
cmp     bx, 5637h
mov     ax, 200h
pop     bx
jnz     short locret_1DF89

loc_1DF86:
or      es:[bx], ax

locret_1DF89:
retn
sub_1DF5A endp




sub_1DF8A proc near
push    si
push    di
push    ds
xor     si, si
mov     ds, si
assume ds:nothing
mov     si, 400h
lea     di, [di+8]
mov     cx, 90h
shr     cx, 1
cld
rep movsw
pop     ds
assume ds:nothing
pop     di
pop     si
retn
sub_1DF8A endp




sub_1DFA3 proc near
push    di
push    es
les     di, ds:80EFh
mov     al, es:[di]
push    ds
pop     es
lea     di, ds:80F3h
mov     cx, 8
repne scasb
dec     di
lea     ax, ds:80F3h
sub     di, ax
shl     di, 1
mov     ax, [di-7F05h]
cmp     al, 10h
jz      short loc_1DFD9
cmp     al, 30h ; '0'
jz      short loc_1DFD9
push    ax
lea     ax, ds:810Bh
call    sub_1E0BA
pop     ax
jnz     short loc_1DFD9
mov     al, 10h

loc_1DFD9:
pop     es
pop     di
mov     es:[di+0A1h], al
retn
sub_1DFA3 endp




sub_1DFE1 proc near
push    ds
push    es
pop     ds
pop     es
mov     al, 19h
test    word ptr [di], 1Ch
jz      short loc_1E01D
push    ax
push    di
push    bp
push    es
mov     ax, 1130h
mov     bh, 0
mov     dl, 0FFh
int     10h             ; - VIDEO - TEXT-MODE CHARACTER GENERATOR FUNCTIONS (PS, EGA, VGA)
                        ; AL = 00h, 10h: load user-specified patterns
                        ; AL = 01h, 11h: load ROM monochrome patterns (8 by 14)
                        ; AL = 02h, 12h: load ROM 8 by 8 double-dot patterns
                        ; AL = 03h: set block specifier
pop     es
pop     bp
pop     di
pop     ax
inc     dl
jz      short loc_1E01D
mov     al, dl
push    ax
mul     cl
mov     cx, 0C8h
cmp     ax, cx
jbe     short loc_1E018
mov     cx, 15Eh
cmp     ax, cx
jbe     short loc_1E018
mov     cx, 190h

loc_1E018:
mov     [di+9Eh], cx
pop     ax

loc_1E01D:
mov     [di+9Bh], al
mov     ax, [di]
test    ax, 200h
jz      short loc_1E02F
mov     ax, 6F04h
int     10h             ; - VIDEO - GET MODE AND SCREEN RESOLUTION (Video7 VGA, VEGA VGA)
                        ; Return: AL = current video mode
                        ; BX = horizontal columns (text) or pixels (graphics)
                        ; CX = vertical columns (text) or pixels (graphics)
jmp     short loc_1E061

loc_1E02F:
test    ax, 20h
jz      short loc_1E053
mov     al, [di+51h]
cmp     al, 4
jb      short loc_1E03F
cmp     al, 7
jnz     short loc_1E053

loc_1E03F:
cmp     byte ptr [di+8Ch], 2Ch ; ','
jnz     short loc_1E048
or      al, 10h

loc_1E048:
cmp     word ptr [di+52h], 84h
jnz     short loc_1E061
or      al, 20h
jmp     short loc_1E061

loc_1E053:
mov     al, [di+51h]
and     al, 7Fh
test    word ptr [di], 40h
jz      short loc_1E061
call    sub_1E0A8

loc_1E061:
mov     [di+9Ah], al
mov     ah, 0
mov     bx, 0B000h
cmp     byte ptr [di+6Bh], 0B4h
jz      short loc_1E07E
mov     bh, 0B8h
mov     ah, 2
cmp     al, 0
jz      short loc_1E07E
cmp     al, 2
jz      short loc_1E07E
mov     ah, 1

loc_1E07E:
mov     [di+0A0h], ah
mov     [di+98h], bx
mov     al, 0
test    word ptr [di], 2
jz      short loc_1E097
test    byte ptr [di+0A1h], 10h
jnz     short loc_1E097
mov     al, 0FFh

loc_1E097:
mov     [di+0A2h], al
mov     ax, [di+68h]
mov     dx, [di]
call    sub_1E85C
mov     [di+9Ch], ax
retn
sub_1DFE1 endp




sub_1E0A8 proc near
mov     ax, 40h ; '@'
mov     es, ax
assume es:nothing
mov     al, es:65h
test    al, 2
mov     al, 0Fh
jnz     short locret_1E0B9
mov     al, 7

locret_1E0B9:
retn
sub_1E0A8 endp




sub_1E0BA proc near
push    si
push    di
push    es
mov     di, ax
les     di, [di]
assume es:nothing
mov     si, ax
add     si, 4

loc_1E0C6:
cmp     byte ptr [si], 0
jz      short loc_1E0CE
cmpsb
jz      short loc_1E0C6

loc_1E0CE:
pop     es
pop     di
pop     si
retn
sub_1E0BA endp




sub_1E0D2 proc near
push    si
mov     dx, 3BAh
mov     si, cx
xor     bx, bx

loc_1E0DA:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
test    al, 80h
loopne  loc_1E0DA
jnz     short loc_1E0F4
mov     cx, si
cli

loc_1E0E4:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
inc     bx
test    al, 80h
loope   loc_1E0E4
jz      short loc_1E0F4
mov     cx, si

loc_1E0EE:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
inc     bx
test    al, 80h
loopne  loc_1E0EE

loc_1E0F4:
sti
pop     si
retn
sub_1E0D2 endp

db 24h, 2Ah, 24h, 2Ah, 24h, 2Ah, 1, 2, 7
db 1, 57h, 49h, 4Eh, 4Dh, 41h, 4Eh, 0, 1
db 2 dup(0)



sub_1E10B proc near
push    cx
push    dx
push    si
push    di
push    ds
push    es
push    word ptr [bp-2]
mov     [bp-2], bx
retn
sub_1E10B endp ; sp-analysis failed




sub_1E118 proc near
pop     cx
mov     bx, [bp-2]
mov     [bp-2], cx
pop     es
pop     ds
pop     di
pop     si
pop     dx
pop     cx
retn
sub_1E118 endp ; sp-analysis failed




sub_1E126 proc near
push    bx
push    ds
pop     es
call    $+3

loc_1E12C:
pop     bx
sub     bx, (offset loc_1E12C - offset start)
mov     ds, word ptr cs:(loc_2E108+1 - 0FFFF2360h)[bx]
mov     ax, bx
pop     bx
retn
sub_1E126 endp




sub_1E13A proc near
pop     ax
push    bp
mov     bp, sp
push    si
push    di
push    ds
push    ax
cld
call    sub_1E126
push    ax
mov     ax, ds
or      ax, ax
jnz     short loc_1E150
stc
jmp     short loc_1E15E

loc_1E150:
mov     byte ptr ds:21h, 3
inc     byte ptr ds:20h
mov     bx, ds:0
clc

loc_1E15E:
pop     ax
retn
sub_1E13A endp ; sp-analysis failed




sub_1E160 proc near
pushf
push    ax
mov     ax, ds
or      ax, ax
jz      short loc_1E1A4
dec     byte ptr ds:20h
jnz     short loc_1E1A4
cmp     word ptr ds:1Ch, 0
jnz     short loc_1E17C
cmp     word ptr ds:1Eh, 0
jz      short loc_1E1A4

loc_1E17C:
inc     byte ptr ds:20h
push    bx
push    cx
push    dx
push    bp
push    si
push    di
push    ds
push    es
call    dword ptr ds:1Ch
pop     es
pop     ds
pop     di
pop     si
pop     bp
pop     dx
pop     cx
pop     bx
dec     byte ptr ds:20h
mov     word ptr ds:1Ch, 0
mov     word ptr ds:1Eh, 0

loc_1E1A4:
pop     ax
popf
pop     cx
pop     ds
pop     di
pop     si
pop     bp
push    cx
retn
sub_1E160 endp ; sp-analysis failed




sub_1E1AD proc near
cmp     bx, ds:2
jz      short loc_1E1B8
mov     ax, [bx+0Ch]
jmp     short locret_1E1BE

loc_1E1B8:
call    sub_1E821
mov     [bx+0Ch], ax

locret_1E1BE:
retn
sub_1E1AD endp




sub_1E1BF proc near
cmp     bx, ds:2
jz      short loc_1E1CA
mov     ax, [bx+0Eh]
jmp     short locret_1E1D0

loc_1E1CA:
call    sub_1E830
mov     [bx+0Eh], ax

locret_1E1D0:
retn
sub_1E1BF endp




sub_1E1D1 proc near
push    cx
mov     cl, al
cmp     cl, 0
jnz     short loc_1E1E1
call    sub_1E1BF
or      ax, 2000h
jmp     short loc_1E21A

loc_1E1E1:
mov     ax, 7
cmp     word ptr ds:24h, 3B4h
jnz     short loc_1E1F7
mov     al, 0Dh
cmp     byte ptr ds:29h, 19h
jz      short loc_1E1F7
mov     al, 7

loc_1E1F7:
cmp     cl, 2
jz      short loc_1E21A
mov     ah, al
dec     ah
cmp     byte ptr ds:29h, 19h
jz      short loc_1E21A
test    word ptr ds:22h, 4
jz      short loc_1E21A
test    word ptr ds:22h, 20h
jnz     short loc_1E21A
mov     ax, 600h

loc_1E21A:
pop     cx
retn
sub_1E1D1 endp




sub_1E21C proc near
sub     sp, 0F0h
push    bp
mov     bp, sp
call    sub_1E10B
mov     dl, [bx+2]
sub     dl, [bx]
inc     dl
push    ss
pop     es
lea     di, [bp+52h]
mov     al, [bx]
mov     ah, 0
shl     ax, 1
add     di, ax
mov     al, [bx+4]
mul     byte ptr ds:2Bh
push    ds
lds     si, ds:2Ch
add     si, ax
mov     al, [si+4]
pop     ds
mov     ah, [bx+5]
mov     cl, dl
mov     ch, 0
rep stosw
push    ds
lds     si, [bp+0F4h]
push    ss
pop     es
lea     di, [bp+2]
push    es
push    ds
pop     es
xchg    si, di
push    di
mov     al, 0
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
mov     ax, di
sub     ax, cx
mov     di, cx
xchg    si, di
pop     es
or      ax, ax
jz      short loc_1E295
mov     cx, ax
cmp     cx, 50h ; 'P'
jb      short loc_1E285
mov     cx, 50h ; 'P'

loc_1E285:
mov     ax, cx
rep movsb
cmp     al, 50h ; 'P'
jbe     short loc_1E28F
mov     al, 50h ; 'P'

loc_1E28F:
cmp     al, dl
jbe     short loc_1E295
mov     al, dl

loc_1E295:
pop     ds
mov     [bx+0Ah], al
mov     cx, ax
jcxz    short loc_1E2BB
neg     al
add     al, dl
shr     ax, 1
add     al, [bx]
shl     ax, 1
lea     di, [bp+52h]
add     di, ax
push    ds
push    ss
pop     ds
lea     si, [bp+2]
mov     al, [bp+0F8h]

loc_1E2B6:
movsb
stosb
loop    loc_1E2B6
pop     ds

loc_1E2BB:
push    ss
lea     ax, [bp+52h]
push    ax
push    word ptr [bx+2]
push    word ptr [bx]
push    word ptr [bx+7]
call    sub_1E2DA
call    sub_1E118
pop     bp
add     sp, 0F0h
retn    6
sub_1E21C endp




sub_1E2D6 proc near
mov     al, 1
jmp     short loc_1E2DC
sub_1E2D6 endp




sub_1E2DA proc near
mov     al, 0

loc_1E2DC:
sub     sp, 8
push    bp
mov     bp, sp
call    sub_1E10B
mov     [bp+4], al
mov     al, [bp+10h]
sub     al, [bp+0Eh]
inc     al
mov     [bp+8], al
cmp     byte ptr [bx+20h], 1
jnz     short loc_1E301
mov     cl, [bp+8]
call    sub_1E364
jmp     short loc_1E35A

loc_1E301:
mov     al, [bp+0Ch]
mov     dl, [bp+0Eh]
mov     cl, [bp+8]
call    sub_1E3D8
mov     [bp+6], dl
or      al, al
jnz     short loc_1E339
push    dx
mov     al, [bp+0Eh]
mov     ah, 0
shl     ax, 1
les     di, [bp+12h]
add     ax, di
push    es
push    ax
push    word ptr [bp+0Eh]
push    word ptr [bp+0Ch]
cmp     byte ptr [bp+4], 1
jz      short loc_1E334
call    sub_1E733
jmp     short loc_1E348

loc_1E334:
call    sub_1E778
jmp     short loc_1E348

loc_1E339:
mov     cl, 22h ; '"'
mul     cl
add     ax, 30h ; '0'
mov     bx, ax
mov     cl, [bp+6]
call    sub_1E364

loc_1E348:
mov     al, [bp+6]
mov     cl, [bp+8]
sub     cl, al
jle     short loc_1E35A
mov     [bp+8], cl
add     [bp+0Eh], al
jmp     short loc_1E301

loc_1E35A:
call    sub_1E118
pop     bp
add     sp, 8
retn    0Ah
sub_1E2DA endp




sub_1E364 proc near
mov     al, ds:21h
mov     [bp+2], al
mov     ch, 0
mov     al, [bp+0Ch]
sub     al, [bx+7]
mov     dl, [bx+8]
sub     dl, [bx+6]
inc     dl
mul     dl
mov     dl, [bp+0Eh]
sub     dl, [bx+6]
mov     dh, 0
add     ax, dx
shl     ax, 1
mov     si, [bx+12h]
add     si, ax
mov     dl, [bp+0Eh]
shl     dx, 1
les     di, [bp+12h]
add     di, dx
cmp     byte ptr [bp+4], 1
jz      short loc_1E3A3
xchg    si, di
push    ds
push    es
pop     ds
pop     es

loc_1E3A3:
test    byte ptr [bp+2], 1
jz      short loc_1E3B3
test    byte ptr [bp+2], 2
jz      short loc_1E3BB
rep movsw
jmp     short loc_1E3C1

loc_1E3B3:
call    sub_1E3CE
movsb
loop    loc_1E3B3
jmp     short loc_1E3C1

loc_1E3BB:
movsb
call    sub_1E3CE
loop    loc_1E3BB

loc_1E3C1:
cmp     byte ptr [bp+4], 1
jz      short locret_1E3CD
xchg    si, di
push    ds
push    es
pop     ds
pop     es

locret_1E3CD:
retn
sub_1E364 endp




sub_1E3CE proc near
cmp     byte ptr [bp+4], 1
jz      short loc_1E3D6
inc     di
retn

loc_1E3D6:
inc     si
retn
sub_1E3CE endp




sub_1E3D8 proc near
mov     dl, cl
mov     dh, 0
mov     al, 0
retn
sub_1E3D8 endp




sub_1E3DF proc near
sub     sp, 0A0h
push    bp
mov     bp, sp
call    sub_1E10B
mov     al, [bx+4]
cmp     al, 0
jnz     short loc_1E3F3
jmp     loc_1E4E1

loc_1E3F3:
mul     byte ptr ds:2Bh
add     ax, ds:2Ch
mov     si, ax
push    ds
mov     ds, word ptr ds:2Eh
mov     al, [si+2]
mov     ah, [si+3]
pop     ds
push    ax
mov     cl, [bx+6]
call    sub_1E4EA
pop     ax
mov     al, ah
mov     cl, [bx+8]
call    sub_1E4EA
lea     di, [bp+2]
mov     dl, [bx]
mov     dh, 0
add     di, dx
add     di, dx
mov     cl, [bx+2]
mov     ch, 0
sub     cx, dx
inc     cx
push    ds
mov     ds, word ptr ds:2Eh
mov     al, [si+4]
pop     ds
mov     ah, [bx+5]
push    ss
pop     es
rep stosw
lea     ax, [bp+2]
push    ss
push    ax
push    word ptr [bx+8]
push    word ptr [bx+6]
push    word ptr [bx+9]
call    sub_1E2DA
push    ds
mov     ds, word ptr ds:2Eh
mov     al, [si]
mov     ah, [si+1]
pop     ds
push    ax
mov     cl, [bx+6]
call    sub_1E4EA
pop     ax
mov     al, ah
mov     cl, [bx+8]
call    sub_1E4EA
mov     al, [bx+2]
mov     cl, [bx]
mov     ch, [bx+0Ah]
sub     al, cl
inc     al
sub     al, ch
shr     al, 1
add     cl, al
add     ch, cl
dec     ch
lea     ax, [bp+2]
push    ss
push    ax
dec     cl
push    cx
push    word ptr [bx+6]
push    word ptr [bx+7]
call    sub_1E2DA
lea     ax, [bp+2]
push    ss
push    ax
push    word ptr [bx+8]
inc     ch
xchg    cl, ch
push    cx
push    word ptr [bx+7]
call    sub_1E2DA
mov     dl, [bx+1]
push    ds
mov     ds, word ptr ds:2Eh
mov     dh, [si+5]
pop     ds

loc_1E4AE:
cmp     dl, [bx+3]
ja      short loc_1E4E1
mov     al, dh
mov     cl, [bx+6]
call    sub_1E4EA
mov     cl, [bx+8]
call    sub_1E4EA
lea     ax, [bp+2]
push    ss
push    ax
mov     al, [bx+6]
push    ax
push    ax
push    dx
call    sub_1E2DA
lea     ax, [bp+2]
push    ss
push    ax
mov     al, [bx+8]
push    ax
push    ax
push    dx
call    sub_1E2DA
inc     dl
jmp     short loc_1E4AE

loc_1E4E1:
call    sub_1E118
pop     bp
add     sp, 0A0h
retn
sub_1E3DF endp




sub_1E4EA proc near
lea     di, [bp+2]
mov     ch, 0
shl     cx, 1
add     di, cx
mov     ah, [bx+5]
mov     ss:[di], ax
retn
sub_1E4EA endp



; Attributes: bp-based frame

sub_1E4FA proc near
push    bp
mov     bp, sp
call    sub_1E10B
mov     si, 30h ; '0'
cmp     [bx+16h], si
jnz     short loc_1E513
mov     ax, [bx+14h]
mov     ds:16h, ax
mov     [si+14h], ax
jmp     short loc_1E51C

loc_1E513:
mov     di, [bx+16h]
mov     ax, [bx+14h]
mov     [di+14h], ax

loc_1E51C:
cmp     word ptr [bx+14h], 30h ; '0'
jnz     short loc_1E52D
mov     ax, [bx+16h]
mov     ds:14h, ax
mov     [si+16h], ax
jmp     short loc_1E536

loc_1E52D:
mov     di, [bx+14h]
mov     ax, [bx+16h]
mov     [di+16h], ax

loc_1E536:
mov     byte ptr [bx+20h], 0
call    sub_1E118
pop     bp
retn
sub_1E4FA endp




sub_1E53F proc near
push    si
mov     bx, ds:2
mov     si, ds:14h

loc_1E548:
cmp     si, 30h ; '0'
jz      short loc_1E558
cmp     byte ptr [si+20h], 2
jz      short loc_1E558
mov     si, [si+16h]
jmp     short loc_1E548

loc_1E558:
cmp     bx, si
jz      short loc_1E577
call    sub_1E1AD
call    sub_1E830
mov     [bx+0Eh], ax
mov     bx, si
mov     ds:2, bx
mov     ax, [bx+0Ch]
call    sub_1E846
mov     ax, [bx+0Eh]
call    sub_1E853

loc_1E577:
pop     si
retn
sub_1E53F endp




sub_1E579 proc near
sub     sp, 0A2h
push    bp
mov     bp, sp
call    sub_1E10B
mov     cl, [bx+8]
mov     ch, 0
mov     dl, [bx+6]
mov     dh, 0
sub     cx, dx
inc     cx
mov     si, [bx+12h]
mov     al, [bx+7]
mov     [bp+2], al

loc_1E599:
mov     al, [bp+2]
cmp     al, [bx+9]
ja      short loc_1E5E0
lea     ax, [bp+4]
push    ss
push    ax
push    word ptr [bx+8]
push    dx
push    word ptr [bp+2]
call    sub_1E2D6
mov     ax, si
sub     ax, dx
sub     ax, dx
push    ds
push    ax
push    word ptr [bx+8]
push    dx
push    word ptr [bp+2]
call    sub_1E2DA
lea     di, [bp+4]
add     di, dx
add     di, dx
xchg    si, di
push    ds
push    ss
pop     ds
pop     es
push    cx
push    di
rep movsw
pop     si
pop     cx
push    es
pop     ds
add     si, cx
add     si, cx
inc     byte ptr [bp+2]
jmp     short loc_1E599

loc_1E5E0:
call    sub_1E118
pop     bp
add     sp, 0A2h
retn
sub_1E579 endp



; Attributes: bp-based frame

sub_1E5E9 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
call    sub_1E10B
mov     dl, [bx+8]
mov     dh, 0
mov     cl, [bx+6]
mov     ch, 0
sub     dx, cx
inc     dx
mov     al, [bx+7]
mul     byte ptr ds:28h
add     ax, cx
shl     ax, 1
mov     di, ax
mov     es, word ptr ds:0Ch
mov     cl, [bx+9]
sub     cl, [bx+7]
inc     cl
mov     ch, 0
mov     al, ds:28h
mov     ah, 0
shl     ax, 1
mov     si, [bx+12h]
cmp     [bp+arg_0], 0
jz      short loc_1E64E

loc_1E627:
mov     byte ptr [bx+20h], 1
or      si, si
jz      short loc_1E67D
push    bp
mov     bp, ds:21h
or      bp, 4
push    ax
push    cx
mov     cx, dx
cmp     byte ptr ds:26h, 0
push    di
call    sub_1E7BD
pop     di
pop     cx
pop     ax
pop     bp
add     di, ax
loop    loc_1E627
jmp     short loc_1E67D

loc_1E64E:
mov     byte ptr [bx+20h], 2
or      si, si
jz      short loc_1E67D
push    es
push    ds
pop     es
pop     ds
xchg    si, di

loc_1E65C:
push    bp
mov     bp, es:21h
or      bp, 8
push    ax
push    cx
mov     cx, dx
cmp     byte ptr es:26h, 0
push    si
call    sub_1E7BD
pop     si
pop     cx
pop     ax
pop     bp
add     si, ax
loop    loc_1E65C
push    es
pop     ds

loc_1E67D:
call    sub_1E53F
call    sub_1E118
pop     bp
retn    2
sub_1E5E9 endp




sub_1E687 proc near
cmp     byte ptr [bx+20h], 2
jz      short locret_1E697
mov     byte ptr [bx+20h], 2
call    sub_1E579
call    sub_1E53F

locret_1E697:
retn
sub_1E687 endp




sub_1E698 proc near
cmp     byte ptr [bx+20h], 1
jz      short locret_1E6A8
call    sub_1E579
mov     byte ptr [bx+20h], 1
call    sub_1E53F

locret_1E6A8:
retn
sub_1E698 endp




sub_1E6A9 proc near
sub     sp, 0A0h
push    bp
mov     bp, sp
call    sub_1E10B
mov     al, 20h ; ' '
mov     ah, [bx+0Bh]
mov     cx, 50h ; 'P'
push    ss
pop     es
lea     di, [bp+2]
push    di
rep stosw
pop     di
mov     cl, [bx+3]
mov     dl, [bx+1]
sub     cl, dl
inc     cl
mov     ch, 0

loc_1E6D0:
push    ss
push    di
push    word ptr [bx+2]
push    word ptr [bx]
push    dx
call    sub_1E2DA
inc     dl
loop    loc_1E6D0
mov     ax, [bx]
mov     [bx+0Ch], ax
cmp     bx, ds:2
jnz     short loc_1E6ED
call    sub_1E846

loc_1E6ED:
call    sub_1E118
pop     bp
add     sp, 0A0h
retn
sub_1E6A9 endp




sub_1E6F6 proc near
jb      short locret_1E70B
cmp     byte ptr [bx+20h], 1
jnz     short locret_1E70B
cmp     word ptr [bx+12h], 0
jnz     short locret_1E70B
mov     word ptr ds:4, 0Bh
stc

locret_1E70B:
retn
sub_1E6F6 endp

jb      short locret_1E71B



sub_1E70E proc near
cmp     word ptr [bx+12h], 0
jnz     short locret_1E71B
mov     word ptr ds:4, 0Bh
stc

locret_1E71B:
retn
sub_1E70E endp




sub_1E71C proc near
mov     ds:2, bx
mov     ds:14h, bx
mov     ds:16h, bx
mov     ds:0, bx
mov     [bx+14h], bx
mov     [bx+16h], bx
retn
sub_1E71C endp




sub_1E733 proc near
dec     sp
dec     sp
push    bp
mov     bp, sp
push    cx
push    si
push    di
push    ds
push    es
mov     cx, [bp+0Eh]
jcxz    short loc_1E76D
mov     al, ds:21h
or      al, 4
mov     [bp+2], ax
mov     es, word ptr ds:0Ch
mov     al, [bp+6]
mul     byte ptr ds:28h
add     al, [bp+8]
adc     ah, 0
shl     ax, 1
mov     di, ax
cmp     byte ptr ds:26h, 0
lds     si, [bp+0Ah]
mov     bp, [bp+2]
call    sub_1E7BD

loc_1E76D:
pop     es
pop     ds
pop     di
pop     si
pop     cx
pop     bp
inc     sp
inc     sp
retn    0Ah
sub_1E733 endp




sub_1E778 proc near
dec     sp
dec     sp
push    bp
mov     bp, sp
push    cx
push    si
push    di
push    ds
push    es
mov     cx, [bp+0Eh]
jcxz    short loc_1E7B2
mov     al, ds:21h
or      al, 8
mov     [bp+2], ax
les     di, [bp+0Ah]
mov     al, [bp+6]
mul     byte ptr ds:28h
add     al, [bp+8]
adc     ah, 0
shl     ax, 1
mov     si, ax
cmp     byte ptr ds:26h, 0
mov     ds, word ptr ds:0Ch
mov     bp, [bp+2]
call    sub_1E7BD

loc_1E7B2:
pop     es
pop     ds
pop     di
pop     si
pop     cx
pop     bp
inc     sp
inc     sp
retn    0Ah
sub_1E778 endp




sub_1E7BD proc near

; FUNCTION CHUNK AT E7FF SIZE 00000022 BYTES

push    dx
jnz     short loc_1E7D0
test    bp, 1
jz      short loc_1E7FF
test    bp, 2
jz      short loc_1E802
rep movsw
jmp     short loc_1E81F

loc_1E7D0:
mov     dx, 3DAh
test    bp, 1
jz      short loc_1E80A
test    bp, 2
jz      short loc_1E80D

loc_1E7DF:
cli

loc_1E7E0:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
ror     al, 1
jb      short loc_1E7E0

loc_1E7E5:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
ror     al, 1
jnb     short loc_1E7E5
movsw
sti
loop    loc_1E7DF
jmp     short loc_1E81F
sub_1E7BD endp




sub_1E7F0 proc near
test    bp, 8
jz      short loc_1E7F7
inc     si

loc_1E7F7:
test    bp, 4
jz      short locret_1E7FE
inc     di

locret_1E7FE:
retn
sub_1E7F0 endp

; START OF FUNCTION CHUNK FOR sub_1E7BD

loc_1E7FF:
call    sub_1E7F0

loc_1E802:
movsb
call    sub_1E7F0
loop    loc_1E802
jmp     short loc_1E81F

loc_1E80A:
call    sub_1E7F0

loc_1E80D:
cli

loc_1E80E:
in      al, dx
ror     al, 1
jb      short loc_1E80E

loc_1E813:
in      al, dx
ror     al, 1
jnb     short loc_1E813
movsb
sti
call    sub_1E7F0
loop    loc_1E80D

loc_1E81F:
pop     dx
retn
; END OF FUNCTION CHUNK FOR sub_1E7BD



sub_1E821 proc near
push    bx
push    cx
push    dx
mov     ah, 3
mov     bh, 0
int     10h             ; - VIDEO - READ CURSOR POSITION
                        ; BH = page number
                        ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
mov     ax, dx
pop     dx
pop     cx
pop     bx
retn
sub_1E821 endp




sub_1E830 proc near
push    bx
push    cx
push    dx
mov     ah, 3
mov     bh, 0
int     10h             ; - VIDEO - READ CURSOR POSITION
                        ; BH = page number
                        ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
mov     ax, cx
mov     dx, ds:22h
call    sub_1E85C
pop     dx
pop     cx
pop     bx
retn
sub_1E830 endp




sub_1E846 proc near
push    bx
push    dx
mov     dx, ax
mov     ah, 2
mov     bh, 0
int     10h             ; - VIDEO - SET CURSOR POSITION
                        ; DH,DL = row, column (0,0 = upper left)
                        ; BH = page number
pop     dx
pop     bx
retn
sub_1E846 endp




sub_1E853 proc near
push    cx
mov     cx, ax
mov     ah, 1
int     10h             ; - VIDEO - SET CURSOR CHARACTERISTICS
                        ; CH bits 0-4 = start line for cursor in character cell
                        ; bits 5-6 = blink attribute
                        ; CL bits 0-4 = end line for cursor in character cell
pop     cx
retn
sub_1E853 endp




sub_1E85C proc near
test    dx, 1
jz      short loc_1E86C
cmp     ax, 607h
jnz     short locret_1E87A
mov     ax, 0B0Ch
jmp     short locret_1E87A

loc_1E86C:
test    dx, 2
jz      short locret_1E87A
cmp     ax, 67h ; 'g'
jnz     short locret_1E87A
mov     ax, 607h

locret_1E87A:
retn
sub_1E85C endp




sub_1E87B proc near
call    sub_1E13A
mov     ax, [bp+4]
push    es
push    ax
call    sub_1DD40
call    sub_1E160
retn    2
sub_1E87B endp




sub_1E88C proc near
call    sub_1E13A
jnb     short loc_1E89C
mov     ax, ds
or      ax, ax
jnz     short loc_1E89C
mov     ax, 1
jmp     short loc_1E8A5

loc_1E89C:
mov     ax, ds:4
mov     word ptr ds:4, 0

loc_1E8A5:
call    sub_1E160
retn
sub_1E88C endp




sub_1E8A9 proc near
call    sub_1E13A
jnb     short loc_1E8B9
mov     ax, ds
or      ax, ax
jnz     short loc_1E8B9
mov     ax, 1
jmp     short loc_1E8BC

loc_1E8B9:
mov     ax, ds:4

loc_1E8BC:
call    sub_1E160
retn
sub_1E8A9 endp




sub_1E8C0 proc near
call    sub_1E13A
jb      short loc_1E907
mov     ax, [bp+4]
or      ax, ax
jnz     short loc_1E8CF
mov     ax, 30h ; '0'

loc_1E8CF:
mov     bx, ax
cmp     ax, 30h ; '0'
jb      short loc_1E8EA
cmp     ax, ds:1Ah
jnb     short loc_1E8EA
sub     ax, 30h ; '0'
mov     cx, 22h ; '"'
xor     dx, dx
div     cx
or      dx, dx
jz      short loc_1E8F2

loc_1E8EA:
mov     word ptr ds:4, 7
jmp     short loc_1E907

loc_1E8F2:
cmp     byte ptr [bx+20h], 0
jnz     short loc_1E900
mov     word ptr ds:4, 5
jmp     short loc_1E907

loc_1E900:
mov     ax, ds:0
mov     ds:0, bx

loc_1E907:
call    sub_1E160
retn    2
sub_1E8C0 endp




sub_1E90D proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1E936
cmp     byte ptr [bx+4], 0
jnz     short loc_1E923
mov     word ptr ds:4, 9
jmp     short loc_1E936

loc_1E923:
mov     al, [bp+4]
cmp     al, 0FFh
jnz     short loc_1E92D
mov     al, [bx+5]

loc_1E92D:
push    ax
mov     di, [bp+6]
push    es
push    di
call    sub_1E21C

loc_1E936:
call    sub_1E160
retn    4
sub_1E90D endp




sub_1E93C proc near
call    sub_1E13A
jnb     short loc_1E947
mov     bx, 0FFFFh
jmp     loc_1EA90

loc_1E947:
mov     cl, [bp+14h]
dec     cl
mov     ch, [bp+12h]
dec     ch
mov     dl, [bp+10h]
dec     dl
mov     dh, [bp+0Eh]
dec     dh
mov     ax, ds:28h
cmp     cl, al
jnb     short loc_1E984
cmp     ch, ah
jnb     short loc_1E984
cmp     dl, cl
jb      short loc_1E984
cmp     dl, al
jnb     short loc_1E984
cmp     dh, ch
jb      short loc_1E984
cmp     dh, ah
jnb     short loc_1E984
cmp     byte ptr [bp+0Ch], 0
jz      short loc_1E990
cmp     cl, dl
jz      short loc_1E984
cmp     ch, dh
jnz     short loc_1E990

loc_1E984:
mov     word ptr ds:4, 3
mov     bx, 0FFFFh
jmp     loc_1EA90

loc_1E990:
push    cx
mov     cl, ds:2Ah
mov     ch, 0
mov     bx, 30h ; '0'

loc_1E99A:
add     bx, 22h ; '"'
cmp     byte ptr [bx+20h], 0
jz      short loc_1E9B2
loop    loc_1E99A
pop     cx
mov     word ptr ds:4, 2
mov     bx, 0FFFFh
jmp     loc_1EA90

loc_1E9B2:
cmp     byte ptr [bp+4], 0
jz      short loc_1E9E3
pop     cx
push    cx
mov     al, dl
sub     al, cl
inc     al
mov     ah, dh
sub     ah, ch
inc     ah
mul     ah
shl     ax, 1
mov     cx, ds:0Eh
sub     cx, ds:6
cmp     cx, ax
jnb     short loc_1E9E3
pop     cx
mov     word ptr ds:4, 4
mov     bx, 0FFFFh
jmp     loc_1EA90

loc_1E9E3:
xor     cx, cx
cmp     byte ptr [bp+4], 0
jz      short loc_1E9F3
mov     cx, ds:6
add     ds:6, ax

loc_1E9F3:
mov     [bx+12h], cx
xor     ax, ax
mov     [bx+10h], ax
mov     al, [bp+0Ch]
mov     [bx+4], al
mov     al, [bp+0Ah]
mov     [bx+5], al
mov     al, [bp+8]
mov     [bx+0Bh], al
pop     cx
mov     [bx+6], cx
mov     [bx+8], dx
cmp     byte ptr [bx+4], 0
jz      short loc_1EA22
inc     cl
inc     ch
dec     dl
dec     dh

loc_1EA22:
mov     [bx], cx
mov     [bx+2], dx
mov     di, ds:14h
mov     [bx+16h], di
mov     word ptr [bx+14h], 30h ; '0'
cmp     word ptr ds:16h, 30h ; '0'
jnz     short loc_1EA42
mov     ds:16h, bx
mov     ds:44h, bx

loc_1EA42:
cmp     di, 30h ; '0'
jz      short loc_1EA4A
mov     [di+14h], bx

loc_1EA4A:
mov     ds:0, bx
mov     ds:14h, bx
mov     ds:46h, bx
mov     byte ptr [bx+20h], 1
mov     byte ptr [bx+0Ah], 0
cmp     byte ptr [bp+4], 0
jz      short loc_1EA7C
cmp     byte ptr [bx+4], 0
jz      short loc_1EA73
cmp     byte ptr [bx+5], 0FFh
jz      short loc_1EA73
call    sub_1E3DF

loc_1EA73:
cmp     byte ptr [bx+0Bh], 0FFh
jz      short loc_1EA7C
call    sub_1E6A9

loc_1EA7C:
mov     ax, [bx]
mov     [bx+0Ch], ax
call    sub_1E830
mov     [bx+0Eh], ax
mov     al, [bp+6]
call    sub_1E1D1
mov     [bx+0Eh], ax

loc_1EA90:
mov     ax, bx
call    sub_1E160
retn    12h
sub_1E93C endp




sub_1EA98 proc near
call    sub_1E13A
jb      short loc_1EAC6
cmp     bx, 30h ; '0'
jnz     short loc_1EAAA
mov     word ptr ds:4, 7
jmp     short loc_1EAC6

loc_1EAAA:
cmp     byte ptr [bx+20h], 2
jnz     short loc_1EAC6
cmp     byte ptr [bp+4], 0
jnz     short loc_1EABE
mov     al, 1
push    ax
call    sub_1E5E9
jmp     short loc_1EAC6

loc_1EABE:
call    sub_1E70E
jb      short loc_1EAC6
call    sub_1E698

loc_1EAC6:
call    sub_1E160
retn    2
sub_1EA98 endp




sub_1EACC proc near
call    sub_1E13A
jb      short loc_1EB10
mov     bx, ds:14h

loc_1EAD5:
cmp     bx, 30h ; '0'
jz      short loc_1EAF6
cmp     byte ptr [bx+20h], 2
jnz     short loc_1EAED
push    bx
mov     ds:0, bx
push    word ptr ds:11h
call    sub_1EA98
pop     bx

loc_1EAED:
mov     byte ptr [bx+20h], 0
mov     bx, [bx+16h]
jmp     short loc_1EAD5

loc_1EAF6:
call    sub_1E71C
mov     ax, ds:1Ah
mov     ds:6, ax
cmp     byte ptr [bp+4], 0
jz      short loc_1EB10
mov     bx, ds:8
mov     word ptr cs:[bx-1EF7h], 0

loc_1EB10:
mov     ax, ds:4
mov     word ptr ds:4, 0
call    sub_1E160
retn    2
sub_1EACC endp




sub_1EB1F proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1EB36
push    word ptr [bx+10h]
mov     ax, [bp+4]
push    es
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_1EBD3

loc_1EB36:
call    sub_1E160
retn    2
sub_1EB1F endp




sub_1EB3C proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1EB66
mov     cl, [bx+10h]
test    cl, 0Ch
jz      short loc_1EB51
or      cl, 8
jmp     short loc_1EB54

loc_1EB51:
or      cl, 0Ch

loc_1EB54:
mov     ch, [bp+4]
push    cx
mov     ax, [bp+6]
push    es
push    ax
push    word ptr [bp+8]
push    word ptr [bp+0Ah]
call    sub_1EBD3

loc_1EB66:
call    sub_1E160
retn    8
sub_1EB3C endp




sub_1EB6C proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1EB85
push    word ptr [bp+4]
mov     ax, [bp+6]
push    es
push    ax
push    word ptr [bp+8]
push    word ptr [bp+0Ah]
call    sub_1EBD3

loc_1EB85:
call    sub_1E160
retn    8
sub_1EB6C endp




sub_1EB8B proc near
mov     al, [bx+2]
cmp     [bp+6], al
nop
nop
jbe     short loc_1EBB4
test    dl, 20h
jz      short loc_1EBA8
mov     [bp+6], al
nop
nop
mov     word ptr [bp+2], 0
nop
nop
jmp     short locret_1EBD2

loc_1EBA8:
mov     al, [bx]
mov     [bp+6], al
nop
nop
inc     byte ptr [bp+4]
nop
nop

loc_1EBB4:
mov     al, [bx+3]
cmp     [bp+4], al
nop
nop
jbe     short locret_1EBD2
test    dl, 10h
jz      short loc_1EBCD
mov     al, [bx+1]
mov     [bp+4], al
nop
nop
jmp     short locret_1EBD2

loc_1EBCD:
mov     [bp+4], al
nop
nop

locret_1EBD2:
retn
sub_1EB8B endp




sub_1EBD3 proc near
sub     sp, 0ACh
push    bp
mov     bp, sp
call    sub_1E10B
mov     dx, [bp+0B8h]
les     di, [bp+0B4h]
test    dl, 4
jnz     short loc_1EBEF
test    dl, 8
jnz     short loc_1EC0B

loc_1EBEF:
push    di
mov     cx, 0FFFFh
xor     al, al
repne scasb
pop     ax
mov     cx, di
sub     cx, ax
dec     cx
mov     [bp+0A8h], cx
mov     [bp+0AAh], ax
mov     word ptr [bp+0ACh], es
jmp     short loc_1EC1D

loc_1EC0B:
mov     cl, es:[di]
xor     ch, ch
inc     di
mov     [bp+0A8h], cx
mov     [bp+0AAh], di
mov     word ptr [bp+0ACh], es

loc_1EC1D:
test    dl, 8
jnz     short loc_1EC2D
test    dl, 4
jnz     short loc_1EC2D
or      dl, 0Ch
mov     dh, [bx+0Bh]

loc_1EC2D:
xor     al, al
test    dl, 4
jz      short loc_1EC36
mov     al, 1

loc_1EC36:
test    dl, 8
jz      short loc_1EC3D
or      al, 2

loc_1EC3D:
mov     ds:21h, al
test    dl, 2
jz      short loc_1EC48
and     dl, 0FEh

loc_1EC48:
call    sub_1E1AD
mov     [bp+4], ah
mov     [bp+6], al
mov     cx, [bx]
mov     al, [bp+0B2h]
or      al, al
jz      short loc_1EC62
dec     al
add     al, ch
mov     [bp+4], al

loc_1EC62:
mov     al, [bp+0B0h]
or      al, al
jz      short loc_1EC71
dec     al
add     al, cl
mov     [bp+6], al

loc_1EC71:
mov     al, [bp+4]
cmp     al, [bx+3]
jbe     short loc_1EC7C
mov     [bp+4], al

loc_1EC7C:
cmp     al, ch
jnb     short loc_1EC83
mov     [bp+4], al

loc_1EC83:
mov     al, [bp+6]
cmp     al, [bx+2]
jbe     short loc_1EC8E
mov     [bp+6], al

loc_1EC8E:
cmp     al, cl
jnb     short loc_1EC95
mov     [bp+6], al

loc_1EC95:
mov     ax, [bp+0A8h]
mov     [bp+2], ax

loc_1EC9C:
mov     ax, [bp+2]
or      ax, ax
jnz     short loc_1ECA6
jmp     short loc_1ED00
align 2

loc_1ECA6:
mov     cl, [bx+2]
sub     cl, [bp+6]
xor     ch, ch
inc     cx
cmp     cx, ax
jbe     short loc_1ECB5
mov     cx, ax

loc_1ECB5:
push    cx
push    ds
lds     si, [bp+0AAh]
push    ss
pop     es
lea     di, [bp+8]
mov     al, [bp+6]
xor     ah, ah
shl     ax, 1
add     di, ax

loc_1ECC9:
test    dl, 4
jz      short loc_1ECCF
movsb

loc_1ECCF:
test    dl, 8
jz      short loc_1ECD7
mov     al, dh
stosb

loc_1ECD7:
loop    loc_1ECC9
mov     [bp+0AAh], si
pop     ds
pop     cx
push    ss
lea     ax, [bp+8]
push    ax
mov     al, [bp+6]
add     al, cl
dec     al
push    ax
push    word ptr [bp+6]
push    word ptr [bp+4]
call    sub_1E2DA
add     [bp+6], cl
sub     [bp+2], cx
call    sub_1EB8B
jmp     short loc_1EC9C

loc_1ED00:
test    dl, 1
jz      short loc_1ED10
inc     byte ptr [bp+4]
mov     al, [bx]
mov     [bp+6], al
call    sub_1EB8B

loc_1ED10:
test    dl, 2
jnz     short loc_1ED27
mov     al, [bp+6]
mov     ah, [bp+4]
mov     [bx+0Ch], ax
cmp     bx, ds:2
jnz     short loc_1ED27
call    sub_1E846

loc_1ED27:
call    sub_1E118
pop     bp
add     sp, 0ACh
retn    0Ah
sub_1EBD3 endp




sub_1ED32 proc near
call    sub_1E13A
call    sub_1E6F6
jb      short loc_1ED4B
push    word ptr [bx+10h]
mov     ax, [bp+4]
push    es
push    ax
push    word ptr [bp+6]
push    word ptr [bp+8]
call    sub_1EBD3

loc_1ED4B:
call    sub_1E160
retn    6
sub_1ED32 endp




sub_1ED51 proc far
xor     cx, cx
jmp     short loc_1ED62
sub_1ED51 endp




sub_1ED55 proc far
mov     cx, 1
jmp     short loc_1ED62
sub_1ED55 endp




sub_1ED5A proc far
mov     cx, 2
jmp     short loc_1ED62
sub_1ED5A endp



; Attributes: bp-based frame

sub_1ED5F proc far

arg_0= word ptr  0Ah
arg_2= word ptr  0Ch
arg_4= word ptr  0Eh
arg_6= word ptr  10h

mov     cx, 3

loc_1ED62:
push    bp
push    si
push    di
mov     bp, sp
mov     di, cx
mov     ax, [bp+arg_0]
mov     dx, [bp+arg_2]
mov     bx, [bp+arg_4]
mov     cx, [bp+arg_6]
or      cx, cx
jnz     short loc_1ED81
or      dx, dx
jz      short loc_1EDE8
or      bx, bx
jz      short loc_1EDE8

loc_1ED81:
test    di, 1
jnz     short loc_1EDA5
or      dx, dx
jns     short loc_1ED96
neg     dx
neg     ax
sbb     dx, 0
or      di, 0Ch

loc_1ED96:
or      cx, cx
jns     short loc_1EDA5
neg     cx
neg     bx
sbb     cx, 0
xor     di, 4

loc_1EDA5:
mov     bp, cx
mov     cx, 20h ; ' '
push    di
xor     di, di
xor     si, si

loc_1EDAF:
shl     ax, 1
rcl     dx, 1
rcl     si, 1
rcl     di, 1
cmp     di, bp
jb      short loc_1EDC6
ja      short loc_1EDC1
cmp     si, bx
jb      short loc_1EDC6

loc_1EDC1:
sub     si, bx
sbb     di, bp
inc     ax

loc_1EDC6:
loop    loc_1EDAF
pop     bx
test    bx, 2
jz      short loc_1EDD5
mov     ax, si
mov     dx, di
shr     bx, 1

loc_1EDD5:
test    bx, 4
jz      short loc_1EDE2
neg     dx
neg     ax
sbb     dx, 0

loc_1EDE2:
pop     di
pop     si
pop     bp
retf    8

loc_1EDE8:
div     bx
test    di, 2
jz      short loc_1EDF2
mov     ax, dx

loc_1EDF2:
xor     dx, dx
jmp     short loc_1EDE2
sub_1ED5F endp




sub_1EDF6 proc far
cmp     cl, 10h
jnb     short loc_1EE0B
mov     bx, ax
shl     ax, cl
shl     dx, cl
neg     cl
add     cl, 10h
shr     bx, cl
or      dx, bx
retf

loc_1EE0B:
sub     cl, 10h
mov     dx, ax
xor     ax, ax
shl     dx, cl
retf
sub_1EDF6 endp




sub_1EE15 proc far
cmp     cl, 10h
jnb     short loc_1EE2A
mov     bx, dx
shr     ax, cl
sar     dx, cl
neg     cl
add     cl, 10h
shl     bx, cl
or      ax, bx
retf

loc_1EE2A:
sub     cl, 10h
mov     ax, dx
cwd
sar     ax, cl
retf
sub_1EE15 endp




sub_1EE33 proc far
cmp     cl, 10h
jnb     short loc_1EE48
mov     bx, dx
shr     ax, cl
shr     dx, cl
neg     cl
add     cl, 10h
shl     bx, cl
or      ax, bx
retf

loc_1EE48:
sub     cl, 10h
mov     ax, dx
xor     dx, dx
shr     ax, cl
retf
sub_1EE33 endp

seg000 ends


; Segment type: Pure code
seg001 segment byte public 'CODE' use16
assume cs:seg001
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_1EE52 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     es, word ptr ds:1Eh
mov     di, 81h
lds     si, [bp+arg_0]
xor     cx, cx
cld

loc_1EE65:
lodsb
or      al, al
jz      short loc_1EE6E
stosb
inc     cx
jmp     short loc_1EE65

loc_1EE6E:
mov     al, 0Dh
stosb
mov     es:80h, cl
push    es
pop     ds
mov     si, 81h
mov     di, 5Ch ; '\'
mov     ax, 2901h
int     21h             ; DOS - PARSE FILENAME
                        ; DS:SI -> string to parse
                        ; ES:DI -> buffer to fill with unopened FCB
                        ; AL = bit mask to control parsing
mov     di, 6Ch ; 'l'
mov     ax, 2901h
int     21h             ; DOS - PARSE FILENAME
                        ; DS:SI -> string to parse
                        ; ES:DI -> buffer to fill with unopened FCB
                        ; AL = bit mask to control parsing
pop     ds
pop     di
pop     si
pop     bp
retf    4
sub_1EE52 endp




sub_1EE92 proc near
mov     es, word ptr ds:1Eh
mov     ax, es:2Eh
mov     ds:8248h, ax
mov     ax, es:30h
mov     ds:824Ah, ax
retn
sub_1EE92 endp




sub_1EEA5 proc near
mov     es, word ptr ds:1Eh
mov     ax, ds:8248h
mov     es:2Eh, ax
mov     ax, ds:824Ah
mov     es:30h, ax
retn
sub_1EEA5 endp



; Attributes: bp-based frame

sub_1EEB8 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     bx, 8230h
push    ds
pop     es
mov     di, bx
mov     dx, ds:1Eh
cld
mov     ax, ds:1Ch
stosw
mov     ax, 80h
stosw
mov     ax, dx
stosw
mov     ax, 5Ch ; '\'
stosw
mov     ax, dx
stosw
mov     ax, 6Ch ; 'l'
stosw
mov     ax, dx
stosw
push    word ptr ds:2Eh
push    word ptr ds:30h
mov     ds:8246h, sp
mov     sp, ds:7E64h
lds     dx, [bp+arg_0]
mov     ax, 4B01h
int     21h             ; DOS - 2+ - LOAD OR EXECUTE (EXEC)
                        ; DS:DX -> ASCIZ filename
                        ; ES:BX -> parameter block
                        ; AL = subfunc: load but do not execute (internal)
mov     dx, seg seg091
mov     ds, dx
assume ds:seg091
cli
mov     ss, dx
assume ss:seg091
mov     sp, word_53AF6
sti
pushf
push    ax
mov     ah, 30h
int     21h             ; DOS - GET DOS VERSION
                        ; Return: AL = major version number (00h for DOS 1.x)
xchg    al, ah
cmp     ax, 20Ah
jge     short loc_1EF26
mov     es, word_4B8CE
mov     ax, word_4B8DE
mov     es:2Eh, ax
mov     ax, word_4B8E0
mov     es:30h, ax

loc_1EF26:
pop     ax
popf
pop     word_4B8E0
pop     word_4B8DE
jb      short loc_1EF3A
call    sub_1EE92
mov     ax, 0
jmp     short loc_1EF4C

loc_1EF3A:
xchg    ax, dx
mov     ax, 0FFFEh
cmp     dl, 2
jz      short loc_1EF4C
mov     al, 0FCh
cmp     dl, 8
jz      short loc_1EF4C
mov     al, 0FAh

loc_1EF4C:
pop     di
pop     si
pop     bp
retf    4
sub_1EEB8 endp




sub_1EF52 proc far
push    bp
push    si
push    di
mov     ah, 51h
int     21h             ; DOS - 2+ internal - GET PSP SEGMENT
                        ; Return: BX = current PSP segment
call    sub_1EEA5
mov     word_53AF6, sp
cli
mov     ss, word_53AF0
assume ss:nothing
mov     sp, word_53AEE
sti
les     ax, dword_53AF2
push    es
push    ax
mov     ds, bx
assume ds:nothing
mov     es, bx
mov     word ptr ds:0Ah, offset loc_1EF7F
mov     word ptr ds:0Ch, cs
retf
sub_1EF52 endp


loc_1EF7F:
mov     ax, seg seg091
mov     ds, ax
assume ds:seg091
cli
mov     ss, ax
assume ss:seg091
mov     sp, word_53AF6
sti
mov     ah, 4Dh
int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
pop     di
pop     si
pop     bp
retf



sub_1EF94 proc far
push    bp
push    si
push    di
mov     ah, 51h
int     21h             ; DOS - 2+ internal - GET PSP SEGMENT
                        ; Return: BX = current PSP segment
mov     word_4C500, bx
les     di, off_4BE5A
cld
xor     ax, ax
mov     cx, 7
rep stosw
mov     ax, bx
stosw
stosw
mov     ax, word ptr dword_53AF2
stosw
mov     ax, word ptr dword_53AF2+2
stosw
pushf
pop     ax
stosw
mov     ax, word_53AEE
stosw
mov     ax, word_53AF0
stosw
mov     es, bx
mov     word ptr es:0Ah, offset loc_1EFEE
mov     word ptr es:0Ch, cs
push    bx
call    sub_11396
mov     bx, word_4B8CE
mov     ah, 50h
int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                        ; BX = segment address of new PSP
mov     word_5799F, 2
mov     ax, word_4C500
add     ax, 10h
pop     di
pop     si
pop     bp
retf
sub_1EF94 endp


loc_1EFEE:
mov     ax, seg seg091
mov     ds, ax
cli
mov     ss, ax
mov     sp, word_53714
sti
mov     ah, 4Dh
int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
push    ax
call    nullsub_1
xor     ax, ax
mov     word_4C500, ax
call    sub_1135B



sub_1F00F proc far
push    bp
push    si
push    di
mov     bx, word_4C500
or      bx, bx
jz      short loc_1F04F
call    sub_1EEA5
mov     word_53AF6, sp
mov     es, bx
mov     word ptr es:0Ah, offset loc_1F038
mov     word ptr es:0Ch, cs
mov     ah, 50h
int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                        ; BX = segment address of new PSP
mov     ax, 4C00h
int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
                        ; AL = exit code

loc_1F038:
mov     ax, seg seg091
mov     ds, ax
cli
mov     ss, ax
mov     sp, word_53AF6
sti
call    nullsub_1
xor     ax, ax
mov     word_4C500, ax

loc_1F04F:
mov     word_5799F, 3
pop     di
pop     si
pop     bp
retf
sub_1F00F endp

seg001 ends


; Segment type: Pure code
seg002 segment byte public 'CODE' use16
assume cs:seg002
;org 9
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_1F059 proc far
cmp     ah, 3Fh ; '?'
jz      short loc_1F063
cmp     ah, 40h ; '@'
jnz     short loc_1F06C

loc_1F063:
push    ax
mov     ax, ds
cmp     ax, 0A000h
pop     ax
jnb     short loc_1F072

loc_1F06C:
call    sub_10BD7
retf

loc_1F072:
push    bp
push    si
push    di
push    es
push    ds
push    dx
mov     bp, sp
pushf
cld
mov     dx, seg seg091
mov     ds, dx
assume ds:seg091
mov     ds, word_4B8CE
assume ds:nothing
mov     dx, ds:2
sub     dx, 1000h
mov     ds, dx
les     di, [bp+0]
xor     si, si
sub     si, cx
cmp     ah, 3Fh ; '?'
jz      short loc_1F0A0
call    sub_1F0C7
jmp     short loc_1F0A9

loc_1F0A0:
push    cx
shr     cx, 1
jnb     short loc_1F0A6
movsb

loc_1F0A6:
rep movsw
pop     cx

loc_1F0A9:
xor     dx, dx
sub     dx, cx
popf
call    sub_10BD7
pushf
cld
les     di, [bp+0]
xor     si, si
sub     si, cx
call    sub_1F0C7
popf
pop     dx
pop     ds
pop     es
pop     di
pop     si
pop     bp
retf
sub_1F059 endp




sub_1F0C7 proc near
push    ax
push    cx
shr     cx, 1
jnb     short loc_1F0D6
mov     al, es:[di]
movsb
mov     [si-1], al
jcxz    short loc_1F0DF

loc_1F0D6:
mov     ax, es:[di]
movsw
mov     [si-2], ax
loop    loc_1F0D6

loc_1F0DF:
pop     cx
pop     ax
retn
sub_1F0C7 endp

seg002 ends


; Segment type: Pure code
seg003 segment byte public 'CODE' use16
assume cs:seg003
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_1F0E2 proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ch
les     bx, ds:9A70h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_1F150

loc_1F0F4:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_1F13C

loc_1F103:
les     bx, [bp+var_C]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, word ptr [bp+arg_0+2]
jnz     short loc_1F12F
cmp     ax, word ptr [bp+arg_0]
jnz     short loc_1F12F
les     bx, [bp+var_C]
cmp     byte ptr es:[bx+8], 2
jz      short loc_1F124
jmp     loc_1F198

loc_1F124:
mov     dx, es:[bx+0Eh]
mov     ax, es:[bx+0Ch]
jmp     loc_1F1A4

loc_1F12F:
les     bx, [bp+var_C]
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_1F13C:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_1F103
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_1F150:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_1F0F4
les     bx, [bp+arg_0]
add     bx, 0FFF6h
mov     [bp+var_2], es
mov     [bp+var_4], bx
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     ax, bx
or      ax, word ptr [bp+var_C+2]
jz      short loc_1F186
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_1F186
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_1F186:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_1F1A0
les     bx, [bp+var_C]
test    byte ptr es:[bx+9], 20h
jz      short loc_1F1A0

loc_1F198:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
jmp     short loc_1F1A4

loc_1F1A0:
xor     dx, dx
mov     ax, dx

loc_1F1A4:
mov     sp, bp
pop     bp
retf    4
sub_1F0E2 endp



; Attributes: bp-based frame

sub_1F1AA proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_1F1C3
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_1F1DC
jmp     short loc_1F1D4

loc_1F1C3:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_1F1DC
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_1F1DC

loc_1F1D4:
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
jmp     short loc_1F1E2

loc_1F1DC:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]

loc_1F1E2:
pop     bp
retf    8
sub_1F1AA endp



; Attributes: bp-based frame

sub_1F1E6 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     si, [bp+arg_0]
mov     di, si
and     di, 100h
mov     ax, word ptr [bp+arg_8]
or      ax, word ptr [bp+arg_8+2]
jnz     short loc_1F20A
inc     word ptr ds:0BDFBh
xor     dx, dx
mov     ax, dx
jmp     loc_1F46D

loc_1F20A:
les     bx, [bp+arg_8]
add     bx, 0FFF6h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     ax, bx
or      ax, word ptr [bp+var_8+2]
jz      short loc_1F238
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_1F238
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_1F238:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_1F243
jmp     loc_1F361

loc_1F243:
les     bx, [bp+var_8]
test    byte ptr es:[bx+9], 10h
jz      short loc_1F25F
test    si, 10h
jz      short loc_1F25F
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_1F9F7
jmp     def_1F410       ; jumptable 0001F410 default case, cases 3-7,10,12

loc_1F25F:
mov     ax, [bp+arg_6]
cmp     ax, 1
jnz     short loc_1F26A
jmp     loc_1F2CE

loc_1F26A:
cmp     ax, 2
jz      short loc_1F277
cmp     ax, 3
jz      short loc_1F2CE
jmp     loc_1F2F9

loc_1F277:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 0Dh
jnz     short loc_1F29F
mov     ax, es:[bx+0Ch]
or      ax, es:[bx+0Eh]
jz      short loc_1F28E
jmp     loc_1F302

loc_1F28E:
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
jmp     def_1F410       ; jumptable 0001F410 default case, cases 3-7,10,12

loc_1F29F:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jz      short loc_1F2B7
cmp     byte ptr es:[bx+8], 3
jz      short loc_1F2B7
cmp     byte ptr es:[bx+8], 1
jnz     short loc_1F2F9

loc_1F2B7:
or      di, di
jz      short loc_1F302
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jnz     short loc_1F302
cmp     byte ptr es:[bx+12h], 5
jz      short loc_1F302
jmp     short loc_1F2F9

loc_1F2CE:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jz      short loc_1F2E6
cmp     byte ptr es:[bx+8], 3
jz      short loc_1F2E6
cmp     byte ptr es:[bx+8], 1
jnz     short loc_1F2F9

loc_1F2E6:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 3
jz      short loc_1F302
mov     al, byte ptr [bp+arg_6]
mov     es:[bx+8], al
jmp     short loc_1F302

loc_1F2F9:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_1F9F7

loc_1F302:
mov     al, 20h ; ' '
mov     dx, si
or      al, dl
les     bx, [bp+var_8]
or      es:[bx+9], al
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
xor     ax, ax
push    ax
call    sub_2A221
or      ax, ax
jnz     short loc_1F33E
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
mov     ax, 41h ; 'A'
push    ax
call    sub_312DE
add     sp, 6
jmp     def_1F410       ; jumptable 0001F410 default case, cases 3-7,10,12

loc_1F33E:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
les     bx, [bp+var_8]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    cs
call    near ptr sub_1F1AA
les     bx, [bp+var_8]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
jmp     def_1F410       ; jumptable 0001F410 default case, cases 3-7,10,12

loc_1F361:
mov     ax, 13h
push    ax
call    sub_3193F
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_4]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jz      short loc_1F38E
mov     ax, word ptr [bp+var_8]
les     bx, es:[bx+4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     short loc_1F39F

loc_1F38E:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_1F39F:
mov     al, byte ptr [bp+arg_6]
les     bx, [bp+var_8]
mov     es:[bx+8], al
cmp     word ptr ds:0C064h, 0
jz      short loc_1F3B4
mov     al, 4
jmp     short loc_1F3B6

loc_1F3B4:
mov     al, 2

loc_1F3B6:
les     bx, [bp+var_8]
mov     es:[bx+12h], al
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_1F3CF
les     bx, [bp+var_8]
mov     byte ptr es:[bx+12h], 1

loc_1F3CF:
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
les     bx, [bp+var_8]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     al, 22h ; '"'
mov     dx, si
or      al, dl
mov     es:[bx+9], al
mov     word ptr es:[bx+10h], 0
mov     word ptr es:[bx+0Ah], 0
mov     ax, [bp+arg_6]
dec     ax              ; switch 13 cases
cmp     ax, 0Ch
ja      short def_1F410 ; jumptable 0001F410 default case, cases 3-7,10,12
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1F410[bx] ; switch jump
jpt_1F410 dw offset loc_1F45F ; jump table for switch statement
dw offset loc_1F451
dw offset def_1F410
dw offset def_1F410
dw offset def_1F410
dw offset def_1F410
dw offset def_1F410
dw offset loc_1F45F
dw offset loc_1F45F
dw offset def_1F410
dw offset loc_1F441
dw offset def_1F410
dw offset loc_1F42F

loc_1F42F:              ; jumptable 0001F410 case 13
mov     al, ds:0BE1Ch
mov     ah, 0
les     bx, [bp+var_8]
mov     es:[bx+0Ah], ax
inc     byte ptr ds:0BE1Ch
jmp     short loc_1F45F ; jumptable 0001F410 cases 1,8,9

loc_1F441:              ; jumptable 0001F410 case 11
inc     word ptr ds:0BDFBh
mov     ax, ds:0BDFBh
les     bx, [bp+var_8]
mov     es:[bx+0Ah], ax
jmp     short loc_1F45F ; jumptable 0001F410 cases 1,8,9

loc_1F451:              ; jumptable 0001F410 case 2
or      di, di
jz      short def_1F410 ; jumptable 0001F410 default case, cases 3-7,10,12
les     bx, [bp+var_8]
mov     byte ptr es:[bx+12h], 5
jmp     short def_1F410 ; jumptable 0001F410 default case, cases 3-7,10,12

loc_1F45F:              ; jumptable 0001F410 cases 1,8,9
les     bx, [bp+var_8]
or      byte ptr es:[bx+9], 1

def_1F410:              ; jumptable 0001F410 default case, cases 3-7,10,12
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]

loc_1F46D:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ch
sub_1F1E6 endp



; Attributes: bp-based frame

sub_1F475 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 8
mov     ax, [bp+arg_8]
or      ax, [bp+arg_A]
jnz     short loc_1F486
jmp     loc_1F57B

loc_1F486:
les     bx, ds:9A70h
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_1F4B7

loc_1F496:
les     bx, [bp+var_8]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, [bp+arg_A]
jnz     short loc_1F4AA
cmp     ax, [bp+arg_8]
jz      short loc_1F4BF

loc_1F4AA:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_1F4B7:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_1F496

loc_1F4BF:
cmp     [bp+arg_6], 2
jz      short loc_1F4C8
jmp     loc_1F570

loc_1F4C8:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_1F4E9
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jnz     short loc_1F4DD
jmp     loc_1F624

loc_1F4DD:
push    [bp+arg_A]
push    [bp+arg_8]
call    sub_1F9F7
jmp     loc_1F624

loc_1F4E9:
push    [bp+arg_A]
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_1F1E6
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     ax, 13h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+var_4]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     byte ptr es:[bx+8], 2
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_8]
mov     al, es:[bx+9]
les     bx, [bp+var_4]
mov     es:[bx+9], al
les     bx, ds:9A70h
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, ds:9A70h
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     loc_1F624

loc_1F570:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_1F57B
jmp     loc_1F4DD

loc_1F57B:
mov     ax, 13h
push    ax
call    sub_318B7
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, ds:9A70h
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_8]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, bx
les     bx, ds:9A70h
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     al, byte ptr [bp+arg_6]
les     bx, [bp+var_8]
mov     es:[bx+8], al
cmp     word ptr ds:0C064h, 0
jz      short loc_1F5C7
mov     al, 4
jmp     short loc_1F5C9

loc_1F5C7:
mov     al, 2

loc_1F5C9:
les     bx, [bp+var_8]
mov     es:[bx+12h], al
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     al, byte ptr [bp+arg_0]
and     al, 7Fh
mov     es:[bx+9], al
mov     word ptr es:[bx+10h], 0
mov     word ptr es:[bx+0Ah], 0
mov     ax, [bp+arg_6]
cmp     ax, 4
jz      short loc_1F61C
cmp     ax, 8
jz      short loc_1F614
cmp     ax, 9
jz      short loc_1F614
jmp     short loc_1F624

loc_1F614:
les     bx, [bp+var_8]
or      byte ptr es:[bx+9], 1

loc_1F61C:
les     bx, [bp+var_8]
or      byte ptr es:[bx+9], 2

loc_1F624:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
mov     sp, bp
pop     bp
retf    0Ch
sub_1F475 endp



; Attributes: bp-based frame

sub_1F630 proc far

var_4= dword ptr -4
arg_0= dword ptr  6
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= dword ptr  10h

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_4]
les     bx, [bp+arg_A]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     loc_1F6FA

loc_1F64A:
les     bx, [bp+var_4]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, [bp+arg_8]
jz      short loc_1F65C
jmp     loc_1F6ED

loc_1F65C:
cmp     ax, [bp+arg_6]
jz      short loc_1F664
jmp     loc_1F6ED

loc_1F664:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 7
jz      short loc_1F67A
push    [bp+arg_8]
push    [bp+arg_6]
call    sub_1F9F7
jmp     loc_1F717

loc_1F67A:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_1F6C3
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_1F6A7
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A771
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_1F6C3

loc_1F6A7:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_1F6C3
push    word ptr [bp+arg_0+2]
push    bx
xor     ax, ax
push    ax
call    sub_2A771
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_1F6C3:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     byte ptr es:[bx+8], 6
cmp     si, 0Ah
jnz     short loc_1F6E2
mov     al, 40h ; '@'
jmp     short loc_1F6E4

loc_1F6E2:
mov     al, 0

loc_1F6E4:
les     bx, [bp+var_4]
mov     es:[bx+9], al
jmp     short loc_1F717

loc_1F6ED:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_1F6FA:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_1F705
jmp     loc_1F64A

loc_1F705:
push    [bp+arg_8]
push    [bp+arg_6]
mov     ax, 43h ; 'C'
push    ax
call    sub_312DE
add     sp, 6

loc_1F717:
pop     si
mov     sp, bp
pop     bp
retf    0Eh
sub_1F630 endp



; Attributes: bp-based frame

sub_1F71E proc far

var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_1F763

loc_1F733:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 7
jnz     short loc_1F756
mov     byte ptr es:[bx+9], 0
mov     byte ptr es:[bx+8], 6
mov     dx, ds:0BD80h
mov     ax, ds:0BD7Eh
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax

loc_1F756:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_1F763:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_1F733
mov     sp, bp
pop     bp
retf    4
sub_1F71E endp



; Attributes: bp-based frame

sub_1F771 proc far

var_4= dword ptr -4
arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah
arg_8= word ptr  0Eh
arg_A= word ptr  10h
arg_C= dword ptr  12h

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     ax, [bp+arg_8]
or      ax, [bp+arg_A]
jz      short loc_1F7C4
les     bx, [bp+arg_C]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_1F7BC

loc_1F78F:
les     bx, [bp+var_4]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, [bp+arg_A]
jnz     short loc_1F7AF
cmp     ax, [bp+arg_8]
jnz     short loc_1F7AF
push    [bp+arg_A]
push    [bp+arg_8]
call    sub_1F9F7
jmp     loc_1F8ED

loc_1F7AF:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_1F7BC:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_1F78F

loc_1F7C4:
mov     ax, 13h
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_C]
mov     ax, es:[bx+14h]
or      ax, es:[bx+16h]
jz      short loc_1F7F1
mov     ax, word ptr [bp+var_4]
les     bx, es:[bx+14h]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     short loc_1F802

loc_1F7F1:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_C]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_1F802:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_C]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
les     bx, [bp+var_4]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     al, [bp+arg_0]
mov     es:[bx+8], al
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_1F87F
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_1F863
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A771
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_1F87F

loc_1F863:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_1F87F
push    word ptr [bp+arg_4+2]
push    bx
xor     ax, ax
push    ax
call    sub_2A771
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_1F87F:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     word ptr es:[bx+10h], 0
cmp     [bp+arg_2], 0Ah
jnz     short loc_1F8A0
mov     al, 40h ; '@'
jmp     short loc_1F8A2

loc_1F8A0:
mov     al, 0

loc_1F8A2:
les     bx, [bp+var_4]
mov     es:[bx+9], al
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_1F8ED
les     bx, [bp+arg_4]
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     si, [bx+7BA2h]
or      si, si
jz      short loc_1F8DB
push    si
mov     bx, word ptr [bp+arg_4]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A52D
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_1F8DB:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2A8BF
les     bx, [bp+arg_C]
add     es:[bx+12h], ax

loc_1F8ED:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
pop     si
mov     sp, bp
pop     bp
retf    10h
sub_1F771 endp



; Attributes: bp-based frame

sub_1F8FA proc far

var_E= dword ptr -0Eh
var_A= dword ptr -0Ah
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 0Eh
push    si
push    di
mov     [bp+var_2], 0
les     bx, [bp+arg_0]
mov     word ptr es:[bx+12h], 0
les     bx, es:[bx+4]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
mov     si, 1
jmp     loc_1F9E4

loc_1F920:
les     bx, [bp+var_E]
mov     ax, es:[bx]
or      ax, es:[bx+2]
jnz     short loc_1F939
push    si
mov     ax, 86h
push    ax
call    sub_312DE
add     sp, 4

loc_1F939:
les     bx, [bp+var_E]
les     bx, es:[bx+0Ch]
mov     [bp+var_4], es
mov     [bp+var_6], bx
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     di, [bx+7BA2h]
or      di, di
jz      short loc_1F966
push    di
xor     ax, ax
push    ax
call    sub_2A52D
mov     [bp+var_4], dx
mov     [bp+var_6], ax

loc_1F966:
push    [bp+var_4]
push    [bp+var_6]
call    sub_2A8BF
les     bx, [bp+arg_0]
add     es:[bx+12h], ax
mov     ax, 13h
push    ax
call    sub_318B7
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
les     bx, [bp+var_A]
push    es
push    bx
les     bx, [bp+var_E]
push    es
push    bx
mov     cx, 13h
call    sub_46BE5
mov     ax, [bp+var_2]
les     bx, [bp+var_A]
mov     es:[bx+0Ah], ax
inc     [bp+var_2]
les     bx, ds:9A70h
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_A]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     dx, word ptr [bp+var_A+2]
mov     ax, bx
les     bx, ds:9A70h
mov     es:[bx+6], dx
mov     es:[bx+4], ax
les     bx, [bp+var_A]
or      byte ptr es:[bx+9], 22h
les     bx, [bp+var_E]
les     bx, es:[bx+4]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
inc     si

loc_1F9E4:
mov     ax, word ptr [bp+var_E]
or      ax, word ptr [bp+var_E+2]
jz      short loc_1F9EF
jmp     loc_1F920

loc_1F9EF:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_1F8FA endp



; Attributes: bp-based frame

sub_1F9F7 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 46h ; 'F'
push    ax
call    sub_312DE
mov     sp, bp
pop     bp
retn    4
sub_1F9F7 endp



; Attributes: bp-based frame

sub_1FA0F proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
les     bx, ds:0BD9Ch
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_1FA5C

loc_1FA22:
les     bx, [bp+var_8]
cmp     word ptr es:[bx+12h], 0
jnz     short loc_1FA50
cmp     byte ptr es:[bx+19h], 3
jz      short loc_1FA50
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
mov     ax, 0B8h
push    ax
call    sub_31324
add     sp, 6
les     bx, [bp+var_8]
mov     word ptr es:[bx+10h], 1

loc_1FA50:
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_1FA5C:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_1FA22
mov     word ptr ds:0BD9Ah, 0
mov     word ptr ds:0BD98h, 0
xor     si, si
jmp     loc_1FB85

loc_1FA75:
mov     bx, si
shl     bx, 1
shl     bx, 1
les     bx, [bx-5588h]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     loc_1FB79

loc_1FA88:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     ax, bx
or      ax, word ptr [bp+var_C+2]
jz      short loc_1FAAD
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_1FAAD
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_1FAAD:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_1FAB8
jmp     loc_1FB6D

loc_1FAB8:
mov     dx, ds:0BD9Ah
mov     ax, ds:0BD98h
les     bx, [bp+var_C]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     word ptr ds:0BD9Ah, es
mov     ds:0BD98h, bx
mov     al, es:[bx+8]
cbw
cmp     ax, 1
jz      short loc_1FB01
cmp     ax, 3
jz      short loc_1FAE4
jmp     loc_1FB6D

loc_1FAE4:
les     bx, [bp+var_C]
test    byte ptr es:[bx+9], 1
jnz     short loc_1FB01
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, 0ACh
push    ax
call    sub_31324
add     sp, 6

loc_1FB01:
les     bx, [bp+var_C]
test    byte ptr es:[bx+9], 10h
jnz     short loc_1FB6D
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_1FB35
les     bx, [bp+var_C]
test    byte ptr es:[bx+9], 1
jz      short loc_1FB6D
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6
jmp     short loc_1FB6D

loc_1FB35:
call    dword ptr ds:0C040h
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A954
push    ax
call    dword ptr ds:0C038h
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    dword ptr ds:0C034h
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
push    ax
call    dword ptr ds:0BFF0h

loc_1FB6D:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_1FB79:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_1FB84
jmp     loc_1FA88

loc_1FB84:
inc     si

loc_1FB85:
cmp     si, 400h
jge     short loc_1FB8E
jmp     loc_1FA75

loc_1FB8E:
mov     ax, ds:0BDC9h
mov     ds:67F5h, ax
mov     byte ptr ds:67FDh, 2
pop     si
mov     sp, bp
pop     bp
retf
sub_1FA0F endp



; Attributes: bp-based frame

sub_1FB9E proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_1FBED

loc_1FBB3:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+12h], 0
jnz     short loc_1FBE1
cmp     byte ptr es:[bx+19h], 3
jz      short loc_1FBE1
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
mov     ax, 0B8h
push    ax
call    sub_31324
add     sp, 6
les     bx, [bp+var_4]
mov     word ptr es:[bx+10h], 1

loc_1FBE1:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_1FBED:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_1FBB3
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_1FC6F

loc_1FC04:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jz      short loc_1FC62
mov     ax, es:[bx]
or      ax, es:[bx+2]
jz      short loc_1FC62
mov     al, es:[bx+9]
cbw
and     ax, 3
cmp     ax, 2
jnz     short loc_1FC45
push    word ptr es:[bx+2]
push    word ptr es:[bx]
cmp     byte ptr es:[bx+8], 6
jnz     short loc_1FC37
mov     ax, 0B4h
jmp     short loc_1FC3A

loc_1FC37:
mov     ax, 0ABh

loc_1FC3A:
push    ax
call    sub_31324
add     sp, 6
jmp     short loc_1FC62

loc_1FC45:
les     bx, [bp+var_8]
test    byte ptr es:[bx+9], 3
jnz     short loc_1FC62
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, 0ACh
push    ax
call    sub_31324
add     sp, 6

loc_1FC62:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_1FC6F:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_1FC7A
jmp     loc_1FC04

loc_1FC7A:
mov     sp, bp
pop     bp
retf    4
sub_1FB9E endp

seg003 ends


; Segment type: Pure code
seg004 segment byte public 'CODE' use16
assume cs:seg004
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_1FC80 proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_2]
mov     al, es:[bx+1]
cbw
mov     si, ax
cmp     si, 7
jl      short loc_1FCBE
cmp     byte ptr [si+4A75h], 0
jz      short loc_1FCBE
mov     ax, [bp+arg_0]
mov     dl, [si+4A75h]
mov     dh, 0
test    dx, ax
jnz     short loc_1FCBE
mov     bx, si
add     bx, 0FFF9h
shl     bx, 1
push    word ptr [bx+4A89h]
call    sub_312DE
inc     sp
inc     sp
mov     ax, 1
jmp     short loc_1FCC0

loc_1FCBE:
xor     ax, ax

loc_1FCC0:
pop     si
pop     bp
retn    6
sub_1FC80 endp



; Attributes: bp-based frame

sub_1FCC5 proc far

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
cmp     byte ptr ds:9A63h, 3
jnz     short loc_1FCE6
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_40AC9
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     loc_1FE4F

loc_1FCE6:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1F0E2
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jnz     short loc_1FD5C
cmp     byte ptr ds:0BDB7h, 0
jz      short loc_1FD16
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
call    sub_29A88
jmp     loc_1FE5A

loc_1FD16:
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6
mov     ax, ds:0BFB0h
or      ax, ds:0BFB2h
jnz     short loc_1FD34
jmp     loc_1FE48

loc_1FD34:
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 5
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
call    sub_1F475
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx+9], 23h ; '#'

loc_1FD5C:
les     bx, [bp+var_4]
les     bx, es:[bx+0Ch]
mov     [bp+var_6], es
mov     [bp+var_8], bx
les     bx, [bp+var_4]
mov     al, es:[bx+8]
cbw
dec     ax              ; switch 13 cases
cmp     ax, 0Ch
jbe     short loc_1FD7A
jmp     def_1FD7E       ; jumptable 0001FD7E default case, cases 7,8,10,12

loc_1FD7A:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_1FD7E[bx] ; switch jump
jpt_1FD7E dw offset loc_1FDE9 ; jump table for switch statement
dw offset loc_1FDE9
dw offset loc_1FDE9
dw offset loc_1FDE9
dw offset loc_1FE02
dw offset loc_1FE02
dw offset def_1FD7E
dw offset def_1FD7E
dw offset loc_1FE1E
dw offset def_1FD7E
dw offset loc_1FD9D
dw offset def_1FD7E
dw offset loc_1FDD1

loc_1FD9D:              ; jumptable 0001FD7E case 11
mov     al, 4
push    ax
push    [bp+var_6]
push    [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_29943
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ah]
les     bx, [bp+var_C]
mov     es:[bx+0Ah], ax
push    word ptr es:[bx+0Ah]
call    sub_3B194
jmp     loc_1FE4F

loc_1FDD1:              ; jumptable 0001FD7E case 13
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ch]
or      ax, es:[bx+0Eh]
jnz     short loc_1FDE9 ; jumptable 0001FD7E cases 1-4
mov     ax, 2
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_1FDE9:              ; jumptable 0001FD7E cases 1-4
push    [bp+var_6]
push    [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_299B0
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     short loc_1FE4F

loc_1FE02:              ; jumptable 0001FD7E cases 5,6
mov     al, 7
push    ax
push    [bp+var_6]
push    [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_29943
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     short loc_1FE4F

loc_1FE1E:              ; jumptable 0001FD7E case 9
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ah]
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     short loc_1FE4F

def_1FD7E:              ; jumptable 0001FD7E default case, cases 7,8,10,12
mov     ax, 49h ; 'I'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_1FE48:
call    sub_29811
jmp     short loc_1FE5A

loc_1FE4F:
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_1FE60

loc_1FE5A:
mov     sp, bp
pop     bp
retf    4
sub_1FCC5 endp



; Attributes: bp-based frame

sub_1FE60 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 10h
jnz     short loc_1FE9A
cmp     byte ptr ds:9A63h, 3
jz      short loc_1FE7D
les     bx, es:[bx+6]
or      byte ptr es:[bx+9], 8

loc_1FE7D:
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_1FEC3
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_1FE9A:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 11h
jnz     short loc_1FEB9
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_0+2]
push    bx
call    sub_1FEC3
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_1FEB9:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
pop     bp
retf    4
sub_1FE60 endp



; Attributes: bp-based frame

sub_1FEC3 proc near

arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
push    si
xor     si, si
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jnz     short loc_1FEE0
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+12h], 5
jnz     short loc_1FEE0
mov     si, 5

loc_1FEE0:
mov     al, 2Ch ; ','
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    si
call    sub_2A980
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
xor     ax, ax
push    ax
push    ax
call    sub_29862
pop     si
pop     bp
retn    8
sub_1FEC3 endp



; Attributes: bp-based frame

sub_1FF05 proc near

arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_4]
cmp     byte ptr ds:9A63h, 3
jz      short loc_1FF66
cmp     si, 1Ah
jz      short loc_1FF66
cmp     si, 1Ch
jz      short loc_1FF66
cmp     si, 1Bh
jz      short loc_1FF66
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 8
jz      short loc_1FF33
cmp     byte ptr es:[bx+1], 9
jnz     short loc_1FF3F

loc_1FF33:
cmp     si, 18h
jz      short loc_1FF57
cmp     si, 19h
jz      short loc_1FF57
jmp     short loc_1FF66

loc_1FF3F:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0Ch
jz      short loc_1FF66
cmp     byte ptr es:[bx+1], 0Dh
jz      short loc_1FF66
cmp     byte ptr es:[bx+1], 0Eh
jz      short loc_1FF66

loc_1FF57:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Dh ; '-'
jz      short loc_1FF66
cmp     byte ptr es:[bx], 4
jnz     short loc_1FF6B

loc_1FF66:
mov     ax, 1
jmp     short loc_1FF6D

loc_1FF6B:
xor     ax, ax

loc_1FF6D:
pop     si
pop     bp
retn    6
sub_1FF05 endp



; Attributes: bp-based frame

sub_1FF72 proc far

var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 18h
push    si
push    di
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_1FF87
jmp     loc_203D8

loc_1FF87:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_1FFA1
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_1FFA1
mov     dx, word ptr [bp+arg_0+2]
mov     ax, bx
jmp     loc_20B8F

loc_1FFA1:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_1FFB2
les     bx, [bp+arg_4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_1FFB2:
les     bx, [bp+arg_4]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
cmp     [bp+arg_8], 0Dh
jl      short loc_1FFC7
cmp     [bp+arg_8], 33h ; '3'
jle     short loc_1FFCB

loc_1FFC7:
xor     si, si
jmp     short loc_1FFD7

loc_1FFCB:
mov     bx, [bp+arg_8]
add     bx, 0FFF3h
shl     bx, 1
mov     si, [bx+4A2Eh]

loc_1FFD7:
test    si, 8000h
jz      short loc_20033
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21BF9
or      ax, ax
jnz     short loc_1FFFA
mov     ax, 4Ah ; 'J'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_1FFFA:
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
test    byte ptr es:[bx+5], 40h
jnz     short loc_20025
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 12h
jnz     short loc_20033
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 40h ; '@'
push    ax
call    sub_226C1
or      ax, ax
jz      short loc_20033

loc_20025:
mov     ax, 3Fh ; '?'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_20033:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_20055
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_20059

loc_20055:
and     si, 0FFEFh

loc_20059:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    si
call    sub_1FC80
or      ax, ax
jz      short loc_2006A
jmp     loc_20839

loc_2006A:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    si
call    sub_1FC80
or      ax, ax
jz      short loc_2007B
jmp     loc_20839

loc_2007B:
cmp     [bp+arg_8], 17h
jle     short loc_200AE
cmp     [bp+arg_8], 21h ; '!'
jg      short loc_200AE
push    [bp+arg_8]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_1FF05
or      ax, ax
jz      short loc_200AE
push    [bp+arg_8]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29BC4
jmp     loc_20B8F

loc_200AE:
mov     di, 6Bh ; 'k'
mov     [bp+var_2], 0A4h
mov     ax, [bp+arg_8]
sub     ax, 0Dh         ; switch 39 cases
cmp     ax, 26h
jbe     short loc_200C4
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_200C4:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_200C8[bx] ; switch jump
jpt_200C8 dw offset loc_204E6 ; jump table for switch statement
dw offset loc_20610
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset loc_207EC
dw offset loc_2058D
dw offset loc_20610
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset def_200C8
dw offset loc_20867
dw offset loc_20867
dw offset loc_20867
dw offset loc_20867
dw offset loc_20867
dw offset loc_20867
dw offset loc_2043D
dw offset loc_2043D
dw offset loc_20411
dw offset loc_2011B
dw offset loc_2023E
dw offset def_200C8
dw offset loc_20468
dw offset loc_20468
dw offset loc_2079A
dw offset def_200C8
dw offset loc_2095A
dw offset loc_2095A

loc_2011B:              ; jumptable 000200C8 case 43
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 8
jnz     short loc_2013A
mov     ax, 4Eh ; 'N'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_2013A:
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, es:[bx]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
cmp     byte ptr es:[bx+4], 0Fh
jnz     short loc_20165
mov     ax, 40h ; '@'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_20165:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_201C1
mov     al, 2Bh ; '+'
push    ax
push    word ptr [bp+var_C+2]
push    bx
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
mov     al, 2Ch ; ','
push    ax
les     bx, [bp+var_C]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
les     bx, [bp+var_8]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A980
push    dx
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_201C1:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_201D7
les     bx, [bp+arg_4]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
jmp     loc_20B89

loc_201D7:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_2021D
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_22692
or      ax, ax
jz      short loc_2021D
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_4+2], es
mov     word ptr [bp+arg_4], bx
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+var_C]
mov     al, es:[bx+4]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
jmp     loc_203D8

loc_2021D:
push    [bp+arg_8]
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_2023E:              ; jumptable 000200C8 case 44
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
cmp     byte ptr es:[bx+4], 0Ch
jl      short loc_2025F
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
cmp     byte ptr es:[bx+4], 0Eh
jg      short loc_2025F
mov     byte ptr ds:0BE19h, 1

loc_2025F:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_202C4
les     bx, es:[bx+2]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
cmp     dx, es:[bx+4]
jnz     short loc_20286
cmp     ax, es:[bx+2]
jz      short loc_202B6

loc_20286:
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A980
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
jmp     loc_203D8

loc_202B6:
mov     ax, 0A3h
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     loc_203D8

loc_202C4:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21BB5
or      ax, ax
jnz     short loc_202E7
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Dh ; '-'
jz      short loc_202E7
push    word ptr [bp+arg_4+2]
push    bx
call    sub_21BF9
or      ax, ax
jnz     short loc_202F5

loc_202E7:
mov     ax, 59h ; 'Y'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_202F5:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_20348
les     bx, es:[bx+6]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
les     bx, [bp+var_10]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A980
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+var_10]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+var_C]
mov     al, es:[bx+4]
les     bx, [bp+var_10]
mov     es:[bx+1], al
jmp     loc_20B89

loc_20348:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 30h ; '0'
jz      short loc_20354
jmp     loc_203E1

loc_20354:
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx
mov     ax, 2Ch ; ','
push    ax
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_1FF72
les     bx, [bp+var_18]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
mov     ax, 2Ch ; ','
push    ax
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_1FF72
les     bx, [bp+var_18]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
les     bx, [bp+var_14]
mov     al, es:[bx+1]
les     bx, [bp+var_18]
mov     es:[bx+1], al
les     bx, [bp+arg_4]
mov     es:[bx+1], al
les     bx, [bp+var_14]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_18]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_203D8:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
jmp     loc_20B8F

loc_203E1:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 1
jz      short loc_203F0
cmp     byte ptr es:[bx], 7
jnz     short loc_203FC

loc_203F0:
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
or      byte ptr es:[bx+9], 8

loc_203FC:
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
call    sub_1FEC3
jmp     loc_20B8F

loc_20411:              ; jumptable 000200C8 case 42
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_20C7F
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
mov     al, 2Ah ; '*'
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    dx
push    word ptr [bp+arg_4]
xor     ax, ax
push    ax
push    ax
call    sub_29862
jmp     loc_20B8F

loc_2043D:              ; jumptable 000200C8 cases 40,41
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21B15
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    [bp+arg_8]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    dx
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_29862
jmp     loc_20B8F

loc_20468:              ; jumptable 000200C8 cases 46,47
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_2048A
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_219A1
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     short loc_204C6

loc_2048A:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 2
jz      short loc_204AC
push    [bp+arg_8]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_29D0F
jmp     loc_20B8F

loc_204AC:
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     dx, dx
mov     ax, 1
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax

loc_204C6:
push    [bp+arg_8]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_29862
jmp     loc_20B8F

loc_204E6:              ; jumptable 000200C8 case 13
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_20547
mov     bx, word ptr [bp+arg_4]
les     bx, es:[bx+2]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_20518
jmp     loc_205AF

loc_20518:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21A0B
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    dx
push    ax
call    sub_22671
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_20547:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_2055B
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_2055B:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_21A0B
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_0+2]
push    bx
push    dx
push    ax
call    sub_22671
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_2058D:              ; jumptable 000200C8 case 24
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_205EE
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_205BD

loc_205AF:
mov     ax, 5Ah ; 'Z'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_205BD:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21A0B
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    [bp+arg_8]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    dx
push    ax
call    sub_29862
jmp     loc_20B8F

loc_205EE:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_20602
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_20602:
mov     ax, 5Bh ; '['
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_20610:              ; jumptable 000200C8 cases 14,25
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_20624
jmp     loc_20778

loc_20624:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_20638
jmp     loc_20741

loc_20638:
cmp     [bp+arg_8], 19h
jnz     short loc_20641
jmp     loc_2078C

loc_20641:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_219A1
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_20680
mov     ax, 8
jmp     short loc_20683

loc_20680:
mov     ax, 5

loc_20683:
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+var_C]
cmp     byte ptr es:[bx+4], 8
jnz     short loc_206FD
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
cmp     ax, 5
jnz     short loc_206FD
mov     ax, 6
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    dx
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_206FD:
mov     al, 3Ah ; ':'
push    ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
mov     al, 10h
push    ax
les     bx, [bp+var_10]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    dx
push    bx
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_20741:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21A0B
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    [bp+arg_8]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    dx
push    ax
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_20778:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_2078C
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_2078C:
mov     ax, 5Ch ; '\'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_20839

loc_2079A:              ; jumptable 000200C8 case 48
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2
jz      short loc_207B2
push    word ptr [bp+arg_4+2]
push    bx
call    sub_20C7F
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_207B2:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 31h ; '1'
jz      short loc_207C6
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_207C6:
mov     al, 30h ; '0'
push    ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    bx
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_207EC:              ; jumptable 000200C8 case 23
mov     di, 6Ah ; 'j'
mov     [bp+var_2], 0A5h
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 12h
jz      short loc_2080B
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 12h
jz      short loc_2080B
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_2080B:
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
call    sub_2A221
or      ax, ax
jnz     short loc_20841
mov     ax, 4Ch ; 'L'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_20839:
call    sub_29811
jmp     loc_20B8F

loc_20841:
mov     al, 17h
push    ax
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_20B89

loc_20867:              ; jumptable 000200C8 cases 34-39
mov     di, 6Ch ; 'l'
mov     [bp+var_2], 0A6h
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_208E8
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_208E8
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_237EA
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_237EA
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_208CA
push    dx
push    ax
mov     al, es:[bx+1]
cbw
push    ax
call    sub_21CA1
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_208CA:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2
jnz     short loc_208D6
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_208D6:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_21CA1
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_208E8:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_208FC
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_208FC:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_20910
jmp     def_200C8       ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_20910:
mov     bx, word ptr [bp+arg_0]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_2093E
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_2093E
push    word ptr [bp+arg_4+2]
push    bx
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_21750
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short def_200C8 ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_2093E:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_21750
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short def_200C8 ; jumptable 000200C8 default case, cases 15-22,26-33,45,49

loc_2095A:              ; jumptable 000200C8 cases 50,51
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_20C7F
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_20C7F
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    [bp+arg_8]
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    dx
push    ax
call    sub_29862
jmp     loc_20B8F

def_200C8:              ; jumptable 000200C8 default case, cases 15-22,26-33,45,49
test    si, 2000h
jz      short loc_209BD
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_21B15
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21B15
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_209E1

loc_209BD:
test    si, 4000h
jz      short loc_209E1
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_21B60
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21B60
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_209E1:
mov     ax, si
and     ax, 3
mov     [bp+var_4], ax
cmp     ax, 3
jnz     short loc_20A18
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 2
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     loc_20B4A

loc_20A18:
cmp     [bp+var_4], 1
jnz     short loc_20A21
jmp     loc_20AF1

loc_20A21:
cmp     [bp+var_4], 2
jnz     short loc_20A50
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 2
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
xor     ax, ax
push    ax
push    di
push    [bp+var_2]
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     loc_20B14

loc_20A50:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_20A99
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_20A99
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_20A99
push    word ptr [bp+arg_0+2]
push    bx
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     loc_20B14

loc_20A99:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_20AE1
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2
jnz     short loc_20AE1
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_20AE1
push    word ptr [bp+arg_4+2]
push    bx
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_20B14

loc_20AE1:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
les     bx, [bp+arg_4]
cmp     al, es:[bx+1]
jge     short loc_20B14

loc_20AF1:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
xor     ax, ax
push    ax
push    di
push    [bp+var_2]
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_20B14:
test    si, 4
jnz     short loc_20B4A
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
les     bx, [bp+arg_0]
cmp     al, es:[bx+1]
jge     short loc_20B4A
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
xor     ax, ax
push    ax
push    di
push    [bp+var_2]
call    sub_21215
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_20B4A:
test    si, 8
jz      short loc_20B5C
les     bx, ds:0BD7Eh
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_20B69

loc_20B5C:
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_20B69:
push    [bp+arg_8]
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29862
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax

loc_20B89:
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]

loc_20B8F:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_1FF72 endp



; Attributes: bp-based frame

sub_20B97 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_20BAF
mov     dx, word ptr [bp+arg_4+2]
mov     ax, bx
jmp     loc_20C79

loc_20BAF:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_20BC9
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_20BC9
mov     dx, word ptr [bp+arg_0+2]
mov     ax, bx
jmp     loc_20C79

loc_20BC9:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 12h
jz      short loc_20BDD
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 12h
jnz     short loc_20C37

loc_20BDD:
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
call    sub_2A221
or      ax, ax
jnz     short loc_20C12
mov     ax, 4Ch ; 'L'
push    ax
call    sub_312DE
inc     sp
inc     sp
call    sub_29811
jmp     short loc_20C79

loc_20C12:
mov     al, 17h
push    ax
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29862
mov     [bp+var_2], dx
mov     [bp+var_4], ax
jmp     short loc_20C79

loc_20C37:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
xor     ax, ax
push    ax
mov     ax, 6Ah ; 'j'
push    ax
mov     ax, 0A5h
push    ax
call    sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
mov     al, 17h
push    ax
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    dx
push    word ptr [bp+arg_0]
call    sub_29862

loc_20C79:
mov     sp, bp
pop     bp
retf    8
sub_20B97 endp



; Attributes: bp-based frame

sub_20C7F proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 17h
jnz     short loc_20C96
mov     ax, 0B6h
push    ax
call    sub_31324
mov     sp, bp

loc_20C96:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 22h ; '"'
jl      short loc_20CA5
cmp     byte ptr es:[bx], 27h ; '''
jle     short loc_20CBA

loc_20CA5:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 32h ; '2'
jz      short loc_20CBA
cmp     byte ptr es:[bx], 33h ; '3'
jz      short loc_20CBA
cmp     byte ptr es:[bx], 2Ah ; '*'
jnz     short loc_20CC2

loc_20CBA:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
jmp     short loc_20CE3

loc_20CC2:
mov     ax, 23h ; '#'
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
call    sub_29A88
push    dx
push    ax
push    cs
call    near ptr sub_1FF72

loc_20CE3:
pop     bp
retf    4
sub_20C7F endp



; Attributes: bp-based frame

sub_20CE7 proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_20CFC
xor     dx, dx
mov     ax, dx
jmp     loc_20D78

loc_20CFC:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 39h ; '9'
jnz     short loc_20D27
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_20CE7
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_20D30

loc_20D27:
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_20D30:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 12h
jnz     short loc_20D47
mov     ax, 0B7h
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_20D72

loc_20D47:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_21B15
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 39h ; '9'
jnz     short loc_20D69
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
jmp     short loc_20D72

loc_20D69:
les     bx, [bp+var_4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_20D72:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_20D78:
mov     sp, bp
pop     bp
retn    4
sub_20CE7 endp



; Attributes: bp-based frame

sub_20D7E proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
mov     ax, 6Bh ; 'k'
push    ax
mov     ax, 0A4h
push    ax
call    sub_21215
pop     bp
retf    8
sub_20D7E endp



; Attributes: bp-based frame

sub_20DA1 proc near

var_1= byte ptr -1
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 2
push    si
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_20DB9
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_20DC0

loc_20DB9:
xor     dx, dx
mov     ax, dx
jmp     loc_20EFB

loc_20DC0:
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
mov     bx, ax
mov     al, [bx+4AA1h]
mov     [bp+var_1], al
mov     al, [bp+var_1]
cbw
cmp     ax, 3           ; switch 4 cases
jbe     short loc_20DDC
jmp     def_20DE0       ; jumptable 00020DE0 default case

loc_20DDC:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_20DE0[bx] ; switch jump
jpt_20DE0 dw offset loc_20DED ; jump table for switch statement
dw offset loc_20ED9
dw offset loc_20E30
dw offset loc_20E09

loc_20DED:              ; jumptable 00020DE0 case 0
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
jmp     loc_20EFB

loc_20E09:              ; jumptable 00020DE0 case 3
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
cbw
push    ax
call    sub_21DC9
les     bx, [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     loc_20ED9       ; jumptable 00020DE0 case 1

loc_20E30:              ; jumptable 00020DE0 case 2
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     al, es:[bx+1]
cbw
mov     si, ax
cmp     si, 9
jle     short loc_20E65
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
jmp     loc_20EF5

loc_20E65:
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
cbw
mov     bx, ax
mov     al, [bx+7B6Ch]
cmp     al, [si+7B6Ch]
jg      short loc_20ED9 ; jumptable 00020DE0 case 1
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_20DA1
jmp     short loc_20EFB

def_20DE0:              ; jumptable 00020DE0 default case
test    [bp+var_1], 10h
jz      short loc_20EB4
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_20DA1
les     bx, [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_20EB4:
test    [bp+var_1], 20h
jz      short loc_20ED9 ; jumptable 00020DE0 case 1
les     bx, [bp+arg_4]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_20DA1
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_20ED9:              ; jumptable 00020DE0 case 1
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_20EF5:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]

loc_20EFB:
pop     si
mov     sp, bp
pop     bp
retn    8
sub_20DA1 endp



; Attributes: bp-based frame

sub_20F02 proc near

var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 0Eh
push    si
push    di
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_20F19
xor     dx, dx
mov     ax, dx
jmp     loc_210F9

loc_20F19:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
mov     bx, ax
mov     al, [bx+4AE3h]
cbw
mov     di, ax
mov     ax, di
or      ax, ax
jnz     short loc_20F32
jmp     loc_21060

loc_20F32:
cmp     ax, 2
jnz     short loc_20F3A
jmp     loc_21038

loc_20F3A:
cmp     ax, 3
jz      short loc_20F42
jmp     loc_2107F

loc_20F42:
les     bx, [bp+arg_0]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     dx, ds:73D4h
jl      short loc_20F7B
jnz     short loc_20F61
cmp     ax, ds:73D2h
jb      short loc_20F7B

loc_20F61:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73D8h
jg      short loc_20F7B
jnz     short loc_20F75
cmp     ax, ds:73D6h
ja      short loc_20F7B

loc_20F75:
mov     si, 1
jmp     loc_21020

loc_20F7B:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73E0h
jg      short loc_20F95
jnz     short loc_20F8F
cmp     ax, ds:73DEh
ja      short loc_20F95

loc_20F8F:
mov     si, 2
jmp     loc_21020

loc_20F95:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73E4h
jl      short loc_20FC3
jnz     short loc_20FA9
cmp     ax, ds:73E2h
jb      short loc_20FC3

loc_20FA9:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73E8h
jg      short loc_20FC3
jnz     short loc_20FBD
cmp     ax, ds:73E6h
ja      short loc_20FC3

loc_20FBD:
mov     si, 3
jmp     loc_21020

loc_20FC3:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73F0h
jg      short loc_20FDC
jnz     short loc_20FD7
cmp     ax, ds:73EEh
ja      short loc_20FDC

loc_20FD7:
mov     si, 4
jmp     short loc_21020

loc_20FDC:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73F4h
jl      short loc_21009
jnz     short loc_20FF0
cmp     ax, ds:73F2h
jb      short loc_21009

loc_20FF0:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:73F8h
jg      short loc_21009
jnz     short loc_21004
cmp     ax, ds:73F6h
ja      short loc_21009

loc_21004:
mov     si, 5
jmp     short loc_21020

loc_21009:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
cmp     dx, ds:7400h
jg      short loc_21060
jnz     short loc_2101D
cmp     ax, ds:73FEh
ja      short loc_21060

loc_2101D:
mov     si, 6

loc_21020:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
cmp     ax, si
jle     short loc_21060
push    si
xor     ax, ax
push    ax
call    sub_2A52D
jmp     loc_210F9

loc_21038:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     [bp+var_E], ax
les     bx, es:[bx+6]
mov     al, es:[bx+1]
cbw
mov     si, ax
cmp     si, 9
jg      short loc_21060
mov     bx, [bp+var_E]
mov     al, [bx+7B6Ch]
cmp     al, [si+7B6Ch]
jg      short loc_2106E

loc_21060:
les     bx, [bp+arg_0]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
jmp     loc_210F9

loc_2106E:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_20F02
jmp     loc_210F9

loc_2107F:
test    di, 40h
jz      short loc_2109B
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_20F02
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     short loc_210A5

loc_2109B:
mov     word ptr [bp+var_C+2], 0
mov     word ptr [bp+var_C], 0

loc_210A5:
test    di, 80h
jz      short loc_210C1
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_20F02
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_210CB

loc_210C1:
mov     word ptr [bp+var_8+2], 0
mov     word ptr [bp+var_8], 0

loc_210CB:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_210F3
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_210EB
les     bx, [bp+var_C]
mov     al, es:[bx+4]
les     bx, [bp+var_8]
cmp     al, es:[bx+4]
jle     short loc_210F3

loc_210EB:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
jmp     short loc_210F9

loc_210F3:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]

loc_210F9:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_20F02 endp



; Attributes: bp-based frame

sub_21101 proc far

var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2114C
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 2
jle     short loc_2114C
cmp     byte ptr es:[bx+1], 9
jg      short loc_2114C
mov     al, es:[bx]
cbw
mov     bx, ax
cmp     byte ptr [bx+4AE3h], 0
jz      short loc_2114C
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_20F02
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     al, es:[bx+4]
les     bx, [bp+arg_0]
cmp     al, es:[bx+1]
jnz     short loc_21154

loc_2114C:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
jmp     short loc_21163

loc_21154:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_20DA1

loc_21163:
mov     sp, bp
pop     bp
retf    4
sub_21101 endp



; Attributes: bp-based frame

sub_21169 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 2
push    ax
call    sub_21948
or      ax, ax
jz      short loc_2118B
jmp     loc_2120D

loc_2118B:
les     bx, [bp+arg_4]
les     bx, es:[bx]
mov     al, es:[bx+5]
mov     ah, 0
mov     si, ax
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     al, es:[bx+5]
mov     ah, 0
mov     di, ax
mov     ax, si
and     ax, 40h
mov     [bp+var_4], ax
mov     ax, di
and     ax, 40h
mov     [bp+var_2], ax
and     si, 80h
and     di, 80h
les     bx, [bp+arg_4]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_21202
les     bx, [bp+arg_0]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_21202
cmp     di, si
jl      short loc_21202
cmp     ax, [bp+var_4]
jl      short loc_21202
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_218D8
or      ax, ax
jz      short loc_21202
mov     ax, 0BEh
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_2120D

loc_21202:
mov     ax, 0B0h
push    ax
call    sub_31324
inc     sp
inc     sp

loc_2120D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_21169 endp



; Attributes: bp-based frame

sub_21215 proc far

var_10= byte ptr -10h
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= dword ptr  0Ch
arg_A= dword ptr  10h

push    bp
mov     bp, sp
sub     sp, 10h
push    si
push    di
mov     di, [bp+arg_4]
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 0
jnz     short loc_2122C
jmp     loc_216C2

loc_2122C:
push    word ptr [bp+arg_A+2]
push    bx
call    sub_237EA
mov     word ptr [bp+arg_A+2], dx
mov     word ptr [bp+arg_A], ax
les     bx, [bp+arg_A]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
cmp     dx, word ptr [bp+arg_6+2]
jnz     short loc_21253
cmp     ax, word ptr [bp+arg_6]
jnz     short loc_21253
jmp     loc_216C2

loc_21253:
les     bx, [bp+arg_A]
mov     al, es:[bx+1]
cbw
mov     si, ax
les     bx, [bp+arg_6]
mov     al, es:[bx+4]
cbw
mov     [bp+var_6], ax
sub     ax, 7           ; switch 12 cases
cmp     ax, 0Bh
jbe     short loc_21273
jmp     def_21277       ; jumptable 00021277 default case, cases 8,9,12-14

loc_21273:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_21277[bx] ; switch jump
jpt_21277 dw offset loc_2129A ; jump table for switch statement
dw offset def_21277
dw offset def_21277
dw offset loc_2129A
dw offset loc_2129A
dw offset def_21277
dw offset def_21277
dw offset def_21277
dw offset loc_21730
dw offset loc_21294
dw offset loc_21294
dw offset loc_21294

loc_21294:              ; jumptable 00021277 cases 16-18
call    sub_218CC
jmp     loc_216C2

loc_2129A:              ; jumptable 00021277 cases 7,10,11
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
call    sub_2240B
les     bx, [bp+arg_A]
mov     al, es:[bx+1]
cbw
mov     si, ax
or      di, di
jnz     short loc_212F0
test    byte ptr [si+6810h], 1
jz      short loc_212F0
cmp     byte ptr es:[bx], 2
jnz     short loc_212CA
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_212F0

loc_212CA:
cmp     [bp+var_6], 0Bh
jz      short loc_212E6
cmp     si, 8
jz      short loc_212DA
cmp     si, 9
jnz     short loc_212E6

loc_212DA:
push    [bp+arg_2]
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_212F0

loc_212E6:
push    [bp+arg_0]
call    sub_31324
inc     sp
inc     sp

loc_212F0:
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_21343
cmp     si, [bp+var_6]
jnz     short loc_21343
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
mov     ax, 2
push    ax
call    sub_2A221
or      ax, ax
jz      short loc_21343

loc_21319:
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
les     bx, [bp+arg_A]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
cmp     byte ptr ds:9A63h, 3
jz      short loc_21334
jmp     loc_216C2

loc_21334:
les     bx, [bp+arg_A]
les     bx, es:[bx+6]
mov     byte ptr es:[bx+1], 5
jmp     loc_216C2

loc_21343:
or      di, di
jnz     short def_21277 ; jumptable 00021277 default case, cases 8,9,12-14
test    byte ptr [si+6810h], 14h
jz      short def_21277 ; jumptable 00021277 default case, cases 8,9,12-14
les     bx, [bp+arg_A]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_21169

def_21277:              ; jumptable 00021277 default case, cases 8,9,12-14
mov     ax, si
sub     ax, 7           ; switch 12 cases
cmp     ax, 0Bh
jbe     short loc_2136F
jmp     def_21373       ; jumptable 00021373 default case, cases 14,16,17

loc_2136F:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_21373[bx] ; switch jump
jpt_21373 dw offset loc_213B4 ; jump table for switch statement
dw offset loc_21390
dw offset loc_21390
dw offset loc_213B4
dw offset loc_213B4
dw offset loc_21497
dw offset loc_21497
dw offset def_21373
dw offset loc_214A3
dw offset def_21373
dw offset def_21373
dw offset loc_214B0

loc_21390:              ; jumptable 00021373 cases 8,9
cmp     [bp+var_6], 5
jz      short loc_2139F
cmp     [bp+var_6], 6
jz      short loc_2139F
jmp     def_21373       ; jumptable 00021373 default case, cases 14,16,17

loc_2139F:
or      di, di
jz      short loc_213A6
jmp     def_21373       ; jumptable 00021373 default case, cases 14,16,17

loc_213A6:
mov     ax, 0B1h
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     def_21373       ; jumptable 00021373 default case, cases 14,16,17

loc_213B4:              ; jumptable 00021373 cases 7,10,11
mov     bx, [bp+var_6]
test    byte ptr [bx+6810h], 2
jz      short loc_213C1
call    sub_218CC

loc_213C1:
or      di, di
jnz     short loc_21402
mov     bx, [bp+var_6]
test    byte ptr [bx+6810h], 1
jz      short loc_21402
cmp     si, 0Bh
jnz     short loc_213E0
cmp     bx, 8
jz      short loc_213F8
cmp     bx, 9
jnz     short loc_213EC
jmp     short loc_213F8

loc_213E0:
cmp     [bp+var_6], 8
jz      short loc_213EC
cmp     [bp+var_6], 9
jnz     short loc_213F8

loc_213EC:
push    [bp+arg_2]
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_21402

loc_213F8:
push    [bp+arg_0]
call    sub_31324
inc     sp
inc     sp

loc_21402:
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 2
jnz     short loc_21448
cmp     [bp+var_6], 0Bh
jnz     short loc_21448
cmp     si, 0Bh
jz      short loc_21448
cmp     byte ptr ds:9A63h, 3
jz      short loc_21420
jmp     loc_21730       ; jumptable 00021277 case 15

loc_21420:
cmp     word ptr ds:0C0EFh, 2
jnz     short loc_2143A
mov     ax, es:[bx+6]
mov     dx, ds:0C139h
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     loc_216C2

loc_2143A:
mov     ax, 3Dh ; '='
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_21730       ; jumptable 00021277 case 15

loc_21448:
mov     ax, [bp+var_6]
cmp     ax, si
jnz     short def_21373 ; jumptable 00021373 default case, cases 14,16,17
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 7
les     bx, [bp+arg_A]
les     bx, es:[bx+2]
mov     dl, es:[bx+5]
mov     dh, 0
and     dx, 7
cmp     ax, dx
jnz     short def_21373 ; jumptable 00021373 default case, cases 14,16,17
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
les     bx, [bp+arg_A]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
cmp     byte ptr ds:9A63h, 3
jz      short loc_2148B
jmp     loc_216C2

loc_2148B:
cmp     byte ptr es:[bx], 2Ch ; ','
jz      short loc_21494
jmp     loc_216C2

loc_21494:
jmp     loc_21334

loc_21497:              ; jumptable 00021373 cases 12,13
mov     bx, [bp+var_6]
test    byte ptr [bx+6810h], 14h
jz      short def_21373 ; jumptable 00021373 default case, cases 14,16,17
jmp     short loc_214B0 ; jumptable 00021373 case 18

loc_214A3:              ; jumptable 00021373 case 15
mov     ax, 40h ; '@'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short def_21373 ; jumptable 00021373 default case, cases 14,16,17

loc_214B0:              ; jumptable 00021373 case 18
call    sub_218CC

def_21373:              ; jumptable 00021373 default case, cases 14,16,17
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
call    sub_22692
or      ax, ax
jz      short loc_21530
test    byte ptr [si+6810h], 2
jnz     short loc_21530
mov     bx, [bp+var_6]
test    byte ptr [bx+6810h], 2
jnz     short loc_21530
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_2A8BF
mov     [bp+var_4], ax
les     bx, [bp+arg_A]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_2A8BF
mov     [bp+var_2], ax
mov     ax, [bp+var_4]
cmp     ax, [bp+var_2]
jbe     short loc_214FF
jmp     loc_21730       ; jumptable 00021277 case 15

loc_214FF:
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 7
jz      short loc_2150B
jmp     loc_216AA

loc_2150B:
cmp     ax, [bp+var_2]
jb      short loc_21513
jmp     loc_216AA

loc_21513:
les     bx, es:[bx+6]
test    byte ptr es:[bx+9], 40h
jz      short loc_21521
jmp     loc_21730       ; jumptable 00021277 case 15

loc_21521:
les     bx, [bp+arg_A]
les     bx, es:[bx+6]
or      byte ptr es:[bx+9], 8
jmp     loc_216AA

loc_21530:
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_21550
mov     bx, [bp+var_6]
test    byte ptr [bx+6810h], 14h
jz      short loc_21550
mov     al, byte ptr [bp+var_6]
mov     bx, word ptr [bp+arg_A]
mov     es:[bx+1], al
jmp     loc_21319

loc_21550:
mov     bx, si
shl     bx, 1
mov     ax, [bx+7B78h]
mov     bx, [bp+var_6]
shl     bx, 1
cmp     ax, [bx+7B78h]
jnz     short loc_2157A
les     bx, [bp+arg_A]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
les     bx, [bp+arg_6]
cmp     al, es:[bx+5]
jnz     short loc_2157A
jmp     loc_216AA

loc_2157A:
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 2
jz      short loc_21586
jmp     loc_21620

loc_21586:
mov     ax, [bp+var_6]
cmp     ax, 0Ch
jz      short loc_2159A
cmp     ax, 0Dh
jz      short loc_2159A
cmp     ax, 0Eh
jz      short loc_2159A
jmp     short loc_215FF

loc_2159A:
test    byte ptr [si+6810h], 20h
jz      short loc_215B8
les     bx, [bp+arg_A]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_4320A
jmp     short loc_215CD

loc_215B8:
les     bx, [bp+arg_A]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_431DC

loc_215CD:
cmp     [bp+var_6], 0Ch
jnz     short loc_215DF
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_42D6E
jmp     short loc_215EF

loc_215DF:
cmp     [bp+var_6], 0Dh
jnz     short loc_215EF
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_42E3D

loc_215EF:
push    ss
lea     ax, [bp+var_10]
push    ax
push    [bp+var_6]
call    sub_29AEA
jmp     loc_21748

loc_215FF:
les     bx, [bp+arg_A]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    [bp+var_6]
call    sub_21DC9
les     bx, [bp+arg_A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     loc_216AA

loc_21620:
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 3
jz      short loc_2162C
jmp     loc_216CB

loc_2162C:
cmp     [bp+var_6], 0Ch
jnz     short loc_21643
mov     dx, word ptr [bp+arg_A+2]
mov     ax, bx
add     ax, 6
push    dx
push    ax
call    sub_42D6E
jmp     short loc_216AA

loc_21643:
cmp     [bp+var_6], 0Dh
jnz     short loc_2165B
mov     dx, word ptr [bp+arg_A+2]
mov     ax, word ptr [bp+arg_A]
add     ax, 6
push    dx
push    ax
call    sub_42E3D
jmp     short loc_216AA

loc_2165B:
cmp     [bp+var_6], 0Eh
jz      short loc_216AA
mov     bx, [bp+var_6]
test    byte ptr [bx+6810h], 20h
jz      short loc_21688
mov     dx, word ptr [bp+arg_A+2]
mov     ax, word ptr [bp+arg_A]
add     ax, 6
push    dx
push    ax
call    sub_431AE
les     bx, [bp+arg_A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_216A3

loc_21688:
mov     dx, word ptr [bp+arg_A+2]
mov     ax, word ptr [bp+arg_A]
add     ax, 6
push    dx
push    ax
call    sub_4317A
les     bx, [bp+arg_A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_216A3:
les     bx, [bp+arg_A]
mov     byte ptr es:[bx], 2

loc_216AA:
mov     al, byte ptr [bp+var_6]
les     bx, [bp+arg_A]
mov     es:[bx+1], al
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_216C2:
mov     dx, word ptr [bp+arg_A+2]
mov     ax, word ptr [bp+arg_A]
jmp     loc_21748

loc_216CB:
cmp     [bp+var_6], 0Ah
jge     short loc_21704
cmp     si, 0Ah
jge     short loc_21704
mov     bx, [bp+var_6]
mov     al, [bx+7B6Ch]
cmp     al, [si+7B6Ch]
jge     short loc_21704
les     bx, [bp+arg_A]
mov     al, es:[bx]
cbw
mov     bx, ax
cmp     byte ptr [bx+4AA1h], 0
jz      short loc_21730 ; jumptable 00021277 case 15
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_20DA1
jmp     short loc_21748

loc_21704:
cmp     [bp+var_6], 0Ch
jnz     short loc_21730 ; jumptable 00021277 case 15
cmp     si, 0Dh
jnz     short loc_21730 ; jumptable 00021277 case 15
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx], 35h ; '5'
jnz     short loc_21730 ; jumptable 00021277 case 15
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 0Ch
jnz     short loc_21730 ; jumptable 00021277 case 15
les     bx, [bp+arg_A]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
jmp     short loc_21748

loc_21730:              ; jumptable 00021277 case 15
mov     al, 35h ; '5'
push    ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
xor     ax, ax
push    ax
push    ax
call    sub_29862

loc_21748:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Eh
sub_21215 endp



; Attributes: bp-based frame

sub_21750 proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
push    word ptr [bp+var_4+2]
push    bx
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 3
push    ax
call    sub_21948
or      ax, ax
jnz     short loc_217BD
les     bx, [bp+var_4]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_217B2
les     bx, [bp+arg_0]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_217B2
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_218D8
or      ax, ax
jz      short loc_217B2
mov     ax, 0BEh
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_217BD

loc_217B2:
mov     ax, 0B0h
push    ax
call    sub_31324
inc     sp
inc     sp

loc_217BD:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_21215
mov     sp, bp
pop     bp
retn    8
sub_21750 endp



; Attributes: bp-based frame

sub_217DB proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    si
push    di
les     bx, [bp+arg_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
cmp     dx, word ptr [bp+arg_0+2]
jnz     short loc_217F8
cmp     ax, word ptr [bp+arg_0]
jnz     short loc_217F8
jmp     def_21837       ; jumptable 00021837 default case, cases 10,15-17

loc_217F8:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     di, ax
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
cbw
mov     si, ax
mov     ax, si
cmp     ax, 10h
jnz     short loc_21816
jmp     loc_218BF       ; jumptable 00021837 case 18

loc_21816:
cmp     ax, 11h
jnz     short loc_2181E
jmp     loc_218BF       ; jumptable 00021837 case 18

loc_2181E:
cmp     ax, 12h
jnz     short loc_21826
jmp     loc_218BF       ; jumptable 00021837 case 18

loc_21826:
jmp     short $+2

loc_21828:
mov     ax, di
dec     ax              ; switch 18 cases
cmp     ax, 11h
jbe     short loc_21833
jmp     def_21837       ; jumptable 00021837 default case, cases 10,15-17

loc_21833:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_21837[bx] ; switch jump
jpt_21837 dw offset loc_2189B ; jump table for switch statement
dw offset loc_2189B
dw offset loc_2189B
dw offset loc_2189B
dw offset loc_2189B
dw offset loc_2189B
dw offset loc_21860
dw offset loc_2189B
dw offset loc_2189B
dw offset def_21837
dw offset loc_21860
dw offset loc_2189B
dw offset loc_2189B
dw offset loc_2189B
dw offset def_21837
dw offset def_21837
dw offset def_21837
dw offset loc_218BF

loc_21860:              ; jumptable 00021837 cases 7,11
test    byte ptr [si+6810h], 14h
jz      short loc_218BF ; jumptable 00021837 case 18
les     bx, [bp+arg_0]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 11h
jnz     short def_21837 ; jumptable 00021837 default case, cases 10,15-17
les     bx, [bp+arg_0]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, 0FFFFh
push    ax
call    sub_2A221
or      ax, ax
jnz     short def_21837 ; jumptable 00021837 default case, cases 10,15-17
jmp     short loc_218BF ; jumptable 00021837 case 18

loc_2189B:              ; jumptable 00021837 cases 1-6,8,9,12-14
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2
jnz     short loc_218B5
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_218B5
test    byte ptr [si+6810h], 14h
jnz     short def_21837 ; jumptable 00021837 default case, cases 10,15-17

loc_218B5:
cmp     si, 0Eh
jle     short def_21837 ; jumptable 00021837 default case, cases 10,15-17
cmp     si, 13h
jz      short def_21837 ; jumptable 00021837 default case, cases 10,15-17

loc_218BF:              ; jumptable 00021837 case 18
xor     ax, ax
jmp     short loc_218C6

def_21837:              ; jumptable 00021837 default case, cases 10,15-17
mov     ax, 1

loc_218C6:
pop     di
pop     si
pop     bp
retn    8
sub_217DB endp




sub_218CC proc near
mov     ax, 5Dh ; ']'
push    ax
call    sub_312DE
inc     sp
inc     sp
retn
sub_218CC endp



; Attributes: bp-based frame

sub_218D8 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    si
push    di
les     bx, [bp+arg_4]
mov     al, es:[bx+5]
mov     ah, 0
mov     si, ax
and     si, 0Fh
les     bx, [bp+arg_0]
mov     al, es:[bx+5]
mov     ah, 0
mov     di, ax
and     di, 0Fh
cmp     byte ptr es:[bx+4], 0Ah
jnz     short loc_2190E
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 0Ah
jnz     short loc_21940
jmp     short loc_2193B

loc_2190E:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 0Bh
jnz     short loc_2192D
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 0Bh
jnz     short loc_2193B
cmp     si, di
jz      short loc_2193B
cmp     si, 6
jz      short loc_21940
jmp     short loc_2193B

loc_2192D:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 7
jnz     short loc_21940
cmp     si, di
jnz     short loc_21940

loc_2193B:
mov     ax, 1
jmp     short loc_21942

loc_21940:
xor     ax, ax

loc_21942:
pop     di
pop     si
pop     bp
retn    8
sub_218D8 endp



; Attributes: bp-based frame

sub_21948 proc near

arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= dword ptr  0Ah

push    bp
mov     bp, sp
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_218D8
or      ax, ax
jnz     short loc_21962
xor     ax, ax
jmp     short loc_2199D

loc_21962:
les     bx, [bp+arg_6]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 0Fh
jz      short loc_2197C
les     bx, [bp+arg_2]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 0Fh
jnz     short loc_21981

loc_2197C:
mov     ax, 1
jmp     short loc_2199D

loc_21981:
les     bx, [bp+arg_6]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
les     bx, [bp+arg_2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    [bp+arg_0]
call    sub_2A221

loc_2199D:
pop     bp
retn    0Ah
sub_21948 endp



; Attributes: bp-based frame

sub_219A1 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_219CD
mov     bx, word ptr [bp+arg_0]
les     bx, es:[bx+2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2A8BF
mov     si, ax
jmp     short loc_219DF

loc_219CD:
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_2A8BF
mov     si, ax

loc_219DF:
or      si, si
jnz     short loc_219EE
mov     ax, 5Eh ; '^'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_219EE:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3B144
push    dx
push    ax
mov     ax, si
xor     dx, dx
push    dx
push    ax
call    sub_29A88
pop     si
pop     bp
retn    4
sub_219A1 endp



; Attributes: bp-based frame

sub_21A0B proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3B144
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     al, 0Fh
push    ax
push    dx
push    [bp+var_4]
push    [bp+arg_6]
push    [bp+arg_4]
push    dx
push    [bp+var_4]
xor     ax, ax
push    ax
mov     ax, 6Bh ; 'k'
push    ax
mov     ax, 0A4h
push    ax
push    cs
call    near ptr sub_21215
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_219A1
push    dx
push    ax
call    sub_29862
mov     [bp+arg_6], dx
mov     [bp+arg_4], ax
mov     sp, bp
pop     bp
retn    8
sub_21A0B endp



; Attributes: bp-based frame

sub_21A60 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_21A75
mov     dx, word ptr [bp+arg_4+2]
mov     ax, bx
jmp     loc_21B11

loc_21A75:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_21A82
jmp     loc_21B0B

loc_21A82:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_21AC4
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_21A0B
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
les     bx, [bp+arg_4]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_4+2]
push    bx
push    dx
push    ax
call    sub_22671
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_21AF3

loc_21AC4:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_21A0B
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+arg_0+2]
push    bx
push    dx
push    ax
call    sub_22671
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_21AF3:
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_1FF72
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_21B0B:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_21B11:
pop     bp
retf    8
sub_21A60 endp



; Attributes: bp-based frame

sub_21B15 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     si, ax
mov     bx, si
shl     bx, 1
cmp     word ptr [bx+7BA2h], 0
jz      short loc_21B55
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     bx, si
shl     bx, 1
push    word ptr [bx+7BA2h]
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
push    cs
call    near ptr sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_21B55:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
pop     si
pop     bp
retn    4
sub_21B15 endp



; Attributes: bp-based frame

sub_21B60 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     si, ax
cmp     si, 8
jl      short loc_21BAA
cmp     si, 0Fh
jz      short loc_21BAA
mov     bx, si
shl     bx, 1
cmp     word ptr [bx+7BA2h], 0
jz      short loc_21BAA
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     bx, si
shl     bx, 1
push    word ptr [bx+7BA2h]
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
push    cs
call    near ptr sub_21215
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_21BAA:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
pop     si
pop     bp
retn    4
sub_21B60 endp



; Attributes: bp-based frame

sub_21BB5 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 7
jnz     short loc_21BCF
les     bx, es:[bx+6]
mov     al, es:[bx+9]
cbw
and     ax, 40h
jmp     short loc_21BF5

loc_21BCF:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4
jz      short loc_21BEE
cmp     byte ptr es:[bx], 6
jz      short loc_21BEE
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_21BF3
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_21BF3

loc_21BEE:
mov     ax, 1
jmp     short loc_21BF5

loc_21BF3:
xor     ax, ax

loc_21BF5:
pop     bp
retn    4
sub_21BB5 endp



; Attributes: bp-based frame

sub_21BF9 proc far

var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 8
jnz     short loc_21C0E
jmp     loc_21C8A       ; jumptable 00021C1D cases 1,4,5,7

loc_21C0E:
jg      short loc_21C30
dec     ax              ; switch 7 cases
cmp     ax, 6
jbe     short loc_21C19
jmp     def_21C1D       ; jumptable 00021C1D default case, cases 2,3,6

loc_21C19:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_21C1D[bx] ; switch jump
jpt_21C1D dw offset loc_21C8A ; jump table for switch statement
dw offset def_21C1D
dw offset def_21C1D
dw offset loc_21C8A
dw offset loc_21C8A
dw offset def_21C1D
dw offset loc_21C8A

loc_21C30:
cmp     ax, 2Dh ; '-'
jz      short loc_21C8A ; jumptable 00021C1D cases 1,4,5,7
jg      short loc_21C43
cmp     ax, 9
jz      short loc_21C8A ; jumptable 00021C1D cases 1,4,5,7
cmp     ax, 2Bh ; '+'
jz      short loc_21C8A ; jumptable 00021C1D cases 1,4,5,7
jmp     short def_21C1D ; jumptable 00021C1D default case, cases 2,3,6

loc_21C43:
cmp     ax, 30h ; '0'
jz      short loc_21C4A
jmp     short def_21C1D ; jumptable 00021C1D default case, cases 2,3,6

loc_21C4A:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 12h
jnz     short def_21C1D ; jumptable 00021C1D default case, cases 2,3,6
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_21BF9
or      ax, ax
jz      short loc_21C86
les     bx, [bp+var_4]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_21BF9
or      ax, ax
jz      short loc_21C86
mov     ax, 1
jmp     short loc_21C88

loc_21C86:
xor     ax, ax

loc_21C88:
jmp     short loc_21C9B

loc_21C8A:              ; jumptable 00021C1D cases 1,4,5,7
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 10h
jz      short def_21C1D ; jumptable 00021C1D default case, cases 2,3,6
mov     ax, 1
jmp     short loc_21C9B

def_21C1D:              ; jumptable 00021C1D default case, cases 2,3,6
xor     ax, ax

loc_21C9B:
mov     sp, bp
pop     bp
retf    4
sub_21BF9 endp



; Attributes: bp-based frame

sub_21CA1 proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jz      short loc_21CB0
jmp     loc_21DC5

loc_21CB0:
cmp     [bp+arg_0], 8
jl      short loc_21CB9
jmp     loc_21DC5

loc_21CB9:
cmp     [bp+arg_0], 2
jz      short loc_21CCB
cmp     [bp+arg_0], 4
jz      short loc_21CCB
cmp     [bp+arg_0], 6
jnz     short loc_21D36

loc_21CCB:
les     bx, [bp+arg_2]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     bx, [bp+arg_0]
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, 73D2h
push    dx
push    ax
mov     ax, ds
mov     es, ax
pop     ax
pop     dx
cmp     dx, es:[bx+2]
jnb     short loc_21CF5
jmp     loc_21D93

loc_21CF5:
jnz     short loc_21CFF
cmp     ax, es:[bx]
jnb     short loc_21CFF
jmp     loc_21D93

loc_21CFF:
les     bx, [bp+arg_2]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     bx, [bp+arg_0]
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, 73D2h
push    dx
push    ax
mov     ax, ds
mov     es, ax
pop     ax
pop     dx
cmp     dx, es:[bx+6]
jnb     short loc_21D29
jmp     loc_21DA0

loc_21D29:
ja      short loc_21D34
cmp     ax, es:[bx+4]
ja      short loc_21D34
jmp     loc_21DA0

loc_21D34:
jmp     short loc_21D93

loc_21D36:
les     bx, [bp+arg_2]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     bx, [bp+arg_0]
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, 73D2h
push    dx
push    ax
mov     ax, ds
mov     es, ax
pop     ax
pop     dx
cmp     dx, es:[bx+2]
jl      short loc_21D93
jnz     short loc_21D64
cmp     ax, es:[bx]
jb      short loc_21D93

loc_21D64:
les     bx, [bp+arg_2]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     bx, [bp+arg_0]
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, 73D2h
push    dx
push    ax
mov     ax, ds
mov     es, ax
pop     ax
pop     dx
cmp     dx, es:[bx+6]
jl      short loc_21DA0
jg      short loc_21D93
cmp     ax, es:[bx+4]
jbe     short loc_21DA0

loc_21D93:
mov     ax, 0A7h
push    ax
call    sub_31324
mov     sp, bp
jmp     short loc_21DC5

loc_21DA0:
les     bx, [bp+arg_2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    [bp+arg_0]
call    sub_21DC9
les     bx, [bp+arg_2]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     al, byte ptr [bp+arg_0]
mov     es:[bx+1], al

loc_21DC5:
pop     bp
retn    6
sub_21CA1 endp



; Attributes: bp-based frame

sub_21DC9 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
dec     ax              ; switch 6 cases
cmp     ax, 5
jbe     short loc_21DD8
jmp     def_21DDC       ; jumptable 00021DDC default case

loc_21DD8:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_21DDC[bx] ; switch jump
jpt_21DDC dw offset loc_21DED ; jump table for switch statement
dw offset loc_21E39
dw offset loc_21E50
dw offset loc_21E9B
dw offset loc_21EB1
dw offset loc_21EF9

loc_21DED:              ; jumptable 00021DDC case 1
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, ds:73DEh
and     dx, ds:73E0h
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
mov     dx, ds:73E0h
mov     ax, ds:73DEh
add     ax, 1
adc     dx, 0
sar     dx, 1
rcr     ax, 1
and     ax, [bp+arg_2]
and     dx, [bp+arg_4]
or      dx, ax
jnz     short loc_21E1F
jmp     def_21DDC       ; jumptable 00021DDC default case

loc_21E1F:
mov     dx, ds:73E0h
mov     ax, ds:73DEh
not     ax
not     dx
or      ax, [bp+arg_2]
or      dx, [bp+arg_4]
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
jmp     def_21DDC       ; jumptable 00021DDC default case

loc_21E39:              ; jumptable 00021DDC case 2
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, ds:73DEh
and     dx, ds:73E0h
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
jmp     def_21DDC       ; jumptable 00021DDC default case

loc_21E50:              ; jumptable 00021DDC case 3
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, ds:73EEh
and     dx, ds:73F0h
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
mov     dx, ds:73F0h
mov     ax, ds:73EEh
add     ax, 1
adc     dx, 0
sar     dx, 1
rcr     ax, 1
and     ax, [bp+arg_2]
and     dx, [bp+arg_4]
or      dx, ax
jnz     short loc_21E82
jmp     def_21DDC       ; jumptable 00021DDC default case

loc_21E82:
mov     dx, ds:73F0h
mov     ax, ds:73EEh
not     ax
not     dx
or      ax, [bp+arg_2]
or      dx, [bp+arg_4]
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
jmp     short def_21DDC ; jumptable 00021DDC default case

loc_21E9B:              ; jumptable 00021DDC case 4
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, ds:73EEh
and     dx, ds:73F0h
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
jmp     short def_21DDC ; jumptable 00021DDC default case

loc_21EB1:              ; jumptable 00021DDC case 5
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, ds:73FEh
and     dx, ds:7400h
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
mov     dx, ds:7400h
mov     ax, ds:73FEh
add     ax, 1
adc     dx, 0
sar     dx, 1
rcr     ax, 1
and     ax, [bp+arg_2]
and     dx, [bp+arg_4]
or      dx, ax
jz      short def_21DDC ; jumptable 00021DDC default case
mov     dx, ds:7400h
mov     ax, ds:73FEh
not     ax
not     dx
or      ax, [bp+arg_2]
or      dx, [bp+arg_4]
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
jmp     short def_21DDC ; jumptable 00021DDC default case

loc_21EF9:              ; jumptable 00021DDC case 6
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, ds:73FEh
and     dx, ds:7400h
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax

def_21DDC:              ; jumptable 00021DDC default case
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
pop     bp
retf    6
sub_21DC9 endp



; Attributes: bp-based frame

sub_21F17 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
cmp     byte ptr ds:9A63h, 3
jnz     short loc_21F37
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_40F27
jmp     short loc_21F94

loc_21F37:
push    [bp+arg_2]
push    [bp+arg_0]
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
les     bx, es:[bx]
push    word ptr es:[bx+0Ah]
push    word ptr es:[bx+8]
xor     ax, ax
push    ax
call    sub_2D569
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jnz     short loc_21F7A
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6
call    sub_29811
jmp     short loc_21F94

loc_21F7A:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_21F9A

loc_21F94:
mov     sp, bp
pop     bp
retf    8
sub_21F17 endp



; Attributes: bp-based frame

sub_21F9A proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 8
push    si
les     bx, [bp+arg_6]
les     bx, es:[bx+2]
mov     [bp+var_6], es
mov     [bp+var_8], bx
mov     al, es:[bx+5]
mov     ah, 0
mov     si, ax
and     si, 0Fh
cmp     si, 6
jnz     short loc_21FC2
mov     si, 5

loc_21FC2:
push    [bp+arg_4]
push    [bp+arg_2]
push    si
call    sub_2A980
mov     [bp+var_6], dx
mov     [bp+var_8], ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    dx
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_21215
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
cmp     [bp+arg_0], 0
jz      short loc_22032
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, [bp+arg_0]
xor     dx, dx
push    dx
push    ax
call    sub_29A88
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    [bp+var_6]
push    [bp+var_8]
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    dx
push    ax
call    sub_22671
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
push    dx
push    ax
call    sub_237EA
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax

loc_22032:
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_1FF72
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
les     bx, [bp+arg_6]
cmp     byte ptr es:[bx+1], 14h
jnz     short loc_2207E
mov     bx, ax
les     bx, es:[bx+2]
mov     [bp+var_6], es
mov     [bp+var_8], bx
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    dx
push    ax
mov     al, es:[bx+0Ch]
push    ax
mov     al, es:[bx+6]
push    ax
call    sub_29A18
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax

loc_2207E:
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_21F9A endp



; Attributes: bp-based frame

sub_2208B proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
xor     si, si
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_220A1
jmp     loc_2222C

loc_220A1:
les     bx, es:[bx+2]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     al, es:[bx+4]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_220BC
jmp     loc_2214C

loc_220BC:
mov     bx, word ptr [bp+var_8]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 11h
jz      short loc_220CC
jmp     loc_2214C

loc_220CC:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_22118
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jnz     short loc_22118
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_4+2], es
mov     word ptr [bp+arg_4], bx
les     bx, es:[bx+6]
les     bx, es:[bx]
mov     [bp+var_A], es
mov     [bp+var_C], bx
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+8], 0Dh
jnz     short loc_2215F
mov     si, 1
jmp     short loc_2215F

loc_22118:
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     al, 2Bh ; '+'
push    ax
push    word ptr [bp+var_8+2]
push    bx
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
mov     [bp+var_A], 0
mov     [bp+var_C], 0
jmp     short loc_2215F

loc_2214C:
mov     ax, 61h ; 'a'
push    ax
call    sub_312DE
inc     sp
inc     sp
call    sub_29811
jmp     loc_22232

loc_2215F:
les     bx, [bp+var_8]
les     bx, es:[bx+8]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     word ptr ds:9A74h, 1
mov     ax, bx
or      ax, [bp+var_2]
jz      short loc_221A2
mov     al, es:[bx+18h]
push    ax
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_20CE7
push    dx
push    ax
push    [bp+var_A]
push    [bp+var_C]
call    sub_2239A
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
jmp     short loc_22202

loc_221A2:
or      si, si
jnz     short loc_221DF
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_20CE7
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 1
jnz     short loc_221D2
push    [bp+var_A]
push    [bp+var_C]
mov     ax, 0BFh
push    ax
call    sub_31324
add     sp, 6
jmp     short loc_22202

loc_221D2:
mov     ax, 0BCh
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_22202

loc_221DF:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_237EA
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
push    word ptr es:[bx+0Ah]
push    dx
push    ax
call    sub_3900D

loc_22202:
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     al, 36h ; '6'
push    ax
push    word ptr [bp+var_8+2]
push    bx
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_29862
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_2222C:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]

loc_22232:
pop     si
mov     sp, bp
pop     bp
retf    8
sub_2208B endp



; Attributes: bp-based frame

sub_22239 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jnz     short loc_2224E
xor     dx, dx
mov     ax, dx
jmp     loc_22394

loc_2224E:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 39h ; '9'
jnz     short loc_222A4
push    [bp+arg_C]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_22239
les     bx, [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
push    [bp+arg_C]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_22239
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
jmp     loc_2238E

loc_222A4:
les     bx, [bp+arg_8]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, bx
or      ax, word ptr [bp+var_4+2]
jnz     short loc_222BA
jmp     loc_22369

loc_222BA:
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+arg_8]
mov     es:[bx+2], dx
mov     es:[bx], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_217DB
or      ax, ax
jz      short loc_2230C
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
xor     ax, ax
push    ax
mov     ax, 6Bh ; 'k'
push    ax
mov     ax, 0A4h
push    ax
push    cs
call    near ptr sub_21215
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_22363

loc_2230C:
les     bx, [bp+var_4]
mov     ax, es:[bx]
or      ax, es:[bx+2]
jz      short loc_22340
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_22332
mov     ax, 53h ; 'S'
jmp     short loc_22335

loc_22332:
mov     ax, 55h ; 'U'

loc_22335:
push    ax
call    sub_312DE
add     sp, 0Ah
jmp     short loc_22363

loc_22340:
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr ds:9A74h
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_22357
mov     ax, 52h ; 'R'
jmp     short loc_2235A

loc_22357:
mov     ax, 54h ; 'T'

loc_2235A:
push    ax
call    sub_312DE
add     sp, 8

loc_22363:
inc     word ptr ds:9A74h
jmp     short loc_2238E

loc_22369:
cmp     byte ptr [bp+arg_C], 0
jnz     short loc_2238E
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_22382
mov     ax, 57h ; 'W'
jmp     short loc_22385

loc_22382:
mov     ax, 56h ; 'V'

loc_22385:
push    ax
call    sub_312DE
add     sp, 6

loc_2238E:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]

loc_22394:
mov     sp, bp
pop     bp
retn    0Eh
sub_22239 endp



; Attributes: bp-based frame

sub_2239A proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh
arg_C= word ptr  10h

push    bp
mov     bp, sp
push    [bp+arg_C]
push    ss
lea     ax, [bp+arg_8]
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_22239
mov     [bp+arg_6], dx
mov     [bp+arg_4], ax
mov     ax, [bp+arg_8]
or      ax, [bp+arg_A]
jz      short loc_223E0
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_223D5
mov     ax, 51h ; 'Q'
jmp     short loc_223D8

loc_223D5:
mov     ax, 50h ; 'P'

loc_223D8:
push    ax
call    sub_312DE
mov     sp, bp

loc_223E0:
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
pop     bp
retn    0Eh
sub_2239A endp

push    bp
mov     bp, sp
les     bx, [bp+4]
cmp     byte ptr es:[bx], 2
jnz     short loc_22405
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_22405
mov     ax, 1
jmp     short loc_22407

loc_22405:
xor     ax, ax

loc_22407:
pop     bp
retn    4


; Attributes: bp-based frame

sub_2240B proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
cmp     byte ptr ds:9A63h, 3
jz      short loc_2244D
cmp     word ptr ds:0C072h, 0
jnz     short loc_2244D
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_22504
mov     si, ax
mov     ax, si
or      ax, ax
jz      short loc_2244D
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    si
call    sub_2A980
push    dx
push    ax
call    sub_22452

loc_2244D:
pop     si
pop     bp
retf    4
sub_2240B endp



; Attributes: bp-based frame

sub_22452 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jnz     short loc_22460
jmp     loc_22500       ; jumptable 000224A1 cases 1-5,7

loc_22460:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_2246D
jmp     loc_22500       ; jumptable 000224A1 cases 1-5,7

loc_2246D:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
mov     al, es:[bx]
cbw
cmp     ax, 8
jnz     short loc_22495
jmp     loc_22500       ; jumptable 000224A1 cases 1-5,7

loc_22495:
jg      short loc_224B4
dec     ax              ; switch 7 cases
cmp     ax, 6
ja      short def_224A1 ; jumptable 000224A1 default case, case 6
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_224A1[bx] ; switch jump
jpt_224A1 dw offset loc_22500 ; jump table for switch statement
dw offset loc_22500
dw offset loc_22500
dw offset loc_22500
dw offset loc_22500
dw offset def_224A1
dw offset loc_22500

loc_224B4:
cmp     ax, 2Dh ; '-'
jz      short loc_22500 ; jumptable 000224A1 cases 1-5,7
jg      short loc_224CC
cmp     ax, 9
jz      short loc_22500 ; jumptable 000224A1 cases 1-5,7
cmp     ax, 2Bh ; '+'
jz      short loc_22500 ; jumptable 000224A1 cases 1-5,7
cmp     ax, 2Ch ; ','
jz      short loc_22500 ; jumptable 000224A1 cases 1-5,7
jmp     short def_224A1 ; jumptable 000224A1 default case, case 6

loc_224CC:
cmp     ax, 35h ; '5'
jz      short loc_22500 ; jumptable 000224A1 cases 1-5,7
cmp     ax, 38h ; '8'
jz      short loc_224EC
jmp     short $+2       ; jumptable 000224A1 default case, case 6

def_224A1:              ; jumptable 000224A1 default case, case 6
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_22452

loc_224EC:
les     bx, [bp+arg_4]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_22452

loc_22500:              ; jumptable 000224A1 cases 1-5,7
pop     bp
retn    8
sub_22452 endp



; Attributes: bp-based frame

sub_22504 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_22513
jmp     loc_22642       ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55

loc_22513:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_22520
jmp     loc_22642       ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55

loc_22520:
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 7
cmp     ax, 6
jnz     short loc_22535
jmp     loc_22642       ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55

loc_22535:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
dec     ax              ; switch 56 cases
cmp     ax, 37h
jbe     short loc_22545
jmp     def_22549       ; jumptable 00022549 default case, cases 6,10-22,26-42,46-48,50-52

loc_22545:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_22549[bx] ; switch jump
jpt_22549 dw offset loc_22642, offset loc_22642, offset loc_22642 ; jump table for switch statement
dw offset loc_22642, offset loc_22642, offset def_22549
dw offset loc_22642, offset loc_22642, offset loc_22642
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset loc_22642, offset loc_22642
dw offset loc_22642, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset def_22549, offset def_22549, offset def_22549
dw offset loc_22642, offset loc_225BE, offset loc_22642
dw offset def_22549, offset def_22549, offset def_22549
dw offset loc_2261C, offset def_22549, offset def_22549
dw offset def_22549, offset loc_22642, offset loc_22642
dw offset loc_22642, offset loc_2265E

loc_225BE:              ; jumptable 00022549 case 44
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
cmp     ax, 6
jnz     short loc_225D6
jmp     loc_22642       ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55

loc_225D6:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jnz     short loc_225FD
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_39B68
or      ax, ax
jnz     short loc_22642 ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55
mov     ax, 7
jmp     loc_2266C

loc_225FD:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 36h ; '6'
jz      short loc_22642 ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_22642 ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55
mov     ax, 3
jmp     short loc_2266C

loc_2261C:              ; jumptable 00022549 case 49
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_22504
mov     si, ax
or      si, si
jz      short loc_22642 ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_22504
cmp     ax, si
jz      short loc_2265A

loc_22642:              ; jumptable 00022549 cases 1-5,7-9,23-25,43,45,53-55
xor     ax, ax
jmp     short loc_2266C

def_22549:              ; jumptable 00022549 default case, cases 6,10-22,26-42,46-48,50-52
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_22504
mov     si, ax
or      si, si
jz      short loc_2265E ; jumptable 00022549 case 56

loc_2265A:
mov     ax, si
jmp     short loc_2266C

loc_2265E:              ; jumptable 00022549 case 56
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_22504

loc_2266C:
pop     si
pop     bp
retn    4
sub_22504 endp



; Attributes: bp-based frame

sub_22671 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
mov     al, 0Dh
push    ax
push    [bp+arg_A]
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_29862
pop     bp
retn    0Ch
sub_22671 endp



; Attributes: bp-based frame

sub_22692 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 5
jz      short loc_226B6
cmp     byte ptr es:[bx], 8
jz      short loc_226B6
cmp     byte ptr es:[bx], 7
jz      short loc_226B6
cmp     byte ptr es:[bx], 1
jz      short loc_226B6
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_226BB

loc_226B6:
mov     ax, 1
jmp     short loc_226BD

loc_226BB:
xor     ax, ax

loc_226BD:
pop     bp
retf    4
sub_22692 endp



; Attributes: bp-based frame

sub_226C1 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_0]
les     bx, [bp+arg_2]
les     bx, es:[bx+8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_22701

loc_226DE:
les     bx, [bp+var_4]
les     bx, es:[bx+0Ch]
mov     al, es:[bx+5]
mov     ah, 0
test    ax, si
jz      short loc_226F4
mov     ax, 1
jmp     short loc_2270B

loc_226F4:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_22701:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_226DE
xor     ax, ax

loc_2270B:
pop     si
mov     sp, bp
pop     bp
retn    6
sub_226C1 endp

seg004 ends


; Segment type: Pure code
seg005 segment byte public 'CODE' use16
assume cs:seg005
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_22712 proc near

var_16= word ptr -16h
var_14= word ptr -14h
var_12= dword ptr -12h
var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 16h
push    si
push    di
mov     si, [bp+arg_0]
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     ax, [bp+arg_2]
or      ax, [bp+arg_4]
jz      short loc_22733
jmp     loc_22D44

loc_22733:
mov     al, ds:0BED2h
mov     ah, 0
cmp     ax, 2Bh ; '+'
jnz     short loc_22740
jmp     loc_228D1

loc_22740:
jg      short loc_2278C
cmp     ax, 19h
jnz     short loc_2274A
jmp     loc_227E4

loc_2274A:
jg      short loc_22771
cmp     ax, 15h
jnz     short loc_22754
jmp     loc_22818

loc_22754:
jg      short loc_22769
cmp     ax, 1
jnz     short loc_2275E
jmp     loc_22A67

loc_2275E:
cmp     ax, 14h
jnz     short loc_22766
jmp     loc_2284C

loc_22766:              ; jumptable 0002279B default case, case 46
jmp     def_2279B

loc_22769:
cmp     ax, 16h
jz      short loc_227B0
jmp     def_2279B       ; jumptable 0002279B default case, case 46

loc_22771:
cmp     ax, 28h ; '('
jnz     short loc_22779
jmp     loc_22869

loc_22779:
cmp     ax, 29h ; ')'
jnz     short loc_22781
jmp     loc_2289D

loc_22781:
cmp     ax, 2Ah ; '*'
jnz     short loc_22789
jmp     loc_22971

loc_22789:              ; jumptable 0002279B default case, case 46
jmp     def_2279B

loc_2278C:              ; switch 8 cases
sub     ax, 2Ch ; ','
cmp     ax, 7
jbe     short loc_22797
jmp     def_2279B       ; jumptable 0002279B default case, case 46

loc_22797:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2279B[bx] ; switch jump
jpt_2279B dw offset loc_22921 ; jump table for switch statement
dw offset loc_22CC8
dw offset def_2279B
dw offset loc_22B52
dw offset loc_22BD7
dw offset loc_22BFC
dw offset loc_22C14
dw offset loc_22B0B

loc_227B0:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_227CA
jmp     loc_22FFE

loc_227CA:
mov     ax, 2Bh ; '+'
push    ax
push    dx
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_227E4:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_227FE
jmp     loc_22FFE

loc_227FE:
mov     ax, 2Ch ; ','
push    ax
push    dx
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22818:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_22832
jmp     loc_22FFE

loc_22832:
mov     ax, 28h ; '('
push    ax
push    dx
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_2284C:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jz      short loc_22866
jmp     loc_22DBA

loc_22866:
jmp     loc_22FFE

loc_22869:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_22883
jmp     loc_22FFE

loc_22883:
mov     ax, 2Ah ; '*'
push    ax
push    dx
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_2289D:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_228B7
jmp     loc_22FFE

loc_228B7:
mov     ax, 29h ; ')'
push    ax
push    dx
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_228D1:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_228EB
jmp     loc_22FFE

loc_228EB:
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     dx, dx
mov     ax, 1
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
mov     ax, 18h
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
push    dx
push    word ptr [bp+var_E]
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22921:              ; jumptable 0002279B case 44
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_2293B
jmp     loc_22FFE

loc_2293B:
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     dx, dx
mov     ax, 1
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
mov     ax, 19h
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
push    dx
push    word ptr [bp+var_E]
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22971:
call    sub_26945
cmp     al, 1
jnz     short loc_229C9
call    sub_26945
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jz      short loc_229A0
call    sub_232DC
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_2299D
jmp     loc_22FFE

loc_2299D:
jmp     loc_22A20

loc_229A0:
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ax
push    ax
call    sub_2307D
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
or      ax, dx
jnz     short loc_229B8
jmp     loc_22FFE

loc_229B8:
cmp     byte ptr ds:0BED2h, 2
jz      short loc_229C2
jmp     def_2279B       ; jumptable 0002279B default case, case 46

loc_229C2:
call    sub_26945
jmp     short loc_229DE

loc_229C9:
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_22712
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
or      ax, dx
jnz     short loc_229DE
jmp     loc_22FFE

loc_229DE:
les     bx, [bp+var_E]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_22A13
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 10h
jz      short loc_22A00
les     bx, [bp+var_E]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 11h
jnz     short loc_22A13

loc_22A00:
les     bx, [bp+var_E]
les     bx, es:[bx+6]
les     bx, es:[bx+2]
mov     [bp+var_2], es
mov     [bp+var_4], bx
jmp     short loc_22A20

loc_22A13:
les     bx, [bp+var_E]
les     bx, es:[bx+2]
mov     [bp+var_2], es
mov     [bp+var_4], bx

loc_22A20:
push    [bp+var_2]
push    [bp+var_4]
call    sub_2A8BF
xor     dx, dx
mov     ds:0BEDAh, dx
mov     ds:0BED8h, ax
or      ax, dx
jnz     short loc_22A43
mov     ax, 40h ; '@'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_22A43:
mov     ax, 6
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_29A88
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22A67:
call    sub_26945
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jz      short loc_22AE3
call    sub_232DC
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_22A8A
jmp     loc_22FFE

loc_22A8A:
cmp     byte ptr ds:9A63h, 3
jnz     short loc_22AAE
cmp     byte ptr ds:0BED2h, 2Fh ; '/'
jnz     short loc_22AAE
push    dx
push    [bp+var_4]
call    sub_40B5A
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jz      short loc_22AAE
jmp     loc_22D2E

loc_22AAE:
xor     ax, ax
push    ax
push    ax
push    si
call    sub_22712
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_22AC3
jmp     loc_22FFE

loc_22AC3:
push    dx
push    word ptr [bp+var_12]
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22AE3:
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jnz     short loc_22AFE
jmp     loc_22FFE

loc_22AFE:
cmp     byte ptr ds:0BED2h, 2
jnz     short loc_22B08
jmp     loc_22D2E

loc_22B08:              ; jumptable 0002279B default case, case 46
jmp     def_2279B

loc_22B0B:              ; jumptable 0002279B case 51
mov     ax, ds:9A70h
or      ax, ds:9A72h
jnz     short loc_22B1F
mov     ax, 65h ; 'e'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_22B1F:
mov     al, 9
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
call    sub_298D7
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
mov     ax, 2Ch ; ','
push    ax
push    dx
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22B52:              ; jumptable 0002279B case 47
les     bx, ds:0BED8h
mov     [bp+var_6], es
mov     [bp+var_8], bx
call    sub_26945
cmp     al, 1
jnz     short loc_22BC3
cmp     byte ptr ds:9A63h, 3
jz      short loc_22BC3
push    [bp+var_6]
push    [bp+var_8]
call    sub_1F0E2
or      dx, ax
jnz     short loc_22BC3
cmp     byte ptr ds:0BEC3h, 0
jnz     short loc_22B94
push    [bp+var_6]
push    [bp+var_8]
mov     ax, 0BDh
push    ax
call    sub_31324
add     sp, 6

loc_22B94:
xor     di, di
cmp     byte ptr ds:22C5h, 0
jz      short loc_22BA0
mov     di, 80h

loc_22BA0:
cmp     byte ptr ds:0BE1Ah, 0
jz      short loc_22BAB
or      di, 100h

loc_22BAB:
push    [bp+var_6]
push    [bp+var_8]
mov     ax, 2
push    ax
push    word ptr ds:0BD88h
push    word ptr ds:0BD86h
push    di
call    sub_1F1E6

loc_22BC3:
push    [bp+var_6]
push    [bp+var_8]
call    sub_1FCC5
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22BD7:              ; jumptable 0002279B case 48
mov     al, ds:0BED3h
cbw
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_29A88
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22BFC:              ; jumptable 0002279B case 49
push    ds
mov     ax, 0BED8h
push    ax
mov     al, ds:0BED3h
cbw
push    ax
call    sub_29AEA
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22C14:              ; jumptable 0002279B case 50
cmp     byte ptr ds:9A63h, 3
jnz     short loc_22C26
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_22C26:
call    dword ptr ds:0C044h
mov     di, ds:0BDCBh
mov     [bp+var_A], 0

loc_22C33:
push    si
call    sub_27C88
mov     ax, ds:0BED8h
add     [bp+var_A], ax
call    sub_26945
cmp     al, 32h ; '2'
jz      short loc_22C33
or      si, si
jz      short loc_22C54
xor     ax, ax
push    ax
call    sub_3B175

loc_22C54:
cmp     byte ptr ds:22C8h, 0
jz      short loc_22C63
push    di
call    sub_31435
mov     di, ax

loc_22C63:
call    dword ptr ds:0C048h
mov     ax, [bp+var_A]
inc     ax
push    ax
push    word ptr ds:0BD84h
push    word ptr ds:0BD82h
xor     ax, ax
push    ax
call    sub_2A549
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    dx
push    ax
push    ds
mov     ax, 67EBh
push    ax
call    sub_299B0
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
les     bx, [bp+var_12]
mov     es:[bx+0Ah], di
mov     al, 2Ch ; ','
push    ax
push    word ptr ds:0BD84h
push    word ptr ds:0BD82h
xor     ax, ax
push    ax
call    sub_2A771
push    dx
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22DBA

loc_22CC8:              ; jumptable 0002279B case 45
cmp     byte ptr ds:9A63h, 3
jnz     short def_2279B ; jumptable 0002279B default case, case 46
call    sub_26945
cmp     al, 2Fh ; '/'
jz      short loc_22CE3
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_22CE3:
les     bx, ds:0BED8h
mov     [bp+var_14], es
mov     [bp+var_16], bx
call    sub_26945
cmp     al, 2Dh ; '-'
jz      short loc_22D01
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_22D01:
call    sub_26945
cmp     al, 2Fh ; '/'
jz      short loc_22D15
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_22D15:
push    [bp+var_14]
push    [bp+var_16]
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_40927
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax

loc_22D2E:
call    sub_26945
jmp     loc_22DBA

def_2279B:              ; jumptable 0002279B default case, case 46
mov     ax, 3Bh ; ';'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_22FFE

loc_22D44:
cmp     byte ptr ds:0BED2h, 1
jnz     short loc_22DA9
cmp     byte ptr ds:9A63h, 3
jz      short loc_22DA9
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_1F0E2
or      dx, ax
jnz     short loc_22DA9
cmp     byte ptr ds:0BEC3h, 0
jnz     short loc_22D7A
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, 0BDh
push    ax
call    sub_31324
add     sp, 6

loc_22D7A:
xor     di, di
cmp     byte ptr ds:22C5h, 0
jz      short loc_22D86
mov     di, 80h

loc_22D86:
cmp     byte ptr ds:0BE1Ah, 0
jz      short loc_22D91
or      di, 100h

loc_22D91:
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, 2
push    ax
push    word ptr ds:0BD88h
push    word ptr ds:0BD86h
push    di
call    sub_1F1E6

loc_22DA9:
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_1FCC5
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax

loc_22DBA:
mov     al, ds:0BED2h
mov     ah, 0
cmp     ax, 2Ch ; ','
jz      short loc_22E0A
jg      short loc_22DDB
cmp     ax, 1
jnz     short loc_22DCE
jmp     loc_22E75

loc_22DCE:
cmp     ax, 3
jz      short loc_22E26
cmp     ax, 2Bh ; '+'
jz      short loc_22DEE
jmp     loc_23054

loc_22DDB:
cmp     ax, 2Dh ; '-'
jnz     short loc_22DE3
jmp     loc_22EF6

loc_22DE3:
cmp     ax, 2Eh ; '.'
jnz     short loc_22DEB
jmp     loc_22FEA

loc_22DEB:
jmp     loc_23054

loc_22DEE:
mov     ax, 2Eh ; '.'
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22E0A:
mov     ax, 2Fh ; '/'
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22E26:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
or      ax, dx
jnz     short loc_22E46
jmp     loc_22FFE

loc_22E46:
cmp     byte ptr ds:0BED2h, 4
jz      short loc_22E5B
mov     ax, 71h ; 'q'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_22FFE

loc_22E5B:
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_21A60
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22E75:
cmp     byte ptr ds:9A63h, 3
jnz     short loc_22E87
mov     ax, 3Bh ; ';'
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_22E87:
call    sub_26945
cmp     al, 2
jnz     short loc_22E9C
mov     word ptr [bp+var_E+2], 0
mov     word ptr [bp+var_E], 0
jmp     short loc_22ED1

loc_22E9C:
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
or      ax, dx
jnz     short loc_22EBC
jmp     loc_22FFE

loc_22EBC:
cmp     byte ptr ds:0BED2h, 2
jz      short loc_22ED1
mov     ax, 72h ; 'r'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_22FFE

loc_22ED1:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_2208B
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22EF6:
call    sub_26945
cmp     al, 2Fh ; '/'
jz      short loc_22F0D
mov     ax, 73h ; 's'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_22FFE

loc_22F0D:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
les     bx, [bp+var_12]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_22F25
jmp     loc_22D2E

loc_22F25:
cmp     byte ptr es:[bx+1], 12h
jz      short loc_22F80
cmp     byte ptr ds:9A63h, 3
jnz     short loc_22F72
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_22F72
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jnz     short loc_22F72
les     bx, [bp+var_12]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 11h
jnz     short loc_22F72
les     bx, [bp+var_12]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_40C7A
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22F72:
mov     ax, 4Ch ; 'L'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_23046

loc_22F80:
les     bx, [bp+var_12]
cmp     byte ptr es:[bx], 36h ; '6'
jnz     short loc_22FB5
mov     al, 2Ch ; ','
push    ax
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
xor     ax, ax
push    ax
call    sub_2A980
push    dx
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     short loc_22FCE

loc_22FB5:
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax

loc_22FCE:
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_21F17
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_22FEA:
call    sub_26945
cmp     al, 2Fh ; '/'
jz      short loc_23004
mov     ax, 74h ; 't'
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_22FFE:
xor     dx, dx
mov     ax, dx
jmp     short loc_2305A

loc_23004:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
les     bx, [bp+var_12]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_2301C
jmp     loc_22D2E

loc_2301C:
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_2303B
mov     bx, word ptr [bp+var_12]
les     bx, es:[bx+2]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 12h
jz      short loc_22FCE

loc_2303B:
mov     ax, 4Fh ; 'O'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_23046:
call    sub_29811
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     loc_22D2E

loc_23054:
mov     dx, word ptr [bp+var_12+2]
mov     ax, word ptr [bp+var_12]

loc_2305A:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_22712 endp



; Attributes: bp-based frame

sub_23062 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
xor     ax, ax
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    ax
mov     ax, 1
push    ax
call    sub_2307D
pop     bp
retf    6
sub_23062 endp



; Attributes: bp-based frame

sub_2307D proc near

var_14= word ptr -14h
var_12= word ptr -12h
var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 14h
push    si
push    di
mov     di, [bp+arg_A]
mov     ax, sp
mov     dx, ds
mov     bx, 0C4CCh
mov     cx, ds
cmp     ax, bx
jnb     short loc_230A0
mov     ax, 6
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_230A0:
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_0]
call    sub_22712
mov     [bp+var_12], dx
mov     [bp+var_14], ax
or      ax, dx
jnz     short loc_230B9
jmp     loc_23247

loc_230B9:
mov     al, [di+4B76h]
cbw
mov     [bp+var_8], ax

loc_230C1:
cmp     byte ptr ds:0BED2h, 27h ; '''
jbe     short loc_230CB
jmp     loc_232CE

loc_230CB:
cmp     [bp+arg_4], 4
jnz     short loc_230DB
cmp     byte ptr ds:0BED2h, 68h ; 'h'
jnz     short loc_230DB
jmp     loc_232CE

loc_230DB:
cmp     [bp+arg_4], 2
jnz     short loc_230EB
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_230EB
jmp     loc_232CE

loc_230EB:
cmp     [bp+arg_4], 3
jnz     short loc_230FB
cmp     byte ptr ds:0BED2h, 1Fh
jnz     short loc_230FB
jmp     loc_232CE

loc_230FB:
mov     al, ds:0BED2h
mov     ah, 0
mov     bx, ax
mov     al, [bx+4B26h]
cbw
mov     si, ax
or      si, si
jnz     short loc_23110
jmp     loc_232CE

loc_23110:
mov     al, ds:0BED2h
mov     ah, 0
mov     bx, ax
mov     al, [bx+4B4Eh]
cbw
mov     [bp+var_2], ax
mov     ax, ds:0BE1Dh
mov     [bp+var_6], ax
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     ax, ds:0BFB6h
mov     [bp+var_4], ax
mov     ax, [bp+var_2]
cmp     ax, [bp+arg_2]
jz      short loc_2316E
cmp     di, 7
jl      short loc_2316E
cmp     si, 7
jl      short loc_2316E
cmp     di, 0Ch
jg      short loc_2314F
cmp     si, 0Ch
jle     short loc_23163

loc_2314F:
cmp     di, 0Dh
jnz     short loc_23159
cmp     si, 0Ch
jz      short loc_23163

loc_23159:
cmp     di, 0Ch
jnz     short loc_2316E
cmp     si, 0Dh
jnz     short loc_2316E

loc_23163:
mov     ax, 0B5h
push    ax
call    sub_31324
inc     sp
inc     sp

loc_2316E:
cmp     di, si
jle     short loc_23175
jmp     loc_232CE

loc_23175:
cmp     di, si
jnz     short loc_23182
cmp     [bp+var_8], 1
jnz     short loc_23182
jmp     loc_232CE

loc_23182:
cmp     [bp+var_2], 30h ; '0'
jz      short loc_2318B
jmp     loc_23227

loc_2318B:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 3
push    ax
xor     ax, ax
push    ax
push    [bp+arg_0]
call    sub_2307D
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
or      ax, dx
jnz     short loc_231AF
jmp     loc_23247

loc_231AF:
cmp     byte ptr ds:0BED2h, 1Fh
jz      short loc_231C4
mov     ax, 3Bh ; ';'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_23247

loc_231C4:
call    sub_26945
mov     al, ds:4B44h
cbw
push    ax
xor     ax, ax
push    ax
push    ax
push    [bp+arg_4]
push    ax
push    [bp+arg_0]
call    sub_2307D
mov     [bp+var_A], dx
mov     [bp+var_C], ax
or      ax, dx
jz      short loc_23247
mov     ax, [bp+var_6]
mov     ds:0BFB4h, ax
mov     ax, [bp+var_4]
mov     ds:0BFB6h, ax
mov     ax, 31h ; '1'
push    ax
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    dx
push    [bp+var_C]
call    sub_1FF72
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
mov     ax, 30h ; '0'
push    ax
push    [bp+var_12]
push    [bp+var_14]
push    dx
push    word ptr [bp+var_10]
call    sub_1FF72
mov     [bp+var_12], dx
mov     [bp+var_14], ax
jmp     loc_230C1

loc_23227:
call    sub_26945
push    si
xor     ax, ax
push    ax
push    ax
push    [bp+arg_4]
push    [bp+var_2]
push    [bp+arg_0]
call    sub_2307D
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
or      ax, dx
jnz     short loc_2324E

loc_23247:
xor     dx, dx
mov     ax, dx
jmp     loc_232D4

loc_2324E:
mov     ax, [bp+var_6]
mov     ds:0BFB4h, ax
mov     ax, [bp+var_4]
mov     ds:0BFB6h, ax
cmp     [bp+var_2], 38h ; '8'
jnz     short loc_232B1
cmp     [bp+arg_4], 1
jnz     short loc_2328B
mov     al, 39h ; '9'
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    [bp+var_12]
push    [bp+var_14]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_29862
mov     [bp+var_12], dx
mov     [bp+var_14], ax
jmp     loc_230C1

loc_2328B:
mov     al, 38h ; '8'
push    ax
les     bx, [bp+var_10]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_12]
push    [bp+var_14]
push    word ptr [bp+var_10+2]
push    bx
call    sub_29862
mov     [bp+var_12], dx
mov     [bp+var_14], ax
jmp     loc_230C1

loc_232B1:
push    [bp+var_2]
push    [bp+var_12]
push    [bp+var_14]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_1FF72
mov     [bp+var_12], dx
mov     [bp+var_14], ax
jmp     loc_230C1

loc_232CE:
mov     dx, [bp+var_12]
mov     ax, [bp+var_14]

loc_232D4:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_2307D endp



; Attributes: bp-based frame

sub_232DC proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 8
call    sub_286D6
mov     [bp+var_6], dx
mov     [bp+var_8], ax
cmp     word ptr ds:0BF51h, 0
jz      short loc_232FF
mov     ax, 8Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_232FF:
mov     ax, [bp+var_8]
or      ax, [bp+var_6]
jz      short loc_23328
call    sub_26025
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jz      short loc_23328
cmp     byte ptr ds:0BED2h, 2
jz      short loc_2332E
mov     ax, 3Bh ; ';'
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_23328:
xor     dx, dx
mov     ax, dx
jmp     short loc_23344

loc_2332E:
call    sub_26945
push    [bp+var_2]
push    [bp+var_4]
push    [bp+var_6]
push    [bp+var_8]
call    sub_2677A

loc_23344:
mov     sp, bp
pop     bp
retf
sub_232DC endp



; Attributes: bp-based frame

sub_23348 proc far

var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, [bp+arg_0]
dec     ax              ; switch 5 cases
cmp     ax, 4
jbe     short loc_2335A
jmp     def_2335E       ; jumptable 0002335E default case

loc_2335A:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2335E[bx] ; switch jump
jpt_2335E dw offset loc_2336D ; jump table for switch statement
dw offset loc_2339E
dw offset loc_2345E
dw offset loc_233D9
dw offset loc_23413

loc_2336D:              ; jumptable 0002335E case 1
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
cmp     byte ptr ds:0BED2h, 4
jz      short loc_23396
mov     ax, 76h ; 'v'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_23459

loc_23396:
call    sub_26945
jmp     def_2335E       ; jumptable 0002335E default case

loc_2339E:              ; jumptable 0002335E case 2
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 2
push    ax
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_233C1
jmp     def_2335E       ; jumptable 0002335E default case

loc_233C1:
cmp     byte ptr ds:0BED2h, 7
jnz     short loc_233CB
jmp     def_2335E       ; jumptable 0002335E default case

loc_233CB:
mov     ax, 77h ; 'w'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_23459

loc_233D9:              ; jumptable 0002335E case 4
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 2
push    ax
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_233FC
jmp     def_2335E       ; jumptable 0002335E default case

loc_233FC:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_23406
jmp     def_2335E       ; jumptable 0002335E default case

loc_23406:
mov     ax, 60h ; '`'
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     short loc_23459

loc_23413:              ; jumptable 0002335E case 5
mov     byte ptr ds:0BDB7h, 1
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 4
push    ax
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     byte ptr ds:0BDB7h, 0
cmp     byte ptr ds:0BED2h, 68h ; 'h'
jz      short def_2335E ; jumptable 0002335E default case
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp
mov     word ptr ds:0BEDAh, 0
mov     word ptr ds:0BED8h, 0

loc_23459:
xor     ax, ax
jmp     loc_234DB

loc_2345E:              ; jumptable 0002335E case 3
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 3
push    ax
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_2307D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
cmp     byte ptr ds:0BED2h, 1Fh
jz      short def_2335E ; jumptable 0002335E default case
mov     ax, 78h ; 'x'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_234CC

def_2335E:              ; jumptable 0002335E default case
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_237EA
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 0
jz      short loc_234CC
mov     bx, ax
cmp     byte ptr es:[bx], 2
jnz     short loc_234C1
mov     bx, ax
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     ds:0BEDAh, dx
mov     ds:0BED8h, ax
jmp     short loc_234D8

loc_234C1:
mov     ax, 79h ; 'y'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_234CC:
mov     word ptr ds:0BEDAh, 0
mov     word ptr ds:0BED8h, 0

loc_234D8:
mov     ax, 1

loc_234DB:
mov     sp, bp
pop     bp
retf    2
sub_23348 endp

seg005 ends


; Segment type: Pure code
seg006 segment byte public 'CODE' use16
assume cs:seg006
;org 1
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_234E1 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_234F4
mov     dx, word ptr [bp+arg_0+2]
mov     ax, bx
jmp     short loc_23516

loc_234F4:
push    ss
lea     ax, [bp+arg_0]
push    ax
push    ss
lea     ax, [bp+arg_0]
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 3
push    ax
call    sub_2351A
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_237EA

loc_23516:
pop     bp
retf    4
sub_234E1 endp



; Attributes: bp-based frame

sub_2351A proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= dword ptr  0Ah
arg_A= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     si, [bp+arg_0]

loc_23524:
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_2]
mov     al, es:[bx]
cbw
cmp     ax, 19h
jz      short loc_235AD ; jumptable 0002354C case 24
jg      short loc_23581
dec     ax              ; switch 24 cases
cmp     ax, 17h
jbe     short loc_23548
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_23548:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2354C[bx] ; switch jump
jpt_2354C dw offset loc_237E3 ; jump table for switch statement
dw offset loc_237E3
dw offset loc_237E3
dw offset loc_237E3
dw offset loc_237E3
dw offset def_2354C
dw offset loc_237E3
dw offset def_2354C
dw offset loc_237E3
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset def_2354C
dw offset loc_235AD

loc_23581:              ; switch 12 cases
sub     ax, 2Dh ; '-'
cmp     ax, 0Bh
jbe     short loc_2358C
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_2358C:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_23590[bx] ; switch jump
jpt_23590 dw offset loc_23723 ; jump table for switch statement
dw offset loc_23662
dw offset loc_23662
dw offset loc_237E3
dw offset def_2354C
dw offset loc_237E3
dw offset loc_237E3
dw offset def_2354C
dw offset def_2354C
dw offset loc_237E3
dw offset def_2354C
dw offset loc_23746

loc_235AD:              ; jumptable 0002354C case 24
les     bx, [bp+arg_A]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, word ptr [bp+arg_2+2]
jnz     short loc_235C4
cmp     ax, word ptr [bp+arg_2]
jnz     short loc_235C4
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_235C4:
test    si, 1
jnz     short loc_235CD
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_235CD:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 1
jge     short loc_235D9
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_235D9:
cmp     byte ptr es:[bx], 9
jle     short loc_235E2
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_235E2:
les     bx, [bp+arg_2]
mov     al, es:[bx]
push    ax
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_29862
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 10h
push    ax
call    sub_318B7
les     bx, [bp+arg_6]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, es:[bx]
push    es
push    bx
les     bx, [bp+var_8]
push    es
push    bx
mov     cx, 10h
call    sub_46BE5
mov     al, 38h ; '8'
push    ax
les     bx, [bp+arg_A]
les     bx, es:[bx]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_2]
push    [bp+var_4]
les     bx, [bp+arg_A]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_29862
les     bx, [bp+arg_A]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_237E3       ; jumptable 0002354C cases 1-5,7,9
                        ; jumptable 00023590 cases 48,50,51,54

loc_23662:              ; jumptable 00023590 cases 46,47
les     bx, [bp+arg_A]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, word ptr [bp+arg_2+2]
jnz     short loc_23679
cmp     ax, word ptr [bp+arg_2]
jnz     short loc_23679
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_23679:
test    si, 2
jnz     short loc_23682
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_23682:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 1
jge     short loc_2368E
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_2368E:
cmp     byte ptr es:[bx], 9
jle     short loc_23697
jmp     def_2354C       ; jumptable 0002354C default case, cases 6,8,10-23
                        ; jumptable 00023590 default case, cases 49,52,53,55

loc_23697:
les     bx, [bp+arg_2]
mov     al, es:[bx]
cbw
mov     bx, ax
push    word ptr [bx+4B58h]
mov     bx, word ptr [bp+arg_2]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     bx, word ptr [bp+arg_2]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_29862
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 10h
push    ax
call    sub_318B7
les     bx, [bp+arg_6]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, es:[bx]
push    es
push    bx
les     bx, [bp+var_8]
push    es
push    bx
mov     cx, 10h
call    sub_46BE5
mov     al, 37h ; '7'
push    ax
les     bx, [bp+arg_A]
les     bx, es:[bx]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
les     bx, [bp+arg_A]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    [bp+var_2]
push    [bp+var_4]
call    sub_29862
les     bx, [bp+arg_A]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_237E3       ; jumptable 0002354C cases 1-5,7,9
                        ; jumptable 00023590 cases 48,50,51,54

loc_23723:              ; jumptable 00023590 case 45
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
add     ax, 6
push    dx
push    ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    si
call    sub_2351A
jmp     loc_237E3       ; jumptable 0002354C cases 1-5,7,9
                        ; jumptable 00023590 cases 48,50,51,54

loc_23746:              ; jumptable 00023590 case 56
test    si, 2
jz      short loc_2376F
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
add     ax, 0Ah
push    dx
push    ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
mov     ax, 2
push    ax
call    sub_2351A

loc_2376F:
les     bx, [bp+arg_2]
add     bx, 6
mov     word ptr [bp+arg_A+2], es
mov     word ptr [bp+arg_A], bx
mov     word ptr [bp+arg_6+2], es
mov     word ptr [bp+arg_6], bx
mov     bx, word ptr [bp+arg_2]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_2+2], es
mov     word ptr [bp+arg_2], bx
mov     si, 3
jmp     loc_23524

def_2354C:              ; jumptable 0002354C default case, cases 6,8,10-23
les     bx, [bp+arg_2]  ; jumptable 00023590 default case, cases 49,52,53,55
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_237BD
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
mov     dx, word ptr [bp+arg_2+2]
mov     ax, bx
add     ax, 0Ah
push    dx
push    ax
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    si
call    sub_2351A

loc_237BD:
les     bx, [bp+arg_2]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_237E3 ; jumptable 0002354C cases 1-5,7,9
                        ; jumptable 00023590 cases 48,50,51,54
add     bx, 6
mov     word ptr [bp+arg_6+2], es
mov     word ptr [bp+arg_6], bx
mov     bx, word ptr [bp+arg_2]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_2+2], es
mov     word ptr [bp+arg_2], bx
jmp     loc_23524

loc_237E3:              ; jumptable 0002354C cases 1-5,7,9
pop     si              ; jumptable 00023590 cases 48,50,51,54
mov     sp, bp
pop     bp
retn    0Eh
sub_2351A endp



; Attributes: bp-based frame

sub_237EA proc far

var_14= word ptr -14h
var_12= word ptr -12h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 14h
push    si
mov     ax, sp
mov     dx, ds
mov     bx, 0C4CCh
mov     cx, ds
cmp     ax, bx
jnb     short loc_23809
mov     ax, 6
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_23809:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_23814
jmp     loc_23DC2

loc_23814:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_23820
jmp     loc_23DC2

loc_23820:
cmp     byte ptr es:[bx], 35h ; '5'
jnz     short loc_23829
jmp     loc_23DC2

loc_23829:
cmp     byte ptr ds:0BDB7h, 0
jz      short loc_2384A
cmp     byte ptr es:[bx], 1
jnz     short loc_2384A
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
call    sub_29A88
jmp     loc_23EE0

loc_2384A:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jl      short loc_2385C
cmp     byte ptr es:[bx], 9
jg      short loc_2385C
jmp     loc_23DC2

loc_2385C:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_237EA
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_23885
jmp     loc_23DC2

loc_23885:
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_237EA
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
mov     al, es:[bx]
cbw
sub     ax, 0Dh         ; switch 46 cases
cmp     ax, 2Dh
jbe     short loc_238B1
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_238B1:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_238B5[bx] ; switch jump
jpt_238B5 dw offset loc_23BAB ; jump table for switch statement
dw offset loc_23CF4
dw offset loc_23916
dw offset loc_23A29
dw offset loc_23A9C
dw offset def_238B5
dw offset def_238B5
dw offset loc_23C7D
dw offset loc_23C7D
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset loc_23E59
dw offset loc_23E59
dw offset loc_23DCB
dw offset loc_23DCB
dw offset loc_23DCB
dw offset loc_23DCB
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset loc_23B1D
dw offset loc_23B7C
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset loc_23D93
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset def_238B5
dw offset loc_23CB5

loc_23916:              ; jumptable 000238B5 case 15
les     bx, [bp+var_10]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jnz     short loc_2393F
push    word ptr [bp+arg_0+2]
push    bx
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_245C5
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_23990

loc_2393F:
les     bx, [bp+var_C]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jnz     short loc_23968
push    word ptr [bp+arg_0+2]
push    bx
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_245C5
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_23990

loc_23968:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2
jnz     short loc_23990
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_23990:
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_239B6
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_239B6:
cmp     word ptr es:[bx+8], 0
jl      short loc_23A03
jg      short loc_239C6
cmp     word ptr es:[bx+6], 0
jbe     short loc_23A03

loc_239C6:
les     bx, [bp+var_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_249E8
mov     si, ax
or      si, si
jnz     short loc_239DF
jmp     loc_23D45

loc_239DF:
or      si, si
jg      short loc_239E6
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_239E6:
mov     ax, si
cwd
les     bx, [bp+var_C]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     byte ptr es:[bx+1], 2
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 12h
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A03:
les     bx, [bp+var_C]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_23A13
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A13:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2
jnz     short loc_23A1F
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A1F:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 38h ; '8'
jmp     loc_23DC2

loc_23A29:              ; jumptable 000238B5 case 16
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_23A35
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A35:
cmp     word ptr es:[bx+8], 0
jge     short loc_23A3F
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A3F:
jg      short loc_23A4B
cmp     word ptr es:[bx+6], 0
ja      short loc_23A4B
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A4B:
les     bx, [bp+var_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_249E8
mov     si, ax
or      si, si
jnz     short loc_23A64
jmp     loc_23D45

loc_23A64:
or      si, si
jg      short loc_23A6B
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A6B:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jnz     short loc_23A7F
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A7F:
mov     ax, si
cwd
les     bx, [bp+var_C]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     byte ptr es:[bx+1], 2
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 13h
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23A9C:              ; jumptable 000238B5 case 17
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_23AA8
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23AA8:
cmp     word ptr es:[bx+8], 0
jge     short loc_23AB2
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23AB2:
jg      short loc_23ABE
cmp     word ptr es:[bx+6], 0
ja      short loc_23ABE
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23ABE:
les     bx, [bp+var_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_249E8
mov     si, ax
or      si, si
jnz     short loc_23AEB
les     bx, [bp+var_C]
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
mov     dx, word ptr [bp+var_C+2]
mov     ax, bx
jmp     loc_23EE0

loc_23AEB:
or      si, si
jg      short loc_23AF2
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23AF2:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jnz     short loc_23B06
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23B06:
les     bx, [bp+var_C]
sub     word ptr es:[bx+6], 1
sbb     word ptr es:[bx+8], 0
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 14h
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23B1D:              ; jumptable 000238B5 case 43
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_2240B
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2Ch ; ','
jz      short loc_23B34
jmp     loc_23DC2

loc_23B34:
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_22692
or      ax, ax
jnz     short loc_23B48
jmp     loc_23DC2

loc_23B48:
les     bx, [bp+var_10]
les     bx, es:[bx+6]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
les     bx, [bp+arg_0]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_10]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
les     bx, [bp+var_10]
mov     es:[bx+1], al
jmp     loc_23D45

loc_23B7C:              ; jumptable 000238B5 case 44
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_23B88
jmp     loc_23DC2

loc_23B88:
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
jmp     loc_23EE0

loc_23BAB:              ; jumptable 000238B5 case 13
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     [bp+var_2], es
mov     [bp+var_4], bx
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jnz     short loc_23BE7
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_23BE7
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
jmp     loc_23EE0

loc_23BE7:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_23C34
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jnz     short loc_23C34
les     bx, [bp+var_10]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jz      short loc_23C16
les     bx, [bp+var_10]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 7
jz      short loc_23C16
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23C16:
les     bx, [bp+var_10]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+var_C]
mov     ax, es:[bx+6]
les     bx, [bp+var_8]
add     es:[bx+0Ah], ax
jmp     loc_23D45

loc_23C34:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2
jz      short loc_23C43
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_23C5E

loc_23C43:
les     bx, [bp+var_C]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+var_10]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+var_8]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx

loc_23C5E:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_23C7D:              ; jumptable 000238B5 cases 20,21
les     bx, [bp+var_10]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jnz     short loc_23C8E
jmp     loc_23D7B

loc_23C8E:
les     bx, [bp+var_C]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jz      short loc_23C9F
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23C9F:
push    word ptr [bp+arg_0+2]
push    bx
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_245C5
jmp     loc_23EE0

loc_23CB5:              ; jumptable 000238B5 case 58
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_23CC1
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23CC1:
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_23CCE
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23CCE:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
les     bx, [bp+var_10]
mov     es:[bx+1], al
les     bx, [bp+arg_0]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_10]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
jmp     short loc_23D45

loc_23CF4:              ; jumptable 000238B5 case 14
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_23D00
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23D00:
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_23D45
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_23D4E
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jz      short loc_23D2A
les     bx, [bp+var_10]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 7
jnz     short loc_23D4E

loc_23D2A:
les     bx, [bp+var_10]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
les     bx, [bp+var_C]
mov     ax, es:[bx+6]
les     bx, [bp+arg_0]
sub     es:[bx+0Ah], ax

loc_23D45:
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
jmp     loc_23EE0

loc_23D4E:
les     bx, [bp+var_C]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
neg     dx
neg     ax
sbb     dx, 0
mov     es:[bx+8], dx
mov     es:[bx+6], ax
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 0Dh
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 0Dh
jz      short loc_23D7B
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23D7B:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_245C5
jmp     loc_23EE0

loc_23D93:              ; jumptable 000238B5 case 48
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2
jnz     short loc_23DC2
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_23DB4
les     bx, [bp+var_C]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
jmp     loc_23EE0

loc_23DB4:
les     bx, [bp+var_C]
mov     dx, es:[bx+0Ch]
mov     ax, es:[bx+0Ah]
jmp     loc_23EE0

loc_23DC2:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
jmp     loc_23EE0

loc_23DCB:              ; jumptable 000238B5 cases 36-39
les     bx, [bp+var_10]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_23DD8
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23DD8:
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
cmp     ax, 5
jz      short loc_23DED
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23DED:
mov     ax, 6
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     [bp+var_12], dx
mov     [bp+var_14], ax
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    dx
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    [bp+var_12]
push    [bp+var_14]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, [bp+var_12]
mov     ax, [bp+var_14]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     byte ptr es:[bx+1], 6
jmp     def_238B5       ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23E59:              ; jumptable 000238B5 cases 34,35
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jnz     short loc_23E98
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_23E98
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_21101
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
les     bx, [bp+var_10]
mov     al, es:[bx+1]
les     bx, [bp+var_C]
mov     es:[bx+1], al
jmp     short def_238B5 ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57

loc_23E98:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2
jnz     short def_238B5 ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short def_238B5 ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_21101
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
les     bx, [bp+var_C]
mov     al, es:[bx+1]
les     bx, [bp+var_10]
mov     es:[bx+1], al

def_238B5:              ; jumptable 000238B5 default case, cases 18,19,22-33,40-42,45-47,49-57
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_23EE7

loc_23EE0:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_237EA endp



; Attributes: bp-based frame

sub_23EE7 proc far

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 10h
push    si
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 3
jz      short loc_23F14
jmp     loc_240B6

loc_23F14:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_23F28
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 3
jz      short loc_23F28
jmp     loc_240B6

loc_23F28:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
sub     ax, 0Dh         ; switch 28 cases
cmp     ax, 1Bh
jbe     short loc_23F3A
jmp     def_23F3E       ; jumptable 00023F3E default case, cases 17-33
                        ; jumptable 00024116 default case, cases 23-33,43-49,52-57

loc_23F3A:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_23F3E[bx] ; switch jump
jpt_23F3E dw offset loc_24032 ; jump table for switch statement
dw offset loc_24050
dw offset loc_2406E
dw offset loc_2408C
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset loc_23F7B
dw offset loc_23F7B
dw offset loc_23F7B
dw offset loc_23F7B
dw offset loc_23F7B
dw offset loc_23F7B
dw offset loc_240AA

loc_23F7B:              ; jumptable 00023F3E cases 34-39
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
add     ax, 6
push    dx
push    ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
add     ax, 6
push    dx
push    ax
call    sub_42CFC
mov     si, ax
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
sub     ax, 22h ; '"'   ; switch 6 cases
cmp     ax, 5
jbe     short loc_23FAA
jmp     def_23FAE       ; jumptable 00023FAE default case

loc_23FAA:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_23FAE[bx] ; switch jump
jpt_23FAE dw offset loc_23FBF ; jump table for switch statement
dw offset loc_23FCE
dw offset loc_23FDD
dw offset loc_23FEC
dw offset loc_23FFB
dw offset loc_2400A

loc_23FBF:              ; jumptable 00023FAE case 34
or      si, si
jnz     short loc_23FC8
mov     ax, 1
jmp     short loc_23FCA

loc_23FC8:
xor     ax, ax

loc_23FCA:
mov     si, ax
jmp     short def_23FAE ; jumptable 00023FAE default case

loc_23FCE:              ; jumptable 00023FAE case 35
or      si, si
jz      short loc_23FD7
mov     ax, 1
jmp     short loc_23FD9

loc_23FD7:
xor     ax, ax

loc_23FD9:
mov     si, ax
jmp     short def_23FAE ; jumptable 00023FAE default case

loc_23FDD:              ; jumptable 00023FAE case 36
or      si, si
jle     short loc_23FE6
mov     ax, 1
jmp     short loc_23FE8

loc_23FE6:
xor     ax, ax

loc_23FE8:
mov     si, ax
jmp     short def_23FAE ; jumptable 00023FAE default case

loc_23FEC:              ; jumptable 00023FAE case 37
or      si, si
jge     short loc_23FF5
mov     ax, 1
jmp     short loc_23FF7

loc_23FF5:
xor     ax, ax

loc_23FF7:
mov     si, ax
jmp     short def_23FAE ; jumptable 00023FAE default case

loc_23FFB:              ; jumptable 00023FAE case 38
or      si, si
jl      short loc_24004
mov     ax, 1
jmp     short loc_24006

loc_24004:
xor     ax, ax

loc_24006:
mov     si, ax
jmp     short def_23FAE ; jumptable 00023FAE default case

loc_2400A:              ; jumptable 00023FAE case 39
or      si, si
jg      short loc_24013
mov     ax, 1
jmp     short loc_24015

loc_24013:
xor     ax, ax

loc_24015:
mov     si, ax

def_23FAE:              ; jumptable 00023FAE default case
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, si
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
jmp     loc_245B8

loc_24032:              ; jumptable 00023F3E case 13
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
add     ax, 6
push    dx
push    ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
add     ax, 6
push    dx
push    ax
call    sub_42887
jmp     loc_245B8

loc_24050:              ; jumptable 00023F3E case 14
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
add     ax, 6
push    dx
push    ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
add     ax, 6
push    dx
push    ax
call    sub_428A1
jmp     loc_245B8

loc_2406E:              ; jumptable 00023F3E case 15
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
add     ax, 6
push    dx
push    ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
add     ax, 6
push    dx
push    ax
call    sub_428BB
jmp     loc_245B8

loc_2408C:              ; jumptable 00023F3E case 16
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
add     ax, 6
push    dx
push    ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
add     ax, 6
push    dx
push    ax
call    sub_42AA6
jmp     loc_245B8

loc_240AA:              ; jumptable 00023F3E case 40
les     bx, [bp+var_10]
xor     word ptr es:[bx+0Eh], 8000h
jmp     loc_245B8

loc_240B6:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 2
jz      short loc_240C2
jmp     def_23F3E       ; jumptable 00023F3E default case, cases 17-33
                        ; jumptable 00024116 default case, cases 23-33,43-49,52-57

loc_240C2:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_240D6
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_240D6
jmp     def_23F3E       ; jumptable 00023F3E default case, cases 17-33
                        ; jumptable 00024116 default case, cases 23-33,43-49,52-57

loc_240D6:
les     bx, [bp+var_10]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [bp+var_6], dx
mov     [bp+var_8], ax
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_24100
les     bx, [bp+var_C]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_24100:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
sub     ax, 0Dh         ; switch 46 cases
cmp     ax, 2Dh
jbe     short loc_24112
jmp     def_23F3E       ; jumptable 00023F3E default case, cases 17-33
                        ; jumptable 00024116 default case, cases 23-33,43-49,52-57

loc_24112:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_24116[bx] ; switch jump
jpt_24116 dw offset loc_24177 ; jump table for switch statement
dw offset loc_2453B
dw offset loc_24186
dw offset loc_241A0
dw offset loc_241ED
dw offset loc_24248
dw offset loc_2425F
dw offset loc_2429E
dw offset loc_242B3
dw offset loc_242C8
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset loc_24318
dw offset loc_24339
dw offset loc_243B1
dw offset loc_2435A
dw offset loc_2445F
dw offset loc_24408
dw offset loc_242EF
dw offset loc_24305
dw offset loc_242DD
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset loc_244B6
dw offset loc_244D3
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset def_23F3E
dw offset loc_244F0

loc_24177:              ; jumptable 00024116 case 13
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
add     [bp+var_8], ax
adc     [bp+var_6], dx
jmp     loc_24578

loc_24186:              ; jumptable 00024116 case 15
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
mov     cx, [bp+var_2]
mov     bx, [bp+var_4]
call    sub_46A18
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_241A0:              ; jumptable 00024116 case 16
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jz      short loc_241F5
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_241D3
push    [bp+var_2]
push    [bp+var_4]
push    [bp+var_6]
push    [bp+var_8]
call    sub_1ED55
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_241D3:
push    [bp+var_2]
push    [bp+var_4]
push    [bp+var_6]
push    [bp+var_8]
call    sub_1ED51
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_241ED:              ; jumptable 00024116 case 17
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jnz     short loc_24203

loc_241F5:
mov     ax, 3Eh ; '>'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_24578

loc_24203:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_2422E
push    [bp+var_2]
push    [bp+var_4]
push    [bp+var_6]
push    [bp+var_8]
call    sub_1ED5F
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2422E:
push    [bp+var_2]
push    [bp+var_4]
push    [bp+var_6]
push    [bp+var_8]
call    sub_1ED5A
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24248:              ; jumptable 00024116 case 18
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
mov     cl, byte ptr [bp+var_4]
call    sub_1EDF6
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2425F:              ; jumptable 00024116 case 19
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_24287
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
mov     cl, byte ptr [bp+var_4]
call    sub_1EE33
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24287:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
mov     cl, byte ptr [bp+var_4]
call    sub_1EE15
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2429E:              ; jumptable 00024116 case 20
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
and     ax, [bp+var_4]
and     dx, [bp+var_2]
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_242B3:              ; jumptable 00024116 case 21
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
or      ax, [bp+var_4]
or      dx, [bp+var_2]
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_242C8:              ; jumptable 00024116 case 22
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
xor     ax, [bp+var_4]
xor     dx, [bp+var_2]
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_242DD:              ; jumptable 00024116 case 42
mov     ax, [bp+var_8]
neg     ax
sbb     ax, ax
inc     ax
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_242EF:              ; jumptable 00024116 case 40
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
neg     dx
neg     ax
sbb     dx, 0
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24305:              ; jumptable 00024116 case 41
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
not     ax
not     dx
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24318:              ; jumptable 00024116 case 34
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jnz     short loc_2432D
cmp     ax, [bp+var_4]
jnz     short loc_2432D
mov     ax, 1
jmp     short loc_2432F

loc_2432D:
xor     ax, ax

loc_2432F:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24339:              ; jumptable 00024116 case 35
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jnz     short loc_24349
cmp     ax, [bp+var_4]
jz      short loc_2434E

loc_24349:
mov     ax, 1
jmp     short loc_24350

loc_2434E:
xor     ax, ax

loc_24350:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2435A:              ; jumptable 00024116 case 37
les     bx, [bp+var_10]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_2438E
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
ja      short loc_24382
jb      short loc_2437D
cmp     ax, [bp+var_4]
jnb     short loc_24382

loc_2437D:
mov     ax, 1
jmp     short loc_24384

loc_24382:
xor     ax, ax

loc_24384:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2438E:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jg      short loc_243A5
jl      short loc_243A0
cmp     ax, [bp+var_4]
jnb     short loc_243A5

loc_243A0:
mov     ax, 1
jmp     short loc_243A7

loc_243A5:
xor     ax, ax

loc_243A7:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_243B1:              ; jumptable 00024116 case 36
les     bx, [bp+var_10]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_243E5
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jb      short loc_243D9
ja      short loc_243D4
cmp     ax, [bp+var_4]
jbe     short loc_243D9

loc_243D4:
mov     ax, 1
jmp     short loc_243DB

loc_243D9:
xor     ax, ax

loc_243DB:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_243E5:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jl      short loc_243FC
jg      short loc_243F7
cmp     ax, [bp+var_4]
jbe     short loc_243FC

loc_243F7:
mov     ax, 1
jmp     short loc_243FE

loc_243FC:
xor     ax, ax

loc_243FE:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24408:              ; jumptable 00024116 case 39
les     bx, [bp+var_10]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_2443C
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
ja      short loc_24430
jnz     short loc_2442B
cmp     ax, [bp+var_4]
ja      short loc_24430

loc_2442B:
mov     ax, 1
jmp     short loc_24432

loc_24430:
xor     ax, ax

loc_24432:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2443C:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jg      short loc_24453
jnz     short loc_2444E
cmp     ax, [bp+var_4]
ja      short loc_24453

loc_2444E:
mov     ax, 1
jmp     short loc_24455

loc_24453:
xor     ax, ax

loc_24455:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_2445F:              ; jumptable 00024116 case 38
les     bx, [bp+var_10]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_24493
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jb      short loc_24487
jnz     short loc_24482
cmp     ax, [bp+var_4]
jb      short loc_24487

loc_24482:
mov     ax, 1
jmp     short loc_24489

loc_24487:
xor     ax, ax

loc_24489:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_24493:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
cmp     dx, [bp+var_2]
jl      short loc_244AA
jnz     short loc_244A5
cmp     ax, [bp+var_4]
jb      short loc_244AA

loc_244A5:
mov     ax, 1
jmp     short loc_244AC

loc_244AA:
xor     ax, ax

loc_244AC:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_244B6:              ; jumptable 00024116 case 50
cmp     [bp+var_8], 0
jz      short loc_244C7
cmp     [bp+var_4], 0
jz      short loc_244C7
mov     ax, 1
jmp     short loc_244C9

loc_244C7:
xor     ax, ax

loc_244C9:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_244D3:              ; jumptable 00024116 case 51
cmp     [bp+var_8], 0
jnz     short loc_244DF
cmp     [bp+var_4], 0
jz      short loc_244E4

loc_244DF:
mov     ax, 1
jmp     short loc_244E6

loc_244E4:
xor     ax, ax

loc_244E6:
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     loc_24578

loc_244F0:              ; jumptable 00024116 case 58
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 7
jnz     short loc_24509
mov     ax, [bp+var_8]
sub     ax, [bp+var_4]
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     short loc_24578

loc_24509:
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
test    byte ptr es:[bx+5], 6
jz      short loc_24549
mov     ax, [bp+var_6]
mov     cl, 0Ch
shl     ax, cl
add     ax, [bp+var_8]
xor     dx, dx
mov     [bp+var_6], dx
mov     [bp+var_8], ax
mov     ax, [bp+var_2]
mov     cl, 0Ch
shl     ax, cl
add     ax, [bp+var_4]
xor     dx, dx
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_2453B:              ; jumptable 00024116 case 14
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
sub     [bp+var_8], ax
sbb     [bp+var_6], dx
jmp     short loc_24578

loc_24549:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
and     ax, 0FFFFh
and     dx, 0
mov     cx, [bp+var_2]
mov     bx, [bp+var_4]
and     bx, 0FFFFh
and     cx, 0
sub     ax, bx
sbb     dx, cx
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     short loc_24578

def_23F3E:              ; jumptable 00023F3E default case, cases 17-33
mov     dx, word ptr [bp+arg_0+2] ; jumptable 00024116 default case, cases 23-33,43-49,52-57
mov     ax, word ptr [bp+arg_0]
jmp     short loc_245BE

loc_24578:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
les     bx, [bp+var_10]
mov     es:[bx+1], al
les     bx, [bp+arg_0]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_10]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
push    [bp+var_6]
push    [bp+var_8]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_21DC9
les     bx, [bp+var_10]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_245B8:
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]

loc_245BE:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_23EE7 endp



; Attributes: bp-based frame

sub_245C5 proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
les     bx, [bp+arg_8]
mov     al, es:[bx]
cbw
mov     si, ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
les     bx, [bp+arg_4]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
cmp     byte ptr es:[bx], 2
jnz     short loc_24607
jmp     loc_246D3

loc_24607:
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_24610
jmp     loc_246D3

loc_24610:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, si
jz      short loc_2461E
jmp     loc_249DB

loc_2461E:
les     bx, [bp+arg_8]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 15h
jnz     short loc_24632
jmp     loc_249DB

loc_24632:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_2466E
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_24692

loc_2466E:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
les     bx, [bp+arg_0]
mov     es:[bx+1], al
les     bx, [bp+arg_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_24692:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     loc_249DB

loc_246D3:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_246DF
jmp     loc_24764

loc_246DF:
les     bx, [bp+arg_8]
mov     al, es:[bx+1]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
les     bx, [bp+arg_8]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_24738
les     bx, [bp+var_C]
mov     al, es:[bx+1]
les     bx, [bp+arg_8]
mov     es:[bx+1], al
les     bx, [bp+var_C]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_8]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_24738:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
les     bx, [bp+arg_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
push    word ptr [bp+arg_8+2]
push    bx
push    cs
call    near ptr sub_237EA
mov     word ptr [bp+arg_8+2], dx
mov     word ptr [bp+arg_8], ax
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
jmp     short loc_247CE

loc_24764:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_247D7
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jz      short loc_24779
jmp     loc_249DB

loc_24779:
mov     dx, word ptr [bp+var_C+2]
mov     ax, bx
les     bx, [bp+arg_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
push    word ptr [bp+arg_8+2]
push    bx
push    cs
call    near ptr sub_237EA
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
les     bx, [bp+arg_8]
mov     al, es:[bx+1]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
les     bx, [bp+arg_8]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_247CE:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
jmp     loc_249E1

loc_247D7:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, si
jz      short loc_2483C
les     bx, [bp+var_C]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_24804
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_24828

loc_24804:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
les     bx, [bp+arg_0]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_24828:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
jmp     loc_24917

loc_2483C:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
cmp     byte ptr es:[bx], 2
jnz     short loc_2485F
jmp     loc_2492B

loc_2485F:
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_24868
jmp     loc_2492B

loc_24868:
les     bx, [bp+var_C]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_2489F
les     bx, [bp+var_8]
mov     al, es:[bx+1]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
les     bx, [bp+var_8]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
jmp     short loc_248D4

loc_2489F:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_248D4
mov     bx, word ptr [bp+arg_4]
mov     al, es:[bx+1]
les     bx, [bp+arg_0]
mov     es:[bx+1], al
les     bx, [bp+arg_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_248D4:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, bx
les     bx, [bp+arg_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_24917:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
les     bx, [bp+arg_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
jmp     loc_249DB

loc_2492B:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 2
jnz     short loc_2498D
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_24956
les     bx, [bp+var_C]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_2497A

loc_24956:
les     bx, [bp+var_8]
mov     al, es:[bx+1]
les     bx, [bp+arg_4]
mov     es:[bx+1], al
les     bx, [bp+var_8]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_2497A:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_249B5

loc_2498D:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 2
jnz     short loc_249DB
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_249B5:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    cs
call    near ptr sub_237EA
les     bx, [bp+arg_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_249DB:
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]

loc_249E1:
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_245C5 endp



; Attributes: bp-based frame

sub_249E8 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    si
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_24A2E
xor     si, si
jmp     short loc_24A09

loc_249F8:
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
shr     dx, 1
rcr     ax, 1
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
inc     si

loc_24A09:
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
and     ax, 1
and     dx, 0
or      dx, ax
jz      short loc_249F8
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
shr     dx, 1
rcr     ax, 1
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
or      ax, dx
jz      short loc_24A33

loc_24A2E:
mov     ax, 0FFFFh
jmp     short loc_24A35

loc_24A33:
mov     ax, si

loc_24A35:
pop     si
pop     bp
retf    4
sub_249E8 endp

seg006 ends


; Segment type: Pure code
seg007 segment byte public 'CODE' use16
assume cs:seg007
;org 0Ah
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_24A3A proc far

var_A= dword ptr -0Ah
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
mov     si, [bp+arg_0]
les     bx, ds:9A70h
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
mov     [bp+var_2], 0
mov     [bp+var_4], 0
call    sub_26945
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jnz     short loc_24A6C
jmp     loc_24B25

loc_24A6C:
or      si, si
jz      short loc_24A73
jmp     loc_24AFD

loc_24A73:
mov     ax, 15h
push    ax
call    sub_318B7
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
push    dx
push    ax
mov     ax, 15h
push    ax
mov     al, 0
push    ax
call    sub_46C10
mov     dx, ds:9A72h
mov     ax, ds:9A70h
les     bx, [bp+var_A]
mov     es:[bx+2], dx
mov     es:[bx], ax
or      ax, dx
jz      short loc_24AD8
les     bx, ds:9A70h
mov     ax, es:[bx+0Ch]
or      ax, es:[bx+0Eh]
jz      short loc_24AC6
mov     dx, es:[bx+0Eh]
mov     ax, es:[bx+0Ch]
les     bx, [bp+var_A]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax

loc_24AC6:
mov     dx, word ptr [bp+var_A+2]
mov     ax, word ptr [bp+var_A]
les     bx, ds:9A70h
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax

loc_24AD8:
les     bx, [bp+var_A]
mov     word ptr ds:9A72h, es
mov     ds:9A70h, bx
mov     si, 1
cmp     byte ptr ds:22C0h, 0
jz      short loc_24AFD
push    word ptr ds:9A72h
push    bx
call    sub_2EDE8
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_24AFD:
call    sub_28F70
cmp     byte ptr ds:0BED2h, 7
jz      short loc_24B14
mov     ax, 8Fh
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_24B14:
call    sub_26945
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jnz     short loc_24AFD

loc_24B25:
mov     [bp+var_6], 1
jmp     short loc_24B3E

loc_24B2C:
call    sub_2693F
push    ss
lea     ax, [bp+var_6]
push    ax
call    sub_24BED
call    sub_26945

loc_24B3E:
cmp     byte ptr ds:0BED2h, 6
jz      short loc_24B4C
cmp     byte ptr ds:0BED2h, 0
jnz     short loc_24B2C

loc_24B4C:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
cmp     byte ptr ds:0BED2h, 6
jz      short loc_24B69
mov     ax, 7Ah ; 'z'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_24B69:
or      si, si
jz      short loc_24B99
les     bx, [bp+var_A]
les     bx, es:[bx]
mov     word ptr ds:9A72h, es
mov     ds:9A70h, bx
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_1FB9E
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jz      short loc_24B99
push    [bp+var_2]
push    [bp+var_4]
call    sub_2EE25

loc_24B99:
mov     ax, [bp+var_6]
pop     si
mov     sp, bp
pop     bp
retf    2
sub_24A3A endp




sub_24BA3 proc near
cmp     byte ptr ds:22C2h, 0
jz      short locret_24BBD
cmp     word ptr ds:0BDABh, 1FFFh
jg      short locret_24BBD
mov     ax, ds:0BDABh
mov     dx, 3
mul     dx
mov     ds:0BDABh, ax

locret_24BBD:
retn
sub_24BA3 endp




sub_24BBE proc near
cmp     word ptr ds:0BDABh, 1
jle     short locret_24BD1
mov     ax, ds:0BDABh
mov     bx, 3
cwd
idiv    bx
mov     ds:0BDABh, ax

locret_24BD1:
retn
sub_24BBE endp



; Attributes: bp-based frame

sub_24BD2 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     word ptr es:[bx], 0
jnz     short loc_24BE9
mov     ax, 0B2h
push    ax
call    sub_31324
mov     sp, bp

loc_24BE9:
pop     bp
retn    4
sub_24BD2 endp



; Attributes: bp-based frame

sub_24BED proc near

var_44= word ptr -44h
var_42= word ptr -42h
var_40= dword ptr -40h
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= dword ptr -22h
var_1E= dword ptr -1Eh
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 44h
push    si
push    di

loc_24BF5:
call    sub_1BA0B
mov     [bp+var_18], 0
mov     [bp+var_1A], 0
call    sub_26945
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     ax, ds:0BED4h
mov     [bp+var_E], ax
mov     si, ds:0BED6h
mov     al, ds:0BED2h
mov     ah, 0
cmp     ax, 54h ; 'T'
jnz     short loc_24C2B
jmp     loc_24F7E

loc_24C2B:
jg      short loc_24C80
cmp     ax, 2Fh ; '/'
jnz     short loc_24C35
jmp     loc_258B3

loc_24C35:
jg      short loc_24C58
cmp     ax, 7           ; switch 8 cases
jbe     short loc_24C3F
jmp     def_24C43       ; jumptable 00024C43 default case, cases 1-4
                        ; jumptable 00024C8F default case

loc_24C3F:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_24C43[bx] ; switch jump
jpt_24C43 dw offset loc_24E28 ; jump table for switch statement
dw offset def_24C43
dw offset def_24C43
dw offset def_24C43
dw offset def_24C43
dw offset loc_2583D
dw offset loc_24E23
dw offset loc_25933

loc_24C58:
cmp     ax, 52h ; 'R'
jnz     short loc_24C60
jmp     loc_24E55

loc_24C60:
jg      short loc_24C75
cmp     ax, 34h ; '4'
jnz     short loc_24C6A
jmp     loc_24E36

loc_24C6A:
cmp     ax, 51h ; 'Q'
jnz     short loc_24C72
jmp     loc_25856

loc_24C72:              ; jumptable 00024C43 default case, cases 1-4
jmp     def_24C43       ; jumptable 00024C8F default case

loc_24C75:
cmp     ax, 53h ; 'S'
jnz     short loc_24C7D
jmp     loc_24E47

loc_24C7D:              ; jumptable 00024C43 default case, cases 1-4
jmp     def_24C43       ; jumptable 00024C8F default case

loc_24C80:              ; switch 8 cases
sub     ax, 55h ; 'U'
cmp     ax, 7
jbe     short loc_24C8B
jmp     def_24C43       ; jumptable 00024C43 default case, cases 1-4
                        ; jumptable 00024C8F default case

loc_24C8B:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_24C8F[bx] ; switch jump
jpt_24C8F dw offset loc_25336 ; jump table for switch statement
dw offset loc_2521A
dw offset loc_25476
dw offset loc_256B2
dw offset loc_255E2
dw offset loc_2564F
dw offset loc_24DAB
dw offset loc_24CA4

loc_24CA4:              ; jumptable 00024C8F case 92
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1
call    sub_26945
mov     ax, 3
push    ax
call    sub_23348
or      ax, ax
jnz     short loc_24CC1
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24CC1:
call    sub_29B45
mov     [bp+var_42], dx
mov     [bp+var_44], ax
mov     ax, ds:0BDB1h
or      ax, ds:0BDB3h
jnz     short loc_24CE3
mov     ax, 7Bh ; '{'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_24D9D

loc_24CE3:
les     bx, ds:0BDB1h
cmp     word ptr es:[bx+14h], 101h
jl      short loc_24CF2
jmp     loc_24D92

loc_24CF2:
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_1E+2], es
mov     word ptr [bp+var_1E], bx
jmp     short loc_24D2B

loc_24CFE:
les     bx, [bp+var_1E]
mov     ax, es:[bx+4]
cwd
cmp     dx, ds:0BEDAh
jnz     short loc_24D1F
cmp     ax, ds:0BED8h
jnz     short loc_24D1F
mov     ax, 7Ch ; '|'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_24D33

loc_24D1F:
les     bx, [bp+var_1E]
les     bx, es:[bx]
mov     word ptr [bp+var_1E+2], es
mov     word ptr [bp+var_1E], bx

loc_24D2B:
mov     ax, word ptr [bp+var_1E]
or      ax, word ptr [bp+var_1E+2]
jnz     short loc_24CFE

loc_24D33:
mov     ax, word ptr [bp+var_1E]
or      ax, word ptr [bp+var_1E+2]
jz      short loc_24D3E
jmp     loc_24BF5

loc_24D3E:
mov     ax, 0Ah
push    ax
call    sub_318B7
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
les     bx, ds:0BDB1h
mov     dx, es:[bx+1Ch]
mov     ax, es:[bx+1Ah]
les     bx, [bp+var_1E]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, word ptr [bp+var_1E+2]
mov     ax, bx
les     bx, ds:0BDB1h
mov     es:[bx+1Ch], dx
mov     es:[bx+1Ah], ax
inc     word ptr es:[bx+14h]
mov     dx, [bp+var_42]
mov     ax, [bp+var_44]
les     bx, [bp+var_1E]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, ds:0BED8h
mov     es:[bx+4], ax
jmp     short loc_24D9D

loc_24D92:
mov     ax, 7Dh ; '}'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_24D9D:
push    [bp+var_42]
push    [bp+var_44]
call    sub_2ED30
jmp     loc_24BF5

loc_24DAB:              ; jumptable 00024C8F case 91
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1
call    sub_26945
cmp     al, 1Fh
jz      short loc_24DCF
mov     ax, 7Eh ; '~'
push    ax
call    sub_312DE
inc     sp
inc     sp
call    sub_2693F
jmp     loc_24BF5

loc_24DCF:
mov     ax, ds:0BDB1h
or      ax, ds:0BDB3h
jnz     short loc_24DE6
mov     ax, 7Fh
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_24BF5

loc_24DE6:
les     bx, ds:0BDB1h
mov     ax, es:[bx+16h]
or      ax, es:[bx+18h]
jz      short loc_24E02
mov     ax, 80h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_24BF5

loc_24E02:
call    sub_29B45
les     bx, ds:0BDB1h
mov     es:[bx+18h], dx
mov     es:[bx+16h], ax
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    sub_2ED30
jmp     loc_24BF5

loc_24E23:              ; jumptable 00024C43 case 6
call    sub_2693F

loc_24E28:              ; jumptable 00024C43 case 0
mov     ax, 8Bh
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24E36:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
call    sub_3B37D
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24E47:
mov     ax, 81h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_24BF5

loc_24E55:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
mov     [bp+var_14], ds
mov     [bp+var_16], 4B88h
call    sub_26945
cmp     al, 1
jz      short loc_24E72
jmp     loc_25490

loc_24E72:
call    sub_26945
call    sub_29B45
mov     [bp+var_42], dx
mov     [bp+var_44], ax
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_24E99
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24E99:
push    dx
push    word ptr [bp+var_38]
push    [bp+var_42]
push    [bp+var_44]
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E6C6
mov     [bp+var_4], ax
or      ax, ax
jl      short loc_24EC0
mov     ax, 1
jmp     short loc_24EC2

loc_24EC0:
xor     ax, ax

loc_24EC2:
les     bx, [bp+arg_0]
mov     es:[bx], ax
cmp     byte ptr ds:0BED2h, 2
jz      short loc_24ED2
jmp     loc_25507

loc_24ED2:
push    word ptr [bp+arg_0+2]
push    bx
call    sub_24BED
mov     ax, ds:0BED4h
mov     [bp+var_E], ax
mov     si, ds:0BED6h
call    sub_26945
cmp     al, 53h ; 'S'
jnz     short loc_24F5D
les     bx, [bp+arg_0]
mov     ax, es:[bx]
mov     [bp+var_2], ax
cmp     [bp+var_4], 0
jnz     short loc_24F02
mov     word ptr es:[bx], 0
jmp     short loc_24F0A

loc_24F02:
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1

loc_24F0A:
call    sub_29B45
mov     word ptr [bp+var_40+2], dx
mov     word ptr [bp+var_40], ax
push    dx
push    ax
push    [bp+var_E]
push    si
call    sub_2EC34
push    [bp+var_42]
push    [bp+var_44]
call    sub_2ED30
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BED
push    word ptr [bp+var_40+2]
push    word ptr [bp+var_40]
call    sub_2ED30
cmp     [bp+var_4], 0
jnz     short loc_24F51
mov     ax, [bp+var_2]
les     bx, [bp+arg_0]
mov     es:[bx], ax
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24F51:
mov     ax, [bp+var_2]
les     bx, [bp+arg_0]
or      es:[bx], ax
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24F5D:
cmp     [bp+var_4], 0
jz      short loc_24F6B
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1

loc_24F6B:
call    sub_2693F
push    [bp+var_42]
push    [bp+var_44]
call    sub_2ED30
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24F7E:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
mov     [bp+var_14], ds
mov     [bp+var_16], 4B8Bh
call    sub_26945
cmp     al, 1
jz      short loc_24F9B
jmp     loc_25490

loc_24F9B:
call    sub_26945
cmp     al, 7
jz      short loc_24FE3
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_24FBB
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_24FBB:
push    dx
push    word ptr [bp+var_38]
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E58A
mov     ax, ds:0BED4h
mov     [bp+var_E], ax
mov     si, ds:0BED6h
cmp     byte ptr ds:0BED2h, 7
jz      short loc_24FE8
jmp     short loc_2502C

loc_24FE3:
mov     [bp+var_E], 0

loc_24FE8:
call    sub_24BA3
call    sub_26945
cmp     al, 7
jnz     short loc_24FF7
jmp     loc_2506B

loc_24FF7:
mov     di, ds:0BED4h
mov     ax, ds:0BED6h
mov     [bp+var_C], ax
cmp     si, ax
jnz     short loc_2500E
mov     ax, [bp+var_E]
cmp     ax, di
jnz     short loc_2500E
xor     di, di

loc_2500E:
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_25025
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25025:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_25041

loc_2502C:
push    [bp+var_14]
push    [bp+var_16]
mov     ax, 84h
push    ax
call    sub_28E99
add     sp, 6
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25041:
or      di, di
jz      short loc_25053
mov     ax, ds:0BED4h
mov     [bp+var_A], ax
mov     ax, ds:0BED6h
mov     [bp+var_8], ax
jmp     short loc_25058

loc_25053:
mov     [bp+var_A], 0

loc_25058:
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
call    sub_2E8D5
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
jmp     short loc_25075

loc_2506B:
mov     word ptr [bp+var_38+2], 0
mov     word ptr [bp+var_38], 0

loc_25075:
call    sub_26945
cmp     al, 2
jz      short loc_250F1
les     bx, ds:0BFACh
mov     [bp+var_10], es
mov     [bp+var_12], bx
call    sub_2AEAA
mov     ax, ds:0BFB6h
mov     [bp+var_6], ax
cmp     si, ds:0BED6h
jnz     short loc_250A2
mov     ax, [bp+var_E]
cmp     ax, ds:0BED4h
jz      short loc_250AE

loc_250A2:
mov     ax, ds:0BED4h
mov     [bp+var_E], ax
mov     si, ds:0BED6h
jmp     short loc_250B3

loc_250AE:
mov     [bp+var_E], 0

loc_250B3:
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_34+2], dx
mov     word ptr [bp+var_34], ax
or      ax, dx
jnz     short loc_250CA
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_250CA:
cmp     byte ptr ds:0BED2h, 2
jz      short loc_250D4
jmp     loc_25507

loc_250D4:
push    dx
push    word ptr [bp+var_34]
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E600
mov     [bp+var_3A], dx
mov     [bp+var_3C], ax
jmp     short loc_250FB

loc_250F1:
mov     [bp+var_3A], 0
mov     [bp+var_3C], 0

loc_250FB:
les     bx, ds:0BDADh
mov     word ptr [bp+var_30+2], es
mov     word ptr [bp+var_30], bx
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
call    sub_29B45
mov     [bp+var_2A], dx
mov     [bp+var_2C], ax
call    sub_29B45
mov     [bp+var_26], dx
mov     [bp+var_28], ax
mov     [bp+var_24], 0
call    sub_29B45
mov     word ptr [bp+var_40+2], dx
mov     word ptr [bp+var_40], ax
mov     ax, word ptr [bp+var_38]
or      ax, word ptr [bp+var_38+2]
jz      short loc_25158
call    sub_29B45
mov     [bp+var_42], dx
mov     [bp+var_44], ax
push    dx
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_2EC34

loc_25158:
mov     ax, word ptr [bp+var_38]
or      ax, word ptr [bp+var_38+2]
jz      short loc_2517D
les     bx, [bp+var_38]
cmp     byte ptr es:[bx], 2
jnz     short loc_2517D
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_2517D
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 0
jmp     short loc_25188

loc_2517D:
push    word ptr [bp+var_40+2]
push    word ptr [bp+var_40]
call    sub_2ED30

loc_25188:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BED
push    [bp+var_26]
push    [bp+var_28]
call    sub_2ED30
mov     ax, [bp+var_3C]
or      ax, [bp+var_3A]
jz      short loc_251B8
push    [bp+var_3A]
push    [bp+var_3C]
push    [bp+var_10]
push    [bp+var_12]
push    [bp+var_6]
call    sub_2E675

loc_251B8:
mov     ax, word ptr [bp+var_38]
or      ax, word ptr [bp+var_38+2]
jz      short loc_251F1
push    [bp+var_42]
push    [bp+var_44]
call    sub_2ED30
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
push    word ptr [bp+var_40+2]
push    word ptr [bp+var_40]
push    di
push    [bp+var_C]
push    [bp+var_A]
push    [bp+var_8]
call    sub_2E900
or      ax, ax
jl      short loc_25200
mov     [bp+var_24], 1
jmp     short loc_25200

loc_251F1:
push    word ptr [bp+var_40+2]
push    word ptr [bp+var_40]
xor     ax, ax
push    ax
push    ax
call    sub_2EC34

loc_25200:
call    sub_24BBE
mov     ax, [bp+var_24]
les     bx, [bp+arg_0]
mov     es:[bx], ax
les     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
jmp     loc_25468

loc_2521A:              ; jumptable 00024C8F case 86
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
mov     [bp+var_14], ds
mov     [bp+var_16], 4B8Fh
les     bx, ds:0BDADh
mov     word ptr [bp+var_30+2], es
mov     word ptr [bp+var_30], bx
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
call    sub_29B45
mov     [bp+var_26], dx
mov     [bp+var_28], ax
call    sub_29B45
mov     [bp+var_2A], dx
mov     [bp+var_2C], ax
mov     [bp+var_24], 0
call    sub_29B45
mov     [bp+var_42], dx
mov     [bp+var_44], ax
push    dx
push    ax
call    sub_2ED30
call    sub_24BA3
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1
push    word ptr [bp+arg_0+2]
push    bx
call    sub_24BED
call    sub_26945
cmp     al, 55h ; 'U'
jz      short loc_2529A
mov     ax, 85h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_2529A:
mov     ax, ds:0BED4h
mov     [bp+var_E], ax
mov     si, ds:0BED6h
call    sub_26945
cmp     al, 1
jz      short loc_252B0
jmp     loc_25490

loc_252B0:
call    sub_26945
les     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
push    [bp+var_26]
push    [bp+var_28]
call    sub_2ED30
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_252E2
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_252E2:
push    dx
push    word ptr [bp+var_38]
push    [bp+var_42]
push    [bp+var_44]
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E8AA
or      ax, ax
jl      short loc_25306
mov     [bp+var_24], 1

loc_25306:
call    sub_24BBE
mov     ax, [bp+var_24]
les     bx, [bp+arg_0]
mov     es:[bx], ax
push    [bp+var_2A]
push    [bp+var_2C]
call    sub_2ED30
cmp     byte ptr ds:0BED2h, 2
jz      short loc_25327
jmp     loc_25507

loc_25327:
call    sub_26945
cmp     al, 7
jnz     short loc_25333
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25333:
jmp     loc_2502C

loc_25336:              ; jumptable 00024C8F case 85
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
mov     [bp+var_14], ds
mov     [bp+var_16], 4B98h
call    sub_26945
cmp     al, 1
jz      short loc_25353
jmp     loc_25490

loc_25353:
call    sub_26945
les     bx, ds:0BDADh
mov     word ptr [bp+var_30+2], es
mov     word ptr [bp+var_30], bx
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
call    sub_29B45
mov     [bp+var_26], dx
mov     [bp+var_28], ax
call    sub_29B45
mov     [bp+var_2A], dx
mov     [bp+var_2C], ax
mov     [bp+var_24], 0
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_253AB
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_253AB:
cmp     byte ptr ds:0BED2h, 2
jz      short loc_253B5
jmp     loc_25507

loc_253B5:
call    sub_24BA3
mov     ax, ds:0BED4h
mov     [bp+var_A], ax
mov     ax, ds:0BED6h
mov     [bp+var_8], ax
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
call    sub_2E8D5
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
push    [bp+var_26]
push    [bp+var_28]
xor     ax, ax
push    ax
push    ax
call    sub_2EC34
mov     word ptr [bp+var_40+2], dx
mov     word ptr [bp+var_40], ax
call    sub_29B45
mov     [bp+var_42], dx
mov     [bp+var_44], ax
push    dx
push    ax
call    sub_2ED30
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BED
call    sub_24BBE
mov     ax, ds:0BED6h
cmp     ax, si
jnz     short loc_25425
mov     ax, ds:0BED4h
cmp     ax, [bp+var_E]
jnz     short loc_25425
mov     al, byte ptr [bp+var_E]
les     bx, [bp+var_40]
mov     es:[bx+1], al
mov     es:[bx+12h], si

loc_25425:
les     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
push    [bp+var_26]
push    [bp+var_28]
call    sub_2ED30
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
push    [bp+var_42]
push    [bp+var_44]
push    [bp+var_E]
push    si
push    [bp+var_A]
push    [bp+var_8]
call    sub_2E900
or      ax, ax
jl      short loc_2545F
mov     [bp+var_24], 1

loc_2545F:
mov     ax, [bp+var_24]
les     bx, [bp+arg_0]
mov     es:[bx], ax

loc_25468:
push    [bp+var_2A]
push    [bp+var_2C]
call    sub_2ED30
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25476:              ; jumptable 00024C8F case 87
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
mov     [bp+var_14], ds
mov     [bp+var_16], 4B9Eh
call    sub_26945
cmp     al, 1
jz      short loc_254A5

loc_25490:
push    [bp+var_14]
push    [bp+var_16]
mov     ax, 82h
push    ax
call    sub_28E99
add     sp, 6
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_254A5:
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_254C1
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_254C1:
push    dx
push    word ptr [bp+var_38]
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
mov     ax, 6Bh ; 'k'
push    ax
mov     ax, 0A4h
push    ax
call    sub_21215
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
les     bx, ds:0BDB1h
mov     word ptr [bp+var_22+2], es
mov     word ptr [bp+var_22], bx
push    dx
push    ax
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2EE80
cmp     byte ptr ds:0BED2h, 2
jz      short loc_2551C

loc_25507:
push    [bp+var_14]
push    [bp+var_16]
mov     ax, 83h
push    ax
call    sub_28E99
add     sp, 6
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_2551C:
call    sub_29B45
mov     [bp+var_2A], dx
mov     [bp+var_2C], ax
mov     ax, ds:0BDADh
or      ax, ds:0BDAFh
jz      short loc_25540
les     bx, ds:0BDADh
les     bx, es:[bx+8]
mov     [bp+var_26], es
mov     [bp+var_28], bx
jmp     short loc_2554A

loc_25540:
mov     [bp+var_26], 0
mov     [bp+var_28], 0

loc_2554A:
les     bx, ds:0BDADh
mov     word ptr [bp+var_30+2], es
mov     word ptr [bp+var_30], bx
mov     [bp+var_24], 0
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1
push    word ptr [bp+arg_0+2]
push    bx
call    sub_24BED
les     bx, ds:0BDB1h
mov     ax, es:[bx+16h]
or      ax, es:[bx+18h]
jnz     short loc_255A5
call    sub_29B45
les     bx, ds:0BDB1h
mov     es:[bx+18h], dx
mov     es:[bx+16h], ax
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    sub_2ED30
jmp     short loc_255AB

loc_255A5:
cmp     [bp+var_24], 0
jz      short loc_255B3

loc_255AB:
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1

loc_255B3:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2EF24
push    [bp+var_2A]
push    [bp+var_2C]
call    sub_2ED30
les     bx, [bp+var_22]
mov     word ptr ds:0BDB3h, es
mov     ds:0BDB1h, bx
les     bx, [bp+var_30]
mov     word ptr ds:0BDAFh, es
mov     ds:0BDADh, bx
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_255E2:              ; jumptable 00024C8F case 89
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
call    sub_26945
cmp     al, 7
jz      short loc_25608
push    ds
mov     ax, 4BA5h
push    ax
mov     ax, 84h
push    ax
call    sub_28E99
add     sp, 6
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25608:
mov     ax, ds:0BDADh
or      ax, ds:0BDAFh
jz      short loc_2561F
les     bx, ds:0BDADh
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jnz     short loc_2562D

loc_2561F:
mov     ax, 88h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_258A8

loc_2562D:
les     bx, ds:0BDADh
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
push    [bp+var_E]
push    si
call    sub_2EC34
les     bx, ds:0BDADh
mov     word ptr es:[bx+0Ch], 1
jmp     loc_258A8

loc_2564F:              ; jumptable 00024C8F case 90
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
call    sub_26945
cmp     al, 7
jz      short loc_25675
push    ds
mov     ax, 4BABh
push    ax
mov     ax, 84h
push    ax
call    sub_28E99
add     sp, 6
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25675:
mov     ax, ds:0BDADh
or      ax, ds:0BDAFh
jz      short loc_2568C
les     bx, ds:0BDADh
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_2569A

loc_2568C:
mov     ax, 89h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_258A8

loc_2569A:
les     bx, ds:0BDADh
push    word ptr es:[bx+0Ah]
push    word ptr es:[bx+8]
push    [bp+var_E]
push    si
call    sub_2EC34
jmp     loc_258A8

loc_256B2:              ; jumptable 00024C8F case 88
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 0
call    sub_26945
cmp     al, 7
jnz     short loc_256CF
jmp     loc_257E7

loc_256CF:
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jnz     short loc_256E6
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_256E6:
les     bx, ds:0BF0Fh
cmp     byte ptr es:[bx+4], 0Fh
jnz     short loc_256FE
mov     ax, 0ADh
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_25717

loc_256FE:
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
push    word ptr ds:0BF11h
push    word ptr ds:0BF0Fh
call    sub_20D7E
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax

loc_25717:
les     bx, [bp+var_38]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_3B34A
or      ax, ax
jz      short loc_2579F
les     bx, [bp+var_38]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    ds
mov     ax, 67FEh
push    ax
call    sub_299B0
mov     word ptr [bp+var_34+2], dx
mov     word ptr [bp+var_34], ax
mov     ax, ds:0BF0Bh
les     bx, [bp+var_34]
mov     es:[bx+0Ah], ax
mov     ax, 17h
push    ax
push    dx
push    bx
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
call    sub_1FF72
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
push    dx
push    ax
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E58A
les     bx, [bp+var_38]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    ds
mov     ax, 67FEh
push    ax
call    sub_299B0
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
mov     ax, ds:0BF0Bh
les     bx, [bp+var_38]
mov     es:[bx+0Ah], ax

loc_2579F:
push    word ptr [bp+var_38+2]
push    word ptr [bp+var_38]
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2EB1E
cmp     byte ptr ds:0BF13h, 1
jnz     short loc_257C8
mov     ax, 0AEh
push    ax
call    sub_31324
inc     sp
inc     sp

loc_257C8:
mov     byte ptr ds:0BF13h, 2
cmp     byte ptr ds:0BED2h, 7
jz      short loc_25829
push    ds
mov     ax, 4BB4h
push    ax
mov     ax, 84h
push    ax
call    sub_28E99
add     sp, 6
jmp     short loc_25829

loc_257E7:
mov     dx, ds:0BF11h
mov     ax, ds:0BF0Fh
cmp     dx, ds:0BD80h
jnz     short loc_257FA
cmp     ax, ds:0BD7Eh
jz      short loc_25812

loc_257FA:
les     bx, ds:0BF0Fh
cmp     byte ptr es:[bx+4], 0Fh
jz      short loc_25812
mov     ax, 0AFh
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_25824

loc_25812:
cmp     byte ptr ds:0BF13h, 2
jnz     short loc_25824
mov     ax, 0AEh
push    ax
call    sub_31324
inc     sp
inc     sp

loc_25824:
mov     byte ptr ds:0BF13h, 1

loc_25829:
push    word ptr ds:0BF09h
push    word ptr ds:0BF07h
xor     ax, ax
push    ax
push    ax
call    sub_2EC34
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_2583D:              ; jumptable 00024C43 case 5
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
xor     ax, ax
push    ax
push    cs
call    near ptr sub_24A3A
les     bx, [bp+arg_0]
mov     es:[bx], ax
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25856:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_24BD2
call    sub_26945
cmp     al, 2Fh ; '/'
jz      short loc_25876
mov     ax, 8Ah
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_25876:
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_2DAF2
push    dx
push    ax
push    [bp+var_E]
push    si
call    sub_2EC34
call    sub_26945
cmp     al, 7
jz      short loc_258A8
push    ds
mov     ax, 4BBBh
push    ax
mov     ax, 84h
push    ax
call    sub_28E99
add     sp, 6

loc_258A8:
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 0
jmp     loc_25933       ; jumptable 00024C43 case 7

loc_258B3:
les     bx, ds:0BED8h
mov     [bp+var_18], es
mov     [bp+var_1A], bx
call    sub_26945
cmp     al, 1Fh
jnz     short def_24C43 ; jumptable 00024C43 default case, cases 1-4
                        ; jumptable 00024C8F default case
push    [bp+var_18]
push    [bp+var_1A]
call    sub_2DB84
push    dx
push    ax
call    sub_2ED30
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1
jmp     loc_24BF5

def_24C43:              ; jumptable 00024C43 default case, cases 1-4
push    word ptr [bp+arg_0+2] ; jumptable 00024C8F default case
push    word ptr [bp+arg_0]
call    sub_24BD2
push    [bp+var_18]
push    [bp+var_1A]
xor     ax, ax
push    ax
call    sub_23062
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
or      ax, dx
jz      short loc_25933 ; jumptable 00024C43 case 7
push    dx
push    word ptr [bp+var_38]
push    [bp+var_E]
push    si
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E58A
cmp     byte ptr ds:0BED2h, 7
jz      short loc_2592B
mov     ax, 8Bh
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_2592B:
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 1

loc_25933:              ; jumptable 00024C43 case 7
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_24BED endp

seg007 ends


; Segment type: Pure code
seg008 segment byte public 'CODE' use16
assume cs:seg008
;org 0Bh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2593B proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_467E6
mov     ds:4BC0h, ax
mov     word ptr ds:9A76h, 0BA78h
pop     bp
retf    4
sub_2593B endp



; Attributes: bp-based frame

sub_25959 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     bx, ds:9A76h
mov     [bx], al
inc     word ptr ds:9A76h
cmp     word ptr ds:9A76h, 0BC78h
jb      short loc_25999
push    word ptr ds:4BC0h
push    ds
mov     ax, 0BA78h
push    ax
mov     ax, 200h
push    ax
call    sub_46F6F
cmp     ax, 200h
jz      short loc_25993
mov     ax, 7
push    ax
call    sub_3129B
mov     sp, bp

loc_25993:
mov     word ptr ds:9A76h, 0BA78h

loc_25999:
pop     bp
retf    2
sub_25959 endp




sub_2599D proc far
push    word ptr ds:4BC0h
push    ds
mov     ax, 0BA78h
push    ax
mov     ax, ds:9A76h
sub     ax, 0BA78h
push    ax
call    sub_46F6F
mov     dx, ds:9A76h
sub     dx, 0BA78h
cmp     ax, dx
jz      short loc_259C9
mov     ax, 7
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_259C9:
push    word ptr ds:4BC0h
call    sub_467C8
mov     word ptr ds:4BC0h, 0FFFFh
retf
sub_2599D endp




sub_259D9 proc far
cmp     word ptr ds:4BC0h, 0
jl      short locret_259FC
push    word ptr ds:4BC0h
call    sub_467C8
mov     word ptr ds:4BC0h, 0FFFFh
push    word ptr ds:0BE2Fh
push    word ptr ds:0BE2Dh
call    sub_46F49

locret_259FC:
retf
sub_259D9 endp

seg008 ends


; Segment type: Pure code
seg009 segment byte public 'CODE' use16
assume cs:seg009
;org 0Dh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_259FD proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    si
call    sub_317D1
mov     bx, 0BE35h
push    ds
push    bx
mov     bx, 22B0h
push    ds
push    bx
mov     cx, 5Ch ; '\'
call    sub_46BE5
push    ds
mov     ax, 0BE91h
push    ax
call    sub_469C1
mov     si, ax
or      si, si
jnz     short loc_25A2B
jmp     loc_25A99

loc_25A2B:
mov     ax, ds:0BF76h
or      ax, ds:0BF78h
jz      short loc_25A41

loc_25A34:
mov     ax, 1
push    ax
call    sub_2AD74
or      ax, ax
jnz     short loc_25A34

loc_25A41:
cmp     si, 1
jz      short loc_25A4B
cmp     si, 4
jnz     short loc_25A66

loc_25A4B:
call    sub_259D9
call    sub_317DE
cmp     si, 1
jnz     short loc_25A60

loc_25A5A:
mov     si, 2
jmp     loc_25AE1

loc_25A60:
mov     si, 3
jmp     loc_25AE1

loc_25A66:
cmp     si, 2
jnz     short loc_25A7A
call    sub_259D9
mov     al, 1
mov     ds:22CBh, al
mov     ds:22C9h, al
jmp     short loc_25A99

loc_25A7A:
call    sub_259D9
call    sub_317DE
dec     word ptr ds:0BFAAh
dec     word ptr ds:0BFA8h
mov     ax, 6
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_25A5A

loc_25A99:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_25B11
call    sub_285DC
call    sub_1FA0F
call    dword ptr ds:0BFFCh
cmp     word ptr ds:0BFA8h, 0
jz      short loc_25AC1
call    sub_259D9
mov     si, 2
jmp     short loc_25ADC

loc_25AC1:
call    sub_2599D
cmp     word ptr ds:0BFAAh, 0
jz      short loc_25AD2
mov     si, 1
jmp     short loc_25AD4

loc_25AD2:
xor     si, si

loc_25AD4:
xor     ax, ax
push    ax
call    sub_1B476

loc_25ADC:
call    sub_317DE

loc_25AE1:
mov     bx, 22B0h
push    ds
push    bx
mov     bx, 0BE35h
push    ds
push    bx
mov     cx, 5Ch ; '\'
call    sub_46BE5
mov     word ptr ds:0BFAEh, 0
mov     word ptr ds:0BFACh, 0
mov     word ptr ds:0BE1Dh, 0
mov     byte ptr ds:9A63h, 0
mov     ax, si
pop     si
pop     bp
retf    4
sub_259FD endp



; Attributes: bp-based frame

sub_25B11 proc near

var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= byte ptr -20h
var_16= byte ptr -16h
var_10= byte ptr -10h
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 2Ch
call    sub_31529
mov     ds:0BE33h, dx
mov     ds:0BE31h, ax
call    sub_25D5F
mov     byte ptr ds:0BE04h, 1
mov     word ptr ds:0BE23h, 18h
mov     byte ptr ds:9A63h, 1
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_31377
les     bx, [bp+arg_0]
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
push    word ptr [bp+arg_0+2]
push    bx
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ss
lea     ax, [bp+var_20]
push    ax
push    ss
lea     ax, [bp+var_16]
push    ax
call    sub_4654A
push    ss
lea     ax, [bp+var_10]
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ss
lea     ax, [bp+var_20]
push    ax
push    ss
lea     ax, [bp+var_16]
push    ax
call    sub_46713
mov     word ptr ds:0BE2Bh, 0
mov     word ptr ds:0BE29h, 0
call    sub_2690E
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2ABD3
mov     ax, ds:0BE29h
or      ax, ds:0BE2Bh
jnz     short loc_25BB6
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 4
push    ax
call    sub_3129B
add     sp, 6

loc_25BB6:
push    ss
lea     ax, [bp+var_20]
push    ax
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_31D57
call    dword ptr ds:0C054h
les     bx, ds:2304h
mov     word ptr [bp+var_24+2], es
mov     word ptr [bp+var_24], bx
jmp     loc_25D2A

loc_25BD6:
mov     word ptr [bp+var_28+2], ds
mov     word ptr [bp+var_28], 0BC78h
jmp     short loc_25BF2

loc_25BE0:
les     bx, [bp+var_24]
mov     al, es:[bx]
les     bx, [bp+var_28]
mov     es:[bx], al
inc     word ptr [bp+var_24]
inc     word ptr [bp+var_28]

loc_25BF2:
les     bx, [bp+var_24]
cmp     byte ptr es:[bx], 0
jz      short loc_25C0C
cmp     byte ptr es:[bx], 3Bh ; ';'
jz      short loc_25C0C
cmp     byte ptr es:[bx], 3Dh ; '='
jnz     short loc_25BE0
jmp     short loc_25C0C

loc_25C09:
dec     word ptr [bp+var_28]

loc_25C0C:
mov     ax, 0BC78h
mov     dx, ds
cmp     ax, word ptr [bp+var_28]
jnb     short loc_25C20
les     bx, [bp+var_28]
dec     bx
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_25C09

loc_25C20:
les     bx, [bp+var_28]
mov     byte ptr es:[bx], 0
mov     word ptr [bp+var_2C+2], ds
mov     word ptr [bp+var_2C], 0BC78h
jmp     short loc_25C34

loc_25C31:
inc     word ptr [bp+var_2C]

loc_25C34:
les     bx, [bp+var_2C]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_25C31
les     bx, [bp+var_24]
cmp     byte ptr es:[bx], 0
jz      short loc_25C4F
cmp     byte ptr es:[bx], 3Bh ; ';'
jnz     short loc_25C66
inc     word ptr [bp+var_24]

loc_25C4F:
push    word ptr [bp+var_2C+2]
push    word ptr [bp+var_2C]
push    ds
mov     ax, 4D96h
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_2C313
jmp     loc_25D2A

loc_25C66:
inc     word ptr [bp+var_24]
mov     word ptr [bp+var_28+2], ds
mov     word ptr [bp+var_28], 9A78h
jmp     short loc_25CBA

loc_25C73:
les     bx, [bp+var_24]
mov     al, es:[bx]
les     bx, [bp+var_28]
mov     es:[bx], al
inc     word ptr [bp+var_24]
inc     word ptr [bp+var_28]
les     bx, [bp+var_24]
dec     bx
cmp     byte ptr es:[bx], 5Ch ; '\'
jnz     short loc_25CBA
mov     bx, word ptr [bp+var_24]
cmp     byte ptr es:[bx], 3Bh ; ';'
jnz     short loc_25CA2
les     bx, [bp+var_28]
dec     bx
mov     byte ptr es:[bx], 3Bh ; ';'
jmp     short loc_25CB7

loc_25CA2:
les     bx, [bp+var_24]
cmp     byte ptr es:[bx], 0
jz      short loc_25CCE
mov     al, es:[bx]
les     bx, [bp+var_28]
mov     es:[bx], al
inc     word ptr [bp+var_28]

loc_25CB7:
inc     word ptr [bp+var_24]

loc_25CBA:
les     bx, [bp+var_24]
cmp     byte ptr es:[bx], 0
jz      short loc_25CCE
cmp     byte ptr es:[bx], 3Bh ; ';'
jnz     short loc_25C73
jmp     short loc_25CCE

loc_25CCB:
dec     word ptr [bp+var_28]

loc_25CCE:
mov     ax, 9A78h
mov     dx, ds
cmp     ax, word ptr [bp+var_28]
jnb     short loc_25CE2
les     bx, [bp+var_28]
dec     bx
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_25CCB

loc_25CE2:
les     bx, [bp+var_28]
mov     byte ptr es:[bx], 20h ; ' '
inc     word ptr [bp+var_28]
mov     bx, word ptr [bp+var_28]
mov     byte ptr es:[bx], 0
mov     word ptr [bp+var_28+2], ds
mov     word ptr [bp+var_28], 9A78h
jmp     short loc_25D00

loc_25CFD:
inc     word ptr [bp+var_28]

loc_25D00:
les     bx, [bp+var_28]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_25CFD
les     bx, [bp+var_24]
cmp     byte ptr es:[bx], 0
jz      short loc_25D15
inc     word ptr [bp+var_24]

loc_25D15:
push    word ptr [bp+var_2C+2]
push    word ptr [bp+var_2C]
push    word ptr [bp+var_28+2]
push    word ptr [bp+var_28]
mov     ax, 0FFFFh
push    ax
call    sub_2C313

loc_25D2A:
les     bx, [bp+var_24]
cmp     byte ptr es:[bx], 0
jz      short loc_25D36
jmp     loc_25BD6

loc_25D36:
mov     sp, bp
pop     bp
retn    4
sub_25B11 endp




sub_25D3C proc far
push    si
xor     si, si
jmp     short loc_25D58

loc_25D41:
mov     bx, si
shl     bx, 1
shl     bx, 1
add     bx, 4F62h
mov     ax, ds
mov     es, ax
mov     al, es:[bx+3]
mov     [si-415Ah], al
inc     si

loc_25D58:
cmp     si, 21h ; '!'
jle     short loc_25D41
pop     si
retf
sub_25D3C endp



; Attributes: bp-based frame

sub_25D5F proc near

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     word ptr ds:0BFB2h, 0
mov     word ptr ds:0BFB0h, 0
mov     word ptr ds:0BFA8h, 0
mov     word ptr ds:0BFAAh, 0
push    cs
call    near ptr sub_25D3C
push    ds
mov     ax, 0AA78h
push    ax
mov     ax, 1000h
push    ax
mov     al, 0
push    ax
call    sub_46C10
push    ds
mov     ax, 9A78h
push    ax
mov     ax, 23B1h
push    ax
mov     al, 0
push    ax
call    sub_46C10
mov     word ptr ds:9A72h, 0
mov     word ptr ds:9A70h, 0
mov     word ptr ds:0BDABh, 1
mov     byte ptr ds:0BDB5h, 1
mov     al, ds:22B6h
cbw
mov     di, ax
jmp     short loc_25E0F

loc_25DC4:
mov     ax, di
mov     dx, 6
mul     dx
mov     bx, ax
add     bx, 4C7Fh
mov     ax, ds
mov     es, ax
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, di
mov     dx, 6
mul     dx
mov     bx, ax
add     bx, 4C7Fh
mov     ax, ds
mov     es, ax
mov     si, es:[bx+4]
jmp     short loc_25E0A

loc_25DF5:
push    ds
les     bx, [bp+var_4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2A9CF
add     word ptr [bp+var_4], 4
dec     si

loc_25E0A:
or      si, si
jnz     short loc_25DF5
inc     di

loc_25E0F:
cmp     di, 3
jle     short loc_25DC4
mov     ax, 288h
push    ax
call    sub_3193F
mov     ds:0BD8Ch, dx
mov     ds:0BD8Ah, ax
mov     ds:0BD90h, dx
mov     ds:0BD8Eh, ax
les     bx, ds:0BD8Ah
mov     word ptr es:[bx+282h], 0
mov     word ptr es:[bx+280h], 0
mov     word ptr es:[bx+286h], 0
mov     word ptr es:[bx+284h], 0
mov     word ptr ds:0BD7Ch, es
mov     ds:0BD7Ah, bx
mov     ax, 5
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     ds:0BD80h, dx
mov     ds:0BD7Eh, ax
cmp     byte ptr ds:22B7h, 0
jz      short loc_25E72
mov     ax, 2
jmp     short loc_25E75

loc_25E72:
mov     ax, 1

loc_25E75:
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     ds:0BD84h, dx
mov     ds:0BD82h, ax
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_25D5F endp




sub_25E8B proc far
mov     byte ptr ds:9A63h, 3
call    sub_25D5F
retf
sub_25E8B endp



; Attributes: bp-based frame

sub_25E94 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_25EC0
jmp     short loc_25EB7

loc_25EA1:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F25
les     bx, [bp+arg_0]
mov     es:[bx], al
inc     word ptr [bp+arg_0]

loc_25EB7:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_25EA1

loc_25EC0:
pop     bp
retf    4
sub_25E94 endp




sub_25EC4 proc far
mov     byte ptr ds:0BE04h, 1
retf
sub_25EC4 endp




sub_25ECA proc far
push    word ptr ds:2302h
push    word ptr ds:2300h
call    sub_25EF7
retf
sub_25ECA endp




sub_25ED6 proc far
cmp     byte ptr ds:9A63h, 1
jnz     short locret_25EF6
mov     ax, 9Fh
push    ax
call    sub_312DE
inc     sp
inc     sp
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 1
push    ax
call    sub_4698B

locret_25EF6:
retf
sub_25ED6 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_25EF7 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
jmp     loc_25F9B

loc_25EFE:
mov     si, 9A78h
jmp     short loc_25F0F

loc_25F03:
les     bx, [bp+arg_0]
mov     al, es:[bx]
mov     [si], al
inc     word ptr [bp+arg_0]
inc     si

loc_25F0F:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jz      short loc_25F1E
cmp     byte ptr es:[bx], 3Bh ; ';'
jnz     short loc_25F03

loc_25F1E:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 3Bh ; ';'
jnz     short loc_25F2A
inc     word ptr [bp+arg_0]

loc_25F2A:
mov     byte ptr [si], 0
jmp     short loc_25F33

loc_25F2F:
dec     si
mov     byte ptr [si], 0

loc_25F33:
mov     ax, si
mov     dx, ds
mov     bx, 9A78h
mov     cx, ds
cmp     ax, bx
jbe     short loc_25F4C
cmp     byte ptr [si-1], 20h ; ' '
jz      short loc_25F2F
cmp     byte ptr [si-1], 9
jz      short loc_25F2F

loc_25F4C:
push    ds
mov     ax, 9A78h
push    ax
call    sub_46494
push    ds
mov     ax, 9A78h
push    ax
call    sub_46E60
mov     si, ax
add     si, 9A78h
push    ds
mov     ax, 9A78h
push    ax
push    cs
call    near ptr sub_25E94
push    ds
push    si
push    ds
mov     ax, 0BC78h
push    ax
call    sub_46D76
mov     si, 9A78h
jmp     short loc_25F81

loc_25F80:
inc     si

loc_25F81:
cmp     byte ptr [si], 20h ; ' '
jz      short loc_25F80
cmp     byte ptr [si], 9
jz      short loc_25F80
push    ds
push    si
call    sub_2ABD3
or      ax, ax
jz      short loc_25F9B
mov     ax, 1
jmp     short loc_25FA9

loc_25F9B:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jz      short loc_25FA7
jmp     loc_25EFE

loc_25FA7:
xor     ax, ax

loc_25FA9:
pop     si
pop     bp
retn    4
sub_25EF7 endp

seg009 ends


; Segment type: Pure code
seg010 segment byte public 'CODE' use16
assume cs:seg010
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_25FAE proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_0]
mov     ax, 1
push    ax
call    sub_26130
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_25FCE
xor     dx, dx
mov     ax, dx
jmp     short loc_25FEC

loc_25FCE:
les     bx, ds:0BECAh
mov     word ptr ds:0BF49h, es
mov     ds:0BF47h, bx
mov     ax, ds:0BECEh
mov     ds:0BF4Fh, ax
mov     ax, ds:0BED0h
mov     ds:0BF53h, ax
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]

loc_25FEC:
mov     sp, bp
pop     bp
retf    2
sub_25FAE endp



; Attributes: bp-based frame

sub_25FF2 proc far

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
xor     ax, ax
push    ax
push    ax
call    sub_26130
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_2600F
xor     dx, dx
mov     ax, dx
jmp     short loc_26021

loc_2600F:
les     bx, ds:0BECAh
mov     word ptr ds:0BF27h, es
mov     ds:0BF25h, bx
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]

loc_26021:
mov     sp, bp
pop     bp
retf
sub_25FF2 endp




sub_26025 proc far
xor     ax, ax
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_26130
retf
sub_26025 endp



; Attributes: bp-based frame

sub_26030 proc near

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     [bp+var_4], 0
mov     [bp+var_2], 0

loc_26042:
xor     si, si
mov     di, si
mov     al, ds:0BED2h
mov     ah, 0
cmp     ax, 4Dh ; 'M'
jz      short loc_260A4
jg      short loc_26076
sub     ax, 45h ; 'E'   ; switch 8 cases
cmp     ax, 7
jbe     short loc_2605D
jmp     def_26061       ; jumptable 00026061 default case, cases 71-73

loc_2605D:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_26061[bx] ; switch jump
jpt_26061 dw offset loc_2609A ; jump table for switch statement
dw offset loc_26095
dw offset def_26061
dw offset def_26061
dw offset def_26061
dw offset loc_260B3
dw offset loc_260B8
dw offset loc_2609F

loc_26076:
cmp     ax, 69h ; 'i'
jz      short loc_26090
jg      short loc_26089
cmp     ax, 4Eh ; 'N'
jz      short loc_260A9
cmp     ax, 4Fh ; 'O'
jz      short loc_260AE
jmp     short def_26061 ; jumptable 00026061 default case, cases 71-73

loc_26089:
cmp     ax, 6Ah ; 'j'
jz      short loc_260BD
jmp     short def_26061 ; jumptable 00026061 default case, cases 71-73

loc_26090:
mov     di, 400h
jmp     short loc_260E7

loc_26095:              ; jumptable 00026061 case 70
mov     di, 100h
jmp     short loc_260E7

loc_2609A:              ; jumptable 00026061 case 69
mov     di, 300h
jmp     short loc_260E7

loc_2609F:              ; jumptable 00026061 case 76
mov     si, 2
jmp     short loc_260E7

loc_260A4:
mov     si, 4
jmp     short loc_260E7

loc_260A9:
mov     si, 1
jmp     short loc_260E7

loc_260AE:
mov     si, 3
jmp     short loc_260E7

loc_260B3:              ; jumptable 00026061 case 74
mov     si, 7
jmp     short loc_260E7

loc_260B8:              ; jumptable 00026061 case 75
mov     si, 5
jmp     short loc_260E7

loc_260BD:
mov     si, 6
jmp     short loc_260E7

def_26061:              ; jumptable 00026061 default case, cases 71-73
cmp     [bp+var_2], 0
jz      short loc_260DF
cmp     [bp+var_4], 0
jz      short loc_260DF
cmp     [bp+var_4], 1
jg      short loc_260DF
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_260DF:
mov     ax, [bp+var_2]
or      ax, [bp+var_4]
jmp     short loc_2612A

loc_260E7:
or      di, di
jz      short loc_260FF
cmp     [bp+var_2], 0
jz      short loc_260FC
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_260FC:
mov     [bp+var_2], di

loc_260FF:
or      si, si
jz      short loc_26117
cmp     [bp+var_4], 0
jz      short loc_26114
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_26114:
mov     [bp+var_4], si

loc_26117:
call    sub_26945
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
jmp     loc_26042

loc_2612A:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_26030 endp



; Attributes: bp-based frame

sub_26130 proc near

var_12= dword ptr -12h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= dword ptr -0Ah
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
mov     di, [bp+arg_2]
mov     ax, sp
mov     dx, ds
mov     bx, 0C4CCh
mov     cx, ds
cmp     ax, bx
jnb     short loc_26153
mov     ax, 6
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_26153:
call    sub_26030
mov     si, ax
cmp     byte ptr ds:0BED2h, 16h
jnz     short loc_26195
call    sub_26945
call    sub_266B0
mov     [bp+var_6], ax
push    di
push    [bp+arg_0]
call    sub_26130
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_2617E
jmp     loc_2638F

loc_2617E:
mov     ax, 7
push    ax
xor     ax, ax
push    ax
push    [bp+var_6]
push    dx
push    [bp+var_4]
push    ax
push    ax
push    si
call    sub_266FF
jmp     loc_2643E

loc_26195:
mov     word ptr ds:0BECCh, 0
mov     word ptr ds:0BECAh, 0
cmp     byte ptr ds:0BED2h, 1
jnz     short loc_261ED
call    sub_26945
cmp     byte ptr ds:0BED2h, 2
jz      short loc_261C8
push    di
push    [bp+arg_0]
call    sub_26130
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_261E6
jmp     loc_2638F

loc_261C8:
cmp     [bp+arg_0], 0
jg      short loc_2621F
mov     ax, 11h
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ax
push    ax
push    si
call    sub_266FF
mov     [bp+var_2], dx
mov     [bp+var_4], ax
xor     si, si

loc_261E6:
call    sub_26945
jmp     short loc_26240

loc_261ED:
cmp     byte ptr ds:0BED2h, 2Fh ; '/'
jnz     short loc_26219
cmp     [bp+arg_0], 0
jl      short loc_26219
les     bx, ds:0BED8h
mov     word ptr ds:0BECCh, es
mov     ds:0BECAh, bx
mov     ax, ds:0BED6h
mov     ds:0BECEh, ax
mov     ax, ds:0BED4h
mov     ds:0BED0h, ax
call    sub_26945
jmp     short loc_2622D

loc_26219:
cmp     [bp+arg_0], 0
jle     short loc_2622D

loc_2621F:
mov     ax, 91h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_2638F

loc_2622D:
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    ax
push    ax
push    ax
push    si
call    sub_266FF
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_26240:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
cmp     byte ptr ds:0BED2h, 1
jnz     short loc_26255
jmp     loc_26424

loc_26255:
cmp     byte ptr ds:0BED2h, 3
jnz     short loc_2625F
jmp     loc_26424

loc_2625F:
test    si, 0FFh
jnz     short loc_26268
jmp     loc_26424

loc_26268:
mov     ax, si
and     ax, 0FFh
cmp     ax, 7
jnz     short loc_26275
jmp     loc_26424

loc_26275:
mov     ax, si
and     ax, 0FFh
cmp     ax, 5
jnz     short loc_26282
jmp     loc_26424

loc_26282:
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_26424

loc_26290:
cmp     byte ptr ds:0BED2h, 3
jnz     short loc_2629A
jmp     loc_26344

loc_2629A:
call    sub_26945
les     bx, ds:0BECAh
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx
mov     ax, ds:0BECEh
mov     [bp+var_E], ax
mov     ax, ds:0BED0h
mov     [bp+var_C], ax
push    di
call    sub_26446
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
les     bx, [bp+var_12]
mov     word ptr ds:0BECCh, es
mov     ds:0BECAh, bx
mov     ax, [bp+var_E]
mov     ds:0BECEh, ax
mov     ax, [bp+var_C]
mov     ds:0BED0h, ax
mov     ax, word ptr [bp+var_A]
or      ax, dx
jnz     short loc_262E0
jmp     loc_2638F

loc_262E0:
mov     ax, word ptr [bp+var_A]
mov     bx, 0BF29h
mov     cx, ds
cmp     dx, cx
jnz     short loc_262FA
cmp     ax, bx
jnz     short loc_262FA
xor     di, di
mov     word ptr [bp+var_A+2], di
mov     word ptr [bp+var_A], di
jmp     short loc_26323

loc_262FA:
les     bx, [bp+var_A]
cmp     byte ptr es:[bx+18h], 0
jz      short loc_26323
mov     ax, si
and     ax, 0FF00h
cmp     ax, 400h
jz      short loc_2631F
test    si, 0FF00h
jz      short loc_2631F
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2631F:
or      si, 8000h

loc_26323:
mov     ax, 11h
push    ax
xor     ax, ax
push    ax
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    si
call    sub_266FF
mov     [bp+var_2], dx
mov     [bp+var_4], ax
jmp     loc_26414

loc_26344:
test    si, 0FFh
jz      short loc_26369
mov     ax, si
and     ax, 0FFh
cmp     ax, 7
jz      short loc_26369
mov     ax, si
and     ax, 0FFh
cmp     ax, 5
jz      short loc_26369
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_26369:
call    sub_26945
cmp     byte ptr ds:0BED2h, 4
jnz     short loc_26378
jmp     loc_263FA

loc_26378:
les     bx, ds:0BECAh
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
mov     ax, 1
push    ax
call    sub_23348
or      ax, ax
jnz     short loc_26396

loc_2638F:
xor     dx, dx
mov     ax, dx
jmp     loc_2643E

loc_26396:
les     bx, [bp+var_A]
mov     word ptr ds:0BECCh, es
mov     ds:0BECAh, bx
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:73FCh
jb      short loc_263CB
jnz     short loc_263B6
cmp     ax, ds:73FAh
jb      short loc_263CB

loc_263B6:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:7400h
jb      short loc_263D6
ja      short loc_263CB
cmp     ax, ds:73FEh
jbe     short loc_263D6

loc_263CB:
mov     ax, 62h ; 'b'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_263D6:
mov     ax, 10h
push    ax
push    word ptr ds:0BED8h
xor     ax, ax
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    ax
push    ax
push    ax
call    sub_266FF
mov     [bp+var_2], dx
mov     [bp+var_4], ax
call    sub_2693F
jmp     short loc_26414

loc_263FA:
mov     ax, 10h
push    ax
xor     ax, ax
push    ax
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    ax
push    ax
push    si
call    sub_266FF
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_26414:
call    sub_26945
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA

loc_26424:
cmp     byte ptr ds:0BED2h, 1
jnz     short loc_2642E
jmp     loc_26290

loc_2642E:
cmp     byte ptr ds:0BED2h, 3
jnz     short loc_26438
jmp     loc_26290

loc_26438:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]

loc_2643E:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_26130 endp



; Attributes: bp-based frame

sub_26446 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 10h
cmp     byte ptr ds:0BED2h, 2
jnz     short loc_26456
jmp     loc_266A5

loc_26456:
mov     al, ds:0BED2h
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jnz     short loc_26468
jmp     loc_265D7

loc_26468:
mov     ax, 1Ah
push    ax
call    sub_3193F
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     bx, ax
mov     word ptr es:[bx+16h], 0
mov     word ptr es:[bx+14h], 0
mov     bx, ax
mov     byte ptr es:[bx+18h], 0
mov     bx, ax
mov     word ptr es:[bx+12h], 0
mov     bx, ax
mov     word ptr es:[bx+10h], 0

loc_264AB:
call    sub_286D6
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_264BD
jmp     loc_2668D

loc_264BD:
cmp     word ptr ds:0BF51h, 0
jz      short loc_264D6
cmp     word ptr ds:0BF51h, 0Ah
jz      short loc_264DC
mov     ax, 8Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_264D6:
mov     word ptr ds:0BF51h, 6

loc_264DC:
cmp     byte ptr ds:0BED2h, 8
jz      short loc_26512
cmp     byte ptr ds:0BED2h, 2
jz      short loc_26512
push    cs
call    near ptr sub_25FF2
mov     [bp+var_6], dx
mov     [bp+var_8], ax
or      ax, dx
jnz     short loc_264FB
jmp     loc_2668D

loc_264FB:
push    dx
push    [bp+var_8]
push    [bp+var_2]
push    [bp+var_4]
call    sub_2677A
mov     [bp+var_2], dx
mov     [bp+var_4], ax
jmp     short loc_2651E

loc_26512:
mov     word ptr ds:0BF27h, 0
mov     word ptr ds:0BF25h, 0

loc_2651E:
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr ds:0BF27h
push    word ptr ds:0BF25h
push    [bp+var_2]
push    [bp+var_4]
push    word ptr ds:0BF51h
mov     ax, 6
push    ax
call    sub_1F771
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_26575
call    sub_26945
cmp     byte ptr ds:0BED2h, 33h ; '3'
jnz     short loc_26561
call    sub_26945
les     bx, [bp+var_10]
mov     byte ptr es:[bx+18h], 1
jmp     short loc_26575

loc_26561:
mov     al, ds:0BED2h
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jz      short loc_26573
jmp     loc_264AB

loc_26573:
jmp     short loc_2657C

loc_26575:
cmp     byte ptr ds:0BED2h, 2
jz      short loc_2658A

loc_2657C:
mov     ax, 91h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_2668D

loc_2658A:
les     bx, [bp+var_10]
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     ax, bx
or      ax, word ptr [bp+var_C+2]
jz      short loc_265CE
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 0Fh
jnz     short loc_265CE
les     bx, [bp+var_C]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jnz     short loc_265CE
mov     ax, es:[bx]
or      ax, es:[bx+2]
jnz     short loc_265CE
les     bx, [bp+var_10]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0

loc_265CE:
mov     dx, word ptr [bp+var_10+2]
mov     ax, word ptr [bp+var_10]
jmp     loc_266AA

loc_265D7:
cmp     [bp+arg_0], 0
jnz     short loc_265EB
mov     ax, 92h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_2668D

loc_265EB:
call    sub_297BF
mov     ax, 1Ah
push    ax
call    sub_318B7
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     bx, ax
mov     word ptr es:[bx+16h], 0
mov     word ptr es:[bx+14h], 0
mov     bx, ax
mov     byte ptr es:[bx+18h], 0
mov     bx, ax
mov     word ptr es:[bx+12h], 0
mov     bx, ax
mov     word ptr es:[bx+10h], 0

loc_26633:
cmp     byte ptr ds:0BED2h, 2Fh ; '/'
jz      short loc_26647
mov     ax, 91h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     short loc_26681

loc_26647:
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
xor     ax, ax
push    ax
push    ax
push    ax
mov     ax, 7
push    ax
call    sub_1F771
call    sub_26945
cmp     byte ptr ds:0BED2h, 2
jz      short loc_2669A
cmp     byte ptr ds:0BED2h, 8
jz      short loc_26693
mov     ax, 94h
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_26681:
mov     word ptr ds:9A72h, 0
mov     word ptr ds:9A70h, 0

loc_2668D:
xor     dx, dx
mov     ax, dx
jmp     short loc_266AA

loc_26693:
call    sub_26945
jmp     short loc_26633

loc_2669A:
les     bx, [bp+var_10]
mov     word ptr ds:0BF4Dh, es
mov     ds:0BF4Bh, bx

loc_266A5:
mov     ax, 0BF29h
mov     dx, ds

loc_266AA:
mov     sp, bp
pop     bp
retn    2
sub_26446 endp




sub_266B0 proc near
push    si
xor     si, si

loc_266B3:
mov     al, ds:0BED2h
mov     ah, 0
cmp     ax, 48h ; 'H'
jz      short loc_266C4
cmp     ax, 49h ; 'I'
jz      short loc_266DB
jmp     short loc_266F2

loc_266C4:
test    si, 40h
jz      short loc_266D5
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_266D5:
or      si, 40h
jmp     short loc_266F6

loc_266DB:
test    si, 80h
jz      short loc_266EC
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_266EC:
or      si, 80h
jmp     short loc_266F6

loc_266F2:
mov     ax, si
jmp     short loc_266FD

loc_266F6:
call    sub_26945
jmp     short loc_266B3

loc_266FD:
pop     si
retn
sub_266B0 endp



; Attributes: bp-based frame

sub_266FF proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= byte ptr  0Eh
arg_C= word ptr  10h
arg_E= byte ptr  12h

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:0BDC1h
or      ax, ds:0BDC3h
jz      short loc_26726
les     bx, ds:0BDC1h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+0Ah]
mov     word ptr ds:0BDC3h, es
mov     ds:0BDC1h, bx
jmp     short loc_26735

loc_26726:
mov     ax, 0Eh
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_26735:
mov     al, [bp+arg_E]
les     bx, [bp+var_4]
mov     es:[bx], al
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, [bp+arg_C]
mov     es:[bx+2], ax
mov     al, [bp+arg_A]
mov     es:[bx+1], al
mov     dx, [bp+arg_8]
mov     ax, [bp+arg_6]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     ax, [bp+arg_0]
mov     es:[bx+4], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retn    10h
sub_266FF endp



; Attributes: bp-based frame

sub_2677A proc far

var_6= dword ptr -6
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
mov     word ptr ds:0BF43h, 0
mov     word ptr ds:0BF45h, 0
jmp     loc_268DE

loc_26791:
les     bx, [bp+arg_4]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 10h
jnz     short loc_267C5
push    word ptr es:[bx+2]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2A549
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     loc_268BB

loc_267C5:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 11h
jz      short loc_267D1
jmp     loc_2684C

loc_267D1:
mov     si, es:[bx+4]
mov     ax, word ptr [bp+var_6]
or      ax, word ptr [bp+var_6+2]
jz      short loc_267FE
les     bx, [bp+var_6]
cmp     byte ptr es:[bx], 7
jnz     short loc_267FE
or      si, si
jnz     short loc_267F0
mov     si, es:[bx+4]
jmp     short loc_267FE

loc_267F0:
les     bx, [bp+var_6]
cmp     word ptr es:[bx+4], 0
jnz     short loc_267FE
mov     es:[bx+4], si

loc_267FE:
mov     di, si
mov     cl, 8
shr     di, cl
mov     ax, si
and     ax, 0FFh
mov     [bp+var_2], ax
cmp     ax, 5
jz      short loc_26823
cmp     ax, 6
jz      short loc_26829
cmp     ax, 7
jz      short loc_2681D
jmp     short loc_2682D

loc_2681D:
or      di, 10h
jmp     short loc_2682D

loc_26823:
or      di, 8
jmp     short loc_2682D

loc_26829:
or      di, 28h

loc_2682D:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    di
call    sub_2A5CF
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_268BB

loc_2684C:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 7
jnz     short loc_26898
test    word ptr es:[bx+4], 0FF00h
jz      short loc_26872
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 11h
jz      short loc_26872
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_26872:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     dx, es:[bx+4]
and     dx, 0FFh
or      ax, dx
push    ax
call    sub_2A771
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_268BB

loc_26898:
les     bx, [bp+arg_4]
mov     ax, es:[bx+4]
mov     cl, 8
sar     ax, cl
and     ax, 0FFh
mov     ds:0BF43h, ax
mov     ax, es:[bx+4]
and     ax, 0FFh
cmp     ax, 5
jnz     short loc_268BB
mov     word ptr ds:0BF45h, 5

loc_268BB:
mov     dx, ds:0BDC3h
mov     ax, ds:0BDC1h
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     word ptr ds:0BDC3h, es
mov     ds:0BDC1h, bx
les     bx, [bp+var_6]
mov     word ptr [bp+arg_4+2], es
mov     word ptr [bp+arg_4], bx

loc_268DE:
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_268E9
jmp     loc_26791

loc_268E9:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_2677A endp



; Attributes: bp-based frame

sub_268F7 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_26908
mov     ax, 1
jmp     short loc_2690A

loc_26908:
xor     ax, ax

loc_2690A:
pop     bp
retf    4
sub_268F7 endp

seg010 ends


; Segment type: Pure code
seg011 segment byte public 'CODE' use16
assume cs:seg011
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_2690E proc far
mov     word ptr ds:0BEE2h, 64A0h
mov     word ptr ds:0BF8Ch, 9A78h
mov     word ptr ds:0BF78h, 0
mov     word ptr ds:0BF76h, 0
mov     word ptr ds:0BF74h, 0
mov     word ptr ds:0BF72h, 0
mov     word ptr ds:0BF6Ch, 0
mov     word ptr ds:0BF6Ah, 0
retf
sub_2690E endp




sub_2693F proc far
mov     byte ptr ds:0BDB6h, 1
retf
sub_2693F endp



; Attributes: bp-based frame

sub_26945 proc far

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
cmp     byte ptr ds:0BDB6h, 0
jz      short loc_2695E ; jumptable 0002699A case -9
mov     byte ptr ds:0BDB6h, 0
mov     al, ds:0BED2h
jmp     loc_26FF3

loc_2695E:              ; jumptable 0002699A case -9
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2696E
call    sub_2B0D7
jmp     short loc_2697B

loc_2696E:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2697B:
mov     [bp+var_4], ax

loc_2697E:
mov     bx, ds:0BEE2h
add     bx, [bp+var_4]
mov     al, [bx]
cbw
mov     [bp+var_2], ax
sub     ax, 0FFE0h      ; switch 33 cases
cmp     ax, 20h
jbe     short loc_26996
jmp     def_2699A       ; jumptable 0002699A default case, cases -24,-23,-21,-13

loc_26996:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2699A[bx] ; switch jump
jpt_2699A dw offset loc_26EE2 ; jump table for switch statement
dw offset loc_26F6E
dw offset loc_26F15
dw offset loc_26F8F
dw offset loc_26EAB
dw offset loc_26F51
dw offset loc_26F0A
dw offset loc_26B2C
dw offset def_2699A
dw offset def_2699A
dw offset loc_26AA3
dw offset def_2699A
dw offset loc_26B43
dw offset loc_26E27
dw offset loc_26B17
dw offset loc_26DA3
dw offset loc_26D07
dw offset loc_26CA6
dw offset loc_26C91
dw offset def_2699A
dw offset loc_26C7D
dw offset loc_26B6F
dw offset loc_269E1
dw offset loc_2695E
dw offset loc_26C0C
dw offset loc_26C0C
dw offset loc_26C0C
dw offset loc_26B9F
dw offset loc_26C0C
dw offset loc_26C0C
dw offset loc_26C0C
dw offset loc_26C0C
dw offset loc_26C0C

loc_269E1:              ; jumptable 0002699A case -10
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     byte ptr ds:0BE28h, 0
push    [bp+var_4]
call    sub_27195
mov     ax, ds:0BF8Ch
mov     dx, ds
mov     bx, 0AA77h
mov     cx, ds
push    ax
mov     al, ds:22BCh
cbw
sub     bx, ax
pop     ax
cmp     ax, bx
jnb     short loc_26A1D
mov     al, ds:22BCh
cbw
mov     bx, ax
add     bx, ds:0BF8Ch
mov     byte ptr [bx], 0

loc_26A1D:
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 65A0h
mov     cx, ds
cmp     dx, cx
jnz     short loc_26A2F
cmp     ax, bx
jz      short loc_26A7D

loc_26A2F:
call    sub_2720A
mov     [bp+var_4], ax
or      ax, ax
jl      short loc_26A3E
jmp     loc_2697E

loc_26A3E:
cmp     ax, 0FFFFh
jge     short loc_26A48
mov     ax, 1
jmp     short loc_26A4A

loc_26A48:
xor     ax, ax

loc_26A4A:
mov     ds:0BE27h, al
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 66A0h
mov     cx, ds
cmp     dx, cx
jnz     short loc_26A5F
cmp     ax, bx
jz      short loc_26A7D

loc_26A5F:
les     bx, ds:0BF84h
add     bx, 0Ah
mov     word ptr ds:0BEDAh, es
mov     ds:0BED8h, bx
mov     bx, ds:0BF84h
mov     ax, es:[bx+8]
mov     [bp+var_4], ax
or      ax, ax
jnz     short loc_26A85

loc_26A7D:
mov     al, 2Fh ; '/'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26A85:
mov     al, byte ptr [bp+var_4]
mov     ds:0BED2h, al
jmp     loc_26FF3

def_2699A:              ; jumptable 0002699A default case, cases -24,-23,-21,-13
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     al, byte ptr [bp+var_2]
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26AA3:              ; jumptable 0002699A case -22
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26AB5
call    sub_2B0D7
mov     si, ax
jmp     short loc_26AC4

loc_26AB5:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_26AC4:
cmp     si, 0Dh
jnz     short loc_26AFA

loc_26AC9:
call    sub_2717C
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26ADE
call    sub_2B0D7
jmp     short loc_26AEB

loc_26ADE:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26AEB:
cmp     ax, 0Ah
jnz     short loc_26AF3
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26AF3:
dec     word ptr ds:0BF6Eh
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26AFA:
cmp     si, 3Fh ; '?'
jnz     short loc_26B13
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     al, 1Eh
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26B13:
dec     word ptr ds:0BF6Eh

loc_26B17:              ; jumptable 0002699A case -18
push    [bp+var_4]
push    [bp+var_4]
mov     ax, 3Ah ; ':'
push    ax
call    sub_312DE
add     sp, 6
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26B2C:              ; jumptable 0002699A case -25
xor     ax, ax
push    ax
call    sub_2AD74
or      ax, ax
jz      short loc_26B3B
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26B3B:
mov     al, 0
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26B43:              ; jumptable 0002699A case -20
cmp     byte ptr ds:0BDB7h, 0
jz      short loc_26B4D
jmp     loc_26F88

loc_26B4D:
call    sub_2717C
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     [bp+var_4], ax
cmp     ax, 23h ; '#'
jnz     short loc_26AF3
mov     ax, 1
push    ax
call    sub_2B752
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26B6F:              ; jumptable 0002699A case -11
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
push    [bp+var_4]
call    sub_2744E
mov     [bp+var_2], ax
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 64A0h
mov     cx, ds
cmp     dx, cx
jz      short loc_26B95
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26B95:
cmp     ax, bx
jz      short loc_26B9C
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26B9C:
jmp     loc_26D4B

loc_26B9F:              ; jumptable 0002699A case -5
mov     ax, [bp+var_2]
neg     ax
mov     [bp+var_2], ax
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26BC5
call    sub_2B0D7
mov     si, ax
jmp     short loc_26BD4

loc_26BC5:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_26BD4:
cmp     si, 2Ah ; '*'
jnz     short loc_26BDC
jmp     loc_26F3A

loc_26BDC:
cmp     byte ptr ds:649Ch, 0
jz      short loc_26BF1
cmp     si, [bp+var_4]
jnz     short loc_26BF1
mov     al, ds:649Ch
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26BF1:
cmp     si, 3Dh ; '='
jnz     short loc_26BFF
mov     al, ds:6493h
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26BFF:
dec     word ptr ds:0BF6Eh
mov     al, ds:648Ah
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26C0C:              ; jumptable 0002699A cases -8--6,-4-0
mov     ax, [bp+var_2]
neg     ax
mov     [bp+var_2], ax
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26C32
call    sub_2B0D7
mov     si, ax
jmp     short loc_26C41

loc_26C32:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_26C41:
mov     bx, [bp+var_2]
cmp     byte ptr [bx+6497h], 0
jz      short loc_26C5A
cmp     si, [bp+var_4]
jnz     short loc_26C5A
mov     al, [bx+6497h]
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26C5A:
cmp     si, 3Dh ; '='
jnz     short loc_26C6C
mov     bx, [bp+var_2]
mov     al, [bx+648Eh]
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26C6C:
dec     word ptr ds:0BF6Eh
mov     bx, [bp+var_2]
mov     al, [bx+6485h]
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26C7D:              ; jumptable 0002699A case -12
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     al, 32h ; '2'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26C91:              ; jumptable 0002699A case -14
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
call    sub_2793F
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26CA6:              ; jumptable 0002699A case -15
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26CC2
call    sub_2B0D7
jmp     short loc_26CCF

loc_26CC2:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26CCF:
mov     [bp+var_4], ax
cmp     ax, 2Dh ; '-'
jnz     short loc_26CDF
mov     al, 2Ch ; ','
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26CDF:
cmp     [bp+var_4], 3Dh ; '='
jnz     short loc_26CED
mov     al, 0Bh
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26CED:
cmp     [bp+var_4], 3Eh ; '>'
jnz     short loc_26CFB
mov     al, 2Eh ; '.'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26CFB:
dec     word ptr ds:0BF6Eh
mov     al, 15h
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26D07:              ; jumptable 0002699A case -16
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26D23
call    sub_2B0D7
jmp     short loc_26D30

loc_26D23:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26D30:
mov     [bp+var_4], ax
mov     bx, ds:0BEE2h
add     bx, ax
cmp     byte ptr [bx], 0F5h
jnz     short loc_26D57
dec     word ptr ds:0BF6Eh
mov     al, 2Eh ; '.'
push    ax
call    sub_2744E
mov     [bp+var_2], ax

loc_26D4B:
push    [bp+var_2]
call    sub_277AB
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26D57:
cmp     [bp+var_4], 2Eh ; '.'
jnz     short loc_26D97
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26D6D
call    sub_2B0D7
jmp     short loc_26D7A

loc_26D6D:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26D7A:
mov     [bp+var_4], ax
cmp     ax, 2Eh ; '.'
jz      short loc_26D8F
mov     ax, 45h ; 'E'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_26D97

loc_26D8F:
mov     al, 33h ; '3'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26D97:
dec     word ptr ds:0BF6Eh
mov     al, 2Dh ; '-'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26DA3:              ; jumptable 0002699A case -17
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26DBF
call    sub_2B0D7
jmp     short loc_26DCC

loc_26DBF:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26DCC:
mov     [bp+var_4], ax
cmp     ax, 3Dh ; '='
jnz     short loc_26DDC
mov     al, 26h ; '&'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26DDC:
cmp     [bp+var_4], 3Ch ; '<'
jnz     short loc_26E1B
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26DF2
call    sub_2B0D7
jmp     short loc_26DFF

loc_26DF2:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26DFF:
mov     [bp+var_4], ax
cmp     ax, 3Dh ; '='
jnz     short loc_26E0F
mov     al, 12h
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26E0F:
dec     word ptr ds:0BF6Eh
mov     al, 1Ch
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26E1B:
dec     word ptr ds:0BF6Eh
mov     al, 24h ; '$'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26E27:              ; jumptable 0002699A case -19
mov     ax, ds:0BE1Dh
mov     ds:0BED6h, ax
mov     ax, ds:0BE1Fh
mov     ds:0BED4h, ax
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26E43
call    sub_2B0D7
jmp     short loc_26E50

loc_26E43:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26E50:
mov     [bp+var_4], ax
cmp     ax, 3Dh ; '='
jnz     short loc_26E60
mov     al, 27h ; '''
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26E60:
cmp     [bp+var_4], 3Eh ; '>'
jnz     short loc_26E9F
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26E76
call    sub_2B0D7
jmp     short loc_26E83

loc_26E76:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26E83:
mov     [bp+var_4], ax
cmp     ax, 3Dh ; '='
jnz     short loc_26E93
mov     al, 13h
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26E93:
dec     word ptr ds:0BF6Eh
mov     al, 1Dh
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26E9F:
dec     word ptr ds:0BF6Eh
mov     al, 25h ; '%'
mov     ds:0BED2h, al
jmp     loc_26FF3

loc_26EAB:              ; jumptable 0002699A case -28
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26EBB
call    sub_2B0D7
jmp     short loc_26EC8

loc_26EBB:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26EC8:
mov     [bp+var_4], ax
cmp     ax, 0Dh
jnz     short loc_26ED3
jmp     loc_26AC9

loc_26ED3:
dec     word ptr ds:0BF6Eh
mov     al, 5Ch ; '\'
push    ax
call    sub_27D32
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26EE2:              ; jumptable 0002699A case -32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26EF2
call    sub_2B0D7
jmp     short loc_26EFF

loc_26EF2:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26EFF:
mov     [bp+var_4], ax
cmp     ax, 0Dh
jnz     short loc_26F0A ; jumptable 0002699A case -26
jmp     loc_26AC9

loc_26F0A:              ; jumptable 0002699A case -26
push    [bp+var_4]
call    sub_27D32
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26F15:              ; jumptable 0002699A case -30
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26F25
call    sub_2B0D7
jmp     short loc_26F32

loc_26F25:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26F32:
mov     [bp+var_4], ax
cmp     ax, 2Ah ; '*'
jnz     short loc_26F42

loc_26F3A:
call    sub_2B687
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26F42:
dec     word ptr ds:0BF6Eh
mov     al, 2Fh ; '/'
push    ax
call    sub_27D32
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26F51:              ; jumptable 0002699A case -27
push    [bp+var_4]
mov     ax, seg seg011
push    ax
mov     ax, 1432h
push    ax
mov     ax, 1
push    ax
call    sub_2B3F1
or      ax, ax
jz      short loc_26F6C
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26F6C:
jmp     short loc_26F88

loc_26F6E:              ; jumptable 0002699A case -31
push    [bp+var_4]
mov     ax, seg seg011
push    ax
mov     ax, 1432h
push    ax
xor     ax, ax
push    ax
call    sub_2B3F1
or      ax, ax
jz      short loc_26F88
jmp     loc_2695E       ; jumptable 0002699A case -9

loc_26F88:
mov     al, 68h ; 'h'
mov     ds:0BED2h, al
jmp     short loc_26FF3

loc_26F8F:              ; jumptable 0002699A case -29
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_26F9F
call    sub_2B0D7
jmp     short loc_26FAC

loc_26F9F:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_26FAC:
mov     [bp+var_4], ax
cmp     ax, 23h ; '#'
jnz     short loc_26FE2
jmp     short loc_26FBA

loc_26FB6:
dec     word ptr ds:0BF8Ch

loc_26FBA:
mov     ax, ds:0BF8Ch
mov     dx, ds
mov     bx, 9A78h
mov     cx, ds
cmp     ax, bx
jbe     short loc_26FD0
mov     bx, ax
cmp     byte ptr [bx-1], 20h ; ' '
jz      short loc_26FB6

loc_26FD0:
mov     al, 0FEh
push    ax
call    sub_27D09
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
jmp     loc_26AF3

loc_26FE2:
mov     al, 0FDh
push    ax
call    sub_27D09
push    [bp+var_4]
call    sub_2B549
jmp     loc_26AF3

loc_26FF3:
pop     si
mov     sp, bp
pop     bp
retf
sub_26945 endp



; Attributes: bp-based frame

sub_26FF8 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
cmp     [bp+arg_0], 0
jz      short loc_2700A
mov     word ptr ds:0BEE2h, 66A0h
jmp     short loc_27010

loc_2700A:
mov     word ptr ds:0BEE2h, 65A0h

loc_27010:
mov     bx, ds:0BF8Ch
mov     byte ptr [bx], 0
mov     byte ptr ds:0BDB7h, 1

loc_2701C:
push    cs
call    near ptr sub_26945
mov     ah, 0
or      ax, ax
jz      short loc_27063
cmp     ax, 2Fh ; '/'
jz      short loc_27032
cmp     ax, 68h ; 'h'
jz      short loc_2705F
jmp     short loc_2701C

loc_27032:
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_2C520
mov     si, ax
mov     ax, si
or      ax, ax
jz      short loc_2704F
mov     ax, si
add     al, 80h
push    ax
call    sub_27D09
jmp     short loc_2701C

loc_2704F:
push    ds
push    word ptr ds:0BF8Ch
call    sub_46E60
add     ds:0BF8Ch, ax
jmp     short loc_2701C

loc_2705F:
dec     word ptr ds:0BF6Eh

loc_27063:
mov     word ptr ds:0BEE2h, 64A0h
mov     ax, ds:0BF8Ch
mov     dx, ds
mov     bx, 0AA77h
mov     cx, ds
cmp     ax, bx
jb      short loc_27082
mov     ax, 2Bh ; '+'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_27082:
mov     byte ptr ds:0BDB7h, 0
mov     word ptr ds:0BF8Ch, 9A78h
pop     si
pop     bp
retf    6
sub_26FF8 endp



; Attributes: bp-based frame

sub_27092 proc far

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     ax, ds:0BF8Ch
mov     [bp+var_2], ax
mov     bx, ax
mov     byte ptr [bx], 0
mov     ax, ds:0BEE2h
mov     [bp+var_4], ax
mov     word ptr ds:0BEE2h, 66A0h
xor     si, si

loc_270B3:
push    cs
call    near ptr sub_26945
mov     ah, 0
cmp     ax, 2
jz      short loc_27123
jg      short loc_270CE
or      ax, ax
jnz     short loc_270C7
jmp     loc_2714C

loc_270C7:
cmp     ax, 1
jz      short loc_27118
jmp     short loc_270B3

loc_270CE:
cmp     ax, 8
jz      short loc_27138
cmp     ax, 2Fh ; '/'
jz      short loc_270DA
jmp     short loc_270B3

loc_270DA:
cmp     byte ptr ds:0BE27h, 0
jz      short loc_27108
push    ds
push    word ptr ds:0BF8Ch
push    ds
mov     ax, ds:0BF8Ch
inc     ax
push    ax
push    ds
push    word ptr ds:0BF8Ch
call    sub_46E60
inc     ax
push    ax
call    sub_46A2C
mov     bx, ds:0BF8Ch
mov     byte ptr [bx], 0FCh
inc     word ptr ds:0BF8Ch

loc_27108:
push    ds
push    word ptr ds:0BF8Ch
call    sub_46E60
add     ds:0BF8Ch, ax
jmp     short loc_270B3

loc_27118:
inc     si
mov     al, 28h ; '('
push    ax
call    sub_27D32
jmp     short loc_270B3

loc_27123:
or      si, si
jg      short loc_2712C
mov     di, 29h ; ')'
jmp     short loc_2714F

loc_2712C:
dec     si
mov     al, 29h ; ')'
push    ax
call    sub_27D32
jmp     loc_270B3

loc_27138:
or      si, si
jle     short loc_27147
mov     al, 2Ch ; ','
push    ax
call    sub_27D32
jmp     loc_270B3

loc_27147:
mov     di, 2Ch ; ','
jmp     short loc_2714F

loc_2714C:
mov     di, 1Ah

loc_2714F:
mov     ax, ds:0BF8Ch
mov     dx, ds
mov     bx, 0AA77h
mov     cx, ds
cmp     ax, bx
jb      short loc_27168
mov     ax, 2Bh ; '+'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_27168:
mov     ax, [bp+var_4]
mov     ds:0BEE2h, ax
mov     ax, [bp+var_2]
mov     ds:0BF8Ch, ax
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retf
sub_27092 endp




sub_2717C proc far
inc     word ptr ds:0BE1Dh
inc     word ptr ds:0BEE4h
test    word ptr ds:0BEE4h, 3Fh
jnz     short locret_27194
xor     ax, ax
push    ax
call    sub_1B476

locret_27194:
retf
sub_2717C endp



; Attributes: bp-based frame

sub_27195 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     di, ds:0BF8Ch
push    di
push    ds
pop     es
mov     bx, 64A0h
cld
mov     dx, [bp+arg_0]

loc_271A8:
cmp     di, 0AA77h
jnb     short loc_271B1
mov     al, dl
stosb

loc_271B1:
mov     cx, ds:0BF66h
lds     si, ds:0BF6Eh
sub     cx, si
jcxz    short loc_271D3

loc_271BD:
lodsb
xor     ah, ah
mov     dx, ax
xlat    byte ptr es:[bx]
cmp     al, 0F6h
jnz     short loc_271F2

loc_271C8:
cmp     di, 0AA77h
jnb     short loc_271D1
mov     al, dl
stosb

loc_271D1:
loop    loc_271BD

loc_271D3:
push    bx
push    cx
push    es
pop     ds
call    sub_2B0D7
push    ds
pop     es
pop     cx
pop     bx
cld
mov     dx, ax
xlat
cmp     al, 0F6h
jz      short loc_271A8
cmp     al, 0F5h
jz      short loc_271A8
mov     si, ds:0BF6Eh
jmp     short loc_271F6

loc_271F2:
cmp     al, 0F5h
jz      short loc_271C8

loc_271F6:
push    es
pop     ds
dec     si
mov     ds:0BF6Eh, si
xor     al, al
stosb
pop     word ptr ds:0BF8Ch
pop     di
pop     si
pop     bp
retf    2
sub_27195 endp




sub_2720A proc far
push    si
mov     al, ds:0BE26h
cbw
mov     si, ax
mov     byte ptr ds:0BE26h, 0
or      si, si
jz      short loc_27238
cmp     byte ptr ds:0BE28h, 0
jnz     short loc_27238
push    ds
push    word ptr ds:0BF8Ch
xor     ax, ax
push    ax
call    sub_2A9CF
mov     ds:0BF86h, dx
mov     ds:0BF84h, ax
jmp     loc_273B0

loc_27238:
push    ds
push    word ptr ds:0BF8Ch
call    sub_2C78D
dec     ax              ; switch 5 cases
cmp     ax, 4
jbe     short loc_2724B
jmp     def_2724F       ; jumptable 0002724F default case

loc_2724B:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2724F[bx] ; switch jump
jpt_2724F dw offset loc_2728C ; jump table for switch statement
dw offset loc_2725E
dw offset loc_2726D
dw offset loc_27292
dw offset loc_272E6

loc_2725E:              ; jumptable 0002724F case 2
les     bx, ds:0BFACh
mov     word ptr ds:0BDBFh, es
mov     ds:0BDBDh, bx
jmp     loc_27356

loc_2726D:              ; jumptable 0002724F case 3
push    word ptr ds:0BE1Dh
push    ds
mov     ax, 0BC78h
push    ax
call    sub_472E0
push    ds
mov     ax, 0BC79h
push    ax
call    sub_2B0AB
mov     al, ds:0BC78h
cbw
jmp     loc_273B3

loc_2728C:              ; jumptable 0002724F case 1
mov     ax, 31h ; '1'
jmp     loc_273B3

loc_27292:              ; jumptable 0002724F case 4
push    ds
mov     al, ds:9872h
cbw
dec     ax
mov     dx, 3
mul     dx
add     ax, 63F6h
push    ax
push    ds
mov     ax, 0BC78h
push    ax
mov     ax, 3
push    ax
call    sub_46A2C
mov     byte ptr ds:0BC7Bh, 20h ; ' '
mov     al, ds:9871h
cbw
mov     bx, 0Ah
cwd
idiv    bx
add     al, 30h ; '0'
mov     ds:0BC7Ch, al
mov     al, ds:9871h
cbw
cwd
idiv    bx
add     dl, 30h ; '0'
mov     ds:0BC7Dh, dl
mov     byte ptr ds:0BC7Eh, 20h ; ' '
push    word ptr ds:986Fh
push    ds
mov     ax, 0BC7Fh
push    ax
call    sub_472E0
jmp     short loc_2734C

loc_272E6:              ; jumptable 0002724F case 5
mov     al, ds:9874h
mov     ah, 0
mov     bx, 0Ah
cwd
idiv    bx
add     al, 30h ; '0'
mov     ds:0BC78h, al
mov     al, ds:9874h
mov     ah, 0
cwd
idiv    bx
add     dl, 30h ; '0'
mov     ds:0BC79h, dl
mov     byte ptr ds:0BC7Ah, 3Ah ; ':'
mov     al, ds:9873h
mov     ah, 0
cwd
idiv    bx
add     al, 30h ; '0'
mov     ds:0BC7Bh, al
mov     al, ds:9873h
mov     ah, 0
cwd
idiv    bx
add     dl, 30h ; '0'
mov     ds:0BC7Ch, dl
mov     byte ptr ds:0BC7Dh, 3Ah ; ':'
mov     al, ds:9876h
mov     ah, 0
cwd
idiv    bx
add     al, 30h ; '0'
mov     ds:0BC7Eh, al
mov     al, ds:9876h
mov     ah, 0
cwd
idiv    bx
add     dl, 30h ; '0'
mov     ds:0BC7Fh, dl
mov     byte ptr ds:0BC80h, 0

loc_2734C:
mov     word ptr ds:0BDBFh, ds
mov     word ptr ds:0BDBDh, 0BC78h

loc_27356:
mov     ax, 22h ; '"'
jmp     short loc_273B3

def_2724F:              ; jumptable 0002724F default case
cmp     byte ptr ds:0BDB7h, 0
jz      short loc_2737A
push    ds
push    word ptr ds:0BF8Ch
push    ds
mov     ax, 67A0h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2737A
call    sub_273B5
jmp     short loc_273B3

loc_2737A:
call    sub_2C4D7
or      ax, ax
jz      short loc_273B0
call    sub_2C5A3
or      ax, ax
jnz     short loc_27391
mov     ax, 0FFFFh
jmp     short loc_273B3

loc_27391:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_273A1
call    sub_2B0D7
jmp     short loc_273AE

loc_273A1:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_273AE:
jmp     short loc_273B3

loc_273B0:
mov     ax, 0FFFEh

loc_273B3:
pop     si
retf
sub_2720A endp



; Attributes: bp-based frame

sub_273B5 proc near

var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     [bp+var_2], ax
cmp     ax, 1Ah
jz      short loc_273F5
cmp     ax, 28h ; '('
jnz     short loc_273E9
mov     si, 1
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     [bp+var_2], ax
cmp     ax, 1Ah
jnz     short loc_273EB
jmp     short loc_273F5

loc_273E9:
xor     si, si

loc_273EB:
mov     bx, [bp+var_2]
cmp     byte ptr [bx+64A0h], 0F6h
jz      short loc_27402

loc_273F5:
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_27445

loc_27402:
mov     di, ds:0BF8Ch
push    [bp+var_2]
push    cs
call    near ptr sub_27195
mov     ds:0BF8Ch, di
or      si, si
jz      short loc_27435
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     [bp+var_2], ax
cmp     ax, 29h ; ')'
jz      short loc_27435
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp
dec     word ptr ds:0BF6Eh

loc_27435:
push    ds
push    di
call    sub_2C486
or      ax, ax
jz      short loc_27445
mov     ax, 31h ; '1'
jmp     short loc_27448

loc_27445:
mov     ax, 30h ; '0'

loc_27448:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_273B5 endp



; Attributes: bp-based frame

sub_2744E proc near

var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     [bp+var_2], 0
xor     di, di
cmp     byte ptr [bp+arg_0], 30h ; '0'
jnz     short loc_274C5
mov     al, 30h ; '0'
push    ax
call    sub_27D32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2747B
call    sub_2B0D7
jmp     short loc_27486

loc_2747B:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_27486:
mov     byte ptr [bp+arg_0], al
cmp     byte ptr [bp+arg_0], 78h ; 'x'
jz      short loc_27495
cmp     byte ptr [bp+arg_0], 58h ; 'X'
jnz     short loc_274C0

loc_27495:
push    [bp+arg_0]
call    sub_27D32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_274AD
call    sub_2B0D7
jmp     short loc_274B8

loc_274AD:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_274B8:
mov     byte ptr [bp+arg_0], al
mov     si, 10h
jmp     short loc_274C8

loc_274C0:
mov     si, 8
jmp     short loc_274C8

loc_274C5:
mov     si, 0Ah

loc_274C8:
mov     al, byte ptr [bp+arg_0]
cbw
sub     ax, 2Eh ; '.'   ; switch 72 cases
cmp     ax, 47h
jbe     short loc_274D7
jmp     def_274DB       ; jumptable 000274DB default case, cases 47,58-64,71-75,77-84,86-96,103-107,109-116

loc_274D7:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_274DB[bx] ; switch jump
jpt_274DB dw offset loc_2759E, offset def_274DB, offset loc_2766D ; jump table for switch statement
dw offset loc_2766D, offset loc_2766D, offset loc_2766D
dw offset loc_2766D, offset loc_2766D, offset loc_2766D
dw offset loc_2766D, offset loc_27570, offset loc_27570
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset loc_2769E, offset loc_2769E
dw offset loc_2769E, offset loc_2769E, offset loc_275DA
dw offset loc_276A6, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset loc_276BE, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset loc_2770E, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset loc_2769E, offset loc_2769E, offset loc_2769E
dw offset loc_2769E, offset loc_275DA, offset loc_276A6
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset loc_276BE
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset def_274DB
dw offset def_274DB, offset def_274DB, offset loc_2770E

loc_27570:              ; jumptable 000274DB cases 56,57
cmp     si, 8
jz      short loc_27578
jmp     loc_2766D       ; jumptable 000274DB cases 48-55

loc_27578:
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 64A0h
mov     cx, ds
cmp     dx, cx
jz      short loc_27589
jmp     loc_2766D       ; jumptable 000274DB cases 48-55

loc_27589:
cmp     ax, bx
jz      short loc_27590
jmp     loc_2766D       ; jumptable 000274DB cases 48-55

loc_27590:
mov     ax, 3Ch ; '<'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_27782

loc_2759E:              ; jumptable 000274DB case 46
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 64A0h
mov     cx, ds
cmp     dx, cx
jnz     short loc_275D0
cmp     ax, bx
jnz     short loc_275D0
cmp     [bp+var_2], 0
jz      short loc_275C1
mov     ax, 66h ; 'f'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_275C1:
or      di, di
jz      short loc_275D0
mov     ax, 67h ; 'g'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_275D0:
mov     [bp+var_2], 1
xor     si, si
jmp     loc_2766D       ; jumptable 000274DB cases 48-55

loc_275DA:              ; jumptable 000274DB cases 69,101
cmp     si, 10h
jnz     short loc_275E2
jmp     loc_2766D       ; jumptable 000274DB cases 48-55

loc_275E2:
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 64A0h
mov     cx, ds
cmp     dx, cx
jnz     short loc_27603
cmp     ax, bx
jnz     short loc_27603
or      di, di
jz      short loc_27603
mov     ax, 68h ; 'h'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_27603:
mov     di, 1
xor     si, si
push    [bp+arg_0]
call    sub_27D32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27620
call    sub_2B0D7
jmp     short loc_2762B

loc_27620:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_2762B:
mov     byte ptr [bp+arg_0], al
cmp     byte ptr [bp+arg_0], 2Dh ; '-'
jz      short loc_2763A
cmp     byte ptr [bp+arg_0], 2Bh ; '+'
jnz     short loc_27660

loc_2763A:
push    [bp+arg_0]
call    sub_27D32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27652
call    sub_2B0D7
jmp     short loc_2765D

loc_27652:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_2765D:
mov     byte ptr [bp+arg_0], al

loc_27660:
mov     al, byte ptr [bp+arg_0]
cbw
mov     bx, ax
cmp     byte ptr [bx+64A0h], 0F5h
jnz     short loc_27678

loc_2766D:              ; jumptable 000274DB cases 48-55
push    [bp+arg_0]
call    sub_27D32
jmp     loc_27782

loc_27678:
mov     ax, ds:0BEE2h
mov     dx, ds
mov     bx, 64A0h
mov     cx, ds
cmp     dx, cx
jz      short loc_27689
jmp     loc_27768

loc_27689:
cmp     ax, bx
jz      short loc_27690
jmp     loc_27768

loc_27690:
mov     ax, 69h ; 'i'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_27768

loc_2769E:              ; jumptable 000274DB cases 65-68,97-100
cmp     si, 10h
jz      short loc_2766D ; jumptable 000274DB cases 48-55
jmp     loc_27775

loc_276A6:              ; jumptable 000274DB cases 70,102
push    [bp+arg_0]
call    sub_27D32
cmp     si, 10h
jnz     short loc_276B6
jmp     loc_27782

loc_276B6:
mov     byte ptr ds:0BED3h, 0Ch
jmp     loc_27771

loc_276BE:              ; jumptable 000274DB cases 76,108
push    [bp+arg_0]
call    sub_27D32
cmp     [bp+var_2], 0
jnz     short loc_276D0
or      di, di
jz      short loc_276D8

loc_276D0:
mov     byte ptr ds:0BED3h, 0Eh
jmp     loc_27771

loc_276D8:
mov     byte ptr ds:0BED3h, 8
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_276ED
call    sub_2B0D7
jmp     short loc_276F8

loc_276ED:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_276F8:
mov     byte ptr [bp+arg_0], al
cmp     byte ptr [bp+arg_0], 75h ; 'u'
jz      short loc_2774F
cmp     byte ptr [bp+arg_0], 55h ; 'U'
jz      short loc_2774F

loc_27707:
dec     word ptr ds:0BF6Eh
jmp     short loc_2777E
align 2

loc_2770E:              ; jumptable 000274DB cases 85,117
cmp     [bp+var_2], 0
jnz     short loc_27768
or      di, di
jnz     short loc_27768
push    [bp+arg_0]
call    sub_27D32
mov     byte ptr ds:0BED3h, 6
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27735
call    sub_2B0D7
jmp     short loc_27740

loc_27735:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_27740:
mov     byte ptr [bp+arg_0], al
cmp     byte ptr [bp+arg_0], 6Ch ; 'l'
jz      short loc_2774F
cmp     byte ptr [bp+arg_0], 4Ch ; 'L'
jnz     short loc_27707

loc_2774F:
mov     byte ptr ds:0BED3h, 9
push    [bp+arg_0]
call    sub_27D32
jmp     short loc_2777E

def_274DB:              ; jumptable 000274DB default case, cases 47,58-64,71-75,77-84,86-96,103-107,109-116
cmp     [bp+var_2], 0
jnz     short loc_27768
or      di, di
jz      short loc_27775

loc_27768:
dec     word ptr ds:0BF6Eh
mov     byte ptr ds:0BED3h, 0Dh

loc_27771:
xor     ax, ax
jmp     short loc_277A3

loc_27775:
dec     word ptr ds:0BF6Eh
mov     byte ptr ds:0BED3h, 5

loc_2777E:
mov     ax, si
jmp     short loc_277A3

loc_27782:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27792
call    sub_2B0D7
jmp     short loc_2779D

loc_27792:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]

loc_2779D:
mov     byte ptr [bp+arg_0], al
jmp     loc_274C8

loc_277A3:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_2744E endp



; Attributes: bp-based frame

sub_277AB proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
push    di
mov     word ptr ds:0BF8Ch, 9A78h
cmp     [bp+arg_0], 0
jnz     short loc_277D1
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 0BED8h
push    ax
call    sub_432B5
mov     ax, 31h ; '1'
jmp     loc_27939

loc_277D1:
mov     word ptr ds:0BEDAh, 0
mov     word ptr ds:0BED8h, 0
cmp     [bp+arg_0], 10h
jnz     short loc_277E8
mov     di, 9A7Ah
jmp     short loc_27836

loc_277E8:
mov     di, 9A78h
jmp     short loc_27836

loc_277ED:
mov     al, [di]
cbw
push    ax
call    sub_46F01
mov     si, ax
cmp     si, 6Ch ; 'l'
jz      short loc_2783B
cmp     si, 75h ; 'u'
jz      short loc_2783B
cmp     byte ptr [si+64A0h], 0F6h
jnz     short loc_2780E
add     si, 0FFA9h
jmp     short loc_27811

loc_2780E:
sub     si, 30h ; '0'

loc_27811:
mov     ax, [bp+arg_0]
cwd
mov     cx, ds:0BEDAh
mov     bx, ds:0BED8h
call    sub_46A18
push    dx
push    ax
mov     ax, si
cwd
pop     bx
pop     cx
add     bx, ax
adc     cx, dx
mov     ds:0BEDAh, cx
mov     ds:0BED8h, bx
inc     di

loc_27836:
cmp     byte ptr [di], 0
jnz     short loc_277ED

loc_2783B:
mov     al, ds:0BED3h
cbw
mov     si, ax
mov     al, ds:0BED3h
cbw
cmp     ax, 5
jz      short loc_2785D
cmp     ax, 6
jnz     short loc_27852
jmp     loc_278EE

loc_27852:
cmp     ax, 8
jnz     short loc_2785A
jmp     loc_27905

loc_2785A:
jmp     loc_2791F

loc_2785D:
cmp     [bp+arg_0], 0Ah
jnz     short loc_2789B
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:7410h
jbe     short loc_27873
jmp     loc_2791A

loc_27873:
jnz     short loc_2787E
cmp     ax, ds:740Eh
jbe     short loc_2787E
jmp     loc_2791A

loc_2787E:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:73F8h
jnb     short loc_2788E
jmp     loc_2791F

loc_2788E:
ja      short loc_27899
cmp     ax, ds:73F6h
ja      short loc_27899
jmp     loc_2791F

loc_27899:
jmp     short loc_278CB

loc_2789B:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:7410h
jbe     short loc_278AB
jmp     short loc_2791A
db 90h

loc_278AB:
jnz     short loc_278B6
cmp     ax, ds:740Eh
jbe     short loc_278B6
jmp     short loc_2791A
align 2

loc_278B6:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:7400h
jb      short loc_278D2
ja      short loc_278CB
cmp     ax, ds:73FEh
jbe     short loc_278D2

loc_278CB:
mov     byte ptr ds:0BED3h, 8
jmp     short loc_2791F

loc_278D2:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:73F8h
jb      short loc_2791F
ja      short loc_278E7
cmp     ax, ds:73F6h
jbe     short loc_2791F

loc_278E7:
mov     byte ptr ds:0BED3h, 6
jmp     short loc_2791F

loc_278EE:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:7400h
jb      short loc_2791F
ja      short loc_27903
cmp     ax, ds:73FEh
jbe     short loc_2791F

loc_27903:
jmp     short loc_2791A

loc_27905:
mov     dx, ds:0BEDAh
mov     ax, ds:0BED8h
cmp     dx, ds:7410h
jb      short loc_2791F
ja      short loc_2791A
cmp     ax, ds:740Eh
jbe     short loc_2791F

loc_2791A:
mov     byte ptr ds:0BED3h, 9

loc_2791F:
cmp     byte ptr ds:0BED3h, 8
jl      short loc_27936
cmp     si, 8
jge     short loc_27936
mov     ax, 0A9h
push    ax
call    sub_31324
inc     sp
inc     sp

loc_27936:
mov     ax, 30h ; '0'

loc_27939:
pop     di
pop     si
pop     bp
retn    2
sub_277AB endp



; Attributes: bp-based frame

sub_2793F proc near

var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 6
push    si
mov     [bp+var_4], 0
xor     si, si
jmp     short loc_2795B

loc_2794F:
cmp     si, 2
jge     short loc_2795A
mov     al, byte ptr [bp+var_6]
mov     byte ptr [bp+si+var_4], al

loc_2795A:
inc     si

loc_2795B:
mov     al, 27h ; '''
push    ax
call    sub_279C2
mov     [bp+var_6], ax
cmp     ax, 0FFFFh
jnz     short loc_2794F
cmp     si, 2
jle     short loc_27979
mov     ax, 6Eh ; 'n'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_27979:
cmp     si, 1
jnz     short loc_2799F
cmp     byte ptr ds:22B7h, 0
jz      short loc_27994
mov     al, byte ptr [bp+var_4]
xor     ah, ah
xor     dx, dx
mov     [bp+var_2], dx
mov     [bp+var_4], ax
jmp     short loc_2799F

loc_27994:
mov     al, byte ptr [bp+var_4]
cbw
cwd
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_2799F:
mov     ax, [bp+var_4]
cwd
push    dx
push    ax
mov     ax, 5
push    ax
call    sub_21DC9
mov     ds:0BEDAh, dx
mov     ds:0BED8h, ax
mov     byte ptr ds:0BED3h, 5
mov     ax, 30h ; '0'
pop     si
mov     sp, bp
pop     bp
retn
sub_2793F endp



; Attributes: bp-based frame

sub_279C2 proc near

var_2= word ptr -2
arg_0= byte ptr  4

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di

loc_279CA:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_279DC
call    sub_2B0D7
mov     si, ax
jmp     short loc_279EB

loc_279DC:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_279EB:
cmp     si, 1Ah
jnz     short loc_279F3
jmp     loc_27ACF

loc_279F3:
cmp     si, 0Dh
jnz     short loc_279FB
jmp     loc_27ACF

loc_279FB:
mov     al, [bp+arg_0]
cbw
cmp     ax, si
jnz     short loc_27A06
jmp     loc_27AD2

loc_27A06:
cmp     si, 0Ah
jz      short loc_279CA
cmp     si, 5Ch ; '\'
jz      short loc_27A13
jmp     def_27A7E       ; jumptable 00027A7E default case
                        ; jumptable 00027A9A default case, cases 99-101,103-109,111-113,115,117,119

loc_27A13:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27A25
call    sub_2B0D7
mov     si, ax
jmp     short loc_27A34

loc_27A25:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_27A34:
mov     ax, si
cmp     ax, 37h ; '7'
jnz     short loc_27A3E
jmp     loc_27BD3       ; jumptable 00027A7E cases 51-54

loc_27A3E:
jg      short loc_27A8B
cmp     ax, 32h ; '2'
jnz     short loc_27A48
jmp     loc_27BD3       ; jumptable 00027A7E cases 51-54

loc_27A48:
jg      short loc_27A6F
cmp     ax, 30h ; '0'
jnz     short loc_27A52
jmp     loc_27BD3       ; jumptable 00027A7E cases 51-54

loc_27A52:
jg      short loc_27A64
cmp     ax, 0Dh
jnz     short loc_27A5C
jmp     loc_27BCC

loc_27A5C:
cmp     ax, 1Ah
jz      short loc_27ACF
jmp     def_27A7E       ; jumptable 00027A7E default case
                        ; jumptable 00027A9A default case, cases 99-101,103-109,111-113,115,117,119

loc_27A64:
cmp     ax, 31h ; '1'
jnz     short loc_27A6C
jmp     loc_27BD3       ; jumptable 00027A7E cases 51-54

loc_27A6C:              ; jumptable 00027A7E default case
jmp     def_27A7E       ; jumptable 00027A9A default case, cases 99-101,103-109,111-113,115,117,119

loc_27A6F:              ; switch 4 cases
sub     ax, 33h ; '3'
cmp     ax, 3
jbe     short loc_27A7A
jmp     def_27A7E       ; jumptable 00027A7E default case
                        ; jumptable 00027A9A default case, cases 99-101,103-109,111-113,115,117,119

loc_27A7A:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_27A7E[bx] ; switch jump
jpt_27A7E dw offset loc_27BD3 ; jump table for switch statement
dw offset loc_27BD3
dw offset loc_27BD3
dw offset loc_27BD3

loc_27A8B:              ; switch 24 cases
sub     ax, 61h ; 'a'
cmp     ax, 17h
jbe     short loc_27A96
jmp     def_27A7E       ; jumptable 00027A7E default case
                        ; jumptable 00027A9A default case, cases 99-101,103-109,111-113,115,117,119

loc_27A96:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_27A9A[bx] ; switch jump
jpt_27A9A dw offset loc_27AD8 ; jump table for switch statement
dw offset loc_27AEA
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset loc_27AF6
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset loc_27AE4
dw offset def_27A7E
dw offset def_27A7E
dw offset def_27A7E
dw offset loc_27AF0
dw offset def_27A7E
dw offset loc_27ADE
dw offset def_27A7E
dw offset loc_27AFC
dw offset def_27A7E
dw offset loc_27B02

loc_27ACF:
call    sub_27C7C

loc_27AD2:
mov     ax, 0FFFFh
jmp     loc_27C74

loc_27AD8:              ; jumptable 00027A9A case 97
mov     ax, 7
jmp     loc_27C74

loc_27ADE:              ; jumptable 00027A9A case 116
mov     ax, 9
jmp     loc_27C74

loc_27AE4:              ; jumptable 00027A9A case 110
mov     ax, 0Ah
jmp     loc_27C74

loc_27AEA:              ; jumptable 00027A9A case 98
mov     ax, 8
jmp     loc_27C74

loc_27AF0:              ; jumptable 00027A9A case 114
mov     ax, 0Dh
jmp     loc_27C74

loc_27AF6:              ; jumptable 00027A9A case 102
mov     ax, 0Ch
jmp     loc_27C74

loc_27AFC:              ; jumptable 00027A9A case 118
mov     ax, 0Bh
jmp     loc_27C74

loc_27B02:              ; jumptable 00027A9A case 120
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27B14
call    sub_2B0D7
mov     si, ax
jmp     short loc_27B23

loc_27B14:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_27B23:
test    byte ptr [si-7EDFh], 12h
jnz     short loc_27B34
dec     word ptr ds:0BF6Eh
mov     ax, 78h ; 'x'
jmp     loc_27C74

loc_27B34:
xor     di, di
mov     [bp+var_2], 1

loc_27B3B:
mov     cl, 4
shl     di, cl
test    byte ptr [si-7EDFh], 2
jz      short loc_27B4F
mov     ax, si
add     ax, 0FFD0h
add     di, ax
jmp     short loc_27B5A

loc_27B4F:
push    si
call    sub_46F01
add     ax, 0FFA9h
add     di, ax

loc_27B5A:
mov     ax, di
cwd
cmp     dx, ds:73E0h
jl      short loc_27B83
jg      short loc_27B6B
cmp     ax, ds:73DEh
jbe     short loc_27B83

loc_27B6B:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     ax, 93h
push    ax
call    sub_312DE
inc     sp
inc     sp
xor     di, di

loc_27B83:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27B95
call    sub_2B0D7
mov     si, ax
jmp     short loc_27BA4

loc_27B95:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_27BA4:
test    byte ptr [si-7EDFh], 12h
jnz     short loc_27BC6
dec     word ptr ds:0BF6Eh
cmp     [bp+var_2], 2
jg      short loc_27BB8
jmp     loc_27C6E

loc_27BB8:
mov     ax, 0C0h
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     loc_27C6E

loc_27BC6:
inc     [bp+var_2]
jmp     loc_27B3B

loc_27BCC:
push    cs
call    near ptr sub_2717C
jmp     loc_279CA

loc_27BD3:              ; jumptable 00027A7E cases 51-54
xor     di, di
mov     [bp+var_2], di
jmp     short loc_27C41
db 90h

loc_27BDB:
mov     ax, di
shl     ax, 1
shl     ax, 1
shl     ax, 1
add     ax, si
add     ax, 0FFD0h
mov     di, ax
mov     ax, di
cwd
cmp     dx, ds:73E0h
jl      short loc_27C13
jg      short loc_27BFB
cmp     ax, ds:73DEh
jbe     short loc_27C13

loc_27BFB:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     ax, 93h
push    ax
call    sub_312DE
inc     sp
inc     sp
xor     di, di

loc_27C13:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_27C25
call    sub_2B0D7
mov     si, ax
jmp     short loc_27C34

loc_27C25:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_27C34:
cmp     si, 30h ; '0'
jl      short loc_27C49
cmp     si, 37h ; '7'
jg      short loc_27C49
inc     [bp+var_2]

loc_27C41:
cmp     [bp+var_2], 3
jge     short loc_27C49
jmp     short loc_27BDB

loc_27C49:
cmp     [bp+arg_0], 27h ; '''
jnz     short loc_27C6A
cmp     si, 27h ; '''
jz      short loc_27C6A
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     ax, 6Eh ; 'n'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_27C6A:
dec     word ptr ds:0BF6Eh

loc_27C6E:
mov     ax, di
jmp     short loc_27C74

def_27A7E:              ; jumptable 00027A7E default case
mov     ax, si          ; jumptable 00027A9A default case, cases 99-101,103-109,111-113,115,117,119

loc_27C74:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_279C2 endp




sub_27C7C proc near
mov     ax, 6Fh ; 'o'
push    ax
call    sub_312DE
inc     sp
inc     sp
retn
sub_27C7C endp



; Attributes: bp-based frame

sub_27C88 proc far

var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_0]
mov     word ptr ds:0BED8h, 0
mov     ax, ds:0BDBDh
or      ax, ds:0BDBFh
jz      short loc_27CF2
les     bx, ds:0BDBDh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_27CCD

loc_27CAE:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0FCh
jz      short loc_27CCA
inc     word ptr ds:0BED8h
or      di, di
jz      short loc_27CCA
mov     al, es:[bx]
mov     ah, 0
push    ax
call    sub_3B175

loc_27CCA:
inc     word ptr [bp+var_4]

loc_27CCD:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_27CAE
mov     word ptr ds:0BDBFh, 0
mov     word ptr ds:0BDBDh, 0
jmp     short loc_27D01

loc_27CE4:
inc     word ptr ds:0BED8h
or      di, di
jz      short loc_27CF2
push    si
call    sub_3B175

loc_27CF2:
mov     al, 22h ; '"'
push    ax
call    sub_279C2
mov     si, ax
mov     ax, si
cmp     ax, 0FFFFh
jnz     short loc_27CE4

loc_27D01:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_27C88 endp



; Attributes: bp-based frame

sub_27D09 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     ax, ds:0BF8Ch
mov     dx, ds
mov     bx, 0AA77h
mov     cx, ds
cmp     ax, bx
jnb     short loc_27D27
mov     al, [bp+arg_0]
mov     bx, ds:0BF8Ch
mov     [bx], al
inc     word ptr ds:0BF8Ch

loc_27D27:
mov     bx, ds:0BF8Ch
mov     byte ptr [bx], 0
pop     bp
retn    2
sub_27D09 endp



; Attributes: bp-based frame

sub_27D32 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
mov     ax, ds:0BF8Ch
mov     dx, ds
mov     bx, 0AA76h
mov     cx, ds
cmp     ax, bx
jnb     short loc_27D5F
test    [bp+arg_0], 80h
jz      short loc_27D52
mov     bx, ax
mov     byte ptr [bx], 0FFh
inc     word ptr ds:0BF8Ch

loc_27D52:
mov     al, [bp+arg_0]
mov     bx, ds:0BF8Ch
mov     [bx], al
inc     word ptr ds:0BF8Ch

loc_27D5F:
mov     bx, ds:0BF8Ch
mov     byte ptr [bx], 0
pop     bp
retf    2
sub_27D32 endp

seg011 ends


; Segment type: Pure code
seg012 segment byte public 'CODE' use16
assume cs:seg012
;org 0Ah
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_27D6A proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 14h
push    si
push    di
cmp     byte ptr ds:0BED2h, 5
jnz     short loc_27D8A
mov     [bp+var_8], 1
mov     [bp+var_4], 0
call    sub_26945
jmp     short loc_27D8F

loc_27D8A:
mov     [bp+var_8], 0

loc_27D8F:
les     bx, [bp+arg_4]
mov     al, es:[bx+4]
cbw
sub     ax, 0Fh         ; switch 6 cases
cmp     ax, 5
jbe     short loc_27DA2
jmp     def_27DA6       ; jumptable 00027DA6 default case, case 19

loc_27DA2:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_27DA6[bx] ; switch jump
jpt_27DA6 dw offset loc_28331 ; jump table for switch statement
dw offset loc_27DB7
dw offset loc_28331
dw offset loc_27F9F
dw offset def_27DA6
dw offset loc_2828F

loc_27DB7:              ; jumptable 00027DA6 case 16
les     bx, [bp+arg_4]
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_27DC8
mov     [bp+var_6], 7D00h
jmp     short loc_27DD2

loc_27DC8:
les     bx, [bp+arg_4]
mov     ax, es:[bx+0Ch]
mov     [bp+var_6], ax

loc_27DD2:
les     bx, [bp+arg_4]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 1
jz      short loc_27DEC
les     bx, [bp+arg_4]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jnz     short loc_27E4E

loc_27DEC:
cmp     byte ptr ds:0BED2h, 32h ; '2'
jnz     short loc_27E4E
xor     si, si

loc_27DF5:
mov     ax, 1
push    ax
call    sub_27C88
add     si, ds:0BED8h
call    sub_26945
cmp     al, 32h ; '2'
jz      short loc_27DF5
mov     [bp+var_4], 1
les     bx, [bp+arg_4]
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_27E23
xor     ax, ax
push    ax
call    sub_3B175
inc     si

loc_27E23:
cmp     si, [bp+var_6]
jbe     short loc_27E38
mov     ax, 96h
push    ax
call    sub_312DE
inc     sp
inc     sp
mov     [bp+var_6], 7D00h

loc_27E38:
cmp     [bp+var_8], 0
jnz     short loc_27E41
jmp     loc_27F23

loc_27E41:
cmp     byte ptr ds:0BED2h, 6
jz      short loc_27E4B
jmp     loc_2839C

loc_27E4B:
jmp     loc_27F1E

loc_27E4E:
cmp     [bp+var_8], 0
jz      short loc_27E57
jmp     loc_27EC3

loc_27E57:
cmp     [bp+arg_0], 0
jz      short loc_27E60
jmp     loc_2839C

loc_27E60:
mov     [bp+var_4], 1
xor     si, si
jmp     short loc_27EBC

loc_27E69:
les     bx, [bp+arg_4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
xor     ax, ax
push    ax
push    ax
call    sub_27D6A
or      dx, ax
jnz     short loc_27E81
jmp     loc_283A7

loc_27E81:
cmp     byte ptr ds:0BED2h, 8
jz      short loc_27E99
cmp     byte ptr ds:0BED2h, 7
jz      short loc_27E99
cmp     byte ptr ds:0BED2h, 6
jz      short loc_27E99
jmp     loc_2839C

loc_27E99:
inc     si
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_27EAB
cmp     si, [bp+var_6]
jnb     short loc_27EAB
call    sub_26945

loc_27EAB:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_27EB5
jmp     loc_27F23

loc_27EB5:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_27F23

loc_27EBC:
cmp     si, [bp+var_6]
jb      short loc_27E69
jmp     short loc_27F23

loc_27EC3:
xor     si, si
jmp     short loc_27F17

loc_27EC7:
cmp     si, [bp+var_6]
jb      short loc_27EDC
mov     ax, 96h
push    ax
call    sub_312DE
inc     sp
inc     sp
mov     [bp+var_6], 7D00h

loc_27EDC:
mov     [bp+var_4], 1
les     bx, [bp+arg_4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
xor     ax, ax
push    ax
push    ax
call    sub_27D6A
or      dx, ax
jnz     short loc_27EF9
jmp     loc_283A7

loc_27EF9:
cmp     byte ptr ds:0BED2h, 8
jz      short loc_27F0A
cmp     byte ptr ds:0BED2h, 6
jz      short loc_27F0A
jmp     loc_2839C

loc_27F0A:
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_27F16
call    sub_26945

loc_27F16:
inc     si

loc_27F17:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_27EC7

loc_27F1E:
call    sub_26945

loc_27F23:
cmp     [bp+var_4], 0
jnz     short loc_27F34
mov     ax, 97h
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_27F34:
les     bx, [bp+arg_4]
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_27F72
cmp     [bp+arg_0], 0
jnz     short loc_27F52
mov     ax, 5Eh ; '^'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_283B2

loc_27F52:
push    si
les     bx, [bp+arg_4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A549
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     loc_283B2

loc_27F72:
les     bx, [bp+arg_4]
mov     ax, es:[bx+0Ch]
cmp     ax, si
ja      short loc_27F80
jmp     loc_283B2

loc_27F80:
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2A8BF
les     bx, [bp+arg_4]
mov     dx, es:[bx+0Ch]
sub     dx, si
mul     dx
push    ax
call    dword ptr ds:0BFF0h
jmp     loc_283B2

loc_27F9F:              ; jumptable 00027DA6 case 18
les     bx, [bp+arg_4]
les     bx, es:[bx+8]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     word ptr ds:0BDFFh, 0
mov     word ptr ds:0BDFDh, 0
les     bx, [bp+var_10]
cmp     byte ptr es:[bx+19h], 2
jnz     short loc_2802A
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
xor     ax, ax
push    ax
push    ax
call    sub_27D6A
or      dx, ax
jnz     short loc_27FE5
jmp     loc_283A7

loc_27FE5:
mov     [bp+var_4], 1
cmp     byte ptr ds:0BED2h, 8
jz      short loc_28002
cmp     byte ptr ds:0BED2h, 7
jz      short loc_28002
cmp     byte ptr ds:0BED2h, 6
jz      short loc_28002
jmp     loc_2839C

loc_28002:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
mov     si, ax
cmp     [bp+var_8], 0
jnz     short loc_2801D
jmp     loc_2823E

loc_2801D:
cmp     byte ptr ds:0BED2h, 6
jz      short loc_28027
jmp     loc_2839C

loc_28027:
jmp     loc_28239

loc_2802A:
cmp     [bp+var_8], 0
jz      short loc_28033
jmp     loc_28142

loc_28033:
cmp     [bp+arg_0], 0
jz      short loc_2803C
jmp     loc_2839C

loc_2803C:
mov     [bp+var_4], 1
xor     si, si
jmp     loc_28134

loc_28046:
cmp     word ptr ds:0BDFDh, 0
jz      short loc_2807B
jmp     short loc_28061

loc_2804F:
push    word ptr ds:0BDFFh
call    sub_283C0
mov     cl, 8
shr     word ptr ds:0BDFFh, cl
inc     word ptr ds:0BE01h
inc     si

loc_28061:
les     bx, [bp+var_C]
mov     ax, es:[bx+0Ah]
cmp     ax, ds:0BE01h
jnz     short loc_2804F
cmp     word ptr ds:0BDFFh, 0
jnz     short loc_2807B
mov     word ptr ds:0BDFDh, 0

loc_2807B:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A954
mov     di, ax
cmp     byte ptr ds:22B4h, 0
jz      short loc_280B4
cmp     di, 1
jle     short loc_280B4
mov     ax, si
xor     dx, dx
div     di
or      dx, dx
jz      short loc_280B4
push    di
call    dword ptr ds:0C038h
mov     ax, si
xor     dx, dx
div     di
mov     ax, di
sub     ax, dx
add     si, ax

loc_280B4:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
xor     ax, ax
push    ax
call    sub_27D6A
or      dx, ax
jnz     short loc_280D0
jmp     loc_283A7

loc_280D0:
cmp     byte ptr ds:0BED2h, 8
jz      short loc_280E8
cmp     byte ptr ds:0BED2h, 7
jz      short loc_280E8
cmp     byte ptr ds:0BED2h, 6
jz      short loc_280E8
jmp     loc_2839C

loc_280E8:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
add     si, ax
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_28113
les     bx, [bp+var_C]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jz      short loc_28113
call    sub_26945

loc_28113:
cmp     byte ptr ds:0BED2h, 7
jnz     short loc_2811D
jmp     loc_2823E

loc_2811D:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_28127
jmp     loc_2823E

loc_28127:
les     bx, [bp+var_C]
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_28134:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_2813F
jmp     loc_28046

loc_2813F:
jmp     loc_2823E

loc_28142:
xor     si, si
jmp     loc_28212

loc_28147:
mov     [bp+var_4], 1
cmp     word ptr ds:0BDFDh, 0
jz      short loc_28181
jmp     short loc_28167

loc_28155:
push    word ptr ds:0BDFFh
call    sub_283C0
mov     cl, 8
shr     word ptr ds:0BDFFh, cl
inc     word ptr ds:0BE01h
inc     si

loc_28167:
les     bx, [bp+var_C]
mov     ax, es:[bx+0Ah]
cmp     ax, ds:0BE01h
ja      short loc_28155
cmp     word ptr ds:0BDFFh, 0
jnz     short loc_28181
mov     word ptr ds:0BDFDh, 0

loc_28181:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A954
mov     di, ax
cmp     byte ptr ds:22B4h, 0
jz      short loc_281BA
cmp     di, 1
jle     short loc_281BA
mov     ax, si
xor     dx, dx
div     di
or      dx, dx
jz      short loc_281BA
push    di
call    dword ptr ds:0C038h
mov     ax, si
xor     dx, dx
div     di
mov     ax, di
sub     ax, dx
add     si, ax

loc_281BA:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
xor     ax, ax
push    ax
call    sub_27D6A
or      dx, ax
jnz     short loc_281D6
jmp     loc_283A7

loc_281D6:
cmp     byte ptr ds:0BED2h, 8
jz      short loc_281E7
cmp     byte ptr ds:0BED2h, 6
jz      short loc_281E7
jmp     loc_2839C

loc_281E7:
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_281F3
call    sub_26945

loc_281F3:
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
add     si, ax
les     bx, [bp+var_C]
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_28212:
cmp     byte ptr ds:0BED2h, 6
jz      short loc_28224
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_28224
jmp     loc_28147

loc_28224:
cmp     byte ptr ds:0BED2h, 6
jz      short loc_28239
mov     ax, 96h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     loc_283A7

loc_28239:
call    sub_26945

loc_2823E:
cmp     [bp+var_4], 0
jnz     short loc_2824F
mov     ax, 97h
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2824F:
cmp     word ptr ds:0BDFDh, 0
jz      short loc_28273
jmp     short loc_28266

loc_28258:
push    word ptr ds:0BDFFh
call    sub_283C0
mov     cl, 8
shr     word ptr ds:0BDFFh, cl
inc     si

loc_28266:
cmp     word ptr ds:0BDFFh, 0
jnz     short loc_28258
mov     word ptr ds:0BDFDh, 0

loc_28273:
les     bx, [bp+var_10]
mov     ax, es:[bx+10h]
cmp     ax, si
ja      short loc_28281
jmp     loc_283B2

loc_28281:
mov     ax, es:[bx+10h]
sub     ax, si
push    ax
call    dword ptr ds:0BFF0h
jmp     loc_283B2

loc_2828F:              ; jumptable 00027DA6 case 20
xor     ax, ax
push    ax
push    ax
mov     ax, 2
push    ax
call    sub_23062
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
or      ax, dx
jnz     short loc_282A9
jmp     loc_283A7

loc_282A9:
push    dx
push    word ptr [bp+var_14]
les     bx, [bp+arg_4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
xor     ax, ax
push    ax
mov     ax, 6Bh ; 'k'
push    ax
mov     ax, 0A4h
push    ax
call    sub_21215
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
cmp     word ptr ds:0BDFDh, 0
jnz     short loc_282DA
mov     word ptr ds:0BDFFh, 0

loc_282DA:
mov     word ptr ds:0BDFDh, 1
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jz      short loc_282F4
mov     ax, 95h
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_282F4:
les     bx, [bp+arg_4]
mov     cl, es:[bx+0Ch]
mov     ax, 1
shl     ax, cl
dec     ax
les     bx, [bp+var_14]
and     ax, es:[bx+6]
mov     [bp+var_2], ax
les     bx, [bp+arg_4]
mov     cl, es:[bx+6]
shl     ax, cl
add     ds:0BDFFh, ax
mov     ax, [bp+arg_2]
mov     ds:0BE01h, ax
cmp     [bp+var_8], 0
jnz     short loc_28327
jmp     loc_283B2

loc_28327:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_2839C
jmp     loc_283AD

loc_28331:              ; jumptable 00027DA6 cases 15,17
mov     ax, 95h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_283B2

def_27DA6:              ; jumptable 00027DA6 default case, case 19
xor     ax, ax
push    ax
push    ax
mov     ax, 2
push    ax
call    sub_23062
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
or      ax, dx
jz      short loc_283A7
push    dx
push    word ptr [bp+var_14]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
xor     ax, ax
push    ax
mov     ax, 6Bh ; 'k'
push    ax
mov     ax, 0A4h
push    ax
call    sub_21215
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx+1], 2
jle     short loc_28384
call    dword ptr ds:0C048h

loc_28384:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D105
cmp     [bp+var_8], 0
jz      short loc_283B2
cmp     byte ptr ds:0BED2h, 6
jz      short loc_283AD

loc_2839C:
mov     ax, 97h
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_283A7:
xor     dx, dx
mov     ax, dx
jmp     short loc_283B8

loc_283AD:
call    sub_26945

loc_283B2:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]

loc_283B8:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_27D6A endp



; Attributes: bp-based frame

sub_283C0 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
call    dword ptr ds:0C048h
push    [bp+arg_0]
call    dword ptr ds:0C01Ch
pop     bp
retn    2
sub_283C0 endp



; Attributes: bp-based frame

sub_283D2 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
cmp     byte ptr ds:0BED2h, 9
jnz     short loc_283E1
call    sub_26945

loc_283E1:
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
mov     ax, 1
push    ax
call    sub_27D6A
pop     bp
retf    4
sub_283D2 endp



; Attributes: bp-based frame

sub_283F5 proc far

var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= dword ptr -6
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 0Eh
push    si
push    di
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ch]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
mov     di, ds:0BED4h
mov     ax, ds:0BED6h
mov     [bp+var_2], ax
cmp     byte ptr ds:0BED2h, 9
jnz     short loc_28420
call    sub_26945

loc_28420:
cmp     byte ptr ds:0BED2h, 5
jz      short loc_28431
cmp     byte ptr ds:0BED2h, 32h ; '2'
jz      short loc_28431
jmp     loc_28547

loc_28431:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx+4], 10h
jz      short loc_28445
cmp     byte ptr es:[bx+4], 12h
jz      short loc_28445
jmp     loc_28547

loc_28445:
call    dword ptr ds:0C048h
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    sub_2A954
push    ax
call    dword ptr ds:0C038h
mov     si, ds:0BDC9h
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    cs
call    near ptr sub_283D2
mov     word ptr [bp+var_6+2], dx
mov     word ptr [bp+var_6], ax
or      ax, dx
jz      short loc_28481
mov     ax, word ptr [bp+var_6]
les     bx, [bp+arg_0]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
jmp     short loc_2848E

loc_28481:
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ch]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx

loc_2848E:
les     bx, [bp+arg_0]
or      byte ptr es:[bx+9], 32h
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    ds
mov     ax, 67D8h
push    ax
call    sub_299B0
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
les     bx, [bp+var_E]
mov     es:[bx+0Ah], si
mov     al, 7
push    ax
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29943
mov     [bp+var_8], dx
mov     [bp+var_A], ax
mov     al, 17h
push    ax
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    dx
push    [bp+var_A]
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_29862
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
les     bx, [bp+var_6]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_28533
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr [bp+var_6+2]
push    bx
call    sub_2A8BF
xor     dx, dx
push    dx
push    ax
call    sub_29A88
mov     [bp+var_8], dx
mov     [bp+var_A], ax
mov     al, 34h ; '4'
push    ax
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
push    dx
push    [bp+var_A]
call    sub_29862
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax

loc_28533:
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
call    sub_2E58A
jmp     loc_285D4

loc_28547:
cmp     byte ptr ds:0BED2h, 5
jnz     short loc_28581
call    sub_26945
xor     ax, ax
push    ax
push    ax
mov     ax, 2
push    ax
call    sub_23062
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
cmp     byte ptr ds:0BED2h, 6
jz      short loc_2857A
mov     ax, 97h
push    ax
call    sub_28E99
inc     sp
inc     sp
jmp     short loc_28594

loc_2857A:
call    sub_26945
jmp     short loc_28594

loc_28581:
xor     ax, ax
push    ax
push    ax
mov     ax, 2
push    ax
call    sub_23062
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax

loc_28594:
mov     al, 7
push    ax
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29943
mov     [bp+var_8], dx
mov     [bp+var_A], ax
push    dx
push    ax
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_20B97
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
push    dx
push    ax
push    di
push    [bp+var_2]
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2E58A

loc_285D4:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_283F5 endp

seg012 ends


; Segment type: Pure code
seg013 segment byte public 'CODE' use16
assume cs:seg013
;org 0Ch
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_285DC proc far

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4

loc_285E2:
call    sub_1BA0B
call    sub_26945
or      al, al
jnz     short loc_285F3
jmp     loc_286A6

loc_285F3:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
cmp     byte ptr ds:0BED2h, 34h ; '4'
jnz     short loc_2860D
call    sub_3B37D
jmp     loc_2869E

loc_2860D:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_28622
mov     ax, 91h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2869E

loc_28622:
mov     al, ds:0BED2h
mov     ah, 0
push    ax
call    sub_286AA
or      ax, ax
jz      short loc_2866A
call    sub_286D6
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jz      short loc_285E2
cmp     word ptr ds:0BF51h, 0
jnz     short loc_2864F

loc_28647:
mov     word ptr ds:0BF51h, 1
jmp     short loc_2867A

loc_2864F:
cmp     word ptr ds:0BF51h, 5
jz      short loc_2865D
cmp     word ptr ds:0BF51h, 0Ah
jnz     short loc_2867A

loc_2865D:
mov     ax, 8Ch
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_28647

loc_2866A:
mov     word ptr ds:0BF51h, 1
mov     [bp+var_2], 0
mov     [bp+var_4], 0

loc_2867A:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_2869E
mov     word ptr ds:0BF4Dh, 0
mov     word ptr ds:0BF4Bh, 0
push    word ptr ds:0BF51h
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 1
push    ax
call    sub_28FBB

loc_2869E:
call    sub_3181D
jmp     loc_285E2

loc_286A6:
mov     sp, bp
pop     bp
retf
sub_285DC endp



; Attributes: bp-based frame

sub_286AA proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     bx, [bp+arg_0]
test    byte ptr [bx+641Ah], 30h
jnz     short loc_286CB
cmp     bx, 2Fh ; '/'
jnz     short loc_286D0
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_28AB8
or      dx, ax
jz      short loc_286D0

loc_286CB:
mov     ax, 1
jmp     short loc_286D2

loc_286D0:
xor     ax, ax

loc_286D2:
pop     bp
retf    2
sub_286AA endp



; Attributes: bp-based frame

sub_286D6 proc far

var_12= dword ptr -12h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
mov     word ptr [bp+var_12+2], 0
mov     word ptr [bp+var_12], 0
mov     [bp+var_A], 0
mov     [bp+var_8], 0
mov     [bp+var_6], 0
mov     [bp+var_4], 0
xor     si, si
mov     di, si
mov     ds:0BF51h, si

loc_28704:
mov     [bp+var_2], 0
mov     al, ds:0BED2h
mov     ah, 0
sub     ax, 2Fh ; '/'   ; switch 47 cases
cmp     ax, 2Eh
jbe     short loc_28719
jmp     def_2871D       ; jumptable 0002871D default case, cases 48-52,69-71,74-92

loc_28719:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2871D[bx] ; switch jump
jpt_2871D dw offset loc_28934 ; jump table for switch statement
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset loc_28780
dw offset loc_2879B
dw offset loc_287B6
dw offset loc_287EC
dw offset loc_287D1
dw offset loc_2884C
dw offset loc_28861
dw offset loc_28881
dw offset loc_28871
dw offset loc_28869
dw offset loc_288AB
dw offset loc_28896
dw offset loc_288E1
dw offset loc_28903
dw offset loc_288C0
dw offset loc_28837
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset loc_28807
dw offset loc_2881F
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset def_2871D
dw offset loc_28879

loc_28780:              ; jumptable 0002871D case 53
cmp     word ptr ds:0BF51h, 0
jz      short loc_28792
mov     ax, 9Ah
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28792:
mov     word ptr ds:0BF51h, 3
jmp     loc_2895C

loc_2879B:              ; jumptable 0002871D case 54
cmp     word ptr ds:0BF51h, 0
jz      short loc_287AD
mov     ax, 9Ah
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_287AD:
mov     word ptr ds:0BF51h, 2
jmp     loc_2895C

loc_287B6:              ; jumptable 0002871D case 55
cmp     word ptr ds:0BF51h, 0
jz      short loc_287C8
mov     ax, 9Ah
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_287C8:
mov     word ptr ds:0BF51h, 8
jmp     loc_2895C

loc_287D1:              ; jumptable 0002871D case 57
cmp     word ptr ds:0BF51h, 0
jz      short loc_287E3
mov     ax, 9Ah
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_287E3:
mov     word ptr ds:0BF51h, 5
jmp     loc_2895C

loc_287EC:              ; jumptable 0002871D case 56
cmp     word ptr ds:0BF51h, 0
jz      short loc_287FE
mov     ax, 9Ah
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_287FE:
mov     word ptr ds:0BF51h, 0Ah
jmp     loc_2895C

loc_28807:              ; jumptable 0002871D case 72
test    di, 40h
jz      short loc_28818
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28818:
or      di, 40h
jmp     loc_2895C

loc_2881F:              ; jumptable 0002871D case 73
test    di, 80h
jz      short loc_28830
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28830:
or      di, 80h
jmp     loc_2895C

loc_28837:              ; jumptable 0002871D case 68
or      si, si
jz      short loc_28846
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28846:
mov     si, 0Fh
jmp     loc_2895C

loc_2884C:              ; jumptable 0002871D case 58
or      si, si
jz      short loc_2885B
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2885B:
mov     si, 1
jmp     loc_2895C

loc_28861:              ; jumptable 0002871D case 59
mov     [bp+var_6], 1
jmp     loc_2895C

loc_28869:              ; jumptable 0002871D case 62
mov     [bp+var_4], 1
jmp     loc_2895C

loc_28871:              ; jumptable 0002871D case 61
mov     [bp+var_A], 1
jmp     loc_2895C

loc_28879:              ; jumptable 0002871D case 93
mov     [bp+var_8], 1
jmp     loc_2895C

loc_28881:              ; jumptable 0002871D case 60
or      si, si
jz      short loc_28890
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28890:
mov     si, 5
jmp     loc_2895C

loc_28896:              ; jumptable 0002871D case 64
or      si, si
jz      short loc_288A5
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_288A5:
mov     si, 0Dh
jmp     loc_2895C

loc_288AB:              ; jumptable 0002871D case 63
or      si, si
jz      short loc_288BA
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_288BA:
mov     si, 0Ch
jmp     loc_2895C

loc_288C0:              ; jumptable 0002871D case 67
or      si, si
jz      short loc_288CF
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_288CF:
call    sub_28D0C
mov     [bp+var_C], dx
mov     [bp+var_E], ax
or      ax, dx
jz      short loc_28923
mov     si, 13h
jmp     short loc_2892D

loc_288E1:              ; jumptable 0002871D case 65
or      si, si
jz      short loc_288F0
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_288F0:
mov     ax, 1
push    ax
call    sub_28B05
mov     [bp+var_C], dx
mov     [bp+var_E], ax
or      ax, dx
jz      short loc_28923
jmp     short loc_2892A

loc_28903:              ; jumptable 0002871D case 66
or      si, si
jz      short loc_28912
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28912:
mov     ax, 2
push    ax
call    sub_28B05
mov     [bp+var_C], dx
mov     [bp+var_E], ax
or      ax, dx
jnz     short loc_2892A

loc_28923:
xor     dx, dx
mov     ax, dx
jmp     loc_28AB2

loc_2892A:
mov     si, 12h

loc_2892D:
call    sub_2693F
jmp     short loc_2895C

loc_28934:              ; jumptable 0002871D case 47
or      si, si
jnz     short def_2871D ; jumptable 0002871D default case, cases 48-52,69-71,74-92
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
call    sub_28AB8
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
or      ax, dx
jz      short def_2871D ; jumptable 0002871D default case, cases 48-52,69-71,74-92
mov     si, 0FFFFh
jmp     short loc_2895C

def_2871D:              ; jumptable 0002871D default case, cases 48-52,69-71,74-92
call    sub_2693F
mov     [bp+var_2], 1

loc_2895C:
call    sub_26945
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
cmp     [bp+var_2], 0
jnz     short loc_28975
jmp     loc_28704

loc_28975:
cmp     [bp+var_4], 0
jz      short loc_28981
cmp     [bp+var_6], 0
jnz     short loc_2898D

loc_28981:
cmp     [bp+var_8], 0
jz      short loc_28998
cmp     [bp+var_A], 0
jz      short loc_28998

loc_2898D:
mov     ax, 9Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28998:
mov     ax, si
inc     ax              ; switch 21 cases
cmp     ax, 14h
jbe     short loc_289A3
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_289A3:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_289A7[bx] ; switch jump
jpt_289A7 dw offset loc_28A2B ; jump table for switch statement
dw offset loc_28A51
dw offset loc_289D6
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset loc_28A51
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset loc_289F7
dw offset loc_28A06
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset def_289A7
dw offset loc_28A15
dw offset loc_28A15

loc_289D6:              ; jumptable 000289A7 case 1
cmp     [bp+var_A], 0
jz      short loc_289E2

loc_289DC:
mov     si, 2
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_289E2:
cmp     [bp+var_8], 0
jz      short loc_289EB
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_289EB:
cmp     byte ptr ds:22B7h, 0
jnz     short loc_289F5
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_289F5:
jmp     short loc_289DC

loc_289F7:              ; jumptable 000289A7 case 12
cmp     [bp+var_4], 0
jnz     short loc_28A00
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A00:
mov     si, 0Dh
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A06:              ; jumptable 000289A7 case 13
cmp     [bp+var_4], 0
jnz     short loc_28A0F
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A0F:
mov     si, 0Eh
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A15:              ; jumptable 000289A7 cases 18,19
push    si
push    [bp+var_C]
push    [bp+var_E]
push    di
call    sub_2A7EC
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A2B:              ; jumptable 000289A7 case -1
or      di, di
jnz     short loc_28A32
jmp     def_289A7       ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A32:
push    word ptr [bp+var_12+2]
push    word ptr [bp+var_12]
les     bx, [bp+var_12]
mov     al, es:[bx+5]
mov     ah, 0
or      ax, di
push    ax
call    sub_2A500
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax
jmp     short def_289A7 ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A51:              ; jumptable 000289A7 cases 0,5
cmp     [bp+var_4], 0
jz      short loc_28A62
cmp     [bp+var_A], 0
jz      short loc_28A62
mov     si, 9
jmp     short def_289A7 ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A62:
cmp     [bp+var_4], 0
jz      short loc_28A6D
mov     si, 8
jmp     short def_289A7 ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A6D:
cmp     [bp+var_6], 0
jz      short loc_28A7E
cmp     [bp+var_A], 0
jz      short loc_28A7E
mov     si, 4
jmp     short def_289A7 ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A7E:
cmp     [bp+var_6], 0
jz      short loc_28A89
mov     si, 3
jmp     short def_289A7 ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A89:
cmp     [bp+var_A], 0
jz      short loc_28A94
mov     si, 6
jmp     short def_289A7 ; jumptable 000289A7 default case, cases 2-4,6-11,14-17

loc_28A94:
mov     si, 5

def_289A7:              ; jumptable 000289A7 default case, cases 2-4,6-11,14-17
mov     ax, word ptr [bp+var_12]
or      ax, word ptr [bp+var_12+2]
jnz     short loc_28AAC
push    si
push    di
call    sub_2A52D
mov     word ptr [bp+var_12+2], dx
mov     word ptr [bp+var_12], ax

loc_28AAC:
mov     dx, word ptr [bp+var_12+2]
mov     ax, word ptr [bp+var_12]

loc_28AB2:
pop     di
pop     si
mov     sp, bp
pop     bp
retf
sub_286D6 endp



; Attributes: bp-based frame

sub_28AB8 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
cmp     byte ptr ds:9A63h, 3
jnz     short loc_28AD2
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_40BAB
jmp     short loc_28AFF

loc_28AD2:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1F0E2
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_28AFB
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 8
jnz     short loc_28AFB
mov     dx, es:[bx+0Eh]
mov     ax, es:[bx+0Ch]
jmp     short loc_28AFF

loc_28AFB:
xor     dx, dx
mov     ax, dx

loc_28AFF:
mov     sp, bp
pop     bp
retn    4
sub_28AB8 endp



; Attributes: bp-based frame

sub_28B05 proc near

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
mov     si, [bp+arg_0]
mov     di, ds:0BF51h
call    sub_26945
cmp     al, 2Fh ; '/'
jnz     short loc_28B2E
les     bx, ds:0BED8h
mov     [bp+var_2], es
mov     [bp+var_4], bx
call    sub_26945
jmp     short loc_28B38

loc_28B2E:
mov     [bp+var_2], 0
mov     [bp+var_4], 0

loc_28B38:
cmp     byte ptr ds:0BED2h, 5
jz      short loc_28B42
jmp     loc_28BF1

loc_28B42:
cmp     byte ptr ds:9A63h, 3
jnz     short loc_28B54
mov     ax, 40h ; '@'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28B54:
push    [bp+var_2]
push    [bp+var_4]
push    si
call    sub_2D475
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     short loc_28BCC

loc_28B68:
push    cs
call    near ptr sub_286D6
mov     [bp+var_6], dx
mov     [bp+var_8], ax
cmp     word ptr ds:0BF51h, 0
jz      short loc_28B84
mov     ax, 8Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_28B84:
cmp     byte ptr ds:0BED2h, 1Fh
jnz     short loc_28BAE
call    sub_26945
mov     ax, 2
push    ax
call    sub_23348
or      ax, ax
jz      short loc_28BC5
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr ds:0BED8h
call    sub_2D9FA
jmp     short loc_28BC5

loc_28BAE:
mov     ax, [bp+var_8]
or      ax, [bp+var_6]
jz      short loc_28BC5
push    [bp+var_6]
push    [bp+var_8]
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_28C69

loc_28BC5:
cmp     byte ptr ds:0BED2h, 6
jz      short loc_28BDF

loc_28BCC:
call    sub_26945
cmp     al, 6
jz      short loc_28BDF
cmp     byte ptr ds:0BED2h, 0
jz      short loc_28BDF
jmp     loc_28B68

loc_28BDF:
call    sub_26945
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_2DA99
jmp     short loc_28C57

loc_28BF1:
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jz      short loc_28C42
push    [bp+var_2]
push    [bp+var_4]
call    sub_2D3BB
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
or      ax, dx
jnz     short loc_28C22
push    [bp+var_2]
push    [bp+var_4]
push    si
call    sub_2D475
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
jmp     short loc_28C57

loc_28C22:
les     bx, [bp+var_C]
mov     al, es:[bx+19h]
cbw
cmp     ax, si
jz      short loc_28C57
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 46h ; 'F'
push    ax
call    sub_312DE
add     sp, 6
jmp     short loc_28C57

loc_28C42:
mov     ax, 8Eh
push    ax
call    sub_28E99
inc     sp
inc     sp
mov     word ptr [bp+var_C+2], 0
mov     word ptr [bp+var_C], 0

loc_28C57:
mov     ds:0BF51h, di
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_28B05 endp



; Attributes: bp-based frame

sub_28C69 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
push    si

loc_28C70:
xor     ax, ax
push    ax
call    sub_25FAE
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_28C85
jmp     loc_28D05

loc_28C85:
push    dx
push    [bp+var_4]
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_2677A
mov     [bp+var_6], dx
mov     [bp+var_8], ax
cmp     byte ptr ds:0BED2h, 1Fh
jnz     short loc_28CC8
call    sub_26945
mov     ax, 2
push    ax
call    sub_23348
or      ax, ax
jz      short loc_28D05
mov     si, ds:0BED8h
or      si, si
jnz     short loc_28CCA
mov     ax, 8Eh
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_28CCA

loc_28CC8:
xor     si, si

loc_28CCA:
push    word ptr ds:0BF49h
push    word ptr ds:0BF47h
push    [bp+arg_2]
push    [bp+arg_0]
push    [bp+var_6]
push    [bp+var_8]
push    si
call    sub_2D718
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_28CF3
call    sub_26945
jmp     loc_28C70

loc_28CF3:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_28D05
mov     ax, 8Fh
push    ax
call    sub_28E99
inc     sp
inc     sp

loc_28D05:
pop     si
mov     sp, bp
pop     bp
retn    8
sub_28C69 endp



; Attributes: bp-based frame

sub_28D0C proc near

var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 10h
push    si
call    sub_26945
cmp     al, 2Fh ; '/'
jnz     short loc_28D2D
les     bx, ds:0BED8h
mov     [bp+var_2], es
mov     [bp+var_4], bx
call    sub_26945
jmp     short loc_28D37

loc_28D2D:
mov     [bp+var_2], 0
mov     [bp+var_4], 0

loc_28D37:
cmp     byte ptr ds:0BED2h, 5
jz      short loc_28D41
jmp     loc_28E49

loc_28D41:
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 3
push    ax
call    sub_2D475
mov     [bp+var_A], dx
mov     [bp+var_C], ax
xor     si, si
jmp     loc_28E2F

loc_28D5B:
cmp     byte ptr ds:0BED2h, 2Fh ; '/'
jz      short loc_28D65
jmp     loc_28E3B

loc_28D65:
les     bx, ds:0BED8h
mov     [bp+var_2], es
mov     [bp+var_4], bx
call    sub_26945
cmp     byte ptr ds:0BED2h, 9
jnz     short loc_28D8D
call    sub_26945
mov     ax, 4
push    ax
call    sub_23348
mov     si, ds:0BED8h

loc_28D8D:
mov     ax, ds:9A70h
or      ax, ds:9A72h
jz      short loc_28DC4
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 9
push    ax
mov     ax, 13h
push    ax
push    [bp+var_A]
push    [bp+var_C]
xor     ax, ax
push    ax
call    sub_2A7EC
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_1F475
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_28DF0

loc_28DC4:
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 9
push    ax
mov     ax, 13h
push    ax
push    [bp+var_A]
push    [bp+var_C]
xor     ax, ax
push    ax
call    sub_2A7EC
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_1F1E6
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax

loc_28DF0:
cmp     byte ptr ds:22C0h, 0
jz      short loc_28E20
push    [bp+var_2]
push    [bp+var_4]
push    [bp+var_A]
push    [bp+var_C]
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
call    sub_2D718
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
mov     es:[bx+0Ah], si

loc_28E20:
les     bx, [bp+var_8]
mov     es:[bx+0Ah], si
inc     si
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_28E3B

loc_28E2F:
call    sub_26945
cmp     al, 6
jz      short loc_28E3B
jmp     loc_28D5B

loc_28E3B:
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_28E7D
call    sub_26945
jmp     short loc_28E8E

loc_28E49:
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jz      short loc_28E7D
push    [bp+var_2]
push    [bp+var_4]
call    sub_2D3BB
mov     [bp+var_A], dx
mov     [bp+var_C], ax
or      ax, dx
jnz     short loc_28E8E
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 3
push    ax
call    sub_2D475
mov     [bp+var_A], dx
mov     [bp+var_C], ax
jmp     short loc_28E8E

loc_28E7D:
mov     ax, 90h
push    ax
call    sub_28E99
inc     sp
inc     sp
xor     dx, dx
mov     ax, dx
jmp     short loc_28E94

loc_28E8E:
mov     dx, [bp+var_A]
mov     ax, [bp+var_C]

loc_28E94:
pop     si
mov     sp, bp
pop     bp
retn
sub_28D0C endp



; Attributes: bp-based frame

sub_28E99 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     al, ds:0BED2h
mov     ah, 0
mov     si, ax
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_312DE
add     sp, 6
cmp     byte ptr ds:0BDB7h, 0
jz      short loc_28EE2
jmp     short loc_28ED3

loc_28ECA:
call    sub_26945
mov     ah, 0
mov     si, ax

loc_28ED3:
or      si, si
jnz     short loc_28EDA
jmp     loc_28F6C

loc_28EDA:
cmp     si, 68h ; 'h'
jnz     short loc_28ECA
jmp     loc_28F6C

loc_28EE2:
cmp     si, 6
jz      short loc_28EEA
jmp     loc_28F51

loc_28EEA:
jmp     loc_28F67

loc_28EED:
cmp     si, 5
jnz     short loc_28F30
mov     di, 1

loc_28EF5:
call    sub_26945
mov     ah, 0
mov     si, ax
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
or      si, si
jz      short loc_28F6C
cmp     si, 6
jnz     short loc_28F19
dec     di
or      di, di
jle     short loc_28F3D
jmp     short loc_28EF5

loc_28F19:
cmp     si, 5
jnz     short loc_28F21
inc     di
jmp     short loc_28EF5

loc_28F21:
cmp     si, 32h ; '2'
jnz     short loc_28EF5
xor     ax, ax
push    ax
call    sub_27C88
jmp     short loc_28EF5

loc_28F30:
cmp     si, 32h ; '2'
jnz     short loc_28F3D
xor     ax, ax
push    ax
call    sub_27C88

loc_28F3D:
call    sub_26945
mov     ah, 0
mov     si, ax
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA

loc_28F51:
or      si, si
jz      short loc_28F62
cmp     si, 7
jz      short loc_28F62
cmp     si, 6
jz      short loc_28F62
jmp     loc_28EED

loc_28F62:
cmp     si, 6
jnz     short loc_28F6C

loc_28F67:
call    sub_2693F

loc_28F6C:
pop     di
pop     si
pop     bp
retf
sub_28E99 endp



; Attributes: bp-based frame

sub_28F70 proc far

var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 4
push    cs
call    near ptr sub_286D6
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jz      short loc_28FB7
cmp     word ptr ds:0BF51h, 0
jnz     short loc_28F93
mov     word ptr ds:0BF51h, 5
jmp     short loc_28FA0

loc_28F93:
cmp     word ptr ds:0BF51h, 3
jnz     short loc_28FA0
mov     word ptr ds:0BF51h, 4

loc_28FA0:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_28FB7
push    word ptr ds:0BF51h
push    [bp+var_2]
push    [bp+var_4]
xor     ax, ax
push    ax
call    sub_28FBB

loc_28FB7:
mov     sp, bp
pop     bp
retf
sub_28F70 endp



; Attributes: bp-based frame

sub_28FBB proc near

var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 16h
push    si
push    di
cmp     [bp+arg_6], 0Ah
jnz     short loc_28FD5
mov     [bp+var_2], 40h ; '@'
mov     [bp+arg_6], 5
jmp     short loc_28FDA

loc_28FD5:
mov     [bp+var_2], 0

loc_28FDA:
mov     si, [bp+var_2]
push    [bp+arg_0]
call    sub_25FAE
mov     [bp+var_8], dx
mov     [bp+var_A], ax
or      ax, dx
jnz     short loc_28FF2
jmp     loc_2936F

loc_28FF2:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_29007
cmp     byte ptr ds:0BED2h, 8
jz      short loc_29007
cmp     byte ptr ds:0BED2h, 9
jnz     short loc_29029

loc_29007:
mov     ax, [bp+arg_2]
or      ax, [bp+arg_4]
jnz     short loc_29029
push    [bp+var_8]
push    [bp+var_A]
call    sub_268F7
or      ax, ax
jz      short loc_29029
mov     ax, 42h ; 'B'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_29029:
mov     ax, [bp+arg_2]
or      ax, [bp+arg_4]
jnz     short loc_2903B
les     bx, ds:0BD7Eh
mov     [bp+arg_4], es
mov     [bp+arg_2], bx

loc_2903B:
push    [bp+var_8]
push    [bp+var_A]
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_2677A
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
mov     di, [bp+arg_6]
cmp     di, 8
jnz     short loc_2909B
cmp     word ptr ds:0BF45h, 0
jz      short loc_2906C
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2906C:
mov     ax, ds:9A70h
or      ax, ds:9A72h
jnz     short loc_29078
jmp     def_29142       ; jumptable 00029142 default case

loc_29078:
cmp     [bp+arg_0], 0
jnz     short loc_29081
jmp     def_29142       ; jumptable 00029142 default case

loc_29081:
mov     ax, 91h
push    ax
call    sub_312DE
inc     sp
inc     sp
mov     word ptr ds:9A72h, 0
mov     word ptr ds:9A70h, 0
jmp     def_29142       ; jumptable 00029142 default case

loc_2909B:
les     bx, [bp+var_E]
cmp     byte ptr es:[bx+4], 11h
jz      short loc_290A8
jmp     loc_29125

loc_290A8:
mov     ax, ds:9A70h
or      ax, ds:9A72h
jnz     short loc_290C3
cmp     [bp+arg_0], 0
jz      short loc_290C3
cmp     byte ptr ds:0BED2h, 5
jnz     short loc_290C3
call    sub_297BF

loc_290C3:
les     bx, [bp+var_E]
test    byte ptr es:[bx+5], 8
jz      short loc_290D1
or      si, 100h

loc_290D1:
les     bx, [bp+var_E]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 7
cmp     ax, 1
jnz     short loc_290E6
or      si, 80h

loc_290E6:
mov     ax, ds:9A70h
or      ax, ds:9A72h
jz      short loc_29105
cmp     [bp+arg_0], 0
jz      short loc_29105
push    [bp+arg_6]
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
push    si
call    sub_2937E
jmp     loc_29376

loc_29105:
cmp     [bp+arg_6], 4
jnz     short loc_29116
mov     ax, 8Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_29116:
cmp     [bp+arg_6], 3
jnz     short loc_2911F
jmp     def_29142       ; jumptable 00029142 default case

loc_2911F:
mov     di, 2
jmp     def_29142       ; jumptable 00029142 default case

loc_29125:
les     bx, [bp+var_E]
cmp     byte ptr es:[bx+4], 12h
jnz     short loc_29133
and     si, 0FFBFh

loc_29133:
mov     ax, di
dec     ax              ; switch 5 cases
cmp     ax, 4
jbe     short loc_2913E
jmp     def_29142       ; jumptable 00029142 default case

loc_2913E:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_29142[bx] ; switch jump
jpt_29142 dw offset loc_29191 ; jump table for switch statement
dw offset loc_29151
dw offset loc_291AA
dw offset loc_291AA
dw offset loc_291AA

loc_29151:              ; jumptable 00029142 case 2
cmp     word ptr ds:0BF45h, 0
jnz     short loc_2915F
cmp     word ptr ds:0C072h, 0
jz      short loc_29163

loc_2915F:
or      si, 100h

loc_29163:
cmp     word ptr ds:0BF43h, 1
jz      short loc_29178
cmp     word ptr ds:0BF43h, 0
jnz     short loc_2917C
cmp     byte ptr ds:22C5h, 0
jz      short loc_2917C

loc_29178:
or      si, 80h

loc_2917C:
cmp     byte ptr ds:0BED2h, 9
jnz     short def_29142 ; jumptable 00029142 default case
cmp     [bp+arg_0], 0
jnz     short loc_2918C
jmp     loc_29365

loc_2918C:
mov     di, 1
jmp     short loc_291C3

loc_29191:              ; jumptable 00029142 case 1
cmp     word ptr ds:0BF43h, 1
jz      short loc_291A6
cmp     word ptr ds:0BF43h, 0
jnz     short loc_291AA ; jumptable 00029142 cases 3-5
cmp     byte ptr ds:22C5h, 0
jz      short loc_291AA ; jumptable 00029142 cases 3-5

loc_291A6:
or      si, 80h

loc_291AA:              ; jumptable 00029142 cases 3-5
cmp     word ptr ds:0BF45h, 0
jz      short loc_291BC
mov     ax, 9Bh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_291BC:
cmp     byte ptr ds:0BED2h, 9
jnz     short loc_291C9

loc_291C3:
or      si, 10h
jmp     short def_29142 ; jumptable 00029142 default case

loc_291C9:
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_2A8BF
or      ax, ax
jnz     short def_29142 ; jumptable 00029142 default case
mov     ax, 5Eh ; '^'
push    ax
call    sub_312DE
inc     sp
inc     sp

def_29142:              ; jumptable 00029142 default case
mov     ax, ds:9A70h
or      ax, ds:9A72h
jz      short loc_29209
push    word ptr ds:0BF49h
push    word ptr ds:0BF47h
push    di
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
push    si
call    sub_1F475
mov     word ptr [bp+var_6+2], dx
mov     word ptr [bp+var_6], ax
jmp     short loc_29224

loc_29209:
push    word ptr ds:0BF49h
push    word ptr ds:0BF47h
push    di
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
push    si
call    sub_1F1E6
mov     word ptr [bp+var_6+2], dx
mov     word ptr [bp+var_6], ax

loc_29224:
cmp     byte ptr ds:0BED2h, 9
jz      short loc_2922E
jmp     loc_29312

loc_2922E:
cmp     di, 1
jz      short loc_29240
cmp     di, 3
jz      short loc_29240
cmp     di, 4
jz      short loc_29240
jmp     loc_292FB

loc_29240:
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
test    byte ptr es:[bx+5], 40h
jz      short loc_29285
cmp     byte ptr ds:22C8h, 0
jz      short loc_29285
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_29285
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_29285
call    dword ptr ds:0C044h
mov     [bp+var_12], 1
mov     ax, ds:0BDCBh
mov     [bp+var_10], ax
jmp     short loc_292A3

loc_29285:
call    dword ptr ds:0C048h
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A954
push    ax
call    dword ptr ds:0C038h
mov     [bp+var_12], 0

loc_292A3:
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    dword ptr ds:0C034h
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_283D2
mov     [bp+var_14], dx
mov     [bp+var_16], ax
cmp     [bp+var_12], 0
jz      short loc_292D8
push    [bp+var_10]
call    sub_31435
les     bx, [bp+var_6]
mov     es:[bx+0Ah], ax

loc_292D8:
mov     ax, [bp+var_16]
or      ax, [bp+var_14]
jz      short loc_292F1
mov     dx, [bp+var_14]
mov     ax, [bp+var_16]
les     bx, [bp+var_6]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax

loc_292F1:
les     bx, [bp+var_6]
or      byte ptr es:[bx+9], 22h
jmp     short loc_2934F

loc_292FB:
cmp     di, 5
jz      short loc_29305
cmp     di, 0Ah
jnz     short loc_2934F

loc_29305:
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    sub_283F5
jmp     short loc_2934F

loc_29312:
cmp     di, 4
jnz     short loc_2934F
call    dword ptr ds:0C040h
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A954
push    ax
call    dword ptr ds:0C038h
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    dword ptr ds:0C034h
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
push    ax
call    dword ptr ds:0BFF0h

loc_2934F:
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_2935E
call    sub_26945
jmp     loc_28FDA

loc_2935E:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_29373

loc_29365:
mov     ax, 91h
push    ax
push    cs
call    near ptr sub_28E99
inc     sp
inc     sp

loc_2936F:
xor     ax, ax
jmp     short loc_29376

loc_29373:
mov     ax, 1

loc_29376:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_28FBB endp



; Attributes: bp-based frame

sub_2937E proc near

var_14= word ptr -14h
var_12= word ptr -12h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 14h
push    si
push    di
mov     si, [bp+arg_6]
cmp     si, 2
jnz     short loc_29391
mov     si, 1

loc_29391:
push    word ptr ds:0BF49h
push    word ptr ds:0BF47h
push    si
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, [bp+arg_0]
or      ax, 10h
push    ax
call    sub_1F1E6
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
mov     word ptr ds:0BEFDh, es
mov     ds:0BEFBh, bx
mov     bx, ax
les     bx, es:[bx+0Ch]
les     bx, es:[bx]
mov     word ptr ds:0BF11h, es
mov     ds:0BF0Fh, bx
mov     word ptr ds:9A72h, ds
mov     word ptr ds:9A70h, 0BEE6h
mov     byte ptr ds:0BE04h, 1
les     bx, [bp+var_10]
les     bx, es:[bx]
mov     word ptr ds:0BFB2h, es
mov     ds:0BFB0h, bx
push    word ptr ds:0BF53h
push    word ptr ds:0BF4Fh
call    sub_2EDAE
les     bx, [bp+arg_2]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jz      short loc_29408
jmp     loc_294FD

loc_29408:
mov     ax, ds:0BF4Bh
or      ax, ds:0BF4Dh
jnz     short loc_29414
jmp     loc_294FD

loc_29414:
jmp     loc_294A2

loc_29417:
mov     al, ds:0BED2h
mov     ah, 0
push    ax
push    cs
call    near ptr sub_286AA
or      ax, ax
jz      short loc_29485
push    cs
call    near ptr sub_286D6
mov     [bp+var_12], dx
mov     [bp+var_14], ax
or      ax, dx
jnz     short loc_29436
jmp     loc_294A2

loc_29436:
cmp     word ptr ds:0BF51h, 0
jz      short loc_29456
cmp     word ptr ds:0BF51h, 0Ah
jz      short loc_2945C
cmp     word ptr ds:0BF51h, 8
jz      short loc_2945C
mov     ax, 8Ch
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_29456:
mov     word ptr ds:0BF51h, 6

loc_2945C:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_2949D
push    word ptr ds:0BF51h
push    [bp+var_12]
push    [bp+var_14]
call    sub_29709
or      ax, ax
jnz     short loc_2949D
mov     word ptr ds:9A72h, 0
mov     word ptr ds:9A70h, 0
xor     ax, ax
jmp     loc_29609

loc_29485:
mov     ax, 91h
push    ax
push    cs
call    near ptr sub_28E99
inc     sp
inc     sp
cmp     byte ptr ds:0BED2h, 6
jnz     short loc_2949D
call    sub_2693F
jmp     short loc_294B3

loc_2949D:
call    sub_26945

loc_294A2:
cmp     byte ptr ds:0BED2h, 0
jz      short loc_294B3
cmp     byte ptr ds:0BED2h, 5
jz      short loc_294B3
jmp     loc_29417

loc_294B3:
mov     dx, ds:0BF4Dh
mov     ax, ds:0BF4Bh
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
push    dx
push    ax
call    sub_1F71E
les     bx, [bp+var_10]
les     bx, es:[bx+0Ch]
les     bx, es:[bx+8]
mov     [bp+var_6], es
mov     [bp+var_8], bx
mov     ax, bx
or      ax, [bp+var_6]
jz      short loc_2950A
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
les     bx, [bp+var_C]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
call    sub_29611
jmp     short loc_2950A

loc_294FD:
les     bx, [bp+arg_2]
les     bx, es:[bx+8]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_2950A:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jz      short loc_29529
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_1F8FA
les     bx, [bp+var_C]
mov     ax, es:[bx+12h]
mov     ds:0BF15h, ax
jmp     short loc_2952F

loc_29529:
mov     word ptr ds:0BF15h, 0

loc_2952F:
les     bx, ds:0BEFBh
les     bx, es:[bx+0Ch]
les     bx, es:[bx]
mov     [bp+var_12], es
mov     [bp+var_14], bx
push    [bp+var_12]
push    bx
call    sub_3B34A
or      ax, ax
jz      short loc_29573
call    dword ptr ds:0C040h
cmp     word ptr ds:0C064h, 0
jz      short loc_2955D
mov     ax, ds:0BDCDh
jmp     short loc_29560

loc_2955D:
mov     ax, ds:0BDC9h

loc_29560:
mov     ds:0BF0Bh, ax
push    [bp+var_12]
push    [bp+var_14]
call    sub_2A8BF
push    ax
call    dword ptr ds:0BFF0h

loc_29573:
cmp     byte ptr ds:22C0h, 0
jz      short loc_2958D
push    word ptr ds:9A72h
push    word ptr ds:9A70h
call    sub_2EDE8
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_2958D:
mov     ax, 1
push    ax
call    sub_24A3A
mov     di, ax
push    word ptr ds:0BF09h
push    word ptr ds:0BF07h
call    sub_2ED30
call    sub_2DC3F
les     bx, [bp+arg_2]
mov     al, es:[bx+5]
mov     ds:0BF14h, al
or      di, di
jz      short loc_295E2
les     bx, ds:0BF0Fh
cmp     byte ptr es:[bx+4], 0Fh
jz      short loc_295D0
mov     ax, 0AFh
push    ax
call    sub_31324
inc     sp
inc     sp
jmp     short loc_295E2

loc_295D0:
cmp     byte ptr ds:0BF13h, 2
jnz     short loc_295E2
mov     ax, 0AEh
push    ax
call    sub_31324
inc     sp
inc     sp

loc_295E2:
push    [bp+var_2]
push    [bp+var_4]
push    word ptr ds:0BED4h
push    word ptr ds:0BED6h
call    sub_2ED5C
mov     word ptr ds:0BFB2h, 0
mov     word ptr ds:0BFB0h, 0
mov     byte ptr ds:0BE04h, 1
mov     ax, 1

loc_29609:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_2937E endp



; Attributes: bp-based frame

sub_29611 proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 8
push    si
jmp     loc_296C6

loc_2961B:
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ch]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     si, [bx+7BA2h]
or      si, si
jz      short loc_29679
push    si
mov     bx, word ptr [bp+var_8]
mov     al, es:[bx+5]
mov     ah, 0
push    ax
call    sub_2A52D
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    dx
push    ax
les     bx, [bp+arg_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
xor     ax, ax
push    ax
call    sub_2A221
or      ax, ax
jnz     short loc_296AC
les     bx, [bp+var_8]
mov     al, es:[bx+4]
cbw
mov     bx, ax
cmp     byte ptr [bx+7BCCh], 0
jnz     short loc_29696

loc_29679:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
les     bx, [bp+arg_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
xor     ax, ax
push    ax
call    sub_2A221
or      ax, ax
jnz     short loc_296AC

loc_29696:
les     bx, [bp+arg_0]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, 55h ; 'U'
push    ax
call    sub_312DE
add     sp, 6

loc_296AC:
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
les     bx, [bp+arg_4]
les     bx, es:[bx+4]
mov     word ptr [bp+arg_4+2], es
mov     word ptr [bp+arg_4], bx

loc_296C6:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_296D9
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_296D9
jmp     loc_2961B

loc_296D9:
les     bx, [bp+arg_8]
les     bx, es:[bx+0Ch]
test    byte ptr es:[bx+5], 80h
jnz     short loc_296EF
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_296F7

loc_296EF:
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_29702

loc_296F7:
mov     ax, 2Ah ; '*'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_29702:
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_29611 endp



; Attributes: bp-based frame

sub_29709 proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     si, [bp+arg_4]

loc_29713:
xor     ax, ax
push    ax
call    sub_25FAE
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_29728
jmp     loc_297B1

loc_29728:
push    dx
push    [bp+var_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2677A
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_29757
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_2A771
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax

loc_29757:
cmp     si, 8
jnz     short loc_29775
push    word ptr ds:0BF49h
push    word ptr ds:0BF47h
push    si
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
xor     ax, ax
push    ax
call    sub_1F1E6
jmp     short loc_29791

loc_29775:
push    word ptr ds:0BF4Dh
push    word ptr ds:0BF4Bh
push    word ptr ds:0BF49h
push    word ptr ds:0BF47h
push    si
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_1F630

loc_29791:
cmp     byte ptr ds:0BED2h, 8
jnz     short loc_297A0
call    sub_26945
jmp     loc_29713

loc_297A0:
cmp     byte ptr ds:0BED2h, 7
jz      short loc_297B5
mov     ax, 91h
push    ax
push    cs
call    near ptr sub_28E99
inc     sp
inc     sp

loc_297B1:
xor     ax, ax
jmp     short loc_297B8

loc_297B5:
mov     ax, 1

loc_297B8:
pop     si
mov     sp, bp
pop     bp
retn    6
sub_29709 endp




sub_297BF proc far
push    si
mov     ax, ds:9A70h
or      ax, ds:9A72h
jz      short loc_297D6
mov     ax, 92h
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_2980F

loc_297D6:
push    ds
mov     ax, 0BEE6h
push    ax
mov     ax, 3Fh ; '?'
push    ax
mov     al, 0
push    ax
call    sub_46C10
call    sub_29B45
mov     ds:0BF09h, dx
mov     ds:0BF07h, ax
mov     word ptr ds:0BDA9h, 0
mov     word ptr ds:9A72h, ds
mov     word ptr ds:9A70h, 0BEE6h
mov     word ptr ds:0BF4Dh, 0
mov     word ptr ds:0BF4Bh, 0

loc_2980F:
pop     si
retf
sub_297BF endp

seg013 ends


; Segment type: Pure code
seg014 segment byte public 'CODE' use16
assume cs:seg014
;org 1
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_29811 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 10h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0
mov     bx, ax
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+2], 0
mov     bx, ax
mov     byte ptr es:[bx], 0
mov     bx, ax
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
mov     bx, ax
mov     word ptr es:[bx+0Ch], 0
mov     word ptr es:[bx+0Ah], 0
mov     sp, bp
pop     bp
retf
sub_29811 endp



; Attributes: bp-based frame

sub_29862 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh
arg_C= byte ptr  12h

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Eh
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     al, [bp+arg_C]
mov     es:[bx], al
mov     ax, word ptr [bp+arg_8]
or      ax, dx
jz      short loc_298A5
les     bx, [bp+arg_8]
mov     al, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+1], al
jmp     short loc_298AD

loc_298A5:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0

loc_298AD:
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    0Eh
sub_29862 endp



; Attributes: bp-based frame

sub_298D7 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= byte ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     al, [bp+arg_6]
mov     es:[bx], al
mov     ax, word ptr [bp+arg_2]
or      ax, dx
jz      short loc_2991A
les     bx, [bp+arg_2]
mov     al, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+1], al
jmp     short loc_29922

loc_2991A:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0

loc_29922:
mov     ax, [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+0Ah], ax
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    8
sub_298D7 endp



; Attributes: bp-based frame

sub_29943 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah
arg_8= byte ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     al, [bp+arg_8]
mov     es:[bx], al
mov     ax, word ptr [bp+arg_4]
or      ax, dx
jz      short loc_29986
les     bx, [bp+arg_4]
mov     al, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+1], al
jmp     short loc_2998E

loc_29986:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0

loc_2998E:
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr es:[bx+0Ah], 0
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    0Ah
sub_29943 endp



; Attributes: bp-based frame

sub_299B0 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     byte ptr es:[bx], 1
or      ax, dx
jz      short loc_299EE
les     bx, [bp+arg_4]
mov     al, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+1], al
jmp     short loc_299F6

loc_299EE:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0

loc_299F6:
les     bx, [bp+var_4]
mov     word ptr es:[bx+0Ah], 0
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    8
sub_299B0 endp



; Attributes: bp-based frame

sub_29A18 proc far

var_4= dword ptr -4
arg_0= byte ptr  6
arg_2= byte ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     byte ptr es:[bx], 2Dh ; '-'
or      ax, dx
jz      short loc_29A56
les     bx, [bp+arg_8]
mov     al, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+1], al
jmp     short loc_29A5E

loc_29A56:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0

loc_29A5E:
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     al, [bp+arg_2]
mov     es:[bx+0Ah], al
mov     al, [bp+arg_0]
mov     es:[bx+0Bh], al
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    0Ch
sub_29A18 endp



; Attributes: bp-based frame

sub_29A88 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Ah
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     byte ptr es:[bx], 2
or      ax, dx
jz      short loc_29AC6
les     bx, [bp+arg_4]
mov     al, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+1], al
jmp     short loc_29ACE

loc_29AC6:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0

loc_29ACE:
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    8
sub_29A88 endp



; Attributes: bp-based frame

sub_29AEA proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 10h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_2A52D
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     byte ptr es:[bx], 3
mov     al, byte ptr [bp+arg_0]
mov     es:[bx+1], al
push    [bp+arg_4]
push    [bp+arg_2]
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
add     ax, 6
push    dx
push    ax
mov     ax, 0Ah
push    ax
call    sub_46A2C
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     sp, bp
pop     bp
retf    6
sub_29AEA endp



; Attributes: bp-based frame

sub_29B45 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 16h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
mov     ax, 16h
push    ax
mov     al, 0
push    ax
call    sub_46C10
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 5
mov     ax, ds:0BD92h
mov     es:[bx+12h], ax
inc     word ptr ds:0BD92h
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     bx, ax
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
mov     bx, ax
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     sp, bp
pop     bp
retf
sub_29B45 endp



; Attributes: bp-based frame

sub_29B97 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    cs
call    near ptr sub_29B45
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, 2
push    ax
call    sub_3193F
les     bx, [bp+var_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf
sub_29B97 endp



; Attributes: bp-based frame

sub_29BC4 proc far

var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 10h
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_29EB7
or      ax, ax
jnz     short loc_29BDA
jmp     loc_29CD6

loc_29BDA:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_29BEF
les     bx, es:[bx+6]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
jmp     short loc_29BF8

loc_29BEF:
les     bx, [bp+arg_4]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx

loc_29BF8:
les     bx, [bp+var_10]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
xor     ax, ax
push    ax
push    ax
mov     ax, 5
push    ax
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
call    sub_1F475
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     al, 7
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    dx
push    [bp+var_4]
push    cs
call    near ptr sub_29943
mov     [bp+var_A], dx
mov     [bp+var_C], ax
mov     al, 7
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_2]
push    [bp+var_4]
push    cs
call    near ptr sub_29943
les     bx, [bp+var_10]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, 17h
push    ax
push    [bp+var_A]
push    [bp+var_C]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_1FF72
mov     [bp+var_A], dx
mov     [bp+var_C], ax
mov     ax, [bp+arg_8]
add     ax, 0FFF5h
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_29F7C
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1FF72
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
mov     ax, 17h
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    dx
push    [bp+arg_0]
call    sub_1FF72
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     al, 38h ; '8'
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_A]
push    [bp+var_C]
push    dx
push    bx
push    cs
call    near ptr sub_29862
jmp     short loc_29D09

loc_29CD6:
mov     ax, 17h
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2A00F
push    dx
push    ax
mov     ax, [bp+arg_8]
add     ax, 0FFF5h
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_29F7C
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1FF72
push    dx
push    ax
call    sub_1FF72

loc_29D09:
mov     sp, bp
pop     bp
retf    0Ah
sub_29BC4 endp



; Attributes: bp-based frame

sub_29D0F proc far

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 10h
push    si
mov     si, [bp+arg_4]
push    ds
mov     ax, 67A8h
push    ax
mov     ax, 0Ch
push    ax
push    cs
call    near ptr sub_29AEA
mov     [bp+var_E], dx
mov     [bp+var_10], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29EB7
or      ax, ax
jnz     short loc_29D3C
jmp     loc_29E38

loc_29D3C:
cmp     si, 2Eh ; '.'
jnz     short loc_29D46
mov     si, 0Dh
jmp     short loc_29D49

loc_29D46:
mov     si, 0Eh

loc_29D49:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
xor     ax, ax
push    ax
push    ax
mov     ax, 5
push    ax
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
call    sub_1F475
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     al, 7
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    dx
push    [bp+var_4]
push    cs
call    near ptr sub_29943
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
mov     al, 7
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_2]
push    [bp+var_4]
push    cs
call    near ptr sub_29943
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, 17h
push    ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_1FF72
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
mov     ax, 2Bh ; '+'
push    ax
push    dx
push    word ptr [bp+var_C]
xor     ax, ax
push    ax
push    ax
call    sub_1FF72
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
push    si
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29F7C
push    dx
push    ax
push    [bp+var_E]
push    [bp+var_10]
call    sub_1FF72
mov     [bp+var_E], dx
mov     [bp+var_10], ax
mov     ax, 17h
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    dx
push    [bp+var_10]
call    sub_1FF72
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     al, 37h ; '7'
push    ax
les     bx, [bp+var_C]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+var_C+2]
push    bx
push    dx
push    word ptr [bp+var_8]
push    cs
call    near ptr sub_29862
jmp     short loc_29EB0

loc_29E38:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29F7C
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2A00F
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
cmp     si, 2Eh ; '.'
jnz     short loc_29E60
mov     si, 0Dh
jmp     short loc_29E63

loc_29E60:
mov     si, 0Eh

loc_29E63:
mov     ax, 17h
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2A00F
push    dx
push    ax
push    si
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29F7C
push    dx
push    ax
push    [bp+var_E]
push    [bp+var_10]
call    sub_1FF72
push    dx
push    ax
call    sub_1FF72
mov     [bp+var_E], dx
mov     [bp+var_10], ax
mov     al, 37h ; '7'
push    ax
les     bx, [bp+var_C]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+var_C+2]
push    bx
push    dx
push    [bp+var_10]
push    cs
call    near ptr sub_29862

loc_29EB0:
pop     si
mov     sp, bp
pop     bp
retf    6
sub_29D0F endp



; Attributes: bp-based frame

sub_29EB7 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_29F01 ; jumptable 00029EDA cases 1-4
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 5
jz      short loc_29F01 ; jumptable 00029EDA cases 1-4
jg      short loc_29EE7
dec     ax              ; switch 4 cases
cmp     ax, 3
ja      short def_29EDA ; jumptable 00029EDA default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_29EDA[bx] ; switch jump
jpt_29EDA dw offset loc_29F01 ; jump table for switch statement
dw offset loc_29F01
dw offset loc_29F01
dw offset loc_29F01

loc_29EE7:
cmp     ax, 2Dh ; '-'
jz      short loc_29F05
jg      short loc_29EFA
cmp     ax, 7
jz      short loc_29F01 ; jumptable 00029EDA cases 1-4
cmp     ax, 8
jz      short loc_29F01 ; jumptable 00029EDA cases 1-4
jmp     short def_29EDA ; jumptable 00029EDA default case

loc_29EFA:
cmp     ax, 36h ; '6'
jz      short loc_29F15
jmp     short def_29EDA ; jumptable 00029EDA default case

loc_29F01:              ; jumptable 00029EDA cases 1-4
xor     ax, ax
jmp     short loc_29F45

loc_29F05:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_29EB7
jmp     short loc_29F45

loc_29F15:
mov     ax, 1
jmp     short loc_29F45

def_29EDA:              ; jumptable 00029EDA default case
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_29EB7
or      ax, ax
jnz     short loc_29F3E
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_29EB7
or      ax, ax
jz      short loc_29F43

loc_29F3E:
mov     ax, 1
jmp     short loc_29F45

loc_29F43:
xor     ax, ax

loc_29F45:
pop     bp
retn    4
sub_29EB7 endp



; Attributes: bp-based frame

sub_29F49 proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 10h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
push    es
push    bx
les     bx, [bp+arg_0]
push    es
push    bx
mov     cx, 10h
call    sub_46BE5
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     sp, bp
pop     bp
retn    4
sub_29F49 endp



; Attributes: bp-based frame

sub_29F7C proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_29F8E
xor     dx, dx
mov     ax, dx
jmp     loc_2A00B

loc_29F8E:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29F49
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jl      short loc_29FAE
mov     bx, ax
cmp     byte ptr es:[bx], 9
jle     short loc_2A005

loc_29FAE:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Dh ; '-'
jz      short loc_29FEC
cmp     byte ptr es:[bx], 2Eh ; '.'
jz      short loc_29FC3
cmp     byte ptr es:[bx], 2Fh ; '/'
jnz     short loc_29FD3

loc_29FC3:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_29F7C
jmp     short loc_2A00B

loc_29FD3:
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_29F7C
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_29FEC:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_29F7C
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_2A005:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_2A00B:
pop     bp
retn    4
sub_29F7C endp



; Attributes: bp-based frame

sub_2A00F proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_2A021
xor     dx, dx
mov     ax, dx
jmp     loc_2A09B

loc_2A021:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_29F49
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jl      short loc_2A041
mov     bx, ax
cmp     byte ptr es:[bx], 9
jle     short loc_2A095

loc_2A041:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Dh ; '-'
jz      short loc_2A07C
cmp     byte ptr es:[bx], 17h
jl      short loc_2A063
cmp     byte ptr es:[bx], 21h ; '!'
jg      short loc_2A063
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_2A00F
jmp     short loc_2A09B

loc_2A063:
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2A00F
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_2A07C:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_2A00F
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_2A095:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_2A09B:
pop     bp
retn    4
sub_2A00F endp

seg014 ends


; Segment type: Pure code
seg015 segment byte public 'CODE' use16
assume cs:seg015
;org 0Fh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2A09F proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= byte ptr  4
arg_2= dword ptr  6
arg_6= byte ptr  0Ah
arg_8= dword ptr  0Ch
arg_C= word ptr  10h
arg_E= byte ptr  12h

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     al, [bp+arg_E]
mov     ds:0BF5Ah, al
mov     ax, [bp+arg_C]
mov     ds:0BF62h, ax
mov     al, [bp+arg_0]
mov     ds:0BF5Bh, al
les     bx, [bp+arg_2]
mov     word ptr ds:0BF58h, es
mov     ds:0BF56h, bx
mov     al, [bp+arg_6]
mov     ds:0BF5Ch, al
les     bx, [bp+arg_8]
mov     word ptr ds:0BF60h, es
mov     ds:0BF5Eh, bx
cld
les     bx, ds:0BD8Ah
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2A114

loc_2A0E2:
les     bx, [bp+var_4]

loc_2A0E5:
cmp     bx, 280h
jnb     short loc_2A106
lea     si, ds:0BF56h
mov     di, bx
mov     cx, 7
repe cmpsw
jnz     short loc_2A101
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
jmp     loc_2A213

loc_2A101:
add     bx, 10h
jmp     short loc_2A0E5

loc_2A106:
les     bx, [bp+var_4]
les     bx, es:[bx+280h]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2A114:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
cmp     dx, ds:0BD90h
jnz     short loc_2A0E2
cmp     ax, ds:0BD8Eh
jnz     short loc_2A0E2
les     bx, [bp+var_4]

loc_2A129:
cmp     bx, ds:0BD7Ah
jnb     short loc_2A14A
lea     si, ds:0BF56h
mov     di, bx
mov     cx, 7
repe cmpsw
jnz     short loc_2A145
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
jmp     loc_2A213

loc_2A145:
add     bx, 10h
jmp     short loc_2A129

loc_2A14A:
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
add     ax, 280h
cmp     ax, ds:0BD7Ah
jbe     short loc_2A170
les     bx, ds:0BD7Ah
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
add     word ptr ds:0BD7Ah, 10h
jmp     short loc_2A1CF

loc_2A170:
mov     ax, 288h
push    ax
call    sub_3193F
les     bx, [bp+var_4]
mov     es:[bx+282h], dx
mov     es:[bx+280h], ax
les     bx, es:[bx+280h]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     dx, ds:0BD90h
mov     ax, ds:0BD8Eh
mov     es:[bx+286h], dx
mov     es:[bx+284h], ax
mov     word ptr ds:0BD90h, es
mov     ds:0BD8Eh, bx
les     bx, [bp+var_4]
mov     word ptr es:[bx+282h], 0
mov     word ptr es:[bx+280h], 0
add     bx, 10h
mov     word ptr ds:0BD7Ch, es
mov     ds:0BD7Ah, bx
mov     bx, word ptr [bp+var_4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2A1CF:
mov     al, ds:0BF5Ah
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 3
jz      short loc_2A1EC
mov     al, ds:0BF5Ah
cbw
mov     bx, ax
mov     al, [bx+6824h]
cbw
mov     ds:0BF64h, ax
jmp     short loc_2A201

loc_2A1EC:
cmp     byte ptr ds:0BF5Ah, 0Fh
jnz     short loc_2A1FB
mov     word ptr ds:0BF64h, 1
jmp     short loc_2A201

loc_2A1FB:
mov     word ptr ds:0BF64h, 0

loc_2A201:
les     bx, [bp+var_8]
push    es
push    bx
mov     bx, 0BF56h
push    ds
push    bx
mov     cx, 10h
call    sub_46BE5

loc_2A213:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    10h
sub_2A09F endp



; Attributes: bp-based frame

sub_2A221 proc far

var_12= dword ptr -12h
var_E= dword ptr -0Eh
var_A= dword ptr -0Ah
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
cmp     [bp+arg_0], 0FFFFh
jnz     short loc_2A23B
mov     [bp+arg_0], 1
mov     [bp+var_2], 1
jmp     short loc_2A240

loc_2A23B:
mov     [bp+var_2], 0

loc_2A240:
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
cmp     dx, word ptr [bp+arg_2+2]
jnz     short loc_2A256
cmp     ax, word ptr [bp+arg_2]
jnz     short loc_2A256
mov     ax, 1
jmp     loc_2A4F8

loc_2A256:
les     bx, [bp+arg_6]
mov     al, es:[bx+4]
les     bx, [bp+arg_2]
cmp     al, es:[bx+4]
jz      short loc_2A269
jmp     loc_2A4A7

loc_2A269:
les     bx, [bp+arg_6]
mov     al, es:[bx+6]
les     bx, [bp+arg_2]
cmp     al, es:[bx+6]
jz      short loc_2A27C
jmp     loc_2A4A7

loc_2A27C:
les     bx, [bp+arg_6]
cmp     byte ptr es:[bx+4], 11h
jz      short loc_2A2E1
cmp     [bp+arg_0], 0
jnz     short loc_2A29C
mov     al, es:[bx+5]
les     bx, [bp+arg_2]
cmp     al, es:[bx+5]
jz      short loc_2A2E1
jmp     loc_2A4A7

loc_2A29C:
cmp     [bp+arg_0], 2
jnz     short loc_2A2E1
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 40h
les     bx, [bp+arg_2]
mov     dl, es:[bx+5]
mov     dh, 0
and     dx, 40h
cmp     ax, dx
jle     short loc_2A2C1
jmp     loc_2A4A7

loc_2A2C1:
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 80h
les     bx, [bp+arg_2]
mov     dl, es:[bx+5]
mov     dh, 0
and     dx, 80h
cmp     ax, dx
jle     short loc_2A2E1
jmp     loc_2A4A7

loc_2A2E1:
les     bx, [bp+arg_6]
mov     al, es:[bx+4]
cbw
cmp     ax, 10h
jz      short loc_2A2FB
cmp     ax, 11h
jz      short loc_2A34B
cmp     ax, 12h
jz      short loc_2A32B
jmp     loc_2A4AB

loc_2A2FB:
les     bx, [bp+arg_6]
mov     ax, es:[bx+0Ch]
les     bx, [bp+arg_2]
cmp     ax, es:[bx+0Ch]
jnz     short loc_2A30E
jmp     loc_2A4AB

loc_2A30E:
les     bx, [bp+arg_6]
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_2A31B
jmp     loc_2A4AB

loc_2A31B:
les     bx, [bp+arg_2]
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_2A328
jmp     loc_2A4AB

loc_2A328:
jmp     loc_2A4A7

loc_2A32B:
les     bx, [bp+arg_6]
mov     dx, es:[bx+0Ah]
mov     ax, es:[bx+8]
les     bx, [bp+arg_2]
cmp     dx, es:[bx+0Ah]
jnz     short loc_2A348
cmp     ax, es:[bx+8]
jnz     short loc_2A348
jmp     loc_2A4AB

loc_2A348:
jmp     loc_2A4A7

loc_2A34B:
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0FF7Fh
les     bx, [bp+arg_2]
mov     dl, es:[bx+5]
mov     dh, 0
and     dx, 0FF7Fh
cmp     ax, dx
jz      short loc_2A36B
jmp     loc_2A4A7

loc_2A36B:
les     bx, [bp+arg_6]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_2A37B
jmp     loc_2A4AB

loc_2A37B:
les     bx, [bp+arg_2]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_2A38B
jmp     loc_2A4AB

loc_2A38B:
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
les     bx, [bp+arg_2]
cmp     al, es:[bx+5]
jz      short loc_2A39E
jmp     loc_2A4A7

loc_2A39E:
les     bx, [bp+arg_6]
les     bx, es:[bx+8]
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx
les     bx, [bp+arg_2]
les     bx, es:[bx+8]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
les     bx, [bp+var_12]
mov     al, es:[bx+18h]
les     bx, [bp+var_E]
cmp     al, es:[bx+18h]
jz      short loc_2A3CB
jmp     loc_2A4A7

loc_2A3CB:
les     bx, [bp+var_12]
les     bx, es:[bx+4]
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
les     bx, [bp+var_E]
les     bx, es:[bx+4]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
jmp     loc_2A484

loc_2A3E8:
cmp     [bp+var_2], 0
jz      short loc_2A449
les     bx, [bp+var_A]
les     bx, es:[bx+0Ch]
mov     al, es:[bx+4]
cbw
mov     si, ax
test    byte ptr [si+6810h], 14h
jz      short loc_2A449
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
mov     al, es:[bx+4]
cbw
cmp     ax, si
jnz     short loc_2A449
les     bx, [bp+var_A]
les     bx, es:[bx+0Ch]
les     bx, es:[bx]
mov     al, es:[bx+4]
cbw
mov     si, ax
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
les     bx, es:[bx]
mov     al, es:[bx+4]
cbw
mov     di, ax
cmp     si, 0Fh
jnz     short loc_2A43F
cmp     di, 1
jz      short loc_2A46A

loc_2A43F:
cmp     si, 1
jnz     short loc_2A449
cmp     di, 0Fh
jz      short loc_2A46A

loc_2A449:
les     bx, [bp+var_A]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
xor     ax, ax
push    ax
push    cs
call    near ptr sub_2A221
or      ax, ax
jz      short loc_2A4A7

loc_2A46A:
les     bx, [bp+var_A]
les     bx, es:[bx+4]
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
les     bx, [bp+var_6]
les     bx, es:[bx+4]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx

loc_2A484:
mov     ax, word ptr [bp+var_A]
or      ax, word ptr [bp+var_A+2]
jz      short loc_2A497
mov     ax, word ptr [bp+var_6]
or      ax, word ptr [bp+var_6+2]
jz      short loc_2A497
jmp     loc_2A3E8

loc_2A497:
mov     dx, word ptr [bp+var_A+2]
mov     ax, word ptr [bp+var_A]
cmp     dx, word ptr [bp+var_6+2]
jnz     short loc_2A4A7
cmp     ax, word ptr [bp+var_6]
jz      short loc_2A4AB

loc_2A4A7:
xor     ax, ax
jmp     short loc_2A4F8

loc_2A4AB:
les     bx, [bp+arg_6]
les     bx, es:[bx]
mov     word ptr [bp+arg_6+2], es
mov     word ptr [bp+arg_6], bx
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     word ptr [bp+arg_2+2], es
mov     word ptr [bp+arg_2], bx
cmp     [bp+arg_0], 1
jnz     short loc_2A4CE
mov     [bp+arg_0], 2

loc_2A4CE:
mov     ax, word ptr [bp+arg_6]
or      ax, word ptr [bp+arg_6+2]
jz      short loc_2A4E1
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jz      short loc_2A4E1
jmp     loc_2A240

loc_2A4E1:
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
cmp     dx, word ptr [bp+arg_2+2]
jnz     short loc_2A4F6
cmp     ax, word ptr [bp+arg_2]
jnz     short loc_2A4F6
mov     ax, 1
jmp     short loc_2A4F8

loc_2A4F6:
xor     ax, ax

loc_2A4F8:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_2A221 endp



; Attributes: bp-based frame

sub_2A500 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
les     bx, [bp+arg_2]
mov     al, es:[bx+4]
push    ax
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr es:[bx+8]
mov     al, es:[bx+6]
push    ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    [bp+arg_0]
call    sub_2A09F
pop     bp
retf    6
sub_2A500 endp



; Attributes: bp-based frame

sub_2A52D proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_2]
xor     ax, ax
push    ax
push    ax
push    ax
mov     al, 0
push    ax
xor     ax, ax
push    ax
push    ax
push    [bp+arg_0]
call    sub_2A09F
pop     bp
retf    4
sub_2A52D endp



; Attributes: bp-based frame

sub_2A549 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+4], 11h
jz      short loc_2A567
cmp     byte ptr es:[bx+4], 14h
jz      short loc_2A567
cmp     byte ptr es:[bx+4], 0Fh
jnz     short loc_2A56A

loc_2A567:
call    sub_2A8B3

loc_2A56A:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_2A8BF
xor     dx, dx
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, [bp+arg_6]
xor     dx, dx
mov     cx, [bp+var_2]
mov     bx, [bp+var_4]
call    sub_46A18
or      dx, dx
jl      short loc_2A5A3
jg      short loc_2A598
cmp     ax, 0FFFFh
jbe     short loc_2A5A3

loc_2A598:
mov     ax, 62h ; 'b'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2A5A3:
les     bx, [bp+arg_2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0E0h
or      [bp+arg_0], ax
mov     al, 10h
push    ax
push    [bp+arg_6]
xor     ax, ax
push    ax
push    ax
mov     al, 0
push    ax
push    word ptr [bp+arg_2+2]
push    bx
push    [bp+arg_0]
call    sub_2A09F
mov     sp, bp
pop     bp
retf    8
sub_2A549 endp



; Attributes: bp-based frame

sub_2A5CF proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_6]
mov     al, es:[bx+4]
cbw
cmp     ax, 10h
jz      short loc_2A5EE
cmp     ax, 11h
jz      short loc_2A5EE
cmp     ax, 14h
jz      short loc_2A5EE
jmp     short loc_2A5F1

loc_2A5EE:
call    sub_2A8B3

loc_2A5F1:
mov     ax, [bp+arg_0]
and     ax, 7
cmp     ax, 3
jnz     short loc_2A602
and     [bp+arg_0], 0FFC7h
jmp     short loc_2A633

loc_2A602:
test    [bp+arg_0], 7
jnz     short loc_2A61A
cmp     byte ptr ds:22C5h, 0
jz      short loc_2A616
or      [bp+arg_0], 1
jmp     short loc_2A61A

loc_2A616:
or      [bp+arg_0], 4

loc_2A61A:
test    [bp+arg_0], 38h
jnz     short loc_2A63D
cmp     byte ptr ds:22B1h, 5
jnz     short loc_2A62C
or      [bp+arg_0], 20h

loc_2A62C:
cmp     byte ptr ds:0BE1Ah, 0
jz      short loc_2A639

loc_2A633:
or      [bp+arg_0], 8
jmp     short loc_2A63D

loc_2A639:
or      [bp+arg_0], 10h

loc_2A63D:
mov     ax, [bp+arg_2]
or      ax, [bp+arg_4]
jz      short loc_2A6AE
cmp     byte ptr ds:9A63h, 3
jnz     short loc_2A65D
mov     ax, 10h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_2A66C

loc_2A65D:
mov     ax, 10h
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_2A66C:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+4], 11h
mov     al, byte ptr [bp+arg_0]
mov     es:[bx+5], al
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr es:[bx+0Ch], 0
mov     word ptr es:[bx+0Eh], 0
mov     byte ptr es:[bx+6], 0
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
jmp     short loc_2A6C5

loc_2A6AE:
mov     al, 11h
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
mov     al, 0
push    ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    [bp+arg_0]
call    sub_2A09F

loc_2A6C5:
mov     sp, bp
pop     bp
retf    0Ah
sub_2A5CF endp



; Attributes: bp-based frame

sub_2A6CB proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
les     bx, [bp+arg_0]
mov     si, es:[bx]
mov     ax, si
and     ax, 0C0h
mov     [bp+var_2], ax
mov     ax, si
and     ax, 0Fh
mov     si, ax
mov     ax, si
dec     ax              ; switch 7 cases
cmp     ax, 6
ja      short def_2A6F4 ; jumptable 0002A6F4 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2A6F4[bx] ; switch jump
jpt_2A6F4 dw offset loc_2A71B ; jump table for switch statement
dw offset loc_2A71B
dw offset loc_2A71B
dw offset loc_2A71B
dw offset loc_2A716
dw offset loc_2A716
dw offset loc_2A707

loc_2A707:              ; jumptable 0002A6F4 case 7
mov     di, 7
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 11h
jz      short loc_2A742
jmp     short loc_2A759

loc_2A716:              ; jumptable 0002A6F4 cases 5,6
mov     di, 0Bh
jmp     short loc_2A75C

loc_2A71B:              ; jumptable 0002A6F4 cases 1-4
mov     di, 7
jmp     short loc_2A75C

def_2A6F4:              ; jumptable 0002A6F4 default case
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_2A747
mov     al, es:[bx+5]
mov     ah, 0
mov     [bp+var_4], ax
cmp     byte ptr ds:0BE1Ah, 0
jnz     short loc_2A74E
test    ax, 8
jnz     short loc_2A74E
mov     di, 7

loc_2A742:
mov     si, 2
jmp     short loc_2A75C

loc_2A747:
cmp     byte ptr ds:0BE1Bh, 0
jz      short loc_2A756

loc_2A74E:
mov     di, 0Bh
mov     si, 5
jmp     short loc_2A75C

loc_2A756:
mov     di, 7

loc_2A759:
mov     si, 4

loc_2A75C:
mov     ax, si
or      ax, [bp+var_2]
les     bx, [bp+arg_0]
mov     es:[bx], ax
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_2A6CB endp



; Attributes: bp-based frame

sub_2A771 proc far

var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 2
push    [bp+arg_4]
push    [bp+arg_2]
push    ss
lea     ax, [bp+arg_0]
push    ax
call    sub_2A6CB
mov     [bp+var_2], ax
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
mov     al, 0
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2A09F
mov     sp, bp
pop     bp
retf    6
sub_2A771 endp



; Attributes: bp-based frame

sub_2A7A3 proc far

arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+4], 5
jz      short loc_2A7CF
cmp     byte ptr es:[bx+4], 6
jz      short loc_2A7CF
cmp     byte ptr es:[bx+4], 3
jz      short loc_2A7CF
cmp     byte ptr es:[bx+4], 4
jz      short loc_2A7CF
cmp     byte ptr es:[bx+4], 13h
jz      short loc_2A7CF
call    sub_2A8B3

loc_2A7CF:
mov     al, 14h
push    ax
push    [bp+arg_8]
xor     ax, ax
push    ax
push    ax
push    [bp+arg_6]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+arg_0]
call    sub_2A09F
pop     bp
retf    0Ah
sub_2A7A3 endp



; Attributes: bp-based frame

sub_2A7EC proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
cmp     [bp+arg_0], 0
jz      short loc_2A7FB
jmp     loc_2A894

loc_2A7FB:
les     bx, [bp+arg_2]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jz      short loc_2A813
les     bx, es:[bx+8]
cmp     byte ptr es:[bx+5], 0
jz      short loc_2A887

loc_2A813:
cmp     byte ptr ds:9A63h, 3
jnz     short loc_2A82B
mov     ax, 10h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_2A83A

loc_2A82B:
mov     ax, 10h
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_2A83A:
mov     al, byte ptr [bp+arg_6]
les     bx, [bp+var_4]
mov     es:[bx+4], al
mov     al, byte ptr [bp+arg_0]
mov     es:[bx+5], al
mov     word ptr es:[bx+0Ch], 0
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
mov     word ptr es:[bx+0Eh], 0
mov     byte ptr es:[bx+6], 0
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, [bp+arg_2]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
jmp     short loc_2A8AD

loc_2A887:
les     bx, [bp+arg_2]
mov     dx, es:[bx+0Ah]
mov     ax, es:[bx+8]
jmp     short loc_2A8AD

loc_2A894:
push    [bp+arg_6]
xor     ax, ax
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     al, 0
push    ax
xor     ax, ax
push    ax
push    ax
push    [bp+arg_0]
call    sub_2A09F

loc_2A8AD:
mov     sp, bp
pop     bp
retf    8
sub_2A7EC endp




sub_2A8B3 proc near
mov     ax, 40h ; '@'
push    ax
call    sub_312DE
inc     sp
inc     sp
retn
sub_2A8B3 endp



; Attributes: bp-based frame

sub_2A8BF proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_2A8D2
mov     ax, 1
jmp     short loc_2A94E
align 2

loc_2A8D2:
mov     si, 1
jmp     short loc_2A8EB

loc_2A8D7:
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ch]
mul     si
mov     si, ax
les     bx, es:[bx]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_2A8EB:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 10h
jz      short loc_2A8D7
mov     al, es:[bx+4]
cbw
cmp     ax, 12h
jz      short loc_2A901
jmp     short loc_2A93A

loc_2A901:
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     di, es:[bx+10h]
or      di, di
jnz     short loc_2A94A
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
mov     ax, 99h
push    ax
call    sub_312DE
add     sp, 6
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     word ptr es:[bx+12h], 1
jmp     short loc_2A94A

loc_2A93A:
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     di, [bx+7BE1h]

loc_2A94A:
mov     ax, si
mul     di

loc_2A94E:
pop     di
pop     si
pop     bp
retf    4
sub_2A8BF endp



; Attributes: bp-based frame

sub_2A954 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
jmp     short loc_2A965

loc_2A959:
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_2A965:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 10h
jz      short loc_2A959
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     ax, [bx+7C0Bh]
pop     bp
retf    4
sub_2A954 endp



; Attributes: bp-based frame

sub_2A980 proc far

var_6= dword ptr -6
var_2= word ptr -2
arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 6
push    [bp+arg_4]
push    [bp+arg_2]
push    ss
lea     ax, [bp+arg_0]
push    ax
call    sub_2A6CB
mov     [bp+var_2], ax
mov     ax, 6
push    ax
call    sub_318B7
mov     word ptr [bp+var_6+2], dx
mov     word ptr [bp+var_6], ax
mov     al, byte ptr [bp+var_2]
les     bx, [bp+var_6]
mov     es:[bx+4], al
mov     al, [bp+arg_0]
mov     es:[bx+5], al
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, word ptr [bp+var_6+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    6
sub_2A980 endp

seg015 ends


; Segment type: Pure code
seg016 segment byte public 'CODE' use16
assume cs:seg016
;org 0Fh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2A9CF proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46E60
mov     si, ax
mov     ax, si
mov     cl, 5
shl     ax, cl
les     bx, [bp+arg_2]
mov     dl, es:[bx]
mov     dh, 0
add     ax, dx
add     bx, si
dec     bx
mov     dl, es:[bx]
mov     dh, 0
shl     dx, 1
shl     dx, 1
add     ax, dx
and     ax, 3FFh
mov     si, ax
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     ax, [bx-5588h]
or      ax, [bx-5586h]
jnz     short loc_2AA79
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46E60
add     ax, 0Bh
push    ax
call    sub_3193F
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     [bx-5586h], dx
mov     [bx-5588h], ax
les     bx, [bp+var_8]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
mov     bx, ax
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     ax, [bp+arg_0]
mov     bx, word ptr [bp+var_8]
mov     es:[bx+8], ax
mov     ax, word ptr [bp+var_8]
add     ax, 0Ah
push    dx
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46D76
jmp     short loc_2AAA3

loc_2AA79:
mov     bx, si
shl     bx, 1
shl     bx, 1
les     bx, [bx-5588h]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2AA89:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
add     ax, 0Ah
push    dx
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46D55
or      ax, ax
jnz     short loc_2AAAB

loc_2AAA3:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
jmp     short loc_2AB25

loc_2AAAB:
les     bx, [bp+var_8]
mov     ax, es:[bx]
or      ax, es:[bx+2]
jz      short loc_2AAC2
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2AA89

loc_2AAC2:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46E60
add     ax, 0Bh
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_8]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
mov     bx, ax
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     ax, [bp+arg_0]
mov     bx, word ptr [bp+var_4]
mov     es:[bx+8], ax
mov     ax, word ptr [bp+var_4]
add     ax, 0Ah
push    dx
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46D76
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]

loc_2AB25:
pop     si
mov     sp, bp
pop     bp
retf    6
sub_2A9CF endp

seg016 ends


; Segment type: Pure code
seg017 segment byte public 'CODE' use16
assume cs:seg017
;org 0Ch
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2AB2C proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     word ptr ds:0BE2Bh, es
mov     ds:0BE29h, bx
les     bx, es:[bx+6]
push    es
push    bx
les     bx, [bp+arg_0]
pop     ax
pop     dx
add     ax, es:[bx+4]
mov     ds:0BF70h, dx
mov     ds:0BF6Eh, ax
les     bx, es:[bx+6]
push    es
push    bx
les     bx, [bp+arg_0]
pop     ax
pop     dx
add     ax, es:[bx+2]
mov     ds:0BF68h, dx
mov     ds:0BF66h, ax
pop     bp
retn    4
sub_2AB2C endp



; Attributes: bp-based frame

sub_2AB6A proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     ax, ds:0BE29h
or      ax, ds:0BE2Bh
jz      short loc_2AB89
les     bx, ds:0BE29h
mov     ax, ds:0BF6Eh
mov     dx, es:[bx+6]
sub     ax, dx
sbb     dx, dx
mov     es:[bx+4], ax

loc_2AB89:
mov     dx, ds:0BE2Bh
mov     ax, ds:0BE29h
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     word ptr ds:0BE2Bh, es
mov     ds:0BE29h, bx
les     bx, es:[bx+6]
push    es
push    bx
les     bx, [bp+arg_0]
pop     ax
pop     dx
add     ax, es:[bx+4]
mov     ds:0BF70h, dx
mov     ds:0BF6Eh, ax
les     bx, es:[bx+6]
push    es
push    bx
les     bx, [bp+arg_0]
pop     ax
pop     dx
add     ax, es:[bx+2]
mov     ds:0BF68h, dx
mov     ds:0BF66h, ax
pop     bp
retn    4
sub_2AB6A endp



; Attributes: bp-based frame

sub_2ABD3 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_11C48
or      ax, ax
jz      short loc_2AC3F
les     bx, ds:0BE29h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2AC08

loc_2ABF5:
les     bx, [bp+var_4]
cmp     word ptr es:[bx], 0FFFFh
jz      short loc_2AC53
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2AC08:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2ABF5
mov     ax, 1Ch
push    ax
call    sub_31B55
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     word ptr es:[bx], 0FFFFh
mov     ax, ds:99B3h
mov     es:[bx+2], ax
mov     dx, ds:9919h
mov     ax, ds:9917h
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_2AC83

loc_2AC3F:
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_46A81
mov     si, ax
or      si, si
jge     short loc_2AC58

loc_2AC53:
xor     ax, ax
jmp     loc_2AD4C

loc_2AC58:
mov     ax, 41Ch
push    ax
call    sub_31B55
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     es:[bx], si
mov     bx, ax
mov     word ptr es:[bx+2], 0
add     ax, 1Ch
mov     bx, word ptr [bp+var_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_2AC83:
les     bx, [bp+var_8]
mov     word ptr es:[bx+4], 0
mov     dx, ds:0BFAEh
mov     ax, ds:0BFACh
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
mov     ax, ds:0BE1Dh
mov     es:[bx+12h], ax
mov     dx, ds:0BF7Ch
mov     ax, ds:0BF7Ah
mov     es:[bx+1Ah], dx
mov     es:[bx+18h], ax
push    word ptr [bp+var_8+2]
push    bx
call    sub_2AB6A
les     bx, [bp+var_8]
mov     word ptr ds:0BF78h, es
mov     ds:0BF76h, bx
mov     word ptr ds:0BF7Ch, 0
mov     word ptr ds:0BF7Ah, 0
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46E60
inc     ax
push    ax
call    sub_3193F
mov     ds:0BFAEh, dx
mov     ds:0BFACh, ax
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46D76
mov     word ptr ds:0BE1Dh, 0
push    ds
mov     ax, 683Ch
push    ax
call    sub_2B0AB
les     bx, [bp+var_8]
mov     word ptr es:[bx+16h], 0
mov     byte ptr ds:0BE03h, 1
mov     word ptr ds:93CEh, 1
xor     ax, ax
push    ax
call    sub_1B476
cmp     byte ptr ds:22C1h, 0
jnz     short loc_2AD2F
cmp     byte ptr ds:22C0h, 0
jz      short loc_2AD49

loc_2AD2F:
mov     ax, ds:0BE1Fh
les     bx, [bp+var_8]
mov     es:[bx+14h], ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_359F0
mov     ds:0BE1Fh, ax

loc_2AD49:
mov     ax, 1

loc_2AD4C:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_2ABD3 endp



; Attributes: bp-based frame

sub_2AD53 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
push    word ptr es:[bx]
call    sub_467C8
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_31B9A
pop     bp
retn    4
sub_2AD53 endp

mov     ax, 0FFFFh
retn


; Attributes: bp-based frame

sub_2AD74 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ch
mov     ax, ds:0BE29h
or      ax, ds:0BE2Bh
jnz     short loc_2AD86
jmp     loc_2AEA2

loc_2AD86:
les     bx, ds:0BE29h
mov     ax, es:[bx]
cmp     ax, 0FFFDh
jz      short loc_2AD99
cmp     ax, 0FFFEh
jz      short loc_2AD99
jmp     short loc_2ADAB

loc_2AD99:
les     bx, ds:0BE29h
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2AB2C
jmp     loc_2AE91

loc_2ADAB:
mov     ax, ds:0BF7Ah
or      ax, ds:0BF7Ch
jz      short loc_2ADF9
cmp     [bp+arg_0], 0
jnz     short loc_2ADF0
les     bx, ds:0BF7Ah
push    word ptr es:[bx+6]
mov     ax, 24h ; '$'
push    ax
call    sub_312DE
add     sp, 4
jmp     short loc_2ADF0

loc_2ADD0:
les     bx, ds:0BF7Ah
mov     [bp+var_A], es
mov     [bp+var_C], bx
les     bx, es:[bx]
mov     word ptr ds:0BF7Ch, es
mov     ds:0BF7Ah, bx
push    [bp+var_A]
push    [bp+var_C]
call    sub_31B9A

loc_2ADF0:
mov     ax, ds:0BF7Ah
or      ax, ds:0BF7Ch
jnz     short loc_2ADD0

loc_2ADF9:
les     bx, ds:0BE29h
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, bx
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2AE11
jmp     loc_2AE96

loc_2AE11:
les     bx, ds:0BE29h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, es:[bx+18h]
mov     word ptr ds:0BF7Ch, es
mov     ds:0BF7Ah, bx
les     bx, [bp+var_8]
mov     ax, es:[bx+12h]
mov     ds:0BE1Dh, ax
cmp     [bp+arg_0], 0
jnz     short loc_2AE54
cmp     byte ptr ds:22C1h, 0
jnz     short loc_2AE45
cmp     byte ptr ds:22C0h, 0
jz      short loc_2AE54

loc_2AE45:
les     bx, [bp+var_8]
push    word ptr es:[bx+14h]
call    sub_35A9E
mov     ds:0BE1Fh, ax

loc_2AE54:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
mov     byte ptr ds:0BE03h, 1
mov     word ptr ds:93CEh, 1
les     bx, [bp+var_8]
les     bx, es:[bx+0Eh]
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
push    word ptr ds:0BE2Bh
push    word ptr ds:0BE29h
call    sub_2AD53
les     bx, [bp+var_4]
mov     word ptr ds:0BF78h, es
mov     ds:0BF76h, bx
push    word ptr [bp+var_4+2]
push    bx
call    sub_2AB2C

loc_2AE91:
mov     ax, 1
jmp     short loc_2AEA4

loc_2AE96:
les     bx, ds:0BE29h
push    word ptr es:[bx]
call    sub_467C8

loc_2AEA2:
xor     ax, ax

loc_2AEA4:
mov     sp, bp
pop     bp
retf    2
sub_2AD74 endp




sub_2AEAA proc far
mov     dx, ds:0BE2Bh
mov     ax, ds:0BE29h
cmp     dx, ds:0BF78h
jnz     short loc_2AECE
cmp     ax, ds:0BF76h
jnz     short loc_2AECE
les     bx, ds:0BF76h
mov     ax, ds:0BF6Eh
mov     dx, es:[bx+6]
sub     ax, dx
sbb     dx, dx
jmp     short loc_2AED6

loc_2AECE:
les     bx, ds:0BF76h
mov     ax, es:[bx+4]

loc_2AED6:
les     bx, ds:0BF76h
add     ax, es:[bx+16h]
mov     ds:0BFB6h, ax
retf
sub_2AEAA endp



; Attributes: bp-based frame

sub_2AEE2 proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
mov     byte ptr ds:9A63h, 3
mov     ax, 1Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     word ptr es:[bx], 0FFFFh
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_46E60
les     bx, [bp+var_8]
mov     es:[bx+2], ax
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+10h], 0
mov     word ptr es:[bx+0Eh], 0
mov     word ptr es:[bx+12h], 0
mov     word ptr es:[bx+1Ah], 0
mov     word ptr es:[bx+18h], 0
mov     word ptr ds:0BE2Bh, 0
mov     word ptr ds:0BE29h, 0
push    word ptr [bp+var_8+2]
push    bx
call    sub_2AB6A
les     bx, [bp+var_8]
mov     word ptr ds:0BF78h, es
mov     ds:0BF76h, bx
mov     word ptr ds:0BF7Ch, 0
mov     word ptr ds:0BF7Ah, 0
mov     word ptr ds:0BFAEh, 0
mov     word ptr ds:0BFACh, 0
mov     word ptr ds:0BE1Dh, 0
mov     word ptr ds:0BFB4h, 0
mov     word ptr es:[bx+16h], 0
call    sub_2690E
call    sub_26945
xor     ax, ax
push    ax
push    ax
push    [bp+arg_0]
call    sub_23062
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     byte ptr ds:0BED2h, 0
jz      short loc_2AFCB
cmp     [bp+arg_0], 2
jnz     short loc_2AFC0
cmp     byte ptr ds:0BED2h, 8
jz      short loc_2AFCB

loc_2AFC0:
mov     ax, 3Bh ; ';'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2AFCB:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     sp, bp
pop     bp
retf    6
sub_2AEE2 endp



; Attributes: bp-based frame

sub_2AFD7 proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
mov     ax, word ptr [bp+arg_8]
or      ax, word ptr [bp+arg_8+2]
jz      short loc_2B00B
les     bx, [bp+arg_8]
les     bx, es:[bx]
add     bx, 0FFF6h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_8]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_8]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_2B00B:
mov     ax, ds:0BF6Ah
or      ax, ds:0BF6Ch
jz      short loc_2B02C
les     bx, ds:0BF6Ah
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, es:[bx+0Ah]
mov     word ptr ds:0BF6Ch, es
mov     ds:0BF6Ah, bx
jmp     short loc_2B043

loc_2B02C:
mov     ax, 16h
push    ax
call    sub_3193F
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+var_C]
mov     word ptr es:[bx], 0FFFEh

loc_2B043:
les     bx, [bp+var_C]
mov     word ptr es:[bx+4], 0
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
xor     si, si
jmp     short loc_2B05D

loc_2B059:
inc     word ptr [bp+var_4]
inc     si

loc_2B05D:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jz      short loc_2B06C
test    byte ptr es:[bx], 80h
jz      short loc_2B059

loc_2B06C:
les     bx, [bp+var_C]
mov     es:[bx+2], si
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
mov     es:[bx+14h], dx
mov     es:[bx+12h], ax
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
push    word ptr [bp+var_C+2]
push    bx
call    sub_2AB6A
pop     si
mov     sp, bp
pop     bp
retf    0Ch
sub_2AFD7 endp



; Attributes: bp-based frame

sub_2B0AB proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     word ptr ds:6846h, es
mov     ds:6844h, bx
mov     word ptr ds:6842h, 0
push    word ptr [bp+arg_0+2]
push    bx
call    sub_46E60
mov     ds:6840h, ax
push    ds
mov     ax, 683Eh
push    ax
call    sub_2AB6A
pop     bp
retf    4
sub_2B0AB endp



; Attributes: bp-based frame

sub_2B0D7 proc far

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 10h
push    si

loc_2B0DE:
les     bx, ds:0BE29h
mov     ax, es:[bx]
sub     ax, 0FFFCh      ; switch 4 cases
cmp     ax, 3
ja      short def_2B0F1 ; jumptable 0002B0F1 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2B0F1[bx] ; switch jump
jpt_2B0F1 dw offset loc_2B3CE ; jump table for switch statement
dw offset loc_2B3C1
dw offset loc_2B195
dw offset loc_2B161

def_2B0F1:              ; jumptable 0002B0F1 default case
les     bx, ds:0BE29h
push    word ptr es:[bx]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
mov     ax, 400h
push    ax
call    sub_46BC5
mov     si, ax
or      si, si
jle     short loc_2B161 ; jumptable 0002B0F1 case -1
les     bx, ds:0BE29h
mov     ax, es:[bx+2]
add     es:[bx+16h], ax
mov     es:[bx+2], si
mov     word ptr es:[bx+4], 1
les     bx, es:[bx+6]
inc     bx
mov     word ptr ds:0BF70h, es
mov     ds:0BF6Eh, bx
les     bx, ds:0BE29h
les     bx, es:[bx+6]
add     bx, si
mov     word ptr ds:0BF68h, es
mov     ds:0BF66h, bx
les     bx, ds:0BE29h
les     bx, es:[bx+6]
mov     al, es:[bx]
mov     ah, 0
jmp     loc_2B3EC

loc_2B161:              ; jumptable 0002B0F1 case -1
les     bx, ds:0BE29h
mov     word ptr es:[bx+4], 1
mov     word ptr es:[bx+2], 2
mov     word ptr es:[bx+8], ds
mov     word ptr es:[bx+6], 684Ch
mov     word ptr ds:0BF70h, ds
mov     word ptr ds:0BF6Eh, 684Dh
mov     word ptr ds:0BF68h, ds
mov     word ptr ds:0BF66h, 684Eh
mov     ax, 0Dh
jmp     loc_2B3EC

loc_2B195:              ; jumptable 0002B0F1 case -2
les     bx, ds:0BE29h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, ds:0BF66h
mov     al, es:[bx]
mov     ah, 0
mov     si, ax
mov     ax, si
or      ax, ax
jz      short loc_2B1B3
jmp     loc_2B255

loc_2B1B3:
les     bx, [bp+var_8]
les     bx, es:[bx+12h]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, bx
or      ax, word ptr [bp+var_4+2]
jz      short loc_2B1F6
les     bx, es:[bx]
add     bx, 0FFF6h
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, [bp+var_10]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_2B1F6:
les     bx, [bp+var_8]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2AB2C

loc_2B204:
les     bx, [bp+var_8]
les     bx, es:[bx+0Eh]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, bx
or      ax, word ptr [bp+var_4+2]
jz      short loc_2B238
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_8]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_31B9A
jmp     short loc_2B204

loc_2B238:
mov     dx, ds:0BF6Ch
mov     ax, ds:0BF6Ah
les     bx, [bp+var_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     word ptr ds:0BF6Ch, es
mov     ds:0BF6Ah, bx
jmp     loc_2B3D3

loc_2B255:
les     bx, ds:0BF66h
inc     bx
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     ax, si
sub     ax, 0FCh        ; switch 4 cases
cmp     ax, 3
jbe     short loc_2B26D
jmp     def_2B271       ; jumptable 0002B271 default case

loc_2B26D:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2B271[bx] ; switch jump
jpt_2B271 dw offset loc_2B2EB ; jump table for switch statement
dw offset loc_2B288
dw offset loc_2B27E
dw offset loc_2B2F4

loc_2B27E:              ; jumptable 0002B271 case 254
xor     si, si
mov     byte ptr ds:0BE28h, 1
jmp     loc_2B344

loc_2B288:              ; jumptable 0002B271 case 253
les     bx, [bp+var_C]
mov     al, es:[bx]
mov     ah, 0
mov     si, ax
inc     word ptr [bp+var_C]
test    si, 80h
jz      short loc_2B2A1
cmp     si, 0FCh
jl      short loc_2B2B2

loc_2B2A1:
mov     ax, 25h ; '%'
push    ax
call    sub_312DE
inc     sp
inc     sp
dec     word ptr [bp+var_C]
jmp     loc_2B342

loc_2B2B2:
les     bx, [bp+var_8]
les     bx, es:[bx+0Eh]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
and     si, 7Fh
jmp     short loc_2B2D3

loc_2B2C5:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
dec     si

loc_2B2D3:
cmp     si, 1
jg      short loc_2B2C5
les     bx, [bp+var_4]
add     bx, 0Ah
mov     word ptr ds:0BDBFh, es
mov     ds:0BDBDh, bx
mov     si, 22h ; '"'
jmp     short loc_2B344

loc_2B2EB:              ; jumptable 0002B271 case 252
xor     si, si
mov     byte ptr ds:0BE26h, 1
jmp     short loc_2B344

loc_2B2F4:              ; jumptable 0002B271 case 255
les     bx, [bp+var_C]
mov     al, es:[bx]
mov     ah, 0
mov     si, ax
inc     word ptr [bp+var_C]
jmp     short loc_2B344

def_2B271:              ; jumptable 0002B271 default case
and     si, 7Fh
les     bx, [bp+var_8]
les     bx, es:[bx+0Eh]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
and     si, 7Fh
jmp     short loc_2B328

loc_2B31A:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
dec     si

loc_2B328:
cmp     si, 1
jg      short loc_2B31A
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
add     ax, 0Ah
push    dx
push    ax
push    cs
call    near ptr sub_2AFD7

loc_2B342:
xor     si, si

loc_2B344:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
les     bx, [bp+var_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, bx
cmp     dx, ds:0BE2Bh
jnz     short loc_2B376
cmp     ax, ds:0BE29h
jnz     short loc_2B376
les     bx, [bp+var_C]
mov     word ptr ds:0BF70h, es
mov     ds:0BF6Eh, bx
jmp     short loc_2B376

loc_2B373:
inc     word ptr [bp+var_C]

loc_2B376:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 0
jz      short loc_2B385
test    byte ptr es:[bx], 80h
jz      short loc_2B373

loc_2B385:
les     bx, [bp+var_8]
mov     word ptr es:[bx+4], 0
mov     ax, word ptr [bp+var_C]
mov     dx, es:[bx+6]
sub     ax, dx
sbb     dx, dx
mov     es:[bx+2], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, bx
cmp     dx, ds:0BE2Bh
jnz     short loc_2B3B9
cmp     ax, ds:0BE29h
jnz     short loc_2B3B9
les     bx, [bp+var_C]
mov     word ptr ds:0BF68h, es
mov     ds:0BF66h, bx

loc_2B3B9:
or      si, si
jz      short loc_2B3D3
mov     ax, si
jmp     short loc_2B3EC

loc_2B3C1:              ; jumptable 0002B0F1 case -3
push    word ptr ds:684Ah
push    word ptr ds:6848h
call    sub_2AB2C
jmp     short loc_2B3D3

loc_2B3CE:              ; jumptable 0002B0F1 case -4
mov     ax, 1Ah
jmp     short loc_2B3EC

loc_2B3D3:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B3DF
jmp     loc_2B0DE

loc_2B3DF:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B3EC:
pop     si
mov     sp, bp
pop     bp
retf
sub_2B0D7 endp



; Attributes: bp-based frame

sub_2B3F1 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    [bp+arg_6]
call    [bp+arg_2]
mov     ax, ds:0BDBDh
or      ax, ds:0BDBFh
jnz     short loc_2B40A
jmp     loc_2B4F5

loc_2B40A:
les     bx, ds:0BDBDh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2B45C

loc_2B416:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 20h ; ' '
jnz     short loc_2B426
cmp     byte ptr es:[bx+1], 0
jz      short loc_2B465

loc_2B426:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 22h ; '"'
jz      short loc_2B435
cmp     byte ptr es:[bx], 5Ch ; '\'
jnz     short loc_2B43D

loc_2B435:
mov     al, 5Ch ; '\'
push    ax
call    [bp+arg_2]
jmp     short loc_2B44F

loc_2B43D:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0FCh
jz      short loc_2B459
cmp     byte ptr es:[bx], 0FFh
jnz     short loc_2B44F
inc     word ptr [bp+var_4]

loc_2B44F:
les     bx, [bp+var_4]
mov     al, es:[bx]
push    ax
call    [bp+arg_2]

loc_2B459:
inc     word ptr [bp+var_4]

loc_2B45C:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_2B416

loc_2B465:
push    [bp+arg_6]
call    [bp+arg_2]
mov     word ptr ds:0BDBFh, 0
mov     word ptr ds:0BDBDh, 0
jmp     loc_2B4EA

loc_2B47A:
cmp     si, 5Ch ; '\'
jnz     short loc_2B4DC
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B490
push    cs
call    near ptr sub_2B0D7
mov     si, ax
jmp     short loc_2B49F

loc_2B490:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B49F:
cmp     si, 0Dh
jz      short loc_2B4AC
mov     al, 5Ch ; '\'
push    ax
call    [bp+arg_2]
jmp     short loc_2B4EF

loc_2B4AC:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B4BD
push    cs
call    near ptr sub_2B0D7
mov     si, ax
jmp     short loc_2B4CC

loc_2B4BD:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B4CC:
cmp     si, 0Ah
jz      short loc_2B4D5
dec     word ptr ds:0BF6Eh

loc_2B4D5:
call    sub_2717C
jmp     short loc_2B4F5

loc_2B4DC:
mov     al, byte ptr [bp+arg_6]
cbw
cmp     ax, si
jnz     short loc_2B4EF
mov     ax, si
push    ax
call    [bp+arg_2]

loc_2B4EA:
mov     ax, 1
jmp     short loc_2B53B

loc_2B4EF:
mov     ax, si
push    ax
call    [bp+arg_2]

loc_2B4F5:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B506
push    cs
call    near ptr sub_2B0D7
mov     si, ax
jmp     short loc_2B515

loc_2B506:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B515:
mov     ax, si
cmp     ax, 1Ah
jz      short loc_2B524
cmp     si, 0Dh
jz      short loc_2B524
jmp     loc_2B47A

loc_2B524:
cmp     [bp+arg_0], 0
jz      short loc_2B535
mov     ax, 6Fh ; 'o'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2B535:
dec     word ptr ds:0BF6Eh
xor     ax, ax

loc_2B53B:
pop     si
mov     sp, bp
pop     bp
retf    8
sub_2B3F1 endp

seg017 ends


; Segment type: Pure code
seg018 segment byte public 'CODE' use16
assume cs:seg018
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
push    bp
mov     bp, sp
pop     bp
retf    2


; Attributes: bp-based frame

sub_2B549 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]

loc_2B550:
cmp     si, 2Fh ; '/'
jnz     short loc_2B587
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B565
call    sub_2B0D7
jmp     short loc_2B572

loc_2B565:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B572:
cmp     ax, 2Ah ; '*'
jnz     short loc_2B57E
call    sub_2B687
jmp     short loc_2B59B

loc_2B57E:
dec     word ptr ds:0BF6Eh
mov     ax, 2Fh ; '/'
jmp     short loc_2B5C1

loc_2B587:
cmp     si, 20h ; ' '
jz      short loc_2B59B
cmp     si, 0Ah
jz      short loc_2B59B
cmp     si, 9
jz      short loc_2B59B
cmp     si, 0Bh
jnz     short loc_2B5BF

loc_2B59B:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B5AD
call    sub_2B0D7
mov     si, ax
jmp     short loc_2B5BC

loc_2B5AD:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B5BC:
jmp     loc_2B550

loc_2B5BF:
mov     ax, si

loc_2B5C1:
pop     si
pop     bp
retf    2
sub_2B549 endp



; Attributes: bp-based frame

sub_2B5C6 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
jmp     loc_2B670

loc_2B5CC:
cmp     [bp+arg_0], 2Fh ; '/'
jnz     short loc_2B601
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B5E2
call    sub_2B0D7
jmp     short loc_2B5EF

loc_2B5E2:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B5EF:
cmp     ax, 2Ah ; '*'
jnz     short loc_2B5FB
call    sub_2B687
jmp     short loc_2B650

loc_2B5FB:
dec     word ptr ds:0BF6Eh
jmp     short loc_2B650

loc_2B601:
cmp     [bp+arg_0], 5Ch ; '\'
jnz     short loc_2B630
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B617
call    sub_2B0D7
jmp     short loc_2B624

loc_2B617:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B624:
cmp     ax, 0Dh
jnz     short loc_2B650
call    sub_2717C
jmp     short loc_2B650

loc_2B630:
cmp     [bp+arg_0], 22h ; '"'
jz      short loc_2B63C
cmp     [bp+arg_0], 27h ; '''
jnz     short loc_2B650

loc_2B63C:
push    [bp+arg_0]
push    cs
mov     ax, 2
push    ax
xor     ax, ax
push    ax
call    sub_2B3F1
or      ax, ax
jz      short loc_2B683

loc_2B650:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B660
call    sub_2B0D7
jmp     short loc_2B66D

loc_2B660:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B66D:
mov     [bp+arg_0], ax

loc_2B670:
cmp     [bp+arg_0], 1Ah
jz      short loc_2B67F
cmp     [bp+arg_0], 0Dh
jz      short loc_2B67F
jmp     loc_2B5CC

loc_2B67F:
dec     word ptr ds:0BF6Eh

loc_2B683:
pop     bp
retf    2
sub_2B5C6 endp



; Attributes: bp-based frame

sub_2B687 proc far

var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     ax, ds:0BE1Dh
mov     [bp+var_2], ax
xor     di, di

loc_2B697:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B6A9
call    sub_2B0D7
mov     si, ax
jmp     short loc_2B6B8

loc_2B6A9:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B6B8:
cmp     si, 1Ah
jnz     short loc_2B6CF
push    [bp+var_2]
mov     ax, 39h ; '9'
push    ax
call    sub_312DE
add     sp, 4
jmp     loc_2B74C

loc_2B6CF:
cmp     si, 0Dh
jnz     short loc_2B6DB
call    sub_2717C
jmp     short loc_2B697

loc_2B6DB:
cmp     si, 2Fh ; '/'
jnz     short loc_2B713
cmp     byte ptr ds:22B8h, 0
jz      short loc_2B713
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B6F9
call    sub_2B0D7
mov     si, ax
jmp     short loc_2B708

loc_2B6F9:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B708:
mov     ax, si
cmp     ax, 2Ah ; '*'
jnz     short loc_2B6B8
inc     di
jmp     loc_2B697

loc_2B713:
cmp     si, 2Ah ; '*'
jz      short loc_2B71B
jmp     loc_2B697

loc_2B71B:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B72B
call    sub_2B0D7
jmp     short loc_2B738

loc_2B72B:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B738:
cmp     ax, 2Fh ; '/'
jnz     short loc_2B745
dec     di
or      di, di
jl      short loc_2B74C
jmp     loc_2B697

loc_2B745:
dec     word ptr ds:0BF6Eh
jmp     loc_2B697

loc_2B74C:
pop     di
pop     si
mov     sp, bp
pop     bp
retf
sub_2B687 endp

seg018 ends


; Segment type: Pure code
seg019 segment byte public 'CODE' use16
assume cs:seg019
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2B752 proc far

var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     [bp+var_2], ax
cmp     ax, 0Dh
jz      short loc_2B770
cmp     ax, 1Ah
jnz     short loc_2B779

loc_2B770:
mov     word ptr ds:0BF82h, 0
jmp     loc_2B830

loc_2B779:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
mov     di, 0BC78h
jmp     short loc_2B7AF

loc_2B789:
mov     al, byte ptr [bp+var_2]
mov     [di], al
inc     di
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B79F
call    sub_2B0D7
jmp     short loc_2B7AC

loc_2B79F:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2B7AC:
mov     [bp+var_2], ax

loc_2B7AF:
mov     bx, [bp+var_2]
test    byte ptr [bx-7EDFh], 0Ch
jnz     short loc_2B789
mov     byte ptr [di], 0
push    bx
call    sub_2B549
mov     [bp+var_2], ax
mov     si, 684Eh
jmp     short loc_2B804

loc_2B7CA:
push    ds
push    word ptr [si]
push    ds
mov     ax, 0BC78h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2B801
cmp     [bp+arg_0], 0
jz      short loc_2B7F4
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
push    [bp+var_2]
call    word ptr [si+3]
jmp     short loc_2B830

loc_2B7F4:
mov     al, [si+2]
cbw
mov     ds:0BF82h, ax
dec     word ptr ds:0BF6Eh
jmp     short loc_2B830

loc_2B801:
add     si, 5

loc_2B804:
mov     ax, si
mov     dx, ds
mov     bx, 688Ah
mov     cx, ds
cmp     ax, bx
jb      short loc_2B7CA
mov     word ptr ds:0BF82h, 0
push    ds
mov     ax, 0BC78h
push    ax
mov     ax, 26h ; '&'
push    ax
call    sub_312DE
add     sp, 6
push    [bp+var_2]
call    sub_2B5C6

loc_2B830:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_2B752 endp

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
mov     di, [bp+4]
cmp     di, 2Dh ; '-'
jz      short loc_2B855
cmp     di, 2Bh ; '+'
jz      short loc_2B855
cmp     di, 2Eh ; '.'
jz      short loc_2B855
jmp     loc_2B8D6

loc_2B855:
mov     [bp-6], di
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     di, ax
test    byte ptr [di-7EDFh], 0Ch
jnz     short loc_2B86D
jmp     loc_2B8D6

loc_2B86D:
push    di
call    sub_2C148
mov     di, ax
xor     si, si
mov     word ptr [bp-2], ds
mov     word ptr [bp-4], 4F62h
jmp     short loc_2B8C6

loc_2B87F:
les     bx, [bp-4]
mov     al, es:[bx]
cmp     al, ds:0BC78h
jnz     short loc_2B8C1
mov     al, es:[bx+1]
cmp     al, ds:0BC79h
jnz     short loc_2B8C1
mov     al, es:[bx+2]
cmp     al, ds:0BC7Ah
jnz     short loc_2B8C1
cmp     word ptr [bp-6], 2Eh ; '.'
jnz     short loc_2B8AF
mov     al, es:[bx+3]
mov     [si-415Ah], al
jmp     short loc_2B8C1

loc_2B8AF:
cmp     word ptr [bp-6], 2Bh ; '+'
jnz     short loc_2B8BC
mov     byte ptr [si-415Ah], 1
jmp     short loc_2B8C1

loc_2B8BC:
mov     byte ptr [si-415Ah], 0

loc_2B8C1:
add     word ptr [bp-4], 4
inc     si

loc_2B8C6:
les     bx, [bp-4]
cmp     byte ptr es:[bx], 0
jnz     short loc_2B87F
mov     ax, bx
or      ax, [bp-2]
jnz     short loc_2B8E7

loc_2B8D6:
push    ds
mov     ax, 689Eh
push    ax
mov     ax, 26h ; '&'
push    ax
call    sub_312DE
add     sp, 6

loc_2B8E7:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
mov     ax, [bp+4]
pop     bp
retn    2
push    bp
mov     bp, sp
mov     byte ptr ds:0BE25h, 1
mov     ax, [bp+4]
pop     bp
retn    2
push    bp
mov     bp, sp
push    si
mov     si, [bp+4]
cmp     si, 2Dh ; '-'
jnz     short loc_2B93C
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B928
call    sub_2B0D7
mov     si, ax
jmp     short loc_2B937

loc_2B928:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B937:
cmp     si, 76h ; 'v'
jz      short loc_2B94F

loc_2B93C:
push    ds
mov     ax, 689Eh
push    ax
mov     ax, 26h ; '&'
push    ax
call    sub_312DE
add     sp, 6
jmp     short loc_2B98E

loc_2B94F:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2B961
call    sub_2B0D7
mov     si, ax
jmp     short loc_2B970

loc_2B961:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_2B970:
cmp     si, 2Dh ; '-'
jnz     short loc_2B97C
mov     byte ptr ds:22C0h, 0
jmp     short loc_2B98E

loc_2B97C:
cmp     si, 2Eh ; '.'
jnz     short loc_2B989
mov     al, ds:0BE45h
mov     ds:22C0h, al
jmp     short loc_2B98E

loc_2B989:
mov     byte ptr ds:22C0h, 1

loc_2B98E:
mov     ax, si
pop     si
pop     bp
retn    2
push    bp
mov     bp, sp
sub     sp, 18h
push    si
mov     si, [bp+4]
push    ss
lea     ax, [bp-14h]
push    ax
push    ds
mov     ax, 688Ah
push    ax
mov     cx, 14h
call    sub_46BE5
test    byte ptr [si-7EDFh], 0Ch
jz      short loc_2BA02
push    si
call    sub_2C148
push    ax
call    sub_2B549
mov     si, ax
mov     bx, ss
mov     es, bx
lea     bx, [bp-14h]
mov     word ptr [bp-16h], es
mov     [bp-18h], bx
jmp     short loc_2B9F8

loc_2B9D3:
push    ds
mov     ax, 0BC78h
push    ax
push    ds
les     bx, [bp-18h]
push    word ptr es:[bx+2]
call    sub_46D55
or      ax, ax
jnz     short loc_2B9F4
push    si
les     bx, [bp-18h]
call    word ptr es:[bx]
mov     si, ax
jmp     short loc_2BA02

loc_2B9F4:
add     word ptr [bp-18h], 4

loc_2B9F8:
les     bx, [bp-18h]
cmp     word ptr es:[bx+2], 0
jnz     short loc_2B9D3

loc_2BA02:
push    si
call    sub_2B5C6
pop     si
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
mov     word ptr ds:0BF8Ch, 9A78h
mov     bx, ds:0BF8Ch
mov     byte ptr [bx], 0
jmp     short loc_2BA49

loc_2BA21:
push    word ptr [bp+4]
call    sub_27D32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2BA39
call    sub_2B0D7
jmp     short loc_2BA46

loc_2BA39:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2BA46:
mov     [bp+4], ax

loc_2BA49:
cmp     word ptr [bp+4], 1Ah
jz      short loc_2BA55
cmp     word ptr [bp+4], 0Dh
jnz     short loc_2BA21

loc_2BA55:
push    ds
mov     ax, 9A78h
push    ax
mov     ax, 8
push    ax
call    sub_3129B
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     word ptr ds:0BF8Ch, 9A78h
cmp     word ptr [bp+4], 3Ch ; '<'
jz      short loc_2BA86
cmp     word ptr [bp+4], 22h ; '"'
jz      short loc_2BA86
jmp     loc_2BAF1

loc_2BA86:
mov     byte ptr ds:9A78h, 0
cmp     word ptr [bp+4], 3Ch ; '<'
jnz     short loc_2BA96
mov     di, 3Eh ; '>'
jmp     short loc_2BA99

loc_2BA96:
mov     di, 22h ; '"'

loc_2BA99:
push    word ptr [bp+4]
call    sub_27D32
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2BAB1
call    sub_2B0D7
jmp     short loc_2BABE

loc_2BAB1:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2BABE:
mov     [bp+4], ax
cmp     ax, 1Ah
jz      short loc_2BACF
cmp     ax, 0Dh
jz      short loc_2BACF
cmp     ax, di
jnz     short loc_2BA99

loc_2BACF:
mov     ax, [bp+4]
cmp     ax, di
jnz     short loc_2BAE1
push    ax
call    sub_27D32
mov     word ptr [bp+4], 20h ; ' '

loc_2BAE1:
mov     word ptr ds:0BF8Ch, 9A78h
push    word ptr [bp+4]
call    sub_2B5C6
jmp     short loc_2BB02

loc_2BAF1:
dec     word ptr ds:0BF6Eh
xor     ax, ax
push    ax
push    ax
mov     ax, 1
push    ax
call    sub_26FF8

loc_2BB02:
call    sub_2BBF7
mov     si, ax
push    ds
push    si
call    sub_46E60
add     ax, si
dec     ax
mov     [bp-2], ax
cmp     byte ptr [si], 22h ; '"'
jz      short loc_2BB2C
cmp     byte ptr [si], 3Ch ; '<'
jz      short loc_2BB2C
mov     ax, 27h ; '''
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2BBEF

loc_2BB2C:
cmp     byte ptr [si], 22h ; '"'
jnz     short loc_2BB39
mov     bx, [bp-2]
cmp     byte ptr [bx], 22h ; '"'
jnz     short loc_2BB46

loc_2BB39:
cmp     byte ptr [si], 3Ch ; '<'
jnz     short loc_2BB54
mov     bx, [bp-2]
cmp     byte ptr [bx], 3Eh ; '>'
jz      short loc_2BB54

loc_2BB46:
mov     ax, 28h ; '('
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2BBEF

loc_2BB54:
mov     al, [si]
cbw
mov     di, ax
mov     bx, [bp-2]
mov     byte ptr [bx], 0
inc     si
push    ds
push    si
call    sub_46E60
cmp     ax, 101h
jb      short loc_2BB7A
mov     ax, 23h ; '#'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2BBEF

loc_2BB7A:
push    ds
mov     ax, 0BC78h
push    ax
push    ds
push    si
call    sub_46D76
push    ds
mov     ax, 0BC78h
push    ax
call    sub_25E94
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 0BC78h
push    ax
call    sub_46D76
cmp     di, 22h ; '"'
jz      short loc_2BBC3
cmp     byte ptr ds:0BC79h, 3Ah ; ':'
jz      short loc_2BBC3
cmp     byte ptr ds:0BC78h, 2Fh ; '/'
jz      short loc_2BBC3
cmp     byte ptr ds:0BC78h, 5Ch ; '\'
jz      short loc_2BBC3
les     bx, ds:2300h
cmp     byte ptr es:[bx], 0
jnz     short loc_2BBD1

loc_2BBC3:
push    ds
mov     ax, 0BC78h
push    ax
call    sub_2ABD3
or      ax, ax
jnz     short loc_2BBEB

loc_2BBD1:
call    sub_25ECA
or      ax, ax
jnz     short loc_2BBEB
push    ds
mov     ax, 0BC78h
push    ax
mov     ax, 29h ; ')'
push    ax
call    sub_312DE
add     sp, 6

loc_2BBEB:
call    dword ptr ds:0C054h

loc_2BBEF:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2



sub_2BBF7 proc near
push    si
cmp     byte ptr ds:9A78h, 0
jnz     short loc_2BC04
mov     ax, 9A78h
jmp     short loc_2BC60

loc_2BC04:
push    ds
mov     ax, 9A78h
push    ax
call    sub_46E60
mov     si, ax
add     si, 9A77h
jmp     short loc_2BC17

loc_2BC16:
dec     si

loc_2BC17:
mov     ax, si
mov     dx, ds
mov     bx, 9A78h
mov     cx, ds
cmp     ax, bx
jb      short loc_2BC33
cmp     byte ptr [si], 20h ; ' '
jz      short loc_2BC16
cmp     byte ptr [si], 0Dh
jz      short loc_2BC16
cmp     byte ptr [si], 9
jz      short loc_2BC16

loc_2BC33:
mov     ax, si
mov     dx, ds
mov     bx, 9A78h
mov     cx, ds
cmp     ax, bx
ja      short loc_2BC45
cmp     byte ptr [si], 20h ; ' '
jz      short loc_2BC4B

loc_2BC45:
mov     byte ptr [si+1], 0
jmp     short loc_2BC4E

loc_2BC4B:
mov     byte ptr [si], 0

loc_2BC4E:
mov     si, 9A78h
jmp     short loc_2BC54

loc_2BC53:
inc     si

loc_2BC54:
cmp     byte ptr [si], 20h ; ' '
jz      short loc_2BC53
cmp     byte ptr [si], 9
jz      short loc_2BC53
mov     ax, si

loc_2BC60:
pop     si
retn
sub_2BBF7 endp

push    bp
mov     bp, sp
sub     sp, 36h
push    si
push    di
mov     si, [bp+4]
test    byte ptr [si-7EDFh], 0Ch
jnz     short loc_2BC87
cmp     si, 5Fh ; '_'
jz      short loc_2BC87
mov     ax, 2Ch ; ','
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2BD94

loc_2BC87:
push    si
call    sub_2C148
mov     si, ax
push    ds
mov     ax, 0BC78h
push    ax
call    sub_2C78D
or      ax, ax
jz      short loc_2BCA6
mov     ax, 2Ch ; ','
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2BCA6:
push    ss
lea     ax, [bp-2Ah]
push    ax
push    ds
mov     ax, 0BC78h
push    ax
call    sub_46D76
mov     di, 0FFFFh
cmp     si, 28h ; '('
jz      short loc_2BCC3
dec     word ptr ds:0BF6Eh
jmp     short loc_2BCE5

loc_2BCC3:
mov     word ptr [bp-2Ch], 0
mov     word ptr [bp-2Eh], 0
xor     di, di
mov     [bp-30h], di
mov     [bp-32h], di
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     si, ax
cmp     si, 29h ; ')'
jnz     short loc_2BCF2

loc_2BCE5:
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_26FF8
jmp     loc_2BDFD

loc_2BCF2:
test    byte ptr [si-7EDFh], 0Ch
jnz     short loc_2BD0C
cmp     si, 5Fh ; '_'
jz      short loc_2BD0C
mov     ax, 2Dh ; '-'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2BD94

loc_2BD0C:
push    si
call    sub_2C148
mov     si, ax
push    ds
mov     ax, 0BC78h
push    ax
call    sub_46E60
add     ax, 0Bh
push    ax
call    sub_31B55
mov     [bp-34h], dx
mov     [bp-36h], ax
les     bx, [bp-36h]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
add     ax, 0Ah
push    dx
push    ax
push    ds
mov     ax, 0BC78h
push    ax
call    sub_46D76
mov     ax, [bp-32h]
or      ax, [bp-30h]
jz      short loc_2BD64
mov     dx, [bp-34h]
mov     ax, [bp-36h]
les     bx, [bp-32h]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     short loc_2BD6D

loc_2BD64:
les     bx, [bp-36h]
mov     word ptr [bp-2Ch], es
mov     [bp-2Eh], bx

loc_2BD6D:
inc     di
les     bx, [bp-36h]
mov     word ptr [bp-30h], es
mov     [bp-32h], bx
push    si
call    sub_2B549
mov     si, ax
cmp     si, 29h ; ')'
jz      short loc_2BDAB
cmp     si, 2Ch ; ','
jz      short loc_2BD9D
mov     ax, 2Eh ; '.'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2BD94:
push    si
call    sub_2B5C6
jmp     loc_2BE3F

loc_2BD9D:
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     si, ax
jmp     loc_2BCF2

loc_2BDAB:
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     si, ax
dec     word ptr ds:0BF6Eh
mov     word ptr ds:0BF8Ch, 9A78h
mov     bx, ds:0BF8Ch
mov     byte ptr [bx], 0
push    word ptr [bp-2Ch]
push    word ptr [bp-2Eh]
xor     ax, ax
push    ax
call    sub_26FF8

loc_2BDD5:
les     bx, [bp-2Eh]
les     bx, es:[bx+4]
mov     word ptr [bp-30h], es
mov     [bp-32h], bx
push    word ptr [bp-2Ch]
push    word ptr [bp-2Eh]
call    sub_31B9A
les     bx, [bp-32h]
mov     word ptr [bp-2Ch], es
mov     [bp-2Eh], bx
mov     ax, bx
or      ax, [bp-2Ch]
jnz     short loc_2BDD5

loc_2BDFD:
call    sub_2BBF7
mov     bx, ax
mov     ax, ds
mov     es, ax
mov     word ptr [bp-6], es
mov     [bp-8], bx
push    word ptr [bp-6]
push    bx
call    sub_46E60
les     bx, [bp-8]
add     bx, ax
mov     word ptr [bp-2], es
mov     [bp-4], bx
mov     byte ptr es:[bx], 20h ; ' '
inc     word ptr [bp-4]
mov     bx, [bp-4]
mov     byte ptr es:[bx], 0
push    ss
lea     ax, [bp-2Ah]
push    ax
push    word ptr [bp-6]
push    word ptr [bp-8]
push    di
call    sub_2C313

loc_2BE3F:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
push    si
mov     si, [bp+4]
test    byte ptr [si-7EDFh], 0Ch
jnz     short loc_2BE6D
cmp     si, 5Fh ; '_'
jz      short loc_2BE6D
mov     ax, 2Fh ; '/'
push    ax
call    sub_312DE
inc     sp
inc     sp
push    si
call    sub_2B5C6
jmp     short loc_2BE9A

loc_2BE6D:
push    si
call    sub_2C148
push    ax
call    sub_2B5C6
push    ds
mov     ax, 0BC78h
push    ax
call    sub_2C78D
or      ax, ax
jz      short loc_2BE90
mov     ax, 2Fh ; '/'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2BE90:
push    ds
mov     ax, 0BC78h
push    ax
call    sub_2C42D

loc_2BE9A:
pop     si
pop     bp
retn    2


; Attributes: bp-based frame

sub_2BE9F proc near

var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 8
push    ax
call    sub_31B55
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, ds:0BF7Ch
mov     ax, ds:0BF7Ah
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, [bp+arg_0]
mov     es:[bx+4], ax
mov     ax, ds:0BE1Dh
dec     ax
mov     es:[bx+6], ax
mov     word ptr ds:0BF7Ch, es
mov     ds:0BF7Ah, bx
mov     sp, bp
pop     bp
retn    2
sub_2BE9F endp

push    bp
mov     bp, sp
dec     word ptr ds:0BF6Eh
mov     ax, 5
push    ax
call    sub_23348
mov     [bp+4], ax
dec     word ptr ds:0BF6Eh
or      ax, ax
jz      short loc_2BF06
mov     ax, ds:0BED8h
or      ax, ds:0BEDAh
jnz     short loc_2BF29

loc_2BF06:
mov     ax, 2
push    ax
xor     ax, ax
push    ax
call    sub_2C1B8
cmp     word ptr ds:0BF82h, 8
jnz     short loc_2BF22
mov     ax, 2
push    ax
call    sub_2BE9F
jmp     short loc_2BF30

loc_2BF22:
cmp     word ptr ds:0BF82h, 0Ah
jnz     short loc_2BF30

loc_2BF29:
mov     ax, 1
push    ax
call    sub_2BE9F

loc_2BF30:
pop     bp
retn    2
push    bp
mov     bp, sp
push    si
mov     si, [bp+4]
test    byte ptr [si-7EDFh], 0Ch
jnz     short loc_2BF5A
cmp     si, 5Fh ; '_'
jz      short loc_2BF5A
mov     ax, 31h ; '1'
push    ax
call    sub_312DE
inc     sp
inc     sp
push    si
call    sub_2B5C6
jmp     short loc_2BF72

loc_2BF5A:
push    si
call    sub_2C148
push    ax
call    sub_2B5C6
push    ds
mov     ax, 0BC78h
push    ax
call    sub_2C486
or      ax, ax
jz      short loc_2BF7B

loc_2BF72:
mov     ax, 1
push    ax
call    sub_2BE9F
jmp     short loc_2BF93

loc_2BF7B:
mov     ax, 1
push    ax
push    ax
call    sub_2C1B8
cmp     word ptr ds:0BF82h, 8
jnz     short loc_2BF93
mov     ax, 2
push    ax
call    sub_2BE9F

loc_2BF93:
pop     si
pop     bp
retn    2
push    bp
mov     bp, sp
push    si
mov     si, [bp+4]
test    byte ptr [si-7EDFh], 0Ch
jnz     short loc_2BFBE
cmp     si, 5Fh ; '_'
jz      short loc_2BFBE
mov     ax, 32h ; '2'
push    ax
call    sub_312DE
inc     sp
inc     sp
push    si
call    sub_2B5C6
jmp     short loc_2BFD6

loc_2BFBE:
push    si
call    sub_2C148
push    ax
call    sub_2B5C6
push    ds
mov     ax, 0BC78h
push    ax
call    sub_2C486
or      ax, ax
jnz     short loc_2BFDF

loc_2BFD6:
mov     ax, 1
push    ax
call    sub_2BE9F
jmp     short loc_2BFF7

loc_2BFDF:
mov     ax, 1
push    ax
push    ax
call    sub_2C1B8
cmp     word ptr ds:0BF82h, 8
jnz     short loc_2BFF7
mov     ax, 2
push    ax
call    sub_2BE9F

loc_2BFF7:
pop     si
pop     bp
retn    2
push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:0BF7Ah
or      ax, ds:0BF7Ch
jz      short loc_2C049
les     bx, ds:0BF7Ah
cmp     word ptr es:[bx+4], 1
jnz     short loc_2C049
push    word ptr [bp+4]
call    sub_2B5C6
xor     ax, ax
push    ax
push    ax
call    sub_2C1B8
les     bx, ds:0BF7Ah
mov     word ptr [bp-2], es
mov     [bp-4], bx
les     bx, es:[bx]
mov     word ptr ds:0BF7Ch, es
mov     ds:0BF7Ah, bx
push    word ptr [bp-2]
push    word ptr [bp-4]
call    sub_31B9A
jmp     short loc_2C05C

loc_2C049:
push    word ptr [bp+4]
call    sub_2B5C6
mov     ax, 33h ; '3'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2C05C:
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:0BF7Ah
or      ax, ds:0BF7Ch
jz      short loc_2C0C1
les     bx, ds:0BF7Ah
cmp     word ptr es:[bx+4], 1
jnz     short loc_2C0C1
push    word ptr [bp+4]
call    sub_2B5C6

loc_2C084:
mov     ax, 2
push    ax
mov     ax, 1
push    ax
call    sub_2C1B8
cmp     word ptr ds:0BF82h, 0Ah
jz      short loc_2C084
cmp     word ptr ds:0BF82h, 8
jz      short loc_2C084
les     bx, ds:0BF7Ah
mov     word ptr [bp-2], es
mov     [bp-4], bx
les     bx, es:[bx]
mov     word ptr ds:0BF7Ch, es
mov     ds:0BF7Ah, bx
push    word ptr [bp-2]
push    word ptr [bp-4]
call    sub_31B9A
jmp     short loc_2C0D4

loc_2C0C1:
push    word ptr [bp+4]
call    sub_2B5C6
mov     ax, 30h ; '0'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2C0D4:
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:0BF7Ah
or      ax, ds:0BF7Ch
jz      short loc_2C10B
les     bx, ds:0BF7Ah
mov     word ptr [bp-2], es
mov     [bp-4], bx
les     bx, es:[bx]
mov     word ptr ds:0BF7Ch, es
mov     ds:0BF7Ah, bx
push    word ptr [bp-2]
push    word ptr [bp-4]
call    sub_31B9A
jmp     short loc_2C116

loc_2C10B:
mov     ax, 34h ; '4'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2C116:
push    word ptr [bp+4]
call    sub_2B5C6
mov     sp, bp
pop     bp
retn    2
push    bp
mov     bp, sp
mov     word ptr ds:0BF8Ch, 9A78h
dec     word ptr ds:0BF6Eh
xor     ax, ax
push    ax
push    ax
mov     ax, 1
push    ax
call    sub_26FF8
mov     word ptr ds:0BF8Ch, 9A78h
pop     bp
retn    2


; Attributes: bp-based frame

sub_2C148 proc near

var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
mov     word ptr [bp+var_4+2], ds
mov     word ptr [bp+var_4], 0BC78h
jmp     short loc_2C194

loc_2C158:
mov     al, ds:22BCh
cbw
add     ax, 0BC78h
mov     dx, ds
mov     dx, word ptr [bp+var_4]
cmp     ax, dx
jbe     short loc_2C174
mov     al, byte ptr [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx], al
inc     word ptr [bp+var_4]

loc_2C174:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2C184
call    sub_2B0D7
jmp     short loc_2C191

loc_2C184:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2C191:
mov     [bp+arg_0], ax

loc_2C194:
mov     bx, [bp+arg_0]
test    byte ptr [bx-7EDFh], 0Eh
jnz     short loc_2C158
cmp     bx, 5Fh ; '_'
jz      short loc_2C158
cmp     bx, 24h ; '$'
jz      short loc_2C158
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 0
mov     ax, [bp+arg_0]
mov     sp, bp
pop     bp
retn    2
sub_2C148 endp



; Attributes: bp-based frame

sub_2C1B8 proc far

var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     ax, ds:0BE1Dh
mov     [bp+var_2], ax
xor     si, si

loc_2C1C8:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2C1D8
call    sub_2B0D7
jmp     short loc_2C1E5

loc_2C1D8:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_2C1E5:
push    ax
call    sub_2B549
mov     di, ax
cmp     di, 1Ah
jnz     short loc_2C204
push    [bp+var_2]
mov     ax, 24h ; '$'
push    ax
call    sub_312DE
add     sp, 4
jmp     loc_2C30B

loc_2C204:
cmp     di, 23h ; '#'
jz      short loc_2C20C
jmp     loc_2C2CC

loc_2C20C:
xor     ax, ax
push    ax
push    cs
call    near ptr sub_2B752
cmp     word ptr ds:0BF82h, 7
jz      short loc_2C228
cmp     word ptr ds:0BF82h, 4
jz      short loc_2C228
cmp     word ptr ds:0BF82h, 5
jnz     short loc_2C22C

loc_2C228:
inc     si
jmp     loc_2C2AB

loc_2C22C:
cmp     word ptr ds:0BF82h, 6
jz      short loc_2C250
cmp     word ptr ds:0BF82h, 8
jnz     short loc_2C267
or      si, si
jnz     short loc_2C267
cmp     [bp+arg_2], 1
jz      short loc_2C250
cmp     [bp+arg_2], 2
jnz     short loc_2C25A
cmp     [bp+arg_0], 0
jnz     short loc_2C253

loc_2C250:
dec     si
jmp     short loc_2C2AB

loc_2C253:
mov     [bp+arg_2], 0
jmp     short loc_2C2AB

loc_2C25A:
mov     ax, 33h ; '3'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_2C2AB

loc_2C267:
cmp     word ptr ds:0BF82h, 0Ah
jnz     short loc_2C2AB
or      si, si
jnz     short loc_2C2AB
cmp     [bp+arg_2], 2
jz      short loc_2C285
mov     ax, 30h ; '0'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_2C2AB

loc_2C285:
cmp     [bp+arg_0], 0
jnz     short loc_2C2AB
dec     word ptr ds:0BF6Eh
mov     ax, 5
push    ax
call    sub_23348
or      ax, ax
jnz     short loc_2C29F
jmp     loc_2C1C8

loc_2C29F:
mov     ax, ds:0BED8h
or      ax, ds:0BEDAh
jnz     short loc_2C307
jmp     loc_2C1C8

loc_2C2AB:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2C2BD
call    sub_2B0D7
mov     di, ax
jmp     short loc_2C2CC

loc_2C2BD:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     di, ax

loc_2C2CC:
push    di
call    sub_2B5C6
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_2C2E4
call    sub_2B0D7
mov     di, ax
jmp     short loc_2C2F3

loc_2C2E4:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     di, ax

loc_2C2F3:
or      si, si
jl      short loc_2C307
cmp     di, 0Dh
jz      short loc_2C2FF
jmp     loc_2C1C8

loc_2C2FF:
call    sub_2717C
jmp     loc_2C1C8

loc_2C307:
dec     word ptr ds:0BF6Eh

loc_2C30B:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_2C1B8 endp

seg019 ends


; Segment type: Pure code
seg020 segment byte public 'CODE' use16
assume cs:seg020
;org 3
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2C313 proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 0Ch
push    [bp+arg_8]
push    [bp+arg_6]
xor     ax, ax
push    ax
call    sub_2A9CF
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+var_C]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     ax, bx
or      ax, word ptr [bp+var_8+2]
jnz     short loc_2C344
jmp     loc_2C3BB

loc_2C344:
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_2C3BB
push    [bp+arg_4]
push    [bp+arg_2]
mov     dx, word ptr [bp+var_8+2]
mov     ax, bx
add     ax, 0Ah
push    dx
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2C371
les     bx, [bp+var_8]
mov     al, es:[bx+9]
cbw
cmp     ax, [bp+arg_0]
jz      short loc_2C3B3

loc_2C371:
les     bx, [bp+var_8]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_C]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_31B9A
les     bx, [bp+var_C]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
push    [bp+arg_8]
push    [bp+arg_6]
mov     ax, 0BAh
push    ax
call    sub_31324
add     sp, 6
jmp     short loc_2C3BB

loc_2C3B3:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
jmp     short loc_2C427

loc_2C3BB:
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_46E60
add     ax, 0Bh
push    ax
call    sub_31B55
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
add     ax, 0Ah
push    dx
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_46D76
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+var_C]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, bx
add     ax, 0Ah
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     al, byte ptr [bp+arg_0]
mov     es:[bx+9], al
mov     byte ptr es:[bx+8], 0Ch
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx

loc_2C427:
mov     sp, bp
pop     bp
retf    0Ah
sub_2C313 endp



; Attributes: bp-based frame

sub_2C42D proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_2A9CF
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     ax, bx
or      ax, [bp+var_2]
jz      short loc_2C480
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_2C480
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_8]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
push    [bp+var_2]
push    [bp+var_4]
call    sub_31B9A

loc_2C480:
mov     sp, bp
pop     bp
retf    4
sub_2C42D endp



; Attributes: bp-based frame

sub_2C486 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2C78D
or      ax, ax
jz      short loc_2C4A0
mov     ax, 1
jmp     short loc_2C4D1

loc_2C4A0:
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_2A9CF
mov     bx, ax
mov     es, dx
les     bx, es:[bx+4]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     ax, bx
or      ax, [bp+var_2]
jz      short loc_2C4CF
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_2C4CF
mov     ax, 1
jmp     short loc_2C4D1

loc_2C4CF:
xor     ax, ax

loc_2C4D1:
mov     sp, bp
pop     bp
retf    4
sub_2C486 endp



; Attributes: bp-based frame

sub_2C4D7 proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 8
push    ds
push    word ptr ds:0BF8Ch
xor     ax, ax
push    ax
call    sub_2A9CF
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     word ptr ds:0BF86h, es
mov     ds:0BF84h, bx
mov     bx, ax
les     bx, es:[bx+4]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     ax, bx
or      ax, [bp+var_2]
jz      short loc_2C51A
cmp     byte ptr es:[bx+8], 0Ch
jnz     short loc_2C51A
mov     ax, 1
jmp     short loc_2C51C

loc_2C51A:
xor     ax, ax

loc_2C51C:
mov     sp, bp
pop     bp
retf
sub_2C4D7 endp



; Attributes: bp-based frame

sub_2C520 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
mov     si, 1
jmp     short loc_2C54E

loc_2C529:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 0Ah
push    dx
push    ax
push    ds
push    word ptr ds:0BF8Ch
call    sub_2C569
or      ax, ax
jnz     short loc_2C556
inc     si
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_2C54E:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_2C529

loc_2C556:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2C562
mov     ax, si
jmp     short loc_2C564

loc_2C562:
xor     ax, ax

loc_2C564:
pop     si
pop     bp
retf    4
sub_2C520 endp



; Attributes: bp-based frame

sub_2C569 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    si
xor     si, si
jmp     short loc_2C593

loc_2C571:
les     bx, [bp+arg_4]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jz      short loc_2C583
xor     ax, ax
jmp     short loc_2C59E

loc_2C583:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 0
jz      short loc_2C59B
inc     si
inc     word ptr [bp+arg_4]
inc     word ptr [bp+arg_0]

loc_2C593:
mov     al, ds:22BCh
cbw
cmp     ax, si
jg      short loc_2C571

loc_2C59B:
mov     ax, 1

loc_2C59E:
pop     si
pop     bp
retn    8
sub_2C569 endp

seg020 ends


; Segment type: Pure code
seg021 segment byte public 'CODE' use16
assume cs:seg021
;org 3
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2C5A3 proc far

var_1A= dword ptr -1Ah
var_16= dword ptr -16h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= dword ptr -0Eh
var_A= dword ptr -0Ah
var_5= byte ptr -5
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 1Ah
push    si
les     bx, ds:0BF84h
les     bx, es:[bx+4]
mov     word ptr [bp+var_1A+2], es
mov     word ptr [bp+var_1A], bx
cmp     byte ptr es:[bx+9], 0FFh
jnz     short loc_2C5C2
jmp     loc_2C649

loc_2C5C2:
mov     [bp+var_10], 0
mov     [bp+var_12], 0
mov     word ptr [bp+var_E+2], 0
mov     word ptr [bp+var_E], 0

loc_2C5D6:
mov     ax, 20h ; ' '
push    ax
call    sub_2B549
mov     [bp+var_5], al
cmp     byte ptr ds:0BDB7h, 0
jnz     short loc_2C5EF
cmp     [bp+var_5], 0Dh
jz      short loc_2C5D6

loc_2C5EF:
cmp     [bp+var_5], 28h ; '('
jz      short loc_2C5FE
dec     word ptr ds:0BF6Eh
xor     ax, ax
jmp     loc_2C770

loc_2C5FE:
les     bx, [bp+var_1A]
mov     al, es:[bx+9]
cbw
mov     si, ax
mov     bx, ds:0BF8Ch
mov     ax, ds
mov     es, ax
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
call    sub_27092
mov     [bp+var_5], al
jmp     short loc_2C623

loc_2C620:
inc     word ptr [bp+var_A]

loc_2C623:
les     bx, [bp+var_A]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_2C620
cmp     byte ptr es:[bx], 0
jnz     short loc_2C666
cmp     [bp+var_5], 29h ; ')'
jnz     short loc_2C666
or      si, si
jz      short loc_2C649
les     bx, [bp+var_1A]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2C775

loc_2C649:
push    word ptr [bp+var_1A+2]
push    word ptr [bp+var_1A]
xor     ax, ax
push    ax
push    ax
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 0Ah
push    dx
push    ax
call    sub_2AFD7
jmp     loc_2C76D

loc_2C666:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_46E60
les     bx, [bp+var_A]
add     bx, ax
dec     bx
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2C682

loc_2C67F:
dec     word ptr [bp+var_4]

loc_2C682:
mov     ax, word ptr [bp+var_4]
cmp     ax, word ptr [bp+var_A]
jb      short loc_2C693
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_2C67F

loc_2C693:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0
or      si, si
jnz     short loc_2C6AF
les     bx, [bp+var_1A]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2C775
jmp     loc_2C76D

loc_2C6AF:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_46E60
add     ax, 0Bh
push    ax
call    sub_31B55
mov     word ptr [bp+var_16+2], dx
mov     word ptr [bp+var_16], ax
add     ax, 0Ah
push    dx
push    ax
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_46D76
mov     ax, word ptr [bp+var_E]
or      ax, word ptr [bp+var_E+2]
jz      short loc_2C6F4
mov     dx, word ptr [bp+var_16+2]
mov     ax, word ptr [bp+var_16]
les     bx, [bp+var_E]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     short loc_2C6FD

loc_2C6F4:
les     bx, [bp+var_16]
mov     [bp+var_10], es
mov     [bp+var_12], bx

loc_2C6FD:
les     bx, [bp+var_16]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
dec     si
cmp     [bp+var_5], 2Ch ; ','
jnz     short loc_2C740
mov     bx, ds:0BF8Ch
mov     ax, ds
mov     es, ax
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
call    sub_27092
mov     [bp+var_5], al
jmp     short loc_2C734

loc_2C731:
inc     word ptr [bp+var_A]

loc_2C734:
les     bx, [bp+var_A]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_2C731
jmp     loc_2C666

loc_2C740:
or      si, si
jz      short loc_2C751
les     bx, [bp+var_1A]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2C775

loc_2C751:
push    word ptr [bp+var_1A+2]
push    word ptr [bp+var_1A]
push    [bp+var_10]
push    [bp+var_12]
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 0Ah
push    dx
push    ax
call    sub_2AFD7

loc_2C76D:
mov     ax, 1

loc_2C770:
pop     si
mov     sp, bp
pop     bp
retf
sub_2C5A3 endp



; Attributes: bp-based frame

sub_2C775 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 38h ; '8'
push    ax
call    sub_312DE
mov     sp, bp
pop     bp
retn    4
sub_2C775 endp



; Attributes: bp-based frame

sub_2C78D proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 5Fh ; '_'
jz      short loc_2C79C
jmp     loc_2C82E

loc_2C79C:
cmp     byte ptr es:[bx+1], 5Fh ; '_'
jz      short loc_2C7A6
jmp     loc_2C82E

loc_2C7A6:
add     word ptr [bp+arg_0], 2
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ds
mov     ax, 6902h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2C7CA
cmp     byte ptr ds:22B6h, 0
jz      short loc_2C7CA
mov     ax, 1
jmp     short loc_2C830

loc_2C7CA:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ds
mov     ax, 6909h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2C7E3
mov     ax, 2
jmp     short loc_2C830

loc_2C7E3:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ds
mov     ax, 6910h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2C7FC
mov     ax, 3
jmp     short loc_2C830

loc_2C7FC:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ds
mov     ax, 6917h
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2C815
mov     ax, 4
jmp     short loc_2C830

loc_2C815:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ds
mov     ax, 691Eh
push    ax
call    sub_46D55
or      ax, ax
jnz     short loc_2C82E
mov     ax, 5
jmp     short loc_2C830

loc_2C82E:
xor     ax, ax

loc_2C830:
pop     bp
retf    4
sub_2C78D endp

seg021 ends


; Segment type: Pure code
seg022 segment byte public 'CODE' use16
assume cs:seg022
;org 4
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2C834 proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
cmp     byte ptr ds:22C9h, 0
jz      short loc_2C844
jmp     loc_2CA6B

loc_2C844:
les     bx, [bp+arg_0]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2C879

loc_2C84F:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 5
jnz     short loc_2C86C
mov     ax, 2
push    ax
call    sub_3193F
les     bx, [bp+var_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_2C86C:
les     bx, [bp+var_8]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2C879:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_2C84F
jmp     loc_2CA6B

loc_2C884:
call    sub_1BA0B
cmp     byte ptr ds:22B0h, 0
jz      short loc_2C8A9
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
push    ax
push    word ptr [bp+arg_0+2]
push    bx
push    ds
mov     ax, 6926h
push    ax
call    sub_46F8F
add     sp, 0Ah

loc_2C8A9:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 9           ; switch 10 cases
jbe     short loc_2C8B8
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C8B8:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2C8BC[bx] ; switch jump
jpt_2C8BC dw offset loc_2C8F8 ; jump table for switch statement
dw offset loc_2C9B7
dw offset loc_2C9F4
dw offset loc_2CA31
dw offset loc_2C992
dw offset loc_2C984
dw offset loc_2C92B
dw offset loc_2C8D5
dw offset loc_2C95E
dw offset loc_2C971

loc_2C8D5:              ; jumptable 0002C8BC case 7
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CA7C
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 14h
push    dx
push    ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
push    ax
call    dword ptr ds:0C000h
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C8F8:              ; jumptable 0002C8BC case 0
call    sub_2F0E0
les     bx, [bp+arg_0]
les     bx, es:[bx+10h]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2CCC0
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CA7C
push    [bp+var_2]
push    [bp+var_4]
call    sub_3B074
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C92B:              ; jumptable 0002C8BC case 6
call    sub_2F0E0
les     bx, [bp+arg_0]
les     bx, es:[bx+10h]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2CCC0
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CA7C
push    [bp+var_2]
push    [bp+var_4]
call    sub_3BFCF
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C95E:              ; jumptable 0002C8BC case 8
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2E30E
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C971:              ; jumptable 0002C8BC case 9
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2E323
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C984:              ; jumptable 0002C8BC case 5
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2DDC9
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C992:              ; jumptable 0002C8BC case 4
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
push    word ptr es:[bx+12h]
call    sub_2E282
les     bx, [bp+arg_0]
push    word ptr es:[bx+16h]
push    word ptr es:[bx+14h]
call    sub_2DD94
jmp     def_2C8BC       ; jumptable 0002C8BC default case

loc_2C9B7:              ; jumptable 0002C8BC case 1
call    sub_2F0E0
les     bx, [bp+arg_0]
les     bx, es:[bx+14h]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2CCC0
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CA7C
push    [bp+var_2]
push    [bp+var_4]
les     bx, [bp+arg_0]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_3DF8D
jmp     short def_2C8BC ; jumptable 0002C8BC default case

loc_2C9F4:              ; jumptable 0002C8BC case 2
call    sub_2F0E0
les     bx, [bp+arg_0]
les     bx, es:[bx+14h]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2CCC0
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CA7C
push    [bp+var_2]
push    [bp+var_4]
les     bx, [bp+arg_0]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_3E09F
jmp     short def_2C8BC ; jumptable 0002C8BC default case

loc_2CA31:              ; jumptable 0002C8BC case 3
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CACB
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 10h
push    dx
push    ax
call    sub_2CCC0
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CA7C
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_39213

def_2C8BC:              ; jumptable 0002C8BC default case
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_2CA6B:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2CA76
jmp     loc_2C884

loc_2CA76:
mov     sp, bp
pop     bp
retf    4
sub_2C834 endp



; Attributes: bp-based frame

sub_2CA7C proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+0Eh], 0
jz      short loc_2CA99
mov     al, es:[bx+0Eh]
mov     ah, 0
push    ax
push    word ptr es:[bx+0Ah]
call    sub_2E282

loc_2CA99:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+0Fh], 0
jz      short loc_2CAC7
mov     al, es:[bx+0Fh]
cmp     al, es:[bx+0Eh]
jnz     short loc_2CAC7
mov     ax, es:[bx+0Ch]
cmp     ax, es:[bx+0Ah]
jz      short loc_2CAC7
mov     al, es:[bx+0Fh]
mov     ah, 0
push    ax
push    word ptr es:[bx+0Ch]
call    sub_2E282

loc_2CAC7:
pop     bp
retn    4
sub_2CA7C endp



; Attributes: bp-based frame

sub_2CACB proc near

var_40C= word ptr -40Ch
var_40A= word ptr -40Ah
var_408= byte ptr -408h
var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 40Ch
push    si
push    di
xor     si, si
les     bx, [bp+arg_0]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2CB0B

loc_2CAE5:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     bx, si
shl     bx, 1
shl     bx, 1
lea     cx, [bp+var_408]
add     bx, cx
mov     ss:[bx+2], dx
mov     ss:[bx], ax
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
inc     si

loc_2CB0B:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2CAE5
xor     si, si
jmp     loc_2CBAE

loc_2CB18:
mov     di, si
inc     di
jmp     loc_2CB9F

loc_2CB1E:
mov     bx, si
shl     bx, 1
shl     bx, 1
lea     ax, [bp+var_408]
add     bx, ax
les     bx, ss:[bx]
mov     ax, es:[bx+4]
mov     bx, di
shl     bx, 1
shl     bx, 1
lea     dx, [bp+var_408]
add     bx, dx
les     bx, ss:[bx]
cmp     ax, es:[bx+4]
jle     short loc_2CB9E
mov     bx, si
shl     bx, 1
shl     bx, 1
lea     ax, [bp+var_408]
add     bx, ax
les     bx, ss:[bx]
mov     [bp+var_40A], es
mov     [bp+var_40C], bx
mov     bx, di
shl     bx, 1
shl     bx, 1
lea     ax, [bp+var_408]
add     bx, ax
mov     dx, ss:[bx+2]
mov     ax, ss:[bx]
mov     bx, si
shl     bx, 1
shl     bx, 1
lea     cx, [bp+var_408]
add     bx, cx
mov     ss:[bx+2], dx
mov     ss:[bx], ax
mov     dx, [bp+var_40A]
mov     ax, [bp+var_40C]
mov     bx, di
shl     bx, 1
shl     bx, 1
lea     cx, [bp+var_408]
add     bx, cx
mov     ss:[bx+2], dx
mov     ss:[bx], ax

loc_2CB9E:
inc     di

loc_2CB9F:
les     bx, [bp+arg_0]
mov     ax, es:[bx+14h]
cmp     ax, di
jle     short loc_2CBAD
jmp     loc_2CB1E

loc_2CBAD:
inc     si

loc_2CBAE:
les     bx, [bp+arg_0]
mov     ax, es:[bx+14h]
cmp     ax, si
jle     short loc_2CBBC
jmp     loc_2CB18

loc_2CBBC:
mov     si, es:[bx+14h]
mov     word ptr [bp+var_4+2], 0
mov     word ptr [bp+var_4], 0
jmp     short loc_2CC00

loc_2CBCC:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     bx, si
dec     bx
shl     bx, 1
shl     bx, 1
lea     cx, [bp+var_408]
add     bx, cx
les     bx, ss:[bx]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     bx, si
dec     bx
shl     bx, 1
shl     bx, 1
lea     ax, [bp+var_408]
add     bx, ax
les     bx, ss:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
dec     si

loc_2CC00:
or      si, si
jnz     short loc_2CBCC
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_0]
mov     es:[bx+1Ch], dx
mov     es:[bx+1Ah], ax
mov     bx, es:[bx+14h]
dec     bx
shl     bx, 1
shl     bx, 1
lea     ax, [bp+var_408]
add     bx, ax
mov     dx, ss:[bx+2]
mov     ax, ss:[bx]
mov     bx, word ptr [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_2CACB endp



; Attributes: bp-based frame

sub_2CC3E proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp

loc_2CC41:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2CC79
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4
jnz     short loc_2CC5D
push    word ptr [bp+arg_0+2]
push    bx
call    sub_2F677
jmp     short loc_2CC79

loc_2CC5D:
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_322DA
or      ax, ax
jnz     short loc_2CC41
xor     ax, ax
push    ax
call    sub_3129B
mov     sp, bp

loc_2CC79:
pop     bp
retf    4
sub_2CC3E endp



; Attributes: bp-based frame

sub_2CC7D proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]

loc_2CC84:
push    [bp+arg_4]
push    [bp+arg_2]
push    si
call    sub_2F14C
or      ax, ax
jnz     short loc_2CCB5
mov     ax, [bp+arg_2]
or      ax, [bp+arg_4]
jz      short loc_2CCAB
push    ss
lea     ax, [bp+arg_2]
push    ax
push    si
call    sub_322DA
or      ax, ax
jnz     short loc_2CC84

loc_2CCAB:
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_2CCB5:
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
pop     si
pop     bp
retf    6
sub_2CC7D endp



; Attributes: bp-based frame

sub_2CCC0 proc far

var_1A= dword ptr -1Ah
var_16= dword ptr -16h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 1Ah
push    si
push    di
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     word ptr [bp+var_1A+2], es
mov     word ptr [bp+var_1A], bx
cmp     byte ptr es:[bx+1], 12h
jz      short loc_2CCDE
jmp     loc_2CD79

loc_2CCDE:
mov     al, es:[bx]
cbw
cmp     ax, 1
jz      short loc_2CD08
cmp     ax, 7
jz      short loc_2CCF3
cmp     ax, 2Bh ; '+'
jz      short loc_2CD67
jmp     short loc_2CD4C

loc_2CCF3:
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     ax, es:[bx+0Ah]
les     bx, [bp+var_1A]
add     es:[bx+0Ah], ax
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CD08:
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     word ptr [bp+var_16+2], es
mov     word ptr [bp+var_16], bx
cmp     byte ptr es:[bx+8], 4
jz      short loc_2CD1F
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CD1F:
cmp     byte ptr es:[bx+12h], 2
jnz     short loc_2CD2B
mov     ax, 67D8h
jmp     short loc_2CD2E

loc_2CD2B:
mov     ax, 67FEh

loc_2CD2E:
mov     dx, ds
les     bx, [bp+var_1A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_2CD3B:
les     bx, [bp+var_16]
mov     ax, es:[bx+0Ah]
les     bx, [bp+var_1A]
add     es:[bx+0Ah], ax
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CD4C:
les     bx, [bp+var_1A]
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_2CD67
mov     dx, word ptr [bp+var_1A+2]
mov     ax, bx
add     ax, 0Ah
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0

loc_2CD67:
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 6
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CD79:
les     bx, [bp+var_1A]
mov     al, es:[bx+1]
cbw
mov     bx, ax
shl     bx, 1
mov     al, [bx+7B78h]
mov     bx, word ptr [bp+var_1A]
mov     es:[bx+1], al
mov     bx, word ptr [bp+var_1A]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
les     bx, [bp+var_1A]
mov     es:[bx+3], al
mov     byte ptr es:[bx+4], 0
mov     byte ptr es:[bx+2], 0
mov     al, es:[bx]
cbw
cmp     ax, 17h
jnz     short loc_2CDB8
jmp     loc_2D05C       ; jumptable 0002CDED cases 46,47

loc_2CDB8:
jg      short loc_2CDDE
dec     ax              ; switch 9 cases
cmp     ax, 8
jbe     short loc_2CDC3
jmp     def_2CDC7       ; jumptable 0002CDC7 default case, cases 5,6,8
                        ; jumptable 0002CDED default case, cases 48-54

loc_2CDC3:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2CDC7[bx] ; switch jump
jpt_2CDC7 dw offset loc_2CE63 ; jump table for switch statement
dw offset loc_2D2B4
dw offset loc_2D2B4
dw offset loc_2CE0C
dw offset def_2CDC7
dw offset def_2CDC7
dw offset loc_2CE2F
dw offset def_2CDC7
dw offset loc_2CE1A

loc_2CDDE:              ; switch 13 cases
sub     ax, 2Ch ; ','
cmp     ax, 0Ch
jbe     short loc_2CDE9
jmp     def_2CDC7       ; jumptable 0002CDC7 default case, cases 5,6,8
                        ; jumptable 0002CDED default case, cases 48-54

loc_2CDE9:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2CDED[bx] ; switch jump
jpt_2CDED dw offset loc_2D113 ; jump table for switch statement
dw offset loc_2CEB6
dw offset loc_2D05C
dw offset loc_2D05C
dw offset def_2CDC7
dw offset def_2CDC7
dw offset def_2CDC7
dw offset def_2CDC7
dw offset def_2CDC7
dw offset def_2CDC7
dw offset def_2CDC7
dw offset loc_2D0E0
dw offset loc_2D0AD

loc_2CE0C:              ; jumptable 0002CDC7 case 4
push    word ptr [bp+var_1A+2]
push    word ptr [bp+var_1A]
call    sub_3B02E
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CE1A:              ; jumptable 0002CDC7 case 9
les     bx, [bp+var_1A]
mov     byte ptr es:[bx], 8
mov     ax, ds:0BF15h
add     ax, ds:0BF92h
add     es:[bx+0Ah], ax
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CE2F:              ; jumptable 0002CDC7 case 7
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     word ptr [bp+var_16+2], es
mov     word ptr [bp+var_16], bx
test    byte ptr es:[bx+9], 80h
jnz     short loc_2CE46
jmp     loc_2CD3B

loc_2CE46:
les     bx, [bp+var_1A]
mov     byte ptr es:[bx], 5
les     bx, [bp+var_16]
push    word ptr es:[bx+10h]
call    sub_3A41E
les     bx, [bp+var_1A]
mov     es:[bx+0Ah], ax
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CE63:              ; jumptable 0002CDC7 case 1
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     word ptr [bp+var_16+2], es
mov     word ptr [bp+var_16], bx
cmp     byte ptr es:[bx+8], 4
jnz     short loc_2CEA1
cmp     byte ptr es:[bx+12h], 2
jnz     short loc_2CE83
mov     ax, 67D8h
jmp     short loc_2CE86

loc_2CE83:
mov     ax, 67FEh

loc_2CE86:
mov     dx, ds
les     bx, [bp+var_1A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
les     bx, [bp+var_16]
mov     ax, es:[bx+0Ah]
les     bx, [bp+var_1A]
add     es:[bx+0Ah], ax

loc_2CEA1:
push    word ptr [bp+var_1A+2]
push    word ptr [bp+var_1A]
call    sub_39B68
or      ax, ax
jnz     short loc_2CEB3
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2CEB3:
jmp     loc_2D15D

loc_2CEB6:              ; jumptable 0002CDED case 45
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+var_1A]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_2CED7
jmp     loc_2CF9F

loc_2CED7:
mov     bx, word ptr [bp+var_1A]
mov     al, es:[bx+0Bh]
cbw
mov     bx, word ptr [bp+var_1A]
push    ax
mov     al, es:[bx+0Ah]
cbw
pop     dx
add     dx, ax
mov     di, 10h
sub     di, dx
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 5
or      di, di
jz      short loc_2CF3A
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, di
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+1], 2
mov     al, 12h
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    dx
push    bx
call    sub_29862
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_2CF3A:
les     bx, [bp+var_1A]
mov     al, es:[bx+0Ah]
cbw
mov     di, 10h
sub     di, ax
or      di, di
jz      short loc_2CF93
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, di
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+1], 2
mov     al, 13h
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    dx
push    bx
call    sub_29862
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     al, ds:7B82h
les     bx, [bp+var_4]
mov     es:[bx+1], al

loc_2CF93:
les     bx, [bp+var_4]
mov     word ptr [bp+var_1A+2], es
mov     word ptr [bp+var_1A], bx
jmp     loc_2D049

loc_2CF9F:
les     bx, [bp+var_1A]
mov     cl, es:[bx+0Ah]
mov     di, 1
shl     di, cl
dec     di
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 5
les     bx, [bp+var_1A]
cmp     byte ptr es:[bx+0Bh], 0
jz      short loc_2D009
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     al, es:[bx+0Bh]
cbw
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+1], 2
mov     al, 13h
push    ax
mov     ax, 4
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_29862
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_2D009:
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, di
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     al, 14h
push    ax
mov     ax, 4
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_29862
mov     word ptr [bp+var_1A+2], dx
mov     word ptr [bp+var_1A], ax

loc_2D049:
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
les     bx, [bp+arg_0]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_2CDC7       ; jumptable 0002CDC7 default case, cases 5,6,8
                        ; jumptable 0002CDED default case, cases 48-54

loc_2D05C:              ; jumptable 0002CDED cases 46,47
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 2Dh ; '-'
jz      short loc_2D06C
jmp     def_2CDC7       ; jumptable 0002CDC7 default case, cases 5,6,8
                        ; jumptable 0002CDED default case, cases 48-54

loc_2D06C:
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 0Ah
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
add     ax, 6
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
les     bx, [bp+var_4]
les     bx, es:[bx+6]
mov     al, es:[bx+2]
neg     al
les     bx, [bp+var_4]
mov     es:[bx+2], al
jmp     loc_2D19D

loc_2D0AD:              ; jumptable 0002CDED case 56
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 6
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 0Ah
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
les     bx, [bp+var_1A]
les     bx, es:[bx+0Ah]
mov     al, es:[bx+2]
les     bx, [bp+var_1A]
mov     es:[bx+2], al
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2D0E0:              ; jumptable 0002CDED case 55
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 6
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 0Ah
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     al, es:[bx+2]
les     bx, [bp+var_1A]
mov     es:[bx+2], al
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2D113:              ; jumptable 0002CDED case 44
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
add     ax, 6
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
les     bx, [bp+var_1A]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_22692
or      ax, ax
jnz     short loc_2D143
mov     al, ds:79E5h
les     bx, [bp+var_1A]
mov     es:[bx+2], al
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2D143:
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 7
jz      short loc_2D15D
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 8
jnz     short loc_2D168

loc_2D15D:
les     bx, [bp+var_1A]
mov     byte ptr es:[bx+2], 1
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

loc_2D168:
les     bx, [bp+var_1A]
mov     byte ptr es:[bx+2], 0
jmp     loc_2D2B4       ; jumptable 0002CDC7 cases 2,3

def_2CDC7:              ; jumptable 0002CDC7 default case, cases 5,6,8
mov     dx, word ptr [bp+var_1A+2] ; jumptable 0002CDED default case, cases 48-54
mov     ax, word ptr [bp+var_1A]
add     ax, 6
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0
les     bx, [bp+var_1A]
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_2D19D
mov     dx, word ptr [bp+var_1A+2]
mov     ax, bx
add     ax, 0Ah
push    dx
push    ax
push    cs
call    near ptr sub_2CCC0

loc_2D19D:
push    word ptr [bp+var_1A+2]
push    word ptr [bp+var_1A]
call    sub_2D2BC
mov     [bp+var_12], ax
les     bx, [bp+var_1A]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_2D2BC
mov     [bp+var_10], ax
les     bx, [bp+var_1A]
les     bx, es:[bx+6]
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
mov     si, ax
les     bx, [bp+var_1A]
cmp     byte ptr es:[bx], 2Eh ; '.'
jz      short loc_2D1DC
cmp     byte ptr es:[bx], 2Fh ; '/'
jnz     short loc_2D1DF

loc_2D1DC:
add     si, [bp+var_12]

loc_2D1DF:
les     bx, [bp+var_1A]
mov     byte ptr es:[bx+4], 0
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_2D1F0
jmp     loc_2D27A

loc_2D1F0:
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jnz     short loc_2D1FD
jmp     loc_2D27A

loc_2D1FD:
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2D2BC
mov     [bp+var_E], ax
les     bx, [bp+var_1A]
les     bx, es:[bx+0Ah]
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
mov     [bp+var_C], ax
add     ax, [bp+var_10]
mov     dx, si
add     dx, [bp+var_E]
cmp     ax, dx
jge     short loc_2D233
mov     ax, [bp+var_C]
add     ax, [bp+var_10]
jmp     short loc_2D238

loc_2D233:
mov     ax, si
add     ax, [bp+var_E]

loc_2D238:
mov     [bp+var_A], ax
mov     ax, [bp+var_12]
cmp     ax, [bp+var_A]
jle     short loc_2D245
jmp     short loc_2D248

loc_2D245:
mov     ax, [bp+var_A]

loc_2D248:
mov     [bp+var_A], ax
cmp     si, ax
jle     short loc_2D253
mov     ax, si
jmp     short loc_2D256

loc_2D253:
mov     ax, [bp+var_A]

loc_2D256:
mov     [bp+var_A], ax
mov     ax, [bp+var_C]
cmp     ax, [bp+var_A]
jle     short loc_2D263
jmp     short loc_2D266

loc_2D263:
mov     ax, [bp+var_A]

loc_2D266:
mov     [bp+var_A], ax
mov     al, byte ptr [bp+var_A]
les     bx, [bp+var_1A]
mov     es:[bx+2], al
cmp     si, [bp+var_C]
jge     short loc_2D293
jmp     short loc_2D2B4 ; jumptable 0002CDC7 cases 2,3

loc_2D27A:
mov     ax, [bp+var_12]
cmp     ax, si
jle     short loc_2D286
mov     al, byte ptr [bp+var_12]
jmp     short loc_2D288

loc_2D286:
mov     ax, si

loc_2D288:
neg     al
les     bx, [bp+var_1A]
mov     es:[bx+2], al
jmp     short loc_2D2B4 ; jumptable 0002CDC7 cases 2,3

loc_2D293:
cmp     si, [bp+var_C]
jnz     short loc_2D2A7
les     bx, [bp+var_1A]
cmp     byte ptr es:[bx], 17h
jl      short loc_2D2A7
cmp     byte ptr es:[bx], 21h ; '!'
jle     short loc_2D2B4 ; jumptable 0002CDC7 cases 2,3

loc_2D2A7:
les     bx, [bp+var_1A]
mov     al, es:[bx+2]
neg     al
mov     es:[bx+2], al

loc_2D2B4:              ; jumptable 0002CDC7 cases 2,3
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_2CCC0 endp



; Attributes: bp-based frame

sub_2D2BC proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0Eh
jg      short loc_2D2EC
mov     al, es:[bx+1]
cbw
push    ax
mov     al, es:[bx]
cbw
mov     dx, 0Eh
mul     dx
mov     bx, ax
add     bx, 76DFh
mov     ax, ds
mov     es, ax
pop     ax
add     bx, ax
dec     bx
mov     al, es:[bx]
cbw
jmp     short loc_2D2EF

loc_2D2EC:
mov     ax, 4

loc_2D2EF:
pop     bp
retn    4
sub_2D2BC endp



; Attributes: bp-based frame

sub_2D2F3 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
jmp     loc_2D3AA

loc_2D2F9:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
dec     ax              ; switch 54 cases
cmp     ax, 35h
ja      short def_2D30A ; jumptable 0002D30A default case, cases 6,8,10-22,34-44,48-53
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2D30A[bx] ; switch jump
jpt_2D30A dw offset loc_2D3B5, offset loc_2D3B5, offset loc_2D3B5 ; jump table for switch statement
dw offset loc_2D3B5, offset loc_2D3B5, offset def_2D30A
dw offset loc_2D3B5, offset def_2D30A, offset loc_2D3B5
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset loc_2D398, offset loc_2D398
dw offset loc_2D398, offset loc_2D398, offset loc_2D398
dw offset loc_2D398, offset loc_2D398, offset loc_2D398
dw offset loc_2D398, offset loc_2D398, offset loc_2D398
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset loc_2D39D
dw offset loc_2D398, offset loc_2D398, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset def_2D30A
dw offset def_2D30A, offset def_2D30A, offset loc_2D398

def_2D30A:              ; jumptable 0002D30A default case, cases 6,8,10-22,34-44,48-53
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_2D39D ; jumptable 0002D30A case 45
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_2D2F3
or      ax, ax
jz      short loc_2D39D ; jumptable 0002D30A case 45

loc_2D398:              ; jumptable 0002D30A cases 23-33,46,47,54
mov     ax, 1
jmp     short loc_2D3B7

loc_2D39D:              ; jumptable 0002D30A case 45
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_2D3AA:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2D3B5 ; jumptable 0002D30A cases 1-5,7,9
jmp     loc_2D2F9

loc_2D3B5:              ; jumptable 0002D30A cases 1-5,7,9
xor     ax, ax

loc_2D3B7:
pop     bp
retf    4
sub_2D2F3 endp

seg022 ends


; Segment type: Pure code
seg023 segment byte public 'CODE' use16
assume cs:seg023
;org 0Bh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2D3BB proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
cmp     byte ptr ds:9A63h, 3
jnz     short loc_2D3D6
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_40BF4
jmp     loc_2D46F

loc_2D3D6:
les     bx, ds:9A70h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2D426

loc_2D3E2:
les     bx, [bp+var_8]
les     bx, es:[bx+8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2D412

loc_2D3F1:
les     bx, [bp+var_4]
mov     dx, es:[bx+0Eh]
mov     ax, es:[bx+0Ch]
cmp     dx, [bp+arg_2]
jnz     short loc_2D406
cmp     ax, [bp+arg_0]
jz      short loc_2D44F

loc_2D406:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2D412:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2D3F1
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2D426:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_2D3E2
les     bx, ds:0BD9Ch
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2D463

loc_2D43A:
les     bx, [bp+var_4]
mov     dx, es:[bx+0Eh]
mov     ax, es:[bx+0Ch]
cmp     dx, [bp+arg_2]
jnz     short loc_2D457
cmp     ax, [bp+arg_0]
jnz     short loc_2D457

loc_2D44F:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
jmp     short loc_2D46F

loc_2D457:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2D463:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2D43A
xor     dx, dx
mov     ax, dx

loc_2D46F:
mov     sp, bp
pop     bp
retf    4
sub_2D3BB endp



; Attributes: bp-based frame

sub_2D475 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
mov     ax, ds:9A70h
or      ax, ds:9A72h
jz      short loc_2D490
les     bx, ds:9A70h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2D498

loc_2D490:
mov     word ptr [bp+var_8+2], ds
mov     word ptr [bp+var_8], 0BD94h

loc_2D498:
mov     ax, [bp+arg_2]
or      ax, [bp+arg_4]
jz      short loc_2D503
les     bx, [bp+var_8]
les     bx, es:[bx+8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2D4FB

loc_2D4AF:
les     bx, [bp+var_4]
mov     dx, es:[bx+0Eh]
mov     ax, es:[bx+0Ch]
cmp     dx, [bp+arg_4]
jnz     short loc_2D4EF
cmp     ax, [bp+arg_2]
jnz     short loc_2D4EF
les     bx, [bp+var_4]
mov     al, es:[bx+19h]
cbw
cmp     ax, [bp+arg_0]
jnz     short loc_2D4DB
cmp     word ptr es:[bx+10h], 0
jnz     short loc_2D4DB
jmp     loc_2D55D

loc_2D4DB:
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, 46h ; 'F'
push    ax
call    sub_312DE
add     sp, 6
jmp     short loc_2D55D

loc_2D4EF:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2D4FB:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2D4AF

loc_2D503:
mov     ax, 1Ah
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
mov     ax, 1Ah
push    ax
mov     al, 0
push    ax
call    sub_46C10
les     bx, [bp+var_8]
mov     dx, es:[bx+0Ah]
mov     ax, es:[bx+8]
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, [bp+var_8]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
mov     al, byte ptr [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+19h], al

loc_2D55D:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     sp, bp
pop     bp
retf    6
sub_2D475 endp



; Attributes: bp-based frame

sub_2D569 proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 0Ch
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jz      short loc_2D5B8
les     bx, [bp+arg_2]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2D5B0

loc_2D586:
les     bx, [bp+var_8]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, [bp+arg_8]
jnz     short loc_2D5A3
cmp     ax, [bp+arg_6]
jnz     short loc_2D5A3
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
jmp     loc_2D637

loc_2D5A3:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2D5B0:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_2D586

loc_2D5B8:
mov     [bp+var_2], 0
mov     [bp+var_4], 0
les     bx, ds:9A70h
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_2D5F2

loc_2D5CE:
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    [bp+arg_8]
push    [bp+arg_6]
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2D63D
or      ax, ax
jz      short loc_2D631
les     bx, [bp+var_C]
les     bx, es:[bx]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_2D5F2:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_2D5CE
push    ds
mov     ax, 0BD94h
push    ax
push    [bp+arg_8]
push    [bp+arg_6]
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2D63D
or      ax, ax
jz      short loc_2D631
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jz      short loc_2D631
cmp     [bp+arg_0], 0
jnz     short loc_2D631
push    [bp+arg_8]
push    [bp+arg_6]
mov     ax, 0A2h
push    ax
call    sub_31324
add     sp, 6

loc_2D631:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]

loc_2D637:
mov     sp, bp
pop     bp
retf    0Ah
sub_2D569 endp



; Attributes: bp-based frame

sub_2D63D proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_8]
les     bx, es:[bx+8]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     loc_2D704

loc_2D653:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     loc_2D6ED

loc_2D663:
les     bx, [bp+var_4]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, [bp+arg_6]
jnz     short loc_2D6E0
cmp     ax, [bp+arg_4]
jnz     short loc_2D6E0
les     bx, [bp+arg_0]
mov     ax, es:[bx]
or      ax, es:[bx+2]
jnz     short loc_2D692
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     short loc_2D6E0

loc_2D692:
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     ax, es:[bx+0Ah]
les     bx, [bp+var_4]
cmp     ax, es:[bx+0Ah]
jnz     short loc_2D6CA
les     bx, [bp+arg_0]
les     bx, es:[bx]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
xor     ax, ax
push    ax
call    sub_2A221
or      ax, ax
jnz     short loc_2D6E0

loc_2D6CA:
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 44h ; 'D'
push    ax
call    sub_312DE
add     sp, 6
xor     ax, ax
jmp     short loc_2D712

loc_2D6E0:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2D6ED:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2D6F8
jmp     loc_2D663

loc_2D6F8:
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2D704:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_2D70F
jmp     loc_2D653

loc_2D70F:
mov     ax, 1

loc_2D712:
mov     sp, bp
pop     bp
retn    0Ch
sub_2D63D endp



; Attributes: bp-based frame

sub_2D718 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= dword ptr  0Ch
arg_A= word ptr  10h
arg_C= word ptr  12h

push    bp
mov     bp, sp
sub     sp, 4
push    si
les     bx, [bp+arg_6]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2D764

loc_2D72E:
les     bx, [bp+var_4]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
cmp     dx, [bp+arg_C]
jnz     short loc_2D757
cmp     ax, [bp+arg_A]
jnz     short loc_2D757
push    [bp+arg_C]
push    [bp+arg_A]
mov     ax, 46h ; 'F'
push    ax
call    sub_312DE
add     sp, 6
jmp     loc_2D9ED

loc_2D757:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2D764:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2D72E
mov     ax, 10h
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_6]
mov     ax, es:[bx+14h]
or      ax, es:[bx+16h]
jz      short loc_2D7D1
les     bx, es:[bx+14h]
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_2D7BA
les     bx, [bp+arg_6]
les     bx, es:[bx+14h]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
or      ax, ax
jnz     short loc_2D7BA
mov     ax, 5Eh ; '^'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2D7BA:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_6]
les     bx, es:[bx+14h]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     short loc_2D7E2

loc_2D7D1:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_6]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_2D7E2:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_6]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
les     bx, [bp+var_4]
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     dx, [bp+arg_C]
mov     ax, [bp+arg_A]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
les     bx, [bp+arg_6]
cmp     byte ptr es:[bx+19h], 1
jz      short loc_2D82A
jmp     loc_2D978

loc_2D82A:
mov     si, es:[bx+12h]
cmp     byte ptr ds:22B4h, 0
jz      short loc_2D851
mov     ax, es:[bx+12h]
push    ax
push    dx
push    [bp+arg_2]
call    sub_2A954
mov     bx, ax
pop     ax
xor     dx, dx
div     bx
les     bx, [bp+arg_6]
add     es:[bx+12h], dx

loc_2D851:
cmp     [bp+arg_0], 10h
jz      short loc_2D868
cmp     [bp+arg_0], 10h
jle     short loc_2D86D
mov     ax, 98h
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_2D868:
mov     [bp+arg_0], 0

loc_2D86D:
cmp     [bp+arg_0], 0
jnz     short loc_2D8BC
les     bx, [bp+arg_6]
cmp     byte ptr es:[bx+18h], 0
jz      short loc_2D894
cmp     byte ptr ds:22B4h, 0
jz      short loc_2D88D
mov     ax, ds:7BE7h
add     es:[bx+12h], ax
jmp     short loc_2D894

loc_2D88D:
les     bx, [bp+arg_6]
inc     word ptr es:[bx+12h]

loc_2D894:
les     bx, [bp+arg_6]
mov     ax, es:[bx+12h]
les     bx, [bp+var_4]
mov     es:[bx+0Ah], ax
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_2A8BF
les     bx, [bp+arg_6]
add     es:[bx+12h], ax
mov     byte ptr es:[bx+18h], 0
jmp     loc_2D95C

loc_2D8BC:
les     bx, [bp+arg_6]
mov     al, es:[bx+18h]
cbw
add     ax, [bp+arg_0]
cmp     ax, 10h
jle     short loc_2D8EB
cmp     byte ptr ds:22B4h, 0
jz      short loc_2D8DC
mov     ax, ds:7BE7h
add     es:[bx+12h], ax
jmp     short loc_2D8E3

loc_2D8DC:
les     bx, [bp+arg_6]
inc     word ptr es:[bx+12h]

loc_2D8E3:
les     bx, [bp+arg_6]
mov     byte ptr es:[bx+18h], 0

loc_2D8EB:
les     bx, [bp+arg_6]
mov     ax, es:[bx+12h]
les     bx, [bp+var_4]
mov     es:[bx+0Ah], ax
push    [bp+arg_0]
les     bx, [bp+arg_6]
mov     al, es:[bx+18h]
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
xor     ax, ax
push    ax
call    sub_2A7A3
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
les     bx, [bp+var_4]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     al, byte ptr [bp+arg_0]
les     bx, [bp+arg_6]
add     es:[bx+18h], al
cmp     byte ptr ds:22B4h, 0
jnz     short loc_2D95C
cmp     byte ptr es:[bx+18h], 8
jl      short loc_2D95C
mov     al, es:[bx+18h]
cbw
shr     ax, 1
shr     ax, 1
shr     ax, 1
add     es:[bx+12h], ax
mov     al, es:[bx+18h]
cbw
mov     bx, 8
cwd
idiv    bx
mov     bx, word ptr [bp+arg_6]
mov     es:[bx+18h], dl

loc_2D95C:
les     bx, [bp+arg_6]
mov     ax, es:[bx+12h]
cmp     ax, si
jb      short loc_2D96A
jmp     loc_2D9ED

loc_2D96A:
mov     ax, 64h ; 'd'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     loc_2D9ED

loc_2D978:
les     bx, [bp+var_4]
mov     word ptr es:[bx+0Ah], 0
cmp     [bp+arg_0], 0
jnz     short loc_2D9AF
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_2A8BF
les     bx, [bp+arg_6]
cmp     ax, es:[bx+12h]
jbe     short loc_2D9ED
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_2A8BF
les     bx, [bp+arg_6]
mov     es:[bx+12h], ax
jmp     short loc_2D9ED

loc_2D9AF:
push    [bp+arg_0]
les     bx, [bp+arg_6]
mov     al, es:[bx+18h]
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
xor     ax, ax
push    ax
call    sub_2A7A3
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
les     bx, [bp+var_4]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
les     bx, [bp+arg_6]
mov     ax, es:[bx+12h]
cmp     ax, ds:7BE7h
jnb     short loc_2D9ED
mov     ax, ds:7BE7h
mov     es:[bx+12h], ax

loc_2D9ED:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
pop     si
mov     sp, bp
pop     bp
retf    0Eh
sub_2D718 endp



; Attributes: bp-based frame

sub_2D9FA proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
cmp     [bp+arg_0], 10h
jle     short loc_2DA13
mov     ax, 98h
push    ax
call    sub_312DE
mov     sp, bp
mov     [bp+arg_0], 0

loc_2DA13:
cmp     [bp+arg_0], 0
jnz     short loc_2DA36
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+18h], 0
jz      short loc_2DA5C
cmp     byte ptr ds:22B4h, 0
jz      short loc_2DA4D

loc_2DA2A:
mov     ax, ds:7BE7h
les     bx, [bp+arg_2]
add     es:[bx+12h], ax
jmp     short loc_2DA54

loc_2DA36:
les     bx, [bp+arg_2]
mov     al, es:[bx+18h]
cbw
add     ax, [bp+arg_0]
cmp     ax, 10h
jle     short loc_2DA5C
cmp     byte ptr ds:22B4h, 0
jnz     short loc_2DA2A

loc_2DA4D:
les     bx, [bp+arg_2]
inc     word ptr es:[bx+12h]

loc_2DA54:
les     bx, [bp+arg_2]
mov     byte ptr es:[bx+18h], 0

loc_2DA5C:
mov     al, byte ptr [bp+arg_0]
les     bx, [bp+arg_2]
add     es:[bx+18h], al
cmp     byte ptr ds:22B4h, 0
jnz     short loc_2DA95
cmp     byte ptr es:[bx+18h], 8
jle     short loc_2DA95
mov     al, es:[bx+18h]
cbw
shr     ax, 1
shr     ax, 1
shr     ax, 1
add     es:[bx+12h], ax
mov     al, es:[bx+18h]
cbw
mov     bx, 8
cwd
idiv    bx
mov     bx, word ptr [bp+arg_2]
mov     es:[bx+18h], dl

loc_2DA95:
pop     bp
retf    6
sub_2D9FA endp



; Attributes: bp-based frame

sub_2DA99 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+18h], 0
jle     short loc_2DAB1
push    word ptr [bp+arg_0+2]
push    bx
xor     ax, ax
push    ax
push    cs
call    near ptr sub_2D9FA

loc_2DAB1:
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+12h], 0
jnz     short loc_2DACF
mov     ax, 0A8h
push    ax
call    sub_31324
mov     sp, bp
les     bx, [bp+arg_0]
mov     word ptr es:[bx+12h], 1

loc_2DACF:
cmp     byte ptr ds:22B4h, 0
jz      short loc_2DAE3
les     bx, [bp+arg_0]
inc     word ptr es:[bx+12h]
and     word ptr es:[bx+12h], 0FFFEh

loc_2DAE3:
les     bx, [bp+arg_0]
mov     ax, es:[bx+12h]
mov     es:[bx+10h], ax
pop     bp
retf    4
sub_2DA99 endp

seg023 ends


; Segment type: Pure code
seg024 segment byte public 'CODE' use16
assume cs:seg024
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2DAF2 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
les     bx, ds:0BF03h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2DB25

loc_2DB04:
les     bx, [bp+var_4]
mov     dx, es:[bx+0Ah]
mov     ax, es:[bx+8]
cmp     dx, [bp+arg_2]
jnz     short loc_2DB19
cmp     ax, [bp+arg_0]
jz      short loc_2DB73

loc_2DB19:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2DB25:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2DB04
mov     ax, 0Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, ds:0BF05h
mov     ax, ds:0BF03h
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:0BF05h, es
mov     ds:0BF03h, bx
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
call    sub_29B45
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_2DB73:
les     bx, [bp+var_4]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
mov     sp, bp
pop     bp
retf    4
sub_2DAF2 endp



; Attributes: bp-based frame

sub_2DB84 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
les     bx, ds:0BF03h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2DBE0

loc_2DB96:
les     bx, [bp+var_4]
mov     dx, es:[bx+0Ah]
mov     ax, es:[bx+8]
cmp     dx, [bp+arg_2]
jnz     short loc_2DBD4
cmp     ax, [bp+arg_0]
jnz     short loc_2DBD4
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     ax, es:[bx+2]
or      ax, es:[bx+4]
jz      short loc_2DC2E
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 46h ; 'F'
push    ax
call    sub_312DE
add     sp, 6
xor     dx, dx
mov     ax, dx
jmp     short loc_2DC39

loc_2DBD4:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2DBE0:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2DB96
mov     ax, 0Ch
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, ds:0BF05h
mov     ax, ds:0BF03h
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:0BF05h, es
mov     ds:0BF03h, bx
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
call    sub_29B45
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_2DC2E:
les     bx, [bp+var_4]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]

loc_2DC39:
mov     sp, bp
pop     bp
retf    4
sub_2DB84 endp



; Attributes: bp-based frame

sub_2DC3F proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, ds:0BF03h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2DC9C

loc_2DC51:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     ax, es:[bx+2]
or      ax, es:[bx+4]
jnz     short loc_2DC90
les     bx, [bp+var_4]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
cmp     dx, ds:0BF1Bh
jnz     short loc_2DC79
cmp     ax, ds:0BF19h
jz      short loc_2DC90

loc_2DC79:
les     bx, [bp+var_4]
push    word ptr es:[bx+0Ah]
push    word ptr es:[bx+8]
mov     ax, 47h ; 'G'
push    ax
call    sub_312DE
add     sp, 6

loc_2DC90:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2DC9C:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2DC51
mov     sp, bp
pop     bp
retf
sub_2DC3F endp

seg024 ends


; Segment type: Pure code
seg025 segment byte public 'CODE' use16
assume cs:seg025
;org 8
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_2DCA8 proc far
jmp     short loc_2DCB8

loc_2DCAA:
mov     ax, 1F4h
mov     ds:6936h, ax
mov     ds:6938h, ax
call    sub_2DEE8

loc_2DCB8:
mov     ax, ds:0BE09h
or      ax, ds:0BE0Bh
jnz     short loc_2DCAA
mov     word ptr ds:6936h, 0
mov     word ptr ds:6938h, 0
mov     ax, 9A79h
mov     ds:0BE15h, ax
mov     ds:0BF96h, ax
mov     word ptr ds:0BF94h, 9A78h
retf
sub_2DCA8 endp



; Attributes: bp-based frame

sub_2DCDD proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= byte ptr  8

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:0BE11h
or      ax, ds:0BE13h
jz      short loc_2DD04
les     bx, ds:0BE11h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+4]
mov     word ptr ds:0BE13h, es
mov     ds:0BE11h, bx
jmp     short loc_2DD13

loc_2DD04:
mov     ax, 14h
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_2DD13:
mov     ax, ds:0BE09h
or      ax, ds:0BE0Bh
jnz     short loc_2DD29
les     bx, [bp+var_4]
mov     word ptr ds:0BE0Bh, es
mov     ds:0BE09h, bx
jmp     short loc_2DD3B

loc_2DD29:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, ds:0BE0Dh
mov     es:[bx+6], dx
mov     es:[bx+4], ax

loc_2DD3B:
mov     dx, ds:0BE0Fh
mov     ax, ds:0BE0Dh
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr es:[bx+6], 0
mov     word ptr es:[bx+4], 0
mov     al, [bp+arg_4]
mov     es:[bx+8], al
mov     ax, [bp+arg_2]
mov     es:[bx+0Ah], ax
mov     ax, [bp+arg_0]
mov     es:[bx+0Ch], ax
mov     word ptr es:[bx+0Eh], 0
mov     word ptr ds:0BE0Fh, es
mov     ds:0BE0Dh, bx
mov     ax, [bp+arg_2]
add     ds:6936h, ax
mov     ax, [bp+arg_0]
add     ds:6938h, ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retn    6
sub_2DCDD endp



; Attributes: bp-based frame

sub_2DD94 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
call    sub_2DE99
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
push    dx
push    ax
mov     ax, 1
push    ax
xor     ax, ax
push    ax
mov     ax, 3
push    ax
call    sub_2DCDD
mov     bx, ax
mov     es, dx
pop     ax
pop     dx
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
call    sub_2DEE8
pop     bp
retf    4
sub_2DD94 endp



; Attributes: bp-based frame

sub_2DDC9 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
call    sub_3C0B0
call    sub_2DE99
les     bx, ds:0BE0Dh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, bx
or      ax, word ptr [bp+var_4+2]
jz      short loc_2DE04
cmp     byte ptr es:[bx+8], 8
jnz     short loc_2DE04
cmp     word ptr es:[bx+0Ch], 0
jnz     short loc_2DE04

loc_2DDF8:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2DE04:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2DE16
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 9
jz      short loc_2DDF8

loc_2DE16:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2DE33
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 1
jnz     short loc_2DE33
mov     word ptr es:[bx+0Ah], 2
add     word ptr ds:6936h, 2

loc_2DE33:
mov     ax, 2
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_2DCDD
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
call    sub_2DEE8
mov     sp, bp
pop     bp
retf    4
sub_2DDC9 endp



; Attributes: bp-based frame

sub_2DE60 proc far

var_4= dword ptr -4
arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 3
push    ax
mov     ax, 2
push    ax
mov     ax, 5
push    ax
call    sub_2DCDD
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
les     bx, [bp+var_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     al, [bp+arg_0]
mov     es:[bx+9], al
mov     sp, bp
pop     bp
retf    6
sub_2DE60 endp



; Attributes: bp-based frame

sub_2DE99 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
cmp     word ptr ds:0BE17h, 0
jz      short loc_2DEE4
mov     ax, 8
push    ax
push    word ptr ds:6934h
push    word ptr ds:6934h
call    sub_2DCDD
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, ds:0BF96h
mov     dx, ds
les     bx, [bp+var_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     ax, ds:0BE17h
mov     es:[bx+0Eh], ax
mov     word ptr ds:6934h, 0
mov     word ptr ds:0BE17h, 0
mov     ax, ds:0BE15h
mov     ds:0BF96h, ax

loc_2DEE4:
mov     sp, bp
pop     bp
retf
sub_2DE99 endp



; Attributes: bp-based frame

sub_2DEE8 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
jmp     def_2DF0E       ; jumptable 0002DF0E default case

loc_2DEF1:
les     bx, ds:0BE09h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     al, es:[bx+8]
mov     ah, 0
dec     ax              ; switch 9 cases
cmp     ax, 8
jbe     short loc_2DF0A
jmp     def_2DF0E       ; jumptable 0002DF0E default case

loc_2DF0A:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2DF0E[bx] ; switch jump
jpt_2DF0E dw offset loc_2DF25 ; jump table for switch statement
dw offset loc_2E09D
dw offset loc_2DFE1
dw offset loc_2E0D5
dw offset loc_2E0D5
dw offset loc_2E0D5
dw offset loc_2E0D5
dw offset loc_2E0B6
dw offset loc_2E0D5

loc_2DF25:              ; jumptable 0002DF0E case 1
les     bx, ds:0BE0Dh
cmp     byte ptr es:[bx+8], 2
jnz     short loc_2DF97
les     bx, [bp+var_4]
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
les     bx, ds:0BE0Dh
cmp     dx, es:[bx+12h]
jnz     short loc_2DF97
cmp     ax, es:[bx+10h]
jnz     short loc_2DF97
cmp     word ptr ds:6938h, 82h
jnb     short loc_2DF71
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 6
mov     ax, es:[bx+0Ah]
sub     ax, es:[bx+0Ch]
add     ds:6938h, ax
mov     ax, es:[bx+0Ah]
mov     es:[bx+0Ch], ax
jmp     short loc_2DF97

loc_2DF71:
cmp     word ptr ds:6936h, 7Fh
ja      short loc_2DF7B
jmp     loc_2E130

loc_2DF7B:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 7
mov     ax, es:[bx+0Ch]
sub     ax, es:[bx+0Ah]
add     ds:6936h, ax
mov     ax, es:[bx+0Ch]
mov     es:[bx+0Ah], ax

loc_2DF97:
cmp     word ptr ds:6936h, 103h
ja      short loc_2DFA2
jmp     loc_2E130

loc_2DFA2:
les     bx, [bp+var_4]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_2E134
or      ax, ax
jz      short loc_2DFBF
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 6
jmp     loc_2E078

loc_2DFBF:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 7

loc_2DFC7:
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ch]
sub     ax, es:[bx+0Ah]
add     ds:6936h, ax
mov     ax, es:[bx+0Ch]
mov     es:[bx+0Ah], ax
jmp     def_2DF0E       ; jumptable 0002DF0E default case

loc_2DFE1:              ; jumptable 0002DF0E case 3
les     bx, ds:0BE0Dh
cmp     byte ptr es:[bx+8], 2
jnz     short loc_2E053
les     bx, [bp+var_4]
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
les     bx, ds:0BE0Dh
cmp     dx, es:[bx+12h]
jnz     short loc_2E053
cmp     ax, es:[bx+10h]
jnz     short loc_2E053
cmp     word ptr ds:6938h, 82h
jnb     short loc_2E02D
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 4
mov     ax, es:[bx+0Ah]
sub     ax, es:[bx+0Ch]
add     ds:6938h, ax
mov     ax, es:[bx+0Ah]
mov     es:[bx+0Ch], ax
jmp     short loc_2E053

loc_2E02D:
cmp     word ptr ds:6936h, 7Fh
ja      short loc_2E037
jmp     loc_2E130

loc_2E037:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 5
mov     ax, es:[bx+0Ch]
sub     ax, es:[bx+0Ah]
add     ds:6936h, ax
mov     ax, es:[bx+0Ch]
mov     es:[bx+0Ah], ax

loc_2E053:
cmp     word ptr ds:6936h, 103h
ja      short loc_2E05E
jmp     loc_2E130

loc_2E05E:
les     bx, [bp+var_4]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_2E134
or      ax, ax
jz      short loc_2E092
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 4

loc_2E078:
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ah]
sub     ax, es:[bx+0Ch]
add     ds:6938h, ax
mov     ax, es:[bx+0Ah]
mov     es:[bx+0Ch], ax
jmp     def_2DF0E       ; jumptable 0002DF0E default case

loc_2E092:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 5
jmp     loc_2DFC7

loc_2E09D:              ; jumptable 0002DF0E case 2
cmp     word ptr ds:6936h, 103h
jnb     short loc_2E0A8
jmp     loc_2E130

loc_2E0A8:
les     bx, [bp+var_4]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_2E197

loc_2E0B6:              ; jumptable 0002DF0E case 8
les     bx, [bp+var_4]
mov     ax, es:[bx+0Eh]
add     ds:0BF94h, ax
mov     ax, ds:0BF94h
mov     dx, ds
mov     bx, 0AA78h
mov     cx, ds
cmp     ax, bx
jb      short loc_2E0D5 ; jumptable 0002DF0E cases 4-7,9
sub     word ptr ds:0BF94h, 1000h

loc_2E0D5:              ; jumptable 0002DF0E cases 4-7,9
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    dword ptr ds:0C00Ch
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr ds:0BE0Bh, es
mov     ds:0BE09h, bx
mov     dx, ds:0BE13h
mov     ax, ds:0BE11h
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     word ptr ds:0BE13h, es
mov     ds:0BE11h, bx

loc_2E108:
mov     ax, es:[bx+0Ah]
sub     ds:6936h, ax
mov     ax, es:[bx+0Ch]
sub     ds:6938h, ax

def_2DF0E:              ; jumptable 0002DF0E default case
mov     ax, ds:0BE09h
or      ax, ds:0BE0Bh
jz      short loc_2E124
jmp     loc_2DEF1

loc_2E124:
mov     word ptr ds:0BE0Fh, 0
mov     word ptr ds:0BE0Dh, 0

loc_2E130:
mov     sp, bp
pop     bp
retf
sub_2DEE8 endp



; Attributes: bp-based frame

sub_2E134 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
xor     si, si
les     bx, ds:0BE09h
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2E181

loc_2E14D:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 2
jnz     short loc_2E16E
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
cmp     dx, [bp+arg_2]
jnz     short loc_2E16E
cmp     ax, [bp+arg_0]
jnz     short loc_2E16E
mov     ax, 1
jmp     short loc_2E190

loc_2E16E:
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ch]
add     si, ax
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2E181:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2E18E
cmp     si, 7Fh
jl      short loc_2E14D

loc_2E18E:
xor     ax, ax

loc_2E190:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_2E134 endp



; Attributes: bp-based frame

sub_2E197 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
xor     si, si
mov     di, si
les     bx, ds:0BE09h
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     loc_2E22B

loc_2E1B4:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 1
jnz     short loc_2E1E1
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
cmp     dx, [bp+arg_2]
jnz     short loc_2E1E1
cmp     ax, [bp+arg_0]
jnz     short loc_2E1E1
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 6
mov     si, 1
sub     ds:6938h, si
jmp     short loc_2E20D

loc_2E1E1:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+8], 3
jnz     short loc_2E218
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
cmp     dx, [bp+arg_2]
jnz     short loc_2E218
cmp     ax, [bp+arg_0]
jnz     short loc_2E218
les     bx, [bp+var_4]
mov     byte ptr es:[bx+8], 4
mov     si, 1
sub     word ptr ds:6938h, 3

loc_2E20D:
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ah]
mov     es:[bx+0Ch], ax

loc_2E218:
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ch]
add     di, ax
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2E22B:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2E23B
cmp     di, 7Fh
jge     short loc_2E23B
jmp     loc_2E1B4

loc_2E23B:
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_2E197 endp



; Attributes: bp-based frame

sub_2E245 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
mov     ax, ds:0BE15h
cmp     ax, ds:0BF94h
jnz     short loc_2E259
push    cs
call    near ptr sub_2DE99
push    cs
call    near ptr sub_2DCA8

loc_2E259:
mov     al, [bp+arg_0]
mov     bx, ds:0BE15h
mov     [bx], al
inc     word ptr ds:0BE15h
mov     ax, ds:0BE15h
mov     dx, ds
mov     bx, 0AA78h
mov     cx, ds
cmp     ax, bx
jb      short loc_2E27A
mov     word ptr ds:0BE15h, 9A78h

loc_2E27A:
inc     word ptr ds:0BE17h
pop     bp
retf    2
sub_2E245 endp



; Attributes: bp-based frame

sub_2E282 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
cmp     [bp+arg_2], 0
jz      short loc_2E2CB
cmp     byte ptr ds:22C1h, 0
jnz     short loc_2E29C
cmp     byte ptr ds:22C0h, 0
jz      short loc_2E2CB

loc_2E29C:
push    cs
call    near ptr sub_2DE99
mov     ax, 9
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_2DCDD
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, [bp+arg_2]
les     bx, [bp+var_4]
mov     es:[bx+12h], ax
mov     ax, [bp+arg_0]
mov     es:[bx+10h], ax
mov     byte ptr es:[bx+9], 0Ch
push    cs
call    near ptr sub_2DEE8

loc_2E2CB:
mov     sp, bp
pop     bp
retf    4
sub_2E282 endp



; Attributes: bp-based frame

sub_2E2D1 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
push    cs
call    near ptr sub_2DE99
mov     ax, 9
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_2DCDD
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
les     bx, [bp+var_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     al, [bp+arg_4]
mov     es:[bx+9], al
push    cs
call    near ptr sub_2DEE8
mov     sp, bp
pop     bp
retf    6
sub_2E2D1 endp



; Attributes: bp-based frame

sub_2E30E proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, 0Dh
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_2E2D1
pop     bp
retf    4
sub_2E30E endp



; Attributes: bp-based frame

sub_2E323 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, 0Eh
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_2E2D1
pop     bp
retf    4
sub_2E323 endp

seg025 ends


; Segment type: Pure code
seg026 segment byte public 'CODE' use16
assume cs:seg026
;org 8
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2E338 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 38h ; '8'
jnz     short loc_2E350
les     bx, es:[bx+0Ah]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
jmp     short loc_2E359

loc_2E350:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 37h ; '7'
jz      short loc_2E384

loc_2E359:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 35h ; '5'
jnz     short loc_2E369
cmp     byte ptr es:[bx+1], 0Fh
jz      short loc_2E384

loc_2E369:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
mov     bx, ax
cmp     byte ptr [bx+693Ah], 0
jnz     short loc_2E384
mov     ax, 0B3h
push    ax
call    sub_31324
mov     sp, bp

loc_2E384:
pop     bp
retn    4
sub_2E338 endp



; Attributes: bp-based frame

sub_2E388 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_2E399
jmp     loc_2E542       ; jumptable 0002E3C2 cases 2,3

loc_2E399:
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 9
jnz     short loc_2E3B3
jmp     loc_2E542       ; jumptable 0002E3C2 cases 2,3

loc_2E3B3:
jg      short loc_2E3D5
dec     ax              ; switch 7 cases
cmp     ax, 6
jbe     short loc_2E3BE
jmp     def_2E3C2       ; jumptable 0002E3C2 default case, cases 5,6

loc_2E3BE:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2E3C2[bx] ; switch jump
jpt_2E3C2 dw offset loc_2E407 ; jump table for switch statement
dw offset loc_2E542
dw offset loc_2E542
dw offset loc_2E3F7
dw offset def_2E3C2
dw offset def_2E3C2
dw offset loc_2E407

loc_2E3D5:
cmp     ax, 2Dh ; '-'
jz      short loc_2E418
jg      short loc_2E3EC
cmp     ax, 17h
jz      short loc_2E42A
cmp     ax, 2Ch ; ','
jnz     short loc_2E3E9
jmp     loc_2E4DB

loc_2E3E9:              ; jumptable 0002E3C2 default case, cases 5,6
jmp     def_2E3C2

loc_2E3EC:
cmp     ax, 38h ; '8'
jnz     short loc_2E3F4
jmp     loc_2E516

loc_2E3F4:              ; jumptable 0002E3C2 default case, cases 5,6
jmp     def_2E3C2

loc_2E3F7:              ; jumptable 0002E3C2 case 4
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
push    word ptr es:[bx+0Ah]
call    sub_3B194

loc_2E407:              ; jumptable 0002E3C2 cases 1,7
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_2E548
jmp     loc_2E542       ; jumptable 0002E3C2 cases 2,3

loc_2E418:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_2E388
jmp     loc_2E542       ; jumptable 0002E3C2 cases 2,3

loc_2E42A:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_2E447
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2E447:
mov     word ptr [bp+var_4+2], 0
mov     word ptr [bp+var_4], 0
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 7
jz      short loc_2E460
cmp     byte ptr es:[bx], 4
jnz     short loc_2E498

loc_2E460:
les     bx, [bp+var_8]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_2E498
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+var_8]
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
les     bx, [bp+var_4]
cmp     word ptr es:[bx+10h], 1FFFh
ja      short loc_2E498
mov     ax, ds:0BDABh
add     es:[bx+10h], ax

loc_2E498:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_2E388
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_2E388
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2E4C1
jmp     loc_2E542       ; jumptable 0002E3C2 cases 2,3

loc_2E4C1:
les     bx, [bp+var_4]
or      byte ptr es:[bx+9], 2
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, [bp+var_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_2E542 ; jumptable 0002E3C2 cases 2,3

loc_2E4DB:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
cmp     byte ptr es:[bx], 1
jz      short loc_2E4F4
cmp     byte ptr es:[bx], 7
jnz     short loc_2E50A

loc_2E4F4:
les     bx, [bp+var_8]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_2E50A
les     bx, es:[bx+6]
or      byte ptr es:[bx+9], 0Bh

loc_2E50A:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    cs
call    near ptr sub_2E388
jmp     short loc_2E542 ; jumptable 0002E3C2 cases 2,3

loc_2E516:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_2E338

def_2E3C2:              ; jumptable 0002E3C2 default case, cases 5,6
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_2E388
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_2E388

loc_2E542:              ; jumptable 0002E3C2 cases 2,3
mov     sp, bp
pop     bp
retf    4
sub_2E388 endp



; Attributes: bp-based frame

sub_2E548 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2E586
les     bx, [bp+arg_0]
test    byte ptr es:[bx+9], 2
jnz     short loc_2E56F
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, 0AAh
push    ax
call    sub_31324
mov     sp, bp

loc_2E56F:
les     bx, [bp+arg_0]
or      byte ptr es:[bx+9], 1
cmp     word ptr es:[bx+10h], 1FFFh
ja      short loc_2E586
mov     ax, ds:0BDABh
add     es:[bx+10h], ax

loc_2E586:
pop     bp
retn    4
sub_2E548 endp



; Attributes: bp-based frame

sub_2E58A proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= byte ptr  8
arg_4= word ptr  0Ah
arg_6= byte ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_A]
push    [bp+arg_8]
call    sub_234E1
mov     [bp+arg_A], dx
mov     [bp+arg_8], ax
push    dx
push    ax
call    sub_2E338
mov     ax, 14h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 0
push    [bp+arg_A]
push    [bp+arg_8]
push    cs
call    near ptr sub_2E388
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
les     bx, [bp+var_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     al, [bp+arg_6]
mov     es:[bx+0Eh], al
mov     ax, [bp+arg_4]
mov     es:[bx+0Ah], ax
mov     al, [bp+arg_2]
mov     es:[bx+0Fh], al
mov     ax, [bp+arg_0]
mov     es:[bx+0Ch], ax
push    word ptr [bp+var_4+2]
push    bx
call    sub_2ECDE
mov     sp, bp
pop     bp
retf    0Ch
sub_2E58A endp



; Attributes: bp-based frame

sub_2E600 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_A]
push    [bp+arg_8]
call    sub_234E1
mov     [bp+arg_A], dx
mov     [bp+arg_8], ax
push    dx
push    ax
call    sub_2E338
mov     ax, 14h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 0
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     al, byte ptr [bp+arg_6]
mov     es:[bx+0Eh], al
mov     ax, [bp+arg_4]
mov     es:[bx+0Ah], ax
cmp     [bp+arg_6], 0
jnz     short loc_2E659
mov     [bp+arg_2], 0

loc_2E659:
mov     al, byte ptr [bp+arg_2]
les     bx, [bp+var_4]
mov     es:[bx+0Fh], al
mov     ax, [bp+arg_0]
mov     es:[bx+0Ch], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retf    0Ch
sub_2E600 endp



; Attributes: bp-based frame

sub_2E675 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
les     bx, ds:0BFACh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, [bp+arg_0]
mov     ds:0BFB6h, ax
les     bx, [bp+arg_2]
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
les     bx, [bp+arg_6]
mov     ax, es:[bx+0Ah]
mov     ds:0BFB4h, ax
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
push    cs
call    near ptr sub_2E388
les     bx, [bp+var_4]
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_2ECDE
mov     sp, bp
pop     bp
retf    0Ah
sub_2E675 endp



; Attributes: bp-based frame

sub_2E6C6 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h
arg_C= word ptr  12h
arg_E= word ptr  14h

push    bp
mov     bp, sp
push    [bp+arg_E]
push    [bp+arg_C]
call    sub_20C7F
push    dx
push    ax
call    sub_237EA
mov     [bp+arg_E], dx
mov     [bp+arg_C], ax
push    dx
push    ax
push    cs
call    near ptr sub_2E388
push    [bp+arg_E]
push    [bp+arg_C]
push    [bp+arg_A]
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2E722
pop     bp
retf    10h
sub_2E6C6 endp



; Attributes: bp-based frame

sub_2E706 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
call    sub_2E722
pop     bp
retf    8
sub_2E706 endp



; Attributes: bp-based frame

sub_2E722 proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= dword ptr  0Ch
arg_C= dword ptr  10h

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     di, [bp+arg_0]
mov     si, [bp+arg_4]
les     bx, [bp+arg_C]
mov     al, es:[bx]
cbw
cmp     ax, 2Ch ; ','
jz      short loc_2E77D
jg      short loc_2E74B
cmp     ax, 2
jz      short loc_2E75B
cmp     ax, 2Ah ; '*'
jz      short loc_2E782
jmp     loc_2E82C

loc_2E74B:
cmp     ax, 32h ; '2'
jnz     short loc_2E753
jmp     loc_2E7F9

loc_2E753:
cmp     ax, 33h ; '3'
jz      short loc_2E7A3
jmp     loc_2E82C

loc_2E75B:
les     bx, [bp+arg_C]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_2E77D
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    [bp+arg_6]
push    si
call    sub_2EC34
mov     ax, 0FFFFh
jmp     loc_2E8A2

loc_2E77D:
xor     ax, ax
jmp     loc_2E8A2

loc_2E782:
les     bx, [bp+arg_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    [bp+arg_6]
push    si
push    [bp+arg_2]
push    di
call    sub_2E900
jmp     loc_2E89F

loc_2E7A3:
cmp     word ptr ds:0BF98h, 0
jz      short loc_2E7B1
call    sub_29B45
jmp     short loc_2E7B6

loc_2E7B1:
call    sub_29B97

loc_2E7B6:
mov     [bp+var_2], dx
mov     [bp+var_4], ax
les     bx, [bp+arg_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    dx
push    ax
push    [bp+arg_6]
push    si
push    [bp+arg_2]
push    di
call    sub_2E900
les     bx, [bp+arg_C]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    cs
call    near ptr sub_2E706
push    [bp+var_2]
push    [bp+var_4]
call    sub_2ED30
jmp     loc_2E89F

loc_2E7F9:
les     bx, [bp+arg_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    [bp+arg_6]
push    si
push    [bp+arg_2]
push    di
call    sub_2E722
les     bx, [bp+arg_C]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    cs
call    near ptr sub_2E706
jmp     short loc_2E89F

loc_2E82C:
cmp     word ptr ds:0BF98h, 0
jnz     short loc_2E846
push    word ptr [bp+arg_C+2]
push    word ptr [bp+arg_C]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_3E09F
jmp     short loc_2E89F

loc_2E846:
mov     ax, 18h
push    ax
call    sub_318B7
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx], 2
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
les     bx, [bp+arg_8]
inc     word ptr es:[bx+14h]
mov     dx, word ptr [bp+arg_C+2]
mov     ax, word ptr [bp+arg_C]
les     bx, [bp+var_8]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
mov     al, byte ptr [bp+arg_6]
mov     es:[bx+0Eh], al
mov     es:[bx+0Ah], si
mov     al, byte ptr [bp+arg_2]
mov     es:[bx+0Fh], al
mov     es:[bx+0Ch], di
push    word ptr [bp+var_8+2]
push    bx
call    sub_2ECDE

loc_2E89F:
mov     ax, 1

loc_2E8A2:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    10h
sub_2E722 endp



; Attributes: bp-based frame

sub_2E8AA proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h
arg_C= word ptr  12h
arg_E= word ptr  14h

push    bp
mov     bp, sp
push    [bp+arg_E]
push    [bp+arg_C]
call    sub_2E8D5
push    dx
push    ax
push    [bp+arg_A]
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2E900
pop     bp
retf    10h
sub_2E8AA endp



; Attributes: bp-based frame

sub_2E8D5 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_20C7F
push    dx
push    ax
call    sub_237EA
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
push    dx
push    ax
push    cs
call    near ptr sub_2E388
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
pop     bp
retf    4
sub_2E8D5 endp



; Attributes: bp-based frame

sub_2E900 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh
arg_C= dword ptr  12h

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
mov     di, [bp+arg_0]
mov     si, [bp+arg_4]
les     bx, [bp+arg_C]
mov     al, es:[bx]
cbw
cmp     ax, 26h ; '&'
jnz     short loc_2E91D
jmp     loc_2EA55       ; jumptable 0002E95B case 39

loc_2E91D:
jg      short loc_2E94C
cmp     ax, 23h ; '#'
jnz     short loc_2E927
jmp     loc_2EA55       ; jumptable 0002E95B case 39

loc_2E927:
jg      short loc_2E939
cmp     ax, 2
jz      short loc_2E97A
cmp     ax, 22h ; '"'
jnz     short loc_2E936
jmp     loc_2EA55       ; jumptable 0002E95B case 39

loc_2E936:              ; jumptable 0002E95B default case, cases 40,41,43,45-49
jmp     def_2E95B

loc_2E939:
cmp     ax, 24h ; '$'
jnz     short loc_2E941
jmp     loc_2EA55       ; jumptable 0002E95B case 39

loc_2E941:
cmp     ax, 25h ; '%'
jnz     short loc_2E949
jmp     loc_2EA55       ; jumptable 0002E95B case 39

loc_2E949:              ; jumptable 0002E95B default case, cases 40,41,43,45-49
jmp     def_2E95B

loc_2E94C:              ; switch 13 cases
sub     ax, 27h ; '''
cmp     ax, 0Ch
jbe     short loc_2E957
jmp     def_2E95B       ; jumptable 0002E95B default case, cases 40,41,43,45-49

loc_2E957:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2E95B[bx] ; switch jump
jpt_2E95B dw offset loc_2EA55 ; jump table for switch statement
dw offset def_2E95B
dw offset def_2E95B
dw offset loc_2E9A1
dw offset def_2E95B
dw offset loc_2E98C
dw offset def_2E95B
dw offset def_2E95B
dw offset def_2E95B
dw offset def_2E95B
dw offset def_2E95B
dw offset loc_2E9C0
dw offset loc_2EA1A

loc_2E97A:
les     bx, [bp+arg_C]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_2E98C ; jumptable 0002E95B case 44
xor     ax, ax
jmp     loc_2EB16

loc_2E98C:              ; jumptable 0002E95B case 44
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    [bp+arg_6]
push    si
call    sub_2EC34
mov     ax, 0FFFFh
jmp     loc_2EB16

loc_2E9A1:              ; jumptable 0002E95B case 42
les     bx, [bp+arg_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    [bp+arg_6]
push    si
push    [bp+arg_2]
push    di
call    sub_2E722
jmp     loc_2EB13

loc_2E9C0:              ; jumptable 0002E95B case 50
cmp     word ptr ds:0BF98h, 0
jz      short loc_2E9CE
call    sub_29B45
jmp     short loc_2E9D3

loc_2E9CE:
call    sub_29B97

loc_2E9D3:
mov     [bp+var_2], dx
mov     [bp+var_4], ax
les     bx, [bp+arg_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    dx
push    ax
push    [bp+arg_6]
push    si
push    [bp+arg_2]
push    di
call    sub_2E722
les     bx, [bp+arg_C]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    cs
call    near ptr sub_2E900
push    [bp+var_2]
push    [bp+var_4]
call    sub_2ED30
jmp     loc_2EB13

loc_2EA1A:              ; jumptable 0002E95B case 51
les     bx, [bp+arg_C]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    [bp+arg_6]
push    si
push    [bp+arg_2]
push    di
push    cs
call    near ptr sub_2E900
les     bx, [bp+arg_C]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    cs
call    near ptr sub_2E900
jmp     loc_2EB13

loc_2EA55:              ; jumptable 0002E95B case 39
les     bx, [bp+arg_C]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 2
jnz     short def_2E95B ; jumptable 0002E95B default case, cases 40,41,43,45-49
les     bx, [bp+arg_C]
les     bx, es:[bx+0Ah]
mov     [bp+var_A], es
mov     [bp+var_C], bx
les     bx, [bp+arg_C]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, [bp+var_A]
mov     ax, [bp+var_C]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     al, es:[bx]
cbw
push    ax
call    sub_2EF7E
les     bx, [bp+arg_C]
mov     es:[bx], al

def_2E95B:              ; jumptable 0002E95B default case, cases 40,41,43,45-49
cmp     word ptr ds:0BF98h, 0
jnz     short loc_2EABA
push    word ptr [bp+arg_C+2]
push    word ptr [bp+arg_C]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_3DF8D
jmp     short loc_2EB13

loc_2EABA:
mov     ax, 18h
push    ax
call    sub_318B7
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx], 1
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
les     bx, [bp+arg_8]
inc     word ptr es:[bx+14h]
mov     dx, word ptr [bp+arg_C+2]
mov     ax, word ptr [bp+arg_C]
les     bx, [bp+var_8]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
mov     al, byte ptr [bp+arg_6]
mov     es:[bx+0Eh], al
mov     es:[bx+0Ah], si
mov     al, byte ptr [bp+arg_2]
mov     es:[bx+0Fh], al
mov     es:[bx+0Ch], di
push    word ptr [bp+var_8+2]
push    bx
call    sub_2ECDE

loc_2EB13:
mov     ax, 1

loc_2EB16:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    10h
sub_2E900 endp



; Attributes: bp-based frame

sub_2EB1E proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= byte ptr  8
arg_4= word ptr  0Ah
arg_6= byte ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_A]
push    [bp+arg_8]
call    sub_237EA
mov     [bp+arg_A], dx
mov     [bp+arg_8], ax
mov     ax, 14h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 6
push    [bp+arg_A]
push    [bp+arg_8]
push    cs
call    near ptr sub_2E388
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
les     bx, [bp+var_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     al, [bp+arg_6]
mov     es:[bx+0Eh], al
mov     ax, [bp+arg_4]
mov     es:[bx+0Ah], ax
mov     al, [bp+arg_2]
mov     es:[bx+0Fh], al
mov     ax, [bp+arg_0]
mov     es:[bx+0Ch], ax
push    word ptr [bp+var_4+2]
push    bx
call    sub_2ECDE
mov     sp, bp
pop     bp
retf    0Ch
sub_2EB1E endp

push    bp
mov     bp, sp
sub     sp, 4
cmp     word ptr ds:0BF98h, 0
jnz     short loc_2EBCC
call    dword ptr ds:0C048h
jmp     short loc_2EBB1

loc_2EBA2:
les     bx, [bp+0Ch]
inc     word ptr [bp+0Ch]
mov     al, es:[bx]
push    ax
call    sub_25959

loc_2EBB1:
les     bx, [bp+0Ch]
cmp     byte ptr es:[bx], 0
jnz     short loc_2EBA2
mov     al, 0Dh
push    ax
call    sub_25959
mov     al, 0Ah
push    ax
call    sub_25959
jmp     short loc_2EC2E

loc_2EBCC:
mov     word ptr ds:0BFA4h, 1
push    word ptr [bp+0Eh]
push    word ptr [bp+0Ch]
call    sub_46E60
add     ax, 15h
push    ax
call    sub_318B7
mov     [bp-2], dx
mov     [bp-4], ax
les     bx, [bp-4]
mov     byte ptr es:[bx], 7
mov     al, [bp+8]
mov     es:[bx+0Eh], al
mov     ax, [bp+6]
mov     es:[bx+0Ah], ax
mov     byte ptr es:[bx+0Fh], 0
mov     word ptr es:[bx+0Ch], 0
mov     al, [bp+0Ah]
mov     es:[bx+1], al
mov     ax, bx
add     ax, 14h
push    dx
push    ax
push    word ptr [bp+0Eh]
push    word ptr [bp+0Ch]
call    sub_46D76
push    word ptr [bp-2]
push    word ptr [bp-4]
call    sub_2ECDE

loc_2EC2E:
mov     sp, bp
pop     bp
retf    0Ah


; Attributes: bp-based frame

sub_2EC34 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= byte ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
cmp     word ptr ds:0BF98h, 0
jnz     short loc_2EC4F
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2DD94
jmp     loc_2ECD2

loc_2EC4F:
mov     ax, 18h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 4
push    dx
push    ax
call    sub_2ECDE
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+var_4]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
mov     al, [bp+arg_2]
mov     es:[bx+1], al
mov     ax, [bp+arg_0]
mov     es:[bx+12h], ax
les     bx, [bp+arg_4]
inc     word ptr es:[bx+14h]
mov     dx, es:[bx+0Ch]
mov     ax, es:[bx+0Ah]
les     bx, [bp+var_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, [bp+arg_4]
les     bx, es:[bx+0Ah]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
les     bx, [bp+arg_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, bx
les     bx, [bp+var_4]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax

loc_2ECD2:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     sp, bp
pop     bp
retf    8
sub_2EC34 endp



; Attributes: bp-based frame

sub_2ECDE proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
mov     dx, ds:0BF1Fh
mov     ax, ds:0BF1Dh
les     bx, [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
or      ax, dx
jz      short loc_2ED0A
mov     dx, word ptr [bp+arg_0+2]
mov     ax, bx
les     bx, ds:0BF1Dh
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_2ED15

loc_2ED0A:
les     bx, [bp+arg_0]
mov     word ptr ds:0BF1Bh, es
mov     ds:0BF19h, bx

loc_2ED15:
les     bx, [bp+arg_0]
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
mov     word ptr ds:0BF1Fh, es
mov     ds:0BF1Dh, bx
pop     bp
retn    4
sub_2ECDE endp



; Attributes: bp-based frame

sub_2ED30 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_2ED58
cmp     word ptr ds:0BF98h, 0
jnz     short loc_2ED4F
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2DDC9
jmp     short loc_2ED58

loc_2ED4F:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2ECDE

loc_2ED58:
pop     bp
retf    4
sub_2ED30 endp



; Attributes: bp-based frame

sub_2ED5C proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
cmp     word ptr ds:0BFA8h, 0
jnz     short loc_2EDAA
mov     ax, ds:0BE1Dh
mov     ds:0BFB4h, ax
call    sub_2AEAA
cmp     byte ptr ds:22C3h, 0
jz      short loc_2ED7D
call    sub_2F6AA

loc_2ED7D:
call    dword ptr ds:0C028h
call    sub_3B419
mov     word ptr ds:0BF98h, 0
push    word ptr ds:0BF1Bh
push    word ptr ds:0BF19h
call    sub_2C834
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3B82E

loc_2EDAA:
pop     bp
retf    8
sub_2ED5C endp



; Attributes: bp-based frame

sub_2EDAE proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     ds:0C088h, ax
mov     ax, [bp+arg_2]
mov     ds:0C08Ah, ax
mov     word ptr ds:0BF1Fh, 0
mov     word ptr ds:0BF1Dh, 0
xor     bx, bx
mov     es, bx
assume es:nothing
mov     word ptr ds:0BF1Bh, es
mov     ds:0BF19h, bx
mov     ds:0BFA4h, bx
mov     word ptr ds:0BF98h, 1
call    sub_2F03D
pop     bp
retf    4
sub_2EDAE endp



; Attributes: bp-based frame

sub_2EDE8 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 0Eh
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
assume es:nothing
mov     byte ptr es:[bx], 8
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
push    word ptr [bp+var_4+2]
push    bx
call    sub_2ECDE
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     sp, bp
pop     bp
retf    4
sub_2EDE8 endp



; Attributes: bp-based frame

sub_2EE25 proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     [bp+var_6], es
mov     [bp+var_8], bx
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jnz     short loc_2EE4F
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_30543
jmp     short loc_2EE7A

loc_2EE4F:
mov     ax, 0Eh
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 9
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
push    word ptr [bp+var_4+2]
push    bx
call    sub_2ECDE

loc_2EE7A:
mov     sp, bp
pop     bp
retf    4
sub_2EE25 endp



; Attributes: bp-based frame

sub_2EE80 proc far

arg_0= word ptr  6
arg_2= byte ptr  8
arg_4= word ptr  0Ah
arg_6= byte ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
push    [bp+arg_A]
push    [bp+arg_8]
call    sub_237EA
mov     [bp+arg_A], dx
mov     [bp+arg_8], ax
mov     ax, 1Eh
push    ax
call    sub_318B7
mov     ds:0BDB3h, dx
mov     ds:0BDB1h, ax
les     bx, ds:0BDB1h
mov     word ptr es:[bx+14h], 0
mov     bx, ax
mov     word ptr es:[bx+18h], 0
mov     word ptr es:[bx+16h], 0
mov     bx, ax
mov     word ptr es:[bx+1Ch], 0
mov     word ptr es:[bx+1Ah], 0
mov     bx, ax
mov     byte ptr es:[bx], 3
mov     al, [bp+arg_6]
mov     bx, ds:0BDB1h
mov     es:[bx+0Eh], al
mov     ax, [bp+arg_4]
mov     bx, ds:0BDB1h
mov     es:[bx+0Ah], ax
mov     al, [bp+arg_2]
mov     bx, ds:0BDB1h
mov     es:[bx+0Fh], al
mov     ax, [bp+arg_0]
mov     bx, ds:0BDB1h
mov     es:[bx+0Ch], ax
push    [bp+arg_A]
push    [bp+arg_8]
push    cs
call    near ptr sub_2E388
mov     dx, [bp+arg_A]
mov     ax, [bp+arg_8]
les     bx, ds:0BDB1h
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
push    word ptr ds:0BDB3h
push    bx
call    sub_2ECDE
pop     bp
retf    0Ch
sub_2EE80 endp



; Attributes: bp-based frame

sub_2EF24 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, ds:0BDB1h
les     bx, es:[bx+16h]
inc     word ptr es:[bx+14h]
les     bx, ds:0BDB1h
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_2EF5D

loc_2EF46:
les     bx, [bp+var_4]
les     bx, es:[bx+6]
inc     word ptr es:[bx+14h]
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2EF5D:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2EF46
mov     sp, bp
pop     bp
retf    4
sub_2EF24 endp



; Attributes: bp-based frame

sub_2EF6B proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     bx, [bp+arg_0]
add     bx, 0FFDEh
shl     bx, 1
mov     ax, [bx+697Bh]
pop     bp
retf    2
sub_2EF6B endp



; Attributes: bp-based frame

sub_2EF7E proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     bx, [bp+arg_0]
add     bx, 0FFDEh
shl     bx, 1
mov     ax, [bx+6987h]
pop     bp
retf    2
sub_2EF7E endp



; Attributes: bp-based frame

sub_2EF91 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jz      short loc_2EFDF ; jumptable 0002EFB8 cases 1-3
les     bx, [bp+arg_2]
mov     al, es:[bx]
cbw
cmp     ax, 5
jz      short loc_2EFE3 ; jumptable 0002EFB8 case 4
jg      short loc_2EFC5
dec     ax              ; switch 4 cases
cmp     ax, 3
ja      short def_2EFB8 ; jumptable 0002EFB8 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2EFB8[bx] ; switch jump
jpt_2EFB8 dw offset loc_2EFDF ; jump table for switch statement
dw offset loc_2EFDF
dw offset loc_2EFDF
dw offset loc_2EFE3

loc_2EFC5:
cmp     ax, 8
jz      short loc_2EFDF ; jumptable 0002EFB8 cases 1-3
jg      short loc_2EFD8
cmp     ax, 6
jz      short loc_2EFE3 ; jumptable 0002EFB8 case 4
cmp     ax, 7
jz      short loc_2EFDF ; jumptable 0002EFB8 cases 1-3
jmp     short def_2EFB8 ; jumptable 0002EFB8 default case

loc_2EFD8:
cmp     ax, 2Dh ; '-'
jz      short loc_2EFF7
jmp     short def_2EFB8 ; jumptable 0002EFB8 default case

loc_2EFDF:              ; jumptable 0002EFB8 cases 1-3
xor     ax, ax
jmp     short loc_2F038

loc_2EFE3:              ; jumptable 0002EFB8 case 4
les     bx, [bp+arg_2]
mov     ax, es:[bx+0Ah]
cmp     ax, si
jnz     short loc_2EFF3
mov     ax, 1
jmp     short loc_2EFF5

loc_2EFF3:
xor     ax, ax

loc_2EFF5:
jmp     short loc_2F038

loc_2EFF7:
les     bx, [bp+arg_2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    si
push    cs
call    near ptr sub_2EF91
jmp     short loc_2F038

def_2EFB8:              ; jumptable 0002EFB8 default case
les     bx, [bp+arg_2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    si
push    cs
call    near ptr sub_2EF91
or      ax, ax
jnz     short loc_2F031
les     bx, [bp+arg_2]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    si
push    cs
call    near ptr sub_2EF91
or      ax, ax
jz      short loc_2F036

loc_2F031:
mov     ax, 1
jmp     short loc_2F038

loc_2F036:
xor     ax, ax

loc_2F038:
pop     si
pop     bp
retf    6
sub_2EF91 endp

seg026 ends


; Segment type: Pure code
seg027 segment byte public 'CODE' use16
assume cs:seg027
;org 0Dh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_2F03D proc far
mov     word ptr ds:0BF9Eh, 0
mov     word ptr ds:0BF9Ch, 0
mov     word ptr ds:0BFA2h, 0
mov     word ptr ds:0BFA0h, 0
retf
sub_2F03D endp



; Attributes: bp-based frame

sub_2F056 proc near

var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 8
mov     ax, ds:0BF9Ch
or      ax, ds:0BF9Eh
jz      short loc_2F07C
les     bx, ds:0BF9Ch
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx]
mov     word ptr ds:0BF9Eh, es
mov     ds:0BF9Ch, bx
jmp     short loc_2F08B

loc_2F07C:
mov     ax, 14h
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_2F08B:
mov     dx, ds:0BFA2h
mov     ax, ds:0BFA0h
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:0BFA2h, es
mov     ds:0BFA0h, bx
add     bx, 4
mov     [bp+var_6], es
mov     [bp+var_8], bx
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+2], 0
mov     byte ptr es:[bx], 4
mov     byte ptr es:[bx+1], 0
mov     ax, [bp+arg_0]
mov     es:[bx+0Ah], ax
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
mov     dx, [bp+var_6]
mov     ax, bx
mov     sp, bp
pop     bp
retn    2
sub_2F056 endp



; Attributes: bp-based frame

sub_2F0E0 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    si
jmp     short loc_2F117

loc_2F0E9:
les     bx, ds:0BFA0h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx]
mov     word ptr ds:0BFA2h, es
mov     ds:0BFA0h, bx
mov     dx, ds:0BF9Eh
mov     ax, ds:0BF9Ch
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:0BF9Eh, es
mov     ds:0BF9Ch, bx

loc_2F117:
mov     ax, ds:0BFA0h
or      ax, ds:0BFA2h
jnz     short loc_2F0E9
mov     word ptr ds:0BF9Ah, 0
mov     si, 7422h
jmp     short loc_2F142

loc_2F12B:
cmp     byte ptr [si+9], 0
jle     short loc_2F13F
mov     byte ptr [si+9], 0
mov     word ptr [si+0Ch], 0
mov     word ptr [si+0Ah], 0

loc_2F13F:
add     si, 10h

loc_2F142:
cmp     word ptr [si], 0
jnz     short loc_2F12B
pop     si
mov     sp, bp
pop     bp
retf
sub_2F0E0 endp



; Attributes: bp-based frame

sub_2F14C proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jz      short loc_2F196
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 4
jnz     short loc_2F196
test    si, 8000h
jnz     short loc_2F174
mov     ax, es:[bx+0Ah]
cmp     ax, si
jnz     short loc_2F196
jmp     short loc_2F191

loc_2F174:
and     si, 7FFFh
les     bx, [bp+arg_2]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
test    es:[bx+2], si
jz      short loc_2F196

loc_2F191:
mov     ax, 1
jmp     short loc_2F198

loc_2F196:
xor     ax, ax

loc_2F198:
pop     si
pop     bp
retf    6
sub_2F14C endp



; Attributes: bp-based frame

sub_2F19D proc far

arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
test    [bp+arg_4], 8000h
jnz     short loc_2F1CC
test    [bp+arg_2], 8000h
jz      short loc_2F1CC
mov     si, [bp+arg_4]
mov     cl, 4
shl     si, cl
add     si, 7412h
mov     ax, [si+2]
and     ax, [bp+arg_2]
test    ax, 7FFFh
jz      short loc_2F1CC
mov     ax, [bp+arg_4]
mov     [bp+arg_2], ax

loc_2F1CC:
test    [bp+arg_2], 8000h
jnz     short loc_2F1F2
mov     si, [bp+arg_2]
mov     cl, 4
shl     si, cl
add     si, 7412h
jmp     short loc_2F1E3

loc_2F1E0:
call    sub_2F26C

loc_2F1E3:
push    si
call    sub_2F36D
or      ax, ax
jz      short loc_2F1E0
mov     di, [bp+arg_2]
jmp     short loc_2F232

loc_2F1F2:
and     [bp+arg_2], 7FFFh
mov     ax, [bp+arg_2]
test    [bp+arg_4], ax
jz      short loc_2F205
mov     ax, [bp+arg_4]
and     [bp+arg_2], ax

loc_2F205:
mov     di, 1
mov     si, 7422h
jmp     short loc_2F223

loc_2F20D:
mov     ax, [bp+arg_2]
test    [si+2], ax
jz      short loc_2F21F
push    si
call    sub_2F36D
or      ax, ax
jnz     short loc_2F228

loc_2F21F:
inc     di
add     si, 10h

loc_2F223:
cmp     word ptr [si], 0
jnz     short loc_2F20D

loc_2F228:
cmp     word ptr [si], 0
jnz     short loc_2F232
call    sub_2F26C
jmp     short loc_2F205

loc_2F232:
mov     byte ptr [si+9], 1
mov     ax, ds:0BF9Ah
mov     [si+0Eh], ax
inc     word ptr ds:0BF9Ah
push    di
call    sub_2F056
mov     [si+0Ch], dx
mov     [si+0Ah], ax
mov     al, [bp+arg_0]
les     bx, [si+0Ah]
mov     es:[bx+1], al
push    word ptr [si+4]
call    sub_2F327
push    word ptr [si+6]
call    sub_2F327
mov     dx, [si+0Ch]
mov     ax, [si+0Ah]
pop     di
pop     si
pop     bp
retf    6
sub_2F19D endp




sub_2F26C proc near
push    si
push    di
mov     si, 7422h
xor     di, di
jmp     short loc_2F28C

loc_2F275:
cmp     byte ptr [si+9], 0
jle     short loc_2F289
or      di, di
jz      short loc_2F287
mov     ax, [si+0Eh]
cmp     ax, [di+0Eh]
jge     short loc_2F289

loc_2F287:
mov     di, si

loc_2F289:
add     si, 10h

loc_2F28C:
cmp     word ptr [si], 0
jnz     short loc_2F275
or      di, di
jnz     short loc_2F2A0
mov     ax, 1
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_2F2A0:
push    word ptr [di+0Ch]
push    word ptr [di+0Ah]
push    word ptr [di+2]
call    sub_390A0
push    di
call    sub_2F3E0
pop     di
pop     si
retn
sub_2F26C endp



; Attributes: bp-based frame

sub_2F2B5 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     cl, 4
shl     si, cl
add     si, 7412h
mov     byte ptr [si+9], 0FFh
mov     word ptr [si+0Ch], 0
mov     word ptr [si+0Ah], 0
pop     si
pop     bp
retf    2
sub_2F2B5 endp



; Attributes: bp-based frame

sub_2F2D7 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     cl, 4
shl     si, cl
add     si, 7412h
jmp     short loc_2F2EB

loc_2F2E8:
call    sub_2F26C

loc_2F2EB:
push    si
call    sub_2F36D
or      ax, ax
jz      short loc_2F2E8
mov     byte ptr [si+9], 1
mov     ax, ds:0BF9Ah
mov     [si+0Eh], ax
inc     word ptr ds:0BF9Ah
mov     word ptr [si+0Ch], 0
mov     word ptr [si+0Ah], 0
pop     si
pop     bp
retf    2
sub_2F2D7 endp



; Attributes: bp-based frame

sub_2F312 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     cl, 4
shl     ax, cl
add     ax, 7412h
push    ax
call    sub_2F3E0
pop     bp
retf    2
sub_2F312 endp



; Attributes: bp-based frame

sub_2F327 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
or      si, si
jz      short loc_2F351
mov     byte ptr [si+9], 1
mov     word ptr [si+0Eh], 61A8h
mov     word ptr [si+0Ch], 0
mov     word ptr [si+0Ah], 0
push    word ptr [si+4]
call    sub_2F327
push    word ptr [si+6]
call    sub_2F327

loc_2F351:
pop     si
pop     bp
retn    2
sub_2F327 endp



; Attributes: bp-based frame

sub_2F356 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     cl, 4
shl     ax, cl
add     ax, 7412h
push    ax
call    sub_2F36D
pop     bp
retf    2
sub_2F356 endp



; Attributes: bp-based frame

sub_2F36D proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
or      si, si
jz      short loc_2F38E
cmp     byte ptr [si+9], 0
jz      short loc_2F382
xor     ax, ax
jmp     short loc_2F3B0

loc_2F382:
cmp     byte ptr [si+8], 0
jnz     short loc_2F38E
cmp     word ptr [si+4], 0
jnz     short loc_2F393

loc_2F38E:
mov     ax, 1
jmp     short loc_2F3B0

loc_2F393:
push    word ptr [si+4]
push    cs
call    near ptr sub_2F36D
or      ax, ax
jz      short loc_2F3AE
push    word ptr [si+6]
push    cs
call    near ptr sub_2F36D
or      ax, ax
jz      short loc_2F3AE
mov     ax, 1
jmp     short loc_2F3B0

loc_2F3AE:
xor     ax, ax

loc_2F3B0:
pop     si
pop     bp
retf    2
sub_2F36D endp



; Attributes: bp-based frame

sub_2F3B5 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
mov     si, es:[bx+0Ah]
mov     cl, 4
shl     si, cl
add     si, 7412h
mov     dx, [si+0Ch]
mov     ax, [si+0Ah]
cmp     dx, word ptr [bp+arg_0+2]
jnz     short loc_2F3DB
cmp     ax, bx
jnz     short loc_2F3DB
push    si
call    sub_2F3E0

loc_2F3DB:
pop     si
pop     bp
retf    4
sub_2F3B5 endp



; Attributes: bp-based frame

sub_2F3E0 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
or      si, si
jz      short loc_2F405
mov     byte ptr [si+9], 0
mov     word ptr [si+0Ch], 0
mov     word ptr [si+0Ah], 0
push    word ptr [si+4]
call    sub_2F3E0
push    word ptr [si+6]
call    sub_2F3E0

loc_2F405:
pop     si
pop     bp
retn    2
sub_2F3E0 endp




sub_2F40A proc far
push    si
push    di

loc_2F40C:
mov     si, 7422h
xor     di, di
jmp     short loc_2F42A

loc_2F413:
cmp     byte ptr [si+9], 0
jle     short loc_2F427
or      di, di
jz      short loc_2F425
mov     ax, [si+0Eh]
cmp     ax, [di+0Eh]
jge     short loc_2F427

loc_2F425:
mov     di, si

loc_2F427:
add     si, 10h

loc_2F42A:
cmp     word ptr [si], 0
jnz     short loc_2F413
or      di, di
jz      short loc_2F447
push    word ptr [di+0Ch]
push    word ptr [di+0Ah]
push    word ptr [di+2]
call    sub_390A0
push    di
call    sub_2F3E0
jmp     short loc_2F40C

loc_2F447:
pop     di
pop     si
retf
sub_2F40A endp



; Attributes: bp-based frame

sub_2F44A proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
mov     si, es:[bx+0Ah]
mov     cl, 4
shl     si, cl
add     si, 7412h
push    si
call    sub_2F3E0
mov     si, [si+4]
mov     byte ptr [si+9], 1
mov     ax, ds:0BF9Ah
mov     [si+0Eh], ax
inc     word ptr ds:0BF9Ah
mov     ax, si
sub     ax, 7412h
mov     bx, 10h
cwd
idiv    bx
push    ax
call    sub_2F056
mov     [si+0Ch], dx
mov     [si+0Ah], ax
push    word ptr [si+4]
call    sub_2F327
push    word ptr [si+6]
call    sub_2F327
mov     dx, [si+0Ch]
mov     ax, [si+0Ah]
pop     si
pop     bp
retf    4
sub_2F44A endp



; Attributes: bp-based frame

sub_2F49E proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
mov     si, es:[bx+0Ah]
mov     cl, 4
shl     si, cl
add     si, 7412h
push    si
call    sub_2F3E0
mov     si, [si+6]
mov     byte ptr [si+9], 1
mov     ax, ds:0BF9Ah
mov     [si+0Eh], ax
inc     word ptr ds:0BF9Ah
mov     ax, si
sub     ax, 7412h
mov     bx, 10h
cwd
idiv    bx
push    ax
call    sub_2F056
mov     [si+0Ch], dx
mov     [si+0Ah], ax
push    word ptr [si+4]
call    sub_2F327
push    word ptr [si+6]
call    sub_2F327
mov     dx, [si+0Ch]
mov     ax, [si+0Ah]
pop     si
pop     bp
retf    4
sub_2F49E endp



; Attributes: bp-based frame

sub_2F4F2 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
cmp     word ptr es:[bx+4], 0
jz      short loc_2F531
les     bx, [bp+arg_0]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx+4]
sub     ax, 7412h
mov     bx, 10h
cwd
idiv    bx
jmp     short loc_2F538

loc_2F531:
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]

loc_2F538:
pop     bp
retf    4
sub_2F4F2 endp



; Attributes: bp-based frame

sub_2F53C proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
cmp     word ptr es:[bx+6], 0
jz      short loc_2F57B
les     bx, [bp+arg_0]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx+6]
sub     ax, 7412h
mov     bx, 10h
cwd
idiv    bx
jmp     short loc_2F582

loc_2F57B:
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]

loc_2F582:
pop     bp
retf    4
sub_2F53C endp

push    bp
mov     bp, sp
les     bx, [bp+6]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx]
mov     dx, ds
pop     bp
retf    4
push    bp
mov     bp, sp
les     bx, [bp+6]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
mov     bx, es:[bx+4]
mov     ax, [bx]
mov     dx, ds
pop     bp
retf    4
push    bp
mov     bp, sp
les     bx, [bp+6]
mov     bx, es:[bx+0Ah]
mov     cl, 4
shl     bx, cl
add     bx, 7412h
mov     ax, ds
mov     es, ax
mov     bx, es:[bx+6]
mov     ax, [bx]
mov     dx, ds
pop     bp
retf    4


; Attributes: bp-based frame

sub_2F5E9 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
jmp     loc_2F668

loc_2F5EF:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 8
jnz     short loc_2F5FE
jmp     loc_2F673       ; jumptable 0002F60A cases 1-3,5-7

loc_2F5FE:
jg      short loc_2F61D
dec     ax              ; switch 7 cases
cmp     ax, 6
ja      short def_2F60A ; jumptable 0002F60A default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2F60A[bx] ; switch jump
jpt_2F60A dw offset loc_2F673 ; jump table for switch statement
dw offset loc_2F673
dw offset loc_2F673
dw offset loc_2F641
dw offset loc_2F673
dw offset loc_2F673
dw offset loc_2F673

loc_2F61D:
cmp     ax, 0Ch
jz      short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7
jg      short loc_2F635
cmp     ax, 9
jz      short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7
cmp     ax, 0Ah
jz      short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7
cmp     ax, 0Bh
jz      short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7
jmp     short def_2F60A ; jumptable 0002F60A default case

loc_2F635:
cmp     ax, 2Dh ; '-'
jz      short loc_2F65B
cmp     ax, 3Ch ; '<'
jz      short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7
jmp     short def_2F60A ; jumptable 0002F60A default case

loc_2F641:              ; jumptable 0002F60A case 4
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    cs
call    near ptr sub_2F3B5
jmp     short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7

def_2F60A:              ; jumptable 0002F60A default case
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2F5E9

loc_2F65B:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_2F668:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2F673 ; jumptable 0002F60A cases 1-3,5-7
jmp     loc_2F5EF

loc_2F673:              ; jumptable 0002F60A cases 1-3,5-7
pop     bp
retn    4
sub_2F5E9 endp



; Attributes: bp-based frame

sub_2F677 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_2F69D
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 0
jz      short loc_2F69D
cmp     byte ptr es:[bx+1], 12h
jz      short loc_2F69D
mov     al, es:[bx+4]
cbw
push    ax
push    cs
call    near ptr sub_2F312

loc_2F69D:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F5E9
pop     bp
retf    4
sub_2F677 endp

seg027 ends


; Segment type: Pure code
seg028 segment byte public 'CODE' use16
assume cs:seg028
;org 0Ah
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_2F6AA proc far

var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 18h
push    si

loc_2F6B1:
mov     word ptr ds:0BFA6h, 0
les     bx, ds:0BF19h
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx
jmp     loc_2FCCC

loc_2F6C4:
call    sub_1BA0B
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+var_18]
mov     al, es:[bx]
cbw
dec     ax              ; switch 5 cases
cmp     ax, 4
jbe     short loc_2F6E6
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2F6E6:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_2F6EA[bx] ; switch jump
jpt_2F6EA dw offset loc_2FB4C ; jump table for switch statement
dw offset loc_2FB4C
dw offset loc_2F7EF
dw offset loc_2F6F9
dw offset loc_2FC62

loc_2F6F9:              ; jumptable 0002F6EA case 4
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2FE14
or      ax, ax
jz      short loc_2F709
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2F709:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
or      ax, dx
jz      short loc_2F776
jmp     short loc_2F745

loc_2F71E:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_30543
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_2F745:
mov     ax, word ptr [bp+var_14]
or      ax, word ptr [bp+var_14+2]
jz      short loc_2F756
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 5
jnz     short loc_2F71E

loc_2F756:
mov     ax, word ptr [bp+var_14]
or      ax, word ptr [bp+var_14+2]
jz      short loc_2F776
les     bx, [bp+var_18]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
cmp     dx, word ptr [bp+var_14+2]
jnz     short loc_2F776
cmp     ax, word ptr [bp+var_14]
jnz     short loc_2F776
jmp     loc_2FC73

loc_2F776:
les     bx, [bp+var_18]
mov     ax, es:[bx+14h]
or      ax, es:[bx+16h]
jnz     short loc_2F786
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2F786:
push    word ptr es:[bx+16h]
push    word ptr es:[bx+14h]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jnz     short loc_2F7C8
mov     bx, ax
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+var_18]
cmp     dx, es:[bx+16h]
jnz     short loc_2F7B9
cmp     ax, es:[bx+14h]
jz      short loc_2F7C8

loc_2F7B9:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_304D0

loc_2F7C8:
les     bx, [bp+var_18]
les     bx, es:[bx+14h]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
cmp     word ptr es:[bx+14h], 1
jz      short loc_2F7DF
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2F7DF:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    bx
call    sub_302EA
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2F7EF:              ; jumptable 0002F6EA case 3
les     bx, [bp+var_18]
les     bx, es:[bx+10h]
cmp     byte ptr es:[bx], 2
jz      short loc_2F7FF
jmp     loc_2F8D7

loc_2F7FF:
les     bx, [bp+var_18]
les     bx, es:[bx+10h]
mov     si, es:[bx+6]
les     bx, [bp+var_18]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2F82D

loc_2F819:
les     bx, [bp+var_8]
mov     ax, es:[bx+4]
cmp     ax, si
jz      short loc_2F835
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2F82D:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_2F819

loc_2F835:
mov     ax, 18h
push    ax
call    sub_318B7
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
mov     byte ptr es:[bx], 4
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_2F85C
les     bx, [bp+var_8]
les     bx, es:[bx+6]
jmp     short loc_2F863

loc_2F85C:
les     bx, [bp+var_18]
les     bx, es:[bx+16h]

loc_2F863:
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
les     bx, [bp+var_18]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2F88F

loc_2F878:
les     bx, [bp+var_8]
les     bx, es:[bx+6]
dec     word ptr es:[bx+14h]
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2F88F:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_2F878
les     bx, [bp+var_18]
les     bx, es:[bx+16h]
dec     word ptr es:[bx+14h]
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
les     bx, [bp+var_10]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
push    word ptr [bp+var_10+2]
push    bx
call    sub_2FD4E
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_305E4
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30543
jmp     loc_2FAFD

loc_2F8D7:
mov     word ptr [bp+var_4+2], 0
mov     word ptr [bp+var_4], 0
les     bx, [bp+var_18]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     loc_2F9FB

loc_2F8F1:
les     bx, [bp+var_8]
les     bx, es:[bx+6]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
push    word ptr [bp+var_10+2]
push    bx
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jnz     short loc_2F954
mov     bx, ax
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
cmp     dx, word ptr [bp+var_10+2]
jnz     short loc_2F928
cmp     ax, word ptr [bp+var_10]
jz      short loc_2F954

loc_2F928:
les     bx, [bp+var_10]
dec     word ptr es:[bx+14h]
les     bx, [bp+var_14]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+var_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
inc     word ptr es:[bx+14h]
jmp     short loc_2F982

loc_2F954:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 5
jnz     short loc_2F988
les     bx, [bp+var_10]
dec     word ptr es:[bx+14h]
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
les     bx, [bp+var_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_14]
inc     word ptr es:[bx+14h]

loc_2F982:
mov     word ptr ds:0BFA6h, 1

loc_2F988:
les     bx, [bp+var_18]
mov     dx, es:[bx+18h]
mov     ax, es:[bx+16h]
cmp     dx, word ptr [bp+var_10+2]
jnz     short loc_2F9E6
cmp     ax, word ptr [bp+var_10]
jnz     short loc_2F9E6
les     bx, [bp+var_10]
dec     word ptr es:[bx+14h]
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2F9C2
les     bx, [bp+var_8]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     short loc_2F9D7

loc_2F9C2:
les     bx, [bp+var_8]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
les     bx, [bp+var_18]
mov     es:[bx+1Ch], dx
mov     es:[bx+1Ah], ax

loc_2F9D7:
les     bx, [bp+var_18]
dec     word ptr es:[bx+14h]
mov     word ptr ds:0BFA6h, 1
jmp     short loc_2F9EF

loc_2F9E6:
les     bx, [bp+var_8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_2F9EF:
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2F9FB:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_2FA06
jmp     loc_2F8F1

loc_2FA06:
les     bx, [bp+var_18]
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jnz     short loc_2FA68
les     bx, [bp+var_18]
mov     dx, es:[bx+18h]
mov     ax, es:[bx+16h]
les     bx, [bp+var_14]
cmp     dx, es:[bx+16h]
jnz     short loc_2FA3D
cmp     ax, es:[bx+14h]
jz      short loc_2FA68

loc_2FA3D:
les     bx, [bp+var_18]
les     bx, es:[bx+16h]
dec     word ptr es:[bx+14h]
les     bx, [bp+var_14]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+var_18]
mov     es:[bx+18h], dx
mov     es:[bx+16h], ax
les     bx, es:[bx+16h]
inc     word ptr es:[bx+14h]
jmp     short loc_2FA94

loc_2FA68:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 5
jnz     short loc_2FA9A
les     bx, [bp+var_18]
les     bx, es:[bx+16h]
dec     word ptr es:[bx+14h]
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
les     bx, [bp+var_18]
mov     es:[bx+18h], dx
mov     es:[bx+16h], ax
les     bx, [bp+var_14]
inc     word ptr es:[bx+14h]

loc_2FA94:
mov     word ptr ds:0BFA6h, 1

loc_2FA9A:
les     bx, [bp+var_18]
cmp     word ptr es:[bx+14h], 0
jnz     short loc_2FB06
mov     ax, 18h
push    ax
call    sub_318B7
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
mov     byte ptr es:[bx], 4
les     bx, [bp+var_18]
les     bx, es:[bx+16h]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
mov     dx, word ptr [bp+var_14+2]
mov     ax, bx
les     bx, [bp+var_10]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
les     bx, [bp+var_14]
dec     word ptr es:[bx+14h]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_2FD4E
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_305E4
les     bx, [bp+var_18]
mov     byte ptr es:[bx], 0

loc_2FAFD:
mov     word ptr ds:0BFA6h, 1
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FB06:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
or      ax, dx
jnz     short loc_2FB1C
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FB1C:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 5
jnz     short loc_2FB28
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FB28:
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_2FB35
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FB35:
push    dx
push    bx
call    sub_30543
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FB4C:              ; jumptable 0002F6EA cases 1,2
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_18]
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
cmp     dx, word ptr [bp+var_14+2]
jnz     short loc_2FBB8
cmp     ax, word ptr [bp+var_14]
jnz     short loc_2FBB8
les     bx, [bp+var_18]
push    word ptr es:[bx+16h]
push    word ptr es:[bx+14h]
call    sub_2D2F3
or      ax, ax
jnz     short loc_2FB91
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30543
jmp     short loc_2FBA8

loc_2FB91:
les     bx, [bp+var_18]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     byte ptr es:[bx], 0

loc_2FBA8:
mov     word ptr ds:0BFA6h, 1
les     bx, [bp+var_14]
dec     word ptr es:[bx+14h]
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FBB8:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jnz     short loc_2FBDB
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    bx
call    sub_30457
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_2FBDB:
les     bx, [bp+var_18]
mov     ax, es:[bx+10h]
or      ax, es:[bx+12h]
jnz     short loc_2FBEB
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FBEB:
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jnz     short loc_2FC30
mov     bx, ax
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+var_18]
cmp     dx, es:[bx+12h]
jnz     short loc_2FC1E
cmp     ax, es:[bx+10h]
jz      short loc_2FC30

loc_2FC1E:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_30503
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FC30:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 5
jz      short loc_2FC3C
jmp     def_2F6EA       ; jumptable 0002F6EA default case

loc_2FC3C:
les     bx, [bp+var_18]
les     bx, es:[bx+10h]
dec     word ptr es:[bx+14h]
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
les     bx, [bp+var_18]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
les     bx, [bp+var_14]
inc     word ptr es:[bx+14h]
jmp     loc_2FAFD

loc_2FC62:              ; jumptable 0002F6EA case 5
cmp     word ptr ds:0BFA4h, 0
jnz     short loc_2FC80
les     bx, [bp+var_18]
cmp     word ptr es:[bx+14h], 0
ja      short loc_2FC80

loc_2FC73:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_30543
jmp     short def_2F6EA ; jumptable 0002F6EA default case

loc_2FC80:
les     bx, [bp+var_18]
cmp     word ptr es:[bx+14h], 0
jbe     short loc_2FCBA
push    word ptr [bp+var_18+2]
push    bx
call    sub_30672
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
or      ax, dx
jz      short def_2F6EA ; jumptable 0002F6EA default case
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 5
jnz     short def_2F6EA ; jumptable 0002F6EA default case
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    dx
push    bx
call    sub_2FCE6
les     bx, [bp+var_14]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short def_2F6EA ; jumptable 0002F6EA default case

loc_2FCBA:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2FF07

def_2F6EA:              ; jumptable 0002F6EA default case
les     bx, [bp+var_C]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx

loc_2FCCC:
mov     ax, word ptr [bp+var_18]
or      ax, word ptr [bp+var_18+2]
jz      short loc_2FCD7
jmp     loc_2F6C4

loc_2FCD7:
cmp     word ptr ds:0BFA6h, 0
jz      short loc_2FCE1
jmp     loc_2F6B1

loc_2FCE1:
pop     si
mov     sp, bp
pop     bp
retf
sub_2F6AA endp



; Attributes: bp-based frame

sub_2FCE6 proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_4]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_2FD38

loc_2FCFB:
les     bx, [bp+var_8]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_2FDD4
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
les     bx, [bp+var_8]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
push    word ptr [bp+var_8+2]
push    bx
call    sub_2FD4E
mov     word ptr ds:0BFA6h, 1
les     bx, [bp+var_4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_2FD38:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
cmp     dx, word ptr [bp+arg_4+2]
jnz     short loc_2FCFB
cmp     ax, word ptr [bp+arg_4]
jnz     short loc_2FCFB
mov     sp, bp
pop     bp
retn    8
sub_2FCE6 endp



; Attributes: bp-based frame

sub_2FD4E proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
les     bx, es:[bx+14h]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, bx
or      ax, word ptr [bp+var_4+2]
jnz     short loc_2FD85
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     bx, ax
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
jmp     short loc_2FDCE

loc_2FD85:
les     bx, [bp+var_4]
inc     word ptr es:[bx+14h]
mov     dx, es:[bx+0Ch]
mov     ax, es:[bx+0Ah]
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, bx
les     bx, [bp+var_4]
les     bx, es:[bx+0Ah]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
les     bx, [bp+var_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
les     bx, [bp+arg_0]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax

loc_2FDCE:
mov     sp, bp
pop     bp
retn    4
sub_2FD4E endp



; Attributes: bp-based frame

sub_2FDD4 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
les     bx, es:[bx+14h]
dec     word ptr es:[bx+14h]
les     bx, [bp+arg_0]
mov     dx, es:[bx+0Ch]
mov     ax, es:[bx+0Ah]
les     bx, es:[bx+0Eh]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
les     bx, [bp+arg_0]
mov     dx, es:[bx+10h]
mov     ax, es:[bx+0Eh]
les     bx, es:[bx+0Ah]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
pop     bp
retn    4
sub_2FDD4 endp



; Attributes: bp-based frame

sub_2FE14 proc near

var_14= dword ptr -14h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 14h
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_306B0
mov     [bp+var_E], dx
mov     [bp+var_10], ax
or      ax, dx
jnz     short loc_2FE30
jmp     loc_2FEFF

loc_2FE30:
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
jmp     loc_2FEE9

loc_2FE40:
les     bx, [bp+var_14]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_306B0
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
or      ax, dx
jnz     short loc_2FE63
jmp     loc_2FEE0

loc_2FE63:
push    [bp+var_E]
push    [bp+var_10]
push    dx
push    word ptr [bp+var_C]
call    sub_2FFF5
or      ax, ax
jz      short loc_2FEE0
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_306B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2FDD4
push    [bp+var_E]
push    [bp+var_10]
call    sub_30543
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2FEA8
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 5
jz      short loc_2FEC3

loc_2FEA8:
call    sub_29B45
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
les     bx, [bp+var_C]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_305E4

loc_2FEC3:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_0]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
push    word ptr [bp+arg_0+2]
push    bx
call    sub_2FD4E
mov     ax, 1
jmp     short loc_2FF01

loc_2FEE0:
les     bx, [bp+var_8]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx

loc_2FEE9:
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
cmp     dx, word ptr [bp+arg_0+2]
jz      short loc_2FEF7
jmp     loc_2FE40

loc_2FEF7:
cmp     ax, word ptr [bp+arg_0]
jz      short loc_2FEFF
jmp     loc_2FE40

loc_2FEFF:
xor     ax, ax

loc_2FF01:
mov     sp, bp
pop     bp
retn    4
sub_2FE14 endp



; Attributes: bp-based frame

sub_2FF07 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 14h
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_306B0
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
or      ax, dx
jnz     short loc_2FF23
jmp     loc_2FFEF

loc_2FF23:
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
jmp     loc_2FFD9

loc_2FF33:
les     bx, [bp+var_14]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_306B0
mov     [bp+var_A], dx
mov     [bp+var_C], ax
or      ax, dx
jnz     short loc_2FF56
jmp     loc_2FFD0

loc_2FF56:
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    dx
push    [bp+var_C]
call    sub_2FFF5
or      ax, ax
jz      short loc_2FFD0
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_306B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2FDD4
push    [bp+var_A]
push    [bp+var_C]
call    sub_30543
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_2FF9B
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 5
jz      short loc_2FFB6

loc_2FF9B:
call    sub_29B45
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
les     bx, [bp+var_10]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_305E4

loc_2FFB6:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+var_14]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
push    word ptr [bp+var_14+2]
push    bx
call    sub_2FD4E
jmp     short loc_2FFEF

loc_2FFD0:
les     bx, [bp+var_8]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx

loc_2FFD9:
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
cmp     dx, word ptr [bp+arg_0+2]
jz      short loc_2FFE7
jmp     loc_2FF33

loc_2FFE7:
cmp     ax, word ptr [bp+arg_0]
jz      short loc_2FFEF
jmp     loc_2FF33

loc_2FFEF:
mov     sp, bp
pop     bp
retn    4
sub_2FF07 endp



; Attributes: bp-based frame

sub_2FFF5 proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    si
les     bx, [bp+arg_4]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jz      short loc_3000D
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_3000D:
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
cmp     ax, 6           ; switch 7 cases
jbe     short loc_3001C
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_3001C:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_30020[bx] ; switch jump
jpt_30020 dw offset loc_30112 ; jump table for switch statement
dw offset loc_30033
dw offset loc_30033
dw offset loc_30071
dw offset def_30020
dw offset def_30020
dw offset loc_30112

loc_30033:              ; jumptable 00030020 cases 1,2
les     bx, [bp+arg_4]
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
les     bx, [bp+arg_0]
cmp     dx, es:[bx+12h]
jz      short loc_3004A
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_3004A:
cmp     ax, es:[bx+10h]
jz      short loc_30053
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_30053:
les     bx, [bp+arg_4]
push    word ptr es:[bx+16h]
push    word ptr es:[bx+14h]
les     bx, [bp+arg_0]
push    word ptr es:[bx+16h]
push    word ptr es:[bx+14h]
call    sub_3013A
mov     si, ax
jmp     loc_3012D

loc_30071:              ; jumptable 00030020 case 3
les     bx, [bp+arg_4]
mov     ax, es:[bx+14h]
les     bx, [bp+arg_0]
cmp     ax, es:[bx+14h]
jz      short loc_30084
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_30084:
les     bx, [bp+arg_4]
mov     dx, es:[bx+18h]
mov     ax, es:[bx+16h]
les     bx, [bp+arg_0]
cmp     dx, es:[bx+18h]
jz      short loc_3009B
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_3009B:
cmp     ax, es:[bx+16h]
jz      short loc_300A4
jmp     def_30020       ; jumptable 00030020 default case, cases 4,5

loc_300A4:
les     bx, [bp+arg_4]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_30102

loc_300C0:
les     bx, [bp+var_8]
mov     ax, es:[bx+4]
les     bx, [bp+var_4]
cmp     ax, es:[bx+4]
jnz     short def_30020 ; jumptable 00030020 default case, cases 4,5
les     bx, [bp+var_8]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
les     bx, [bp+var_4]
cmp     dx, es:[bx+8]
jnz     short def_30020 ; jumptable 00030020 default case, cases 4,5
cmp     ax, es:[bx+6]
jnz     short def_30020 ; jumptable 00030020 default case, cases 4,5
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_30102:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_30112 ; jumptable 00030020 cases 0,6
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_300C0

loc_30112:              ; jumptable 00030020 cases 0,6
les     bx, [bp+arg_4]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
les     bx, [bp+arg_0]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_3013A
mov     si, ax

loc_3012D:
mov     ax, si
jmp     short loc_30133

def_30020:              ; jumptable 00030020 default case, cases 4,5
xor     ax, ax

loc_30133:
pop     si
mov     sp, bp
pop     bp
retn    8
sub_2FFF5 endp



; Attributes: bp-based frame

sub_3013A proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    si
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jnz     short loc_30158
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_30153
mov     ax, 1
jmp     short loc_30155

loc_30153:
xor     ax, ax

loc_30155:
jmp     loc_302E5

loc_30158:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_30163
jmp     loc_3024D

loc_30163:
les     bx, [bp+arg_4]
mov     al, es:[bx]
les     bx, [bp+arg_0]
cmp     al, es:[bx]
jz      short loc_30174
jmp     loc_3024D

loc_30174:
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
les     bx, [bp+arg_0]
cmp     al, es:[bx+1]
jz      short loc_30187
jmp     loc_3024D

loc_30187:
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
cmp     al, es:[bx+5]
jz      short loc_301A2
jmp     loc_3024D

loc_301A2:
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
cmp     ax, 4
jz      short loc_301DD
jg      short loc_301C5
cmp     ax, 1
jz      short loc_301DD
cmp     ax, 2
jz      short loc_30211
cmp     ax, 3
jnz     short loc_301C2
jmp     loc_30235

loc_301C2:
jmp     loc_302A4

loc_301C5:
cmp     ax, 7
jz      short loc_301DD
cmp     ax, 9
jnz     short loc_301D2
jmp     loc_30258

loc_301D2:
cmp     ax, 2Dh ; '-'
jnz     short loc_301DA
jmp     loc_3025E

loc_301DA:
jmp     loc_302A4

loc_301DD:
les     bx, [bp+arg_4]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
les     bx, [bp+arg_0]
cmp     dx, es:[bx+8]
jnz     short loc_3020C
cmp     ax, es:[bx+6]
jnz     short loc_3020C
les     bx, [bp+arg_4]
mov     ax, es:[bx+0Ah]
les     bx, [bp+arg_0]
cmp     ax, es:[bx+0Ah]
jnz     short loc_3020C
mov     ax, 1
jmp     short loc_3020E

loc_3020C:
xor     ax, ax

loc_3020E:
jmp     loc_302E5

loc_30211:
les     bx, [bp+arg_4]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
les     bx, [bp+arg_0]
cmp     dx, es:[bx+8]
jnz     short loc_30230
cmp     ax, es:[bx+6]
jnz     short loc_30230
mov     ax, 1
jmp     short loc_30232

loc_30230:
xor     ax, ax

loc_30232:
jmp     loc_302E5

loc_30235:
xor     si, si
jmp     short loc_30253

loc_30239:
les     bx, [bp+arg_4]
add     bx, si
mov     al, es:[bx+6]
les     bx, [bp+arg_0]
add     bx, si
cmp     al, es:[bx+6]
jz      short loc_30252

loc_3024D:
xor     ax, ax
jmp     loc_302E5

loc_30252:
inc     si

loc_30253:
cmp     si, 0Ah
jl      short loc_30239

loc_30258:
mov     ax, 1
jmp     loc_302E5

loc_3025E:
les     bx, [bp+arg_4]
mov     al, es:[bx+0Ah]
les     bx, [bp+arg_0]
cmp     al, es:[bx+0Ah]
jnz     short loc_302A0
les     bx, [bp+arg_4]
mov     al, es:[bx+0Bh]
les     bx, [bp+arg_0]
cmp     al, es:[bx+0Bh]
jnz     short loc_302A0
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3013A
or      ax, ax
jz      short loc_302A0
mov     ax, 1
jmp     short loc_302A2

loc_302A0:
xor     ax, ax

loc_302A2:
jmp     short loc_302E5

loc_302A4:
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3013A
or      ax, ax
jz      short loc_302E3
les     bx, [bp+arg_4]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_3013A
or      ax, ax
jz      short loc_302E3
mov     ax, 1
jmp     short loc_302E5

loc_302E3:
xor     ax, ax

loc_302E5:
pop     si
pop     bp
retn    8
sub_3013A endp



; Attributes: bp-based frame

sub_302EA proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 10h
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_306B0
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
or      ax, dx
jnz     short loc_30306
jmp     loc_30451

loc_30306:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 4
jz      short loc_30312
jmp     loc_30451

loc_30312:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_30343

loc_30321:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 5
jnz     short loc_3032D
jmp     loc_30451

loc_3032D:
cmp     byte ptr es:[bx], 4
jz      short loc_3034B
cmp     byte ptr es:[bx], 3
jz      short loc_3034B
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_30343:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_30321

loc_3034B:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_30356
jmp     loc_30451

loc_30356:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
cmp     dx, word ptr [bp+arg_4+2]
jnz     short loc_303B8
cmp     ax, word ptr [bp+arg_4]
jnz     short loc_303B8

loc_30366:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_30672
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_30384
cmp     byte ptr es:[bx], 1
jnz     short loc_3038F

loc_30384:
les     bx, [bp+arg_0]
les     bx, es:[bx+10h]
dec     word ptr es:[bx+14h]

loc_3038F:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_30543
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
cmp     dx, word ptr [bp+arg_4+2]
jnz     short loc_303AD
cmp     ax, word ptr [bp+arg_4]
jnz     short loc_303AD
jmp     loc_30451

loc_303AD:
les     bx, [bp+var_C]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
jmp     short loc_30366

loc_303B8:
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+var_C]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_10+2]
mov     ax, bx
les     bx, [bp+var_8]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+var_C]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+var_C+2]
mov     ax, bx
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
les     bx, [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, bx
les     bx, [bp+arg_0]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
push    dx
push    ax
call    sub_30543
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_30543

loc_30451:
mov     sp, bp
pop     bp
retn    8
sub_302EA endp



; Attributes: bp-based frame

sub_30457 proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_30672
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_304CA
les     bx, [bp+arg_4]
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
cmp     dx, word ptr [bp+var_4+2]
jnz     short loc_304CA
cmp     ax, word ptr [bp+var_4]
jnz     short loc_304CA
les     bx, [bp+var_4]
dec     word ptr es:[bx+14h]
les     bx, [bp+arg_0]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+arg_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
les     bx, es:[bx+10h]
inc     word ptr es:[bx+14h]
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 1
jnz     short loc_304B7
mov     al, 2
jmp     short loc_304B9

loc_304B7:
mov     al, 1

loc_304B9:
les     bx, [bp+arg_4]
mov     es:[bx], al
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_30543

loc_304CA:
mov     sp, bp
pop     bp
retn    8
sub_30457 endp



; Attributes: bp-based frame

sub_304D0 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2FDD4
les     bx, [bp+arg_0]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+arg_4]
mov     es:[bx+16h], dx
mov     es:[bx+14h], ax
push    word ptr [bp+arg_4+2]
push    bx
call    sub_2FD4E
mov     word ptr ds:0BFA6h, 1
pop     bp
retn    8
sub_304D0 endp



; Attributes: bp-based frame

sub_30503 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
les     bx, [bp+arg_4]
les     bx, es:[bx+10h]
dec     word ptr es:[bx+14h]
les     bx, [bp+arg_0]
mov     dx, es:[bx+16h]
mov     ax, es:[bx+14h]
les     bx, [bp+arg_4]
mov     es:[bx+12h], dx
mov     es:[bx+10h], ax
mov     ax, es:[bx+10h]
or      ax, es:[bx+12h]
jz      short loc_30539
les     bx, es:[bx+10h]
inc     word ptr es:[bx+14h]

loc_30539:
mov     word ptr ds:0BFA6h, 1
pop     bp
retn    8
sub_30503 endp



; Attributes: bp-based frame

sub_30543 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
cmp     dx, ds:0BF1Bh
jnz     short loc_30567
cmp     ax, ds:0BF19h
jnz     short loc_30567
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr ds:0BF1Bh, es
mov     ds:0BF19h, bx

loc_30567:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
cmp     dx, ds:0BF1Fh
jnz     short loc_30588
cmp     ax, ds:0BF1Dh
jnz     short loc_30588
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     word ptr ds:0BF1Fh, es
mov     ds:0BF1Dh, bx

loc_30588:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4
jnz     short loc_30598
push    word ptr [bp+arg_0+2]
push    bx
call    sub_2FDD4

loc_30598:
les     bx, [bp+arg_0]
mov     ax, es:[bx+2]
or      ax, es:[bx+4]
jz      short loc_305B9
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
les     bx, es:[bx+2]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_305B9:
les     bx, [bp+arg_0]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_305DA
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, es:[bx+6]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_305DA:
mov     word ptr ds:0BFA6h, 1
pop     bp
retf    4
sub_30543 endp



; Attributes: bp-based frame

sub_305E4 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jnz     short loc_3061C
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, ds:0BF19h
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     dx, ds:0BF1Bh
mov     ax, bx
les     bx, [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr ds:0BF1Bh, es
mov     ds:0BF19h, bx
jmp     short loc_30657

loc_3061C:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+arg_0]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
les     bx, [bp+arg_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     dx, word ptr [bp+arg_4+2]
mov     ax, bx
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_30657:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
les     bx, [bp+arg_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     word ptr ds:0BFA6h, 1
pop     bp
retn    8
sub_305E4 endp



; Attributes: bp-based frame

sub_30672 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp

loc_30675:              ; jumptable 00030699 cases 8-11
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
mov     ax, bx
or      ax, word ptr [bp+arg_0+2]
jz      short def_30699 ; jumptable 00030699 default case
mov     al, es:[bx]
cbw
sub     ax, 8           ; switch 4 cases
cmp     ax, 3
ja      short def_30699 ; jumptable 00030699 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_30699[bx] ; switch jump
jpt_30699 dw offset loc_30675 ; jump table for switch statement
dw offset loc_30675
dw offset loc_30675
dw offset loc_30675

def_30699:              ; jumptable 00030699 default case
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
pop     bp
retn    4
sub_30672 endp



; Attributes: bp-based frame

sub_306B0 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp

loc_306B3:              ; jumptable 000306D7 cases 8-11
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
mov     ax, bx
or      ax, word ptr [bp+arg_0+2]
jz      short def_306D7 ; jumptable 000306D7 default case
mov     al, es:[bx]
cbw
sub     ax, 8           ; switch 4 cases
cmp     ax, 3
ja      short def_306D7 ; jumptable 000306D7 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_306D7[bx] ; switch jump
jpt_306D7 dw offset loc_306B3 ; jump table for switch statement
dw offset loc_306B3
dw offset loc_306B3
dw offset loc_306B3

def_306D7:              ; jumptable 000306D7 default case
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
pop     bp
retn    4
sub_306B0 endp

seg028 ends


; Segment type: Pure code
seg029 segment byte public 'CODE' use16
assume cs:seg029
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_306EE proc near
push    si

loc_306EF:
mov     ax, ds:0BFC0h
cmp     ax, ds:16h
jl      short loc_306FB
jmp     loc_30787

loc_306FB:
les     bx, ds:0BFC0h
mov     al, es:[bx]
mov     ah, 0
mov     si, ax
cmp     si, 0FFh
jnz     short loc_30746
inc     word ptr ds:0BFC0h
mov     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jz      short loc_30738
mov     bx, ds:0BFC0h
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
jmp     short loc_3072C

loc_30728:
inc     word ptr ds:0BFC0h

loc_3072C:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30728
jmp     short loc_30780

loc_30738:
mov     word ptr ds:0BFAEh, 0
mov     word ptr ds:0BFACh, 0
jmp     short loc_30780

loc_30746:
cmp     si, 0FEh
jnz     short loc_30787
inc     word ptr ds:0BFC0h
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jz      short loc_30774
mov     word ptr ds:0BFB2h, es
mov     ds:0BFB0h, bx
jmp     short loc_30768

loc_30764:
inc     word ptr ds:0BFC0h

loc_30768:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30764
jmp     short loc_30780

loc_30774:
mov     word ptr ds:0BFB2h, 0
mov     word ptr ds:0BFB0h, 0

loc_30780:
inc     word ptr ds:0BFC0h
jmp     loc_306EF

loc_30787:
pop     si
retn
sub_306EE endp



; Attributes: bp-based frame

sub_30789 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
xor     si, si
les     bx, ds:12h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     [bp+var_A], si
mov     [bp+var_C], 4

loc_307A4:
les     bx, [bp+var_8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_307BE

loc_307AF:
inc     word ptr [bp+var_8]

loc_307B2:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jnz     short loc_307AF
inc     word ptr [bp+var_8]

loc_307BE:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0FFh
jz      short loc_307B2
cmp     byte ptr es:[bx], 0FEh
jz      short loc_307B2
cmp     byte ptr es:[bx], 0FDh
jnz     short loc_307E3
jmp     short loc_307D8

loc_307D5:
inc     word ptr [bp+var_8]

loc_307D8:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jnz     short loc_307D5
jmp     short loc_30801

loc_307E3:
add     word ptr [bp+var_8], 5
jmp     short loc_307EC

loc_307E9:
inc     word ptr [bp+var_8]

loc_307EC:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jnz     short loc_307E9

loc_307F5:
inc     word ptr [bp+var_8]
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jnz     short loc_307F5

loc_30801:
inc     word ptr [bp+var_8]
mov     ax, word ptr [bp+var_8]
xor     dx, dx
sub     ax, word ptr [bp+var_4]
sbb     dx, 0
add     ax, 0Ah
adc     dx, 0
add     [bp+var_C], ax
adc     [bp+var_A], dx
mov     dx, [bp+var_A]
mov     ax, [bp+var_C]
cmp     dx, [bp+arg_2]
jb      short loc_30841
ja      short loc_3082D
cmp     ax, [bp+arg_0]
jbe     short loc_30841

loc_3082D:
les     bx, [bp+var_4]
mov     word ptr ds:18h, es
mov     ds:16h, bx
mov     ds:0BFBAh, si
mov     ax, 1
jmp     short loc_3084D

loc_30841:
inc     si
cmp     si, ds:0BFBAh
jge     short loc_3084B
jmp     loc_307A4

loc_3084B:
xor     ax, ax

loc_3084D:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_30789 endp




sub_30854 proc near
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0FDh
jnz     short loc_30880
inc     word ptr ds:0BFC0h
mov     bx, ds:0BFC0h
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
jmp     short loc_30874

loc_30870:
inc     word ptr ds:0BFC0h

loc_30874:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30870
jmp     short loc_308A3

loc_30880:
add     word ptr ds:0BFC0h, 5
jmp     short loc_3088B

loc_30887:
inc     word ptr ds:0BFC0h

loc_3088B:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30887

loc_30895:
inc     word ptr ds:0BFC0h
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30895

loc_308A3:
inc     word ptr ds:0BFC0h
call    sub_306EE
retn
sub_30854 endp



; Attributes: bp-based frame

sub_308AB proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, 1
les     bx, ds:12h
mov     word ptr ds:0BFC2h, es
mov     ds:0BFC0h, bx
call    sub_306EE
les     bx, ds:0BFBCh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_308EE

loc_308D0:
call    sub_30854
inc     si

loc_308D4:
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
cmp     ax, si
ja      short loc_308D0
mov     ax, es:[bx]
les     bx, ds:0BFC0h
mov     es:[bx+3], ax
add     word ptr [bp+var_4], 4

loc_308EE:
les     bx, [bp+var_4]
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_308D4
pop     si
mov     sp, bp
pop     bp
retf
sub_308AB endp




sub_308FC proc far
mov     ax, ds:0BFBCh
or      ax, ds:0BFBEh
jz      short locret_30912
push    cs
call    near ptr sub_308AB
les     bx, ds:0BFBCh
mov     word ptr es:[bx], 0FFFFh

locret_30912:
retf
sub_308FC endp



; Attributes: bp-based frame

sub_30913 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
cmp     [bp+arg_0], 0
jz      short loc_3092B
mov     ax, ds:0BFBCh
or      ax, ds:0BFBEh
jz      short loc_3093D
push    cs
call    near ptr sub_308AB
jmp     short loc_3093D

loc_3092B:
les     bx, ds:12h
mov     word ptr ds:18h, es
mov     ds:16h, bx
mov     word ptr ds:0BFBAh, 0

loc_3093D:
mov     word ptr ds:0BFBEh, 0
mov     word ptr ds:0BFBCh, 0
mov     word ptr ds:0BFC8h, 0
mov     word ptr ds:0BFC6h, 0
pop     bp
retf    2
sub_30913 endp



; Attributes: bp-based frame

sub_30959 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
xor     di, di
mov     ax, ds:0BFBAh
mov     dx, 6
mul     dx
mov     si, ax
push    si
call    sub_3193F
mov     ds:0BFC8h, dx
mov     ds:0BFC6h, ax
les     bx, ds:0BFC6h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     word ptr ds:0BFAEh, 0
mov     word ptr ds:0BFACh, 0
mov     word ptr ds:0BFB2h, 0
mov     word ptr ds:0BFB0h, 0
les     bx, ds:12h
mov     word ptr ds:0BFC2h, es
mov     ds:0BFC0h, bx
xor     si, si
jmp     loc_30A2F

loc_309AD:
les     bx, ds:0BFC0h
mov     al, es:[bx]
mov     ah, 0
cmp     ax, 0FDh
jz      short loc_309C7
cmp     ax, 0FEh
jz      short loc_309D7
cmp     ax, 0FFh
jz      short loc_309D7
jmp     short loc_309D6

loc_309C7:
les     bx, ds:0BFC0h
inc     bx
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
jmp     short loc_309D7

loc_309D6:
inc     di

loc_309D7:
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jnz     short loc_309EA
les     bx, [bp+var_4]
mov     word ptr es:[bx], 0
jmp     short loc_309F7

loc_309EA:
mov     ax, ds:0BFACh
sub     ax, ds:12h
les     bx, [bp+var_4]
mov     es:[bx], ax

loc_309F7:
mov     ax, ds:0BFB0h
or      ax, ds:0BFB2h
jnz     short loc_30A0B
les     bx, [bp+var_4]
mov     word ptr es:[bx+2], 0
jmp     short loc_30A19

loc_30A0B:
mov     ax, ds:0BFB0h
sub     ax, ds:12h
les     bx, [bp+var_4]
mov     es:[bx+2], ax

loc_30A19:
mov     ax, ds:0BFC0h
sub     ax, ds:12h
les     bx, [bp+var_4]
mov     es:[bx+4], ax
call    sub_30854
inc     si
add     word ptr [bp+var_4], 6

loc_30A2F:
cmp     si, ds:0BFBAh
jge     short loc_30A38
jmp     loc_309AD

loc_30A38:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retf
sub_30959 endp



; Attributes: bp-based frame

sub_30A40 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
les     bx, ds:12h
mov     word ptr ds:0BFC2h, es
mov     ds:0BFC0h, bx
xor     si, si
jmp     short loc_30A7E

loc_30A58:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0FDh
jnz     short loc_30A7A
push    [bp+arg_2]
push    [bp+arg_0]
mov     dx, ds:0BFC2h
mov     ax, bx
inc     ax
push    dx
push    ax
call    sub_46D55
or      ax, ax
jz      short loc_30A84

loc_30A7A:
call    sub_30854
inc     si

loc_30A7E:
cmp     si, ds:0BFBAh
jl      short loc_30A58

loc_30A84:
cmp     si, ds:0BFBAh
jl      short loc_30A8E
xor     ax, ax
jmp     short loc_30AF8

loc_30A8E:
les     bx, ds:0BFC0h
mov     [bp+var_2], es
mov     [bp+var_4], bx
inc     si
call    sub_30854
mov     di, 1
jmp     short loc_30AB0

loc_30AA1:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0FDh
jz      short loc_30AB6
call    sub_30854
inc     di
inc     si

loc_30AB0:
cmp     si, ds:0BFBAh
jl      short loc_30AA1

loc_30AB6:
cmp     si, ds:0BFBAh
jge     short loc_30ADC
push    word ptr ds:0BFC2h
push    word ptr ds:0BFC0h
push    [bp+var_2]
push    [bp+var_4]
mov     ax, ds:16h
xor     dx, dx
sub     ax, ds:0BFC0h
sbb     dx, 0
push    ax
call    sub_46A2C

loc_30ADC:
les     bx, ds:16h
mov     ax, ds:0BFC0h
xor     dx, dx
sub     ax, [bp+var_4]
sbb     dx, 0
sub     bx, ax
mov     ds:16h, bx
sub     ds:0BFBAh, di
mov     ax, 1

loc_30AF8:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_30A40 endp



; Attributes: bp-based frame

sub_30B00 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     ax, ds:0BFBCh
or      ax, ds:0BFBEh
jnz     short loc_30B45
mov     si, ds:0BFBAh
inc     si
shl     si, 1
shl     si, 1
call    sub_31529
push    dx
push    ax
mov     ax, si
cwd
pop     bx
pop     cx
cmp     cx, dx
jl      short loc_30B3F
jg      short loc_30B30
cmp     bx, ax
jbe     short loc_30B3F

loc_30B30:
push    si
call    sub_3193F
mov     ds:0BFBEh, dx
mov     ds:0BFBCh, ax
jmp     short loc_30B49

loc_30B3F:
mov     ax, 0FFFFh
jmp     loc_30C38

loc_30B45:
push    cs
call    near ptr sub_308AB

loc_30B49:
xor     si, si
les     bx, ds:0BFBCh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, ds:12h
mov     word ptr ds:0BFC2h, es
mov     ds:0BFC0h, bx
mov     di, 1
jmp     loc_30C03

loc_30B67:
call    sub_306EE
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_30B8F
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46D55
or      ax, ax
jnz     short loc_30B8F
mov     si, 1
jmp     short loc_30B91

loc_30B8F:
xor     si, si

loc_30B91:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0FDh
jnz     short loc_30BBD
inc     word ptr ds:0BFC0h
mov     bx, ds:0BFC0h
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
jmp     short loc_30BB1

loc_30BAD:
inc     word ptr ds:0BFC0h

loc_30BB1:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30BAD
jmp     short loc_30BFE

loc_30BBD:
add     word ptr ds:0BFC0h, 3
or      si, si
jz      short loc_30BDB
les     bx, ds:0BFC0h
mov     ax, es:[bx]
les     bx, [bp+var_4]
mov     es:[bx], ax
mov     es:[bx+2], di
add     word ptr [bp+var_4], 4

loc_30BDB:
add     word ptr ds:0BFC0h, 2
jmp     short loc_30BE6

loc_30BE2:
inc     word ptr ds:0BFC0h

loc_30BE6:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30BE2

loc_30BF0:
inc     word ptr ds:0BFC0h
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30BF0

loc_30BFE:
inc     word ptr ds:0BFC0h
inc     di

loc_30C03:
cmp     di, ds:0BFBAh
jg      short loc_30C0C
jmp     loc_30B67

loc_30C0C:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 4
push    ax
mov     al, 0FFh
push    ax
call    sub_46C10
xor     dx, dx
mov     ax, 4
push    dx
push    ax
mov     ax, word ptr [bp+var_4]
xor     dx, dx
sub     ax, ds:0BFBCh
sbb     dx, 0
push    dx
push    ax
call    sub_1ED51

loc_30C38:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_30B00 endp



; Attributes: bp-based frame

sub_30C40 proc far

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
mov     ax, [bp+arg_0]
cmp     ax, ds:0BFBAh
jbe     short loc_30C56
xor     ax, ax
jmp     loc_30EC9

loc_30C56:
mov     ax, [bp+arg_0]
dec     ax
mov     dx, 6
mul     dx
les     bx, ds:0BFC6h
add     bx, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, es:[bx+4]
les     bx, ds:12h
add     bx, ax
mov     word ptr ds:0BFC2h, es
mov     ds:0BFC0h, bx
les     bx, [bp+var_4]
cmp     word ptr es:[bx+2], 0
jnz     short loc_30C95
mov     word ptr ds:0BFB2h, 0
mov     word ptr ds:0BFB0h, 0
jmp     short loc_30CAA

loc_30C95:
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
les     bx, ds:12h
add     bx, ax
mov     word ptr ds:0BFB2h, es
mov     ds:0BFB0h, bx

loc_30CAA:
les     bx, [bp+var_4]
cmp     word ptr es:[bx], 0
jnz     short loc_30CC1
mov     word ptr ds:0BFAEh, 0
mov     word ptr ds:0BFACh, 0
jmp     short loc_30CD5

loc_30CC1:
les     bx, [bp+var_4]
mov     ax, es:[bx]
les     bx, ds:12h
add     bx, ax
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx

loc_30CD5:
les     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0FDh
jz      short loc_30CE2
jmp     loc_30D60

loc_30CE2:
inc     word ptr ds:0BFC0h
mov     bx, ds:0BFC0h
mov     word ptr ds:0BFAEh, es
mov     ds:0BFACh, bx
mov     bx, ds:0BFC0h
cmp     byte ptr es:[bx], 0
jnz     short loc_30D30
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 6994h
push    ax
call    sub_46D76
push    dx
push    ax
mov     dx, ds:231Ah
mov     ax, ds:2318h
add     ax, 4
push    dx
push    ax
call    sub_46C3E
push    dx
push    ax
push    ds
mov     ax, 699Dh
push    ax
call    sub_46C3E
mov     ax, 7
jmp     loc_30EC9

loc_30D30:
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 699Fh
push    ax
call    sub_46D76
push    dx
push    ax
push    word ptr ds:0BFC2h
push    word ptr ds:0BFC0h
call    sub_46C3E
push    dx
push    ax
push    ds
mov     ax, 699Dh
push    ax
call    sub_46C3E
mov     ax, 6
jmp     loc_30EC9

loc_30D60:
les     bx, ds:0BFC0h
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     al, es:[bx]
mov     ah, 0
mov     [bp+var_8], ax
mov     ds:0BFC4h, ax
inc     word ptr [bp+var_C]
mov     bx, [bp+var_8]
shl     bx, 1
mov     di, [bx+4DDAh]
mov     bx, word ptr [bp+var_C]
mov     ax, es:[bx]
mov     ds:0BE1Dh, ax
add     word ptr [bp+var_C], 4
mov     byte ptr ds:9A78h, 0
mov     [bp+var_6], 0
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jnz     short loc_30DB5
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 69AAh
push    ax
call    sub_46D76
mov     [bp+var_6], 2

loc_30DB5:
cmp     [bp+var_8], 4
jge     short loc_30DC3
mov     si, 4DB6h
inc     [bp+var_6]
jmp     short loc_30DDA

loc_30DC3:
cmp     [bp+var_8], 0A2h
jge     short loc_30DD3
mov     si, 4DD4h
add     [bp+var_6], 2
jmp     short loc_30DDA

loc_30DD3:
mov     si, 4DCCh
add     [bp+var_6], 3

loc_30DDA:
push    ds
mov     ax, 9A78h
push    ax
push    ds
push    si
call    sub_46C3E
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_30E10
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 699Bh
push    ax
call    sub_46C3E
push    ds
mov     ax, 9A78h
push    ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46C3E

loc_30E10:
cmp     word ptr ds:0BE1Dh, 0
jz      short loc_30E41
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 699Bh
push    ax
call    sub_46C3E
push    ds
mov     ax, 9A78h
push    ax
call    sub_46E60
mov     si, ax
add     si, 9A78h
push    word ptr ds:0BE1Dh
push    ds
push    si
call    sub_472E0

loc_30E41:
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 69B2h
push    ax
call    sub_46C3E
push    ds
mov     ax, 9A78h
push    ax
call    sub_46E60
mov     si, ax
add     si, 9A78h
jmp     short loc_30E8A

loc_30E62:
cmp     byte ptr [di], 25h ; '%'
jnz     short loc_30E84
inc     di
jmp     short loc_30E76

loc_30E6A:
les     bx, [bp+var_C]
mov     al, es:[bx]
mov     [si], al
inc     word ptr [bp+var_C]
inc     si

loc_30E76:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 0
jnz     short loc_30E6A
inc     word ptr [bp+var_C]
jmp     short loc_30E89

loc_30E84:
mov     al, [di]
mov     [si], al
inc     si

loc_30E89:
inc     di

loc_30E8A:
cmp     byte ptr [di], 0
jnz     short loc_30E62
mov     ax, ds:0BFB0h
or      ax, ds:0BFB2h
jz      short loc_30EC3
push    ds
push    si
push    ds
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_30EA9
mov     ax, 69B5h
jmp     short loc_30EAC

loc_30EA9:
mov     ax, 69C3h

loc_30EAC:
push    ax
call    sub_46D76
push    ds
push    si
push    word ptr ds:0BFB2h
push    word ptr ds:0BFB0h
call    sub_46C3E
jmp     short loc_30EC6

loc_30EC3:
mov     byte ptr [si], 0

loc_30EC6:
mov     ax, [bp+var_6]

loc_30EC9:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_30C40 endp



; Attributes: bp-based frame

sub_30ED1 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     si, 270Fh
jbe     short loc_30EE3
mov     ax, 5
jmp     short loc_30F05

loc_30EE3:
cmp     si, 3E7h
jbe     short loc_30EEE
mov     ax, 4
jmp     short loc_30F05

loc_30EEE:
cmp     si, 63h ; 'c'
jbe     short loc_30EF8
mov     ax, 3
jmp     short loc_30F05

loc_30EF8:
cmp     si, 9
jbe     short loc_30F02
mov     ax, 2
jmp     short loc_30F05

loc_30F02:
mov     ax, 1

loc_30F05:
pop     si
pop     bp
retn    2
sub_30ED1 endp



; Attributes: bp-based frame

sub_30F0A proc near

arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_4]
mov     di, si
mov     cl, 4
shr     di, cl
and     di, 0Fh
cmp     di, 9
jbe     short loc_30F27
mov     ax, di
add     al, 57h ; 'W'
jmp     short loc_30F2B

loc_30F27:
mov     ax, di
add     al, 30h ; '0'

loc_30F2B:
les     bx, [bp+arg_0]
mov     es:[bx], al
inc     word ptr [bp+arg_0]
and     si, 0Fh
cmp     si, 9
jbe     short loc_30F43
mov     ax, si
add     al, 57h ; 'W'
jmp     short loc_30F47

loc_30F43:
mov     ax, si
add     al, 30h ; '0'

loc_30F47:
les     bx, [bp+arg_0]
mov     es:[bx], al
inc     word ptr [bp+arg_0]
mov     bx, word ptr [bp+arg_0]
mov     byte ptr es:[bx], 0
pop     di
pop     si
pop     bp
retn    6
sub_30F0A endp



; Attributes: bp-based frame

sub_30F5D proc far

var_58= dword ptr -58h
var_54= dword ptr -54h
var_50= byte ptr -50h
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 58h
push    si
push    di
mov     si, 7
cmp     byte ptr ds:9A63h, 3
jnz     short loc_30F7D
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+arg_0]
call    sub_41867

loc_30F7D:
cmp     byte ptr ds:0BE03h, 0
jz      short loc_30FBE
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_30FBC
push    ss
lea     ax, [bp+var_50]
push    ax
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46D76
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19C57
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_46E60
inc     ax
inc     ax
add     si, ax
jmp     short loc_30FBE

loc_30FBC:
inc     si
inc     si

loc_30FBE:
cmp     byte ptr ds:0BE04h, 0
jz      short loc_30FE3
mov     ax, ds:0BFB0h
or      ax, ds:0BFB2h
jz      short loc_30FE1
push    word ptr ds:0BFB2h
push    word ptr ds:0BFB0h
call    sub_46E60
inc     ax
inc     ax
add     si, ax
jmp     short loc_30FE3

loc_30FE1:
inc     si
inc     si

loc_30FE3:
les     bx, [bp+arg_2]
mov     word ptr [bp+var_54+2], es
mov     word ptr [bp+var_54], bx
mov     bx, [bp+arg_0]
mov     al, [bx+4FEEh]
cbw
mov     di, ax
mov     ax, di
and     ax, 0F0h
cmp     ax, 10h
jz      short loc_3100C
cmp     ax, 20h ; ' '
jz      short loc_3102A
cmp     ax, 30h ; '0'
jz      short loc_31023
jmp     short loc_31039

loc_3100C:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 4
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46E60
add     si, ax
jmp     short loc_31039

loc_31023:
add     word ptr [bp+arg_2], 2
inc     si
jmp     short loc_31039

loc_3102A:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 2
push    word ptr es:[bx]
call    sub_30ED1
add     si, ax

loc_31039:
mov     ax, di
and     ax, 0Fh
cmp     ax, 1
jz      short loc_3104F
cmp     ax, 2
jz      short loc_3106A
cmp     ax, 3
jz      short loc_31066
jmp     short loc_31079

loc_3104F:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 4
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46E60
add     si, ax
jmp     short loc_31079

loc_31066:
inc     si
inc     si
jmp     short loc_31079

loc_3106A:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 2
push    word ptr es:[bx]
call    sub_30ED1
add     si, ax

loc_31079:
les     bx, [bp+var_54]
mov     word ptr [bp+arg_2+2], es
mov     word ptr [bp+arg_2], bx
push    si
call    sub_319DA
mov     word ptr [bp+var_58+2], dx
mov     word ptr [bp+var_58], ax
cmp     byte ptr ds:0BE03h, 0
jz      short loc_310D6
les     bx, [bp+var_58]
mov     byte ptr es:[bx], 0FFh
inc     word ptr [bp+var_58]
mov     ax, ds:0BFACh
or      ax, ds:0BFAEh
jz      short loc_310C7
push    dx
push    word ptr [bp+var_58]
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_46D76
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_46E60
inc     ax
add     word ptr [bp+var_58], ax
jmp     short loc_310D1

loc_310C7:
les     bx, [bp+var_58]
mov     byte ptr es:[bx], 0
inc     word ptr [bp+var_58]

loc_310D1:
mov     byte ptr ds:0BE03h, 0

loc_310D6:
cmp     byte ptr ds:0BE04h, 0
jz      short loc_31123
les     bx, [bp+var_58]
mov     byte ptr es:[bx], 0FEh
inc     word ptr [bp+var_58]
mov     ax, ds:0BFB0h
or      ax, ds:0BFB2h
jz      short loc_31114
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
push    word ptr ds:0BFB2h
push    word ptr ds:0BFB0h
call    sub_46D76
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_46E60
inc     ax
add     word ptr [bp+var_58], ax
jmp     short loc_3111E

loc_31114:
les     bx, [bp+var_58]
mov     byte ptr es:[bx], 0
inc     word ptr [bp+var_58]

loc_3111E:
mov     byte ptr ds:0BE04h, 0

loc_31123:
mov     al, byte ptr [bp+arg_0]
les     bx, [bp+var_58]
mov     es:[bx], al
inc     word ptr [bp+var_58]
mov     ax, ds:0BFB4h
mov     bx, word ptr [bp+var_58]
mov     es:[bx], ax
add     word ptr [bp+var_58], 2
mov     ax, ds:0BFB6h
mov     bx, word ptr [bp+var_58]
mov     es:[bx], ax
add     word ptr [bp+var_58], 2
mov     ax, di
and     ax, 0F0h
cmp     ax, 10h
jz      short loc_3115F
cmp     ax, 20h ; ' '
jz      short loc_3118F
cmp     ax, 30h ; '0'
jz      short loc_3117A
jmp     short loc_311B5

loc_3115F:
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 4
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D76
jmp     short loc_311A4

loc_3117A:
les     bx, [bp+arg_2]
mov     al, es:[bx]
les     bx, [bp+var_58]
mov     es:[bx], al
add     word ptr [bp+arg_2], 2
inc     word ptr [bp+var_58]
jmp     short loc_311B5

loc_3118F:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 2
push    word ptr es:[bx]
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_472E0

loc_311A4:
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_46E60
inc     ax
add     word ptr [bp+var_58], ax
jmp     short loc_311BF

loc_311B5:
les     bx, [bp+var_58]
mov     byte ptr es:[bx], 0
inc     word ptr [bp+var_58]

loc_311BF:
mov     ax, di
and     ax, 0Fh
cmp     ax, 1
jz      short loc_311D5
cmp     ax, 2
jz      short loc_31209
cmp     ax, 3
jz      short loc_311F0
jmp     short loc_3122F

loc_311D5:
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 4
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D76
jmp     short loc_3121E

loc_311F0:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 2
push    word ptr es:[bx]
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_30F0A
add     word ptr [bp+var_58], 3
jmp     short loc_31239

loc_31209:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 2
push    word ptr es:[bx]
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_472E0

loc_3121E:
push    word ptr [bp+var_58+2]
push    word ptr [bp+var_58]
call    sub_46E60
inc     ax
add     word ptr [bp+var_58], ax
jmp     short loc_31239

loc_3122F:
les     bx, [bp+var_58]
mov     byte ptr es:[bx], 0
inc     word ptr [bp+var_58]

loc_31239:
inc     word ptr ds:0BFBAh
xor     ax, ax
push    ax
call    sub_1B476
pop     di
pop     si
mov     sp, bp
pop     bp
retf    6
sub_30F5D endp



; Attributes: bp-based frame

sub_3124D proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
cmp     byte ptr ds:22BAh, 0
jz      short loc_31262
mov     al, ds:22BAh
mov     ah, 0
cmp     ax, ds:0BFA8h
jle     short loc_3127A

loc_31262:
cmp     byte ptr ds:22BBh, 0
jz      short loc_31295
mov     al, ds:22BBh
mov     ah, 0
mov     dx, ds:0BFAAh
sub     dx, ds:0BFA8h
cmp     ax, dx
jg      short loc_31295

loc_3127A:
inc     word ptr ds:0BFA8h
inc     word ptr ds:0BFAAh
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 0A1h
push    ax
push    cs
call    near ptr sub_30F5D
mov     ax, 1
jmp     short loc_31297

loc_31295:
xor     ax, ax

loc_31297:
pop     bp
retf    4
sub_3124D endp



; Attributes: bp-based frame

sub_3129B proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= byte ptr  8

push    bp
mov     bp, sp
sub     sp, 4
inc     word ptr ds:0BFA8h
inc     word ptr ds:0BFAAh
mov     bx, ss
mov     es, bx
lea     bx, [bp+arg_2]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    [bp+var_2]
push    bx
push    [bp+arg_0]
push    cs
call    near ptr sub_30F5D
push    ds
mov     ax, 0BE91h
push    ax
cmp     [bp+arg_0], 4
jge     short loc_312D1
mov     ax, 4
jmp     short loc_312D4

loc_312D1:
mov     ax, 1

loc_312D4:
push    ax
call    sub_4698B
mov     sp, bp
pop     bp
retf
sub_3129B endp



; Attributes: bp-based frame

sub_312DE proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= byte ptr  8

push    bp
mov     bp, sp
sub     sp, 4
inc     word ptr ds:0BFA8h
inc     word ptr ds:0BFAAh
mov     bx, ss
mov     es, bx
lea     bx, [bp+arg_2]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    [bp+var_2]
push    bx
push    [bp+arg_0]
push    cs
call    near ptr sub_30F5D
push    [bp+var_2]
push    [bp+var_4]
push    cs
call    near ptr sub_3124D
or      ax, ax
jz      short loc_31320
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 1
push    ax
call    sub_4698B

loc_31320:
mov     sp, bp
pop     bp
retf
sub_312DE endp



; Attributes: bp-based frame

sub_31324 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= byte ptr  8

push    bp
mov     bp, sp
sub     sp, 4
cmp     byte ptr ds:22B9h, 0
jnz     short loc_31373
mov     bx, [bp+arg_0]
cmp     byte ptr [bx-41FCh], 0
jz      short loc_31373
mov     bx, ss
mov     es, bx
lea     bx, [bp+arg_2]
mov     [bp+var_2], es
mov     [bp+var_4], bx
inc     word ptr ds:0BFAAh
push    [bp+var_2]
push    bx
push    [bp+arg_0]
push    cs
call    near ptr sub_30F5D
push    [bp+var_2]
push    [bp+var_4]
push    cs
call    near ptr sub_3124D
or      ax, ax
jz      short loc_31373
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 1
push    ax
call    sub_4698B

loc_31373:
mov     sp, bp
pop     bp
retf
sub_31324 endp



; Attributes: bp-based frame

sub_31377 proc far

var_54= dword ptr -54h
var_50= byte ptr -50h
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 54h
push    ss
lea     ax, [bp+var_50]
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_46D76
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jz      short loc_313A3
lea     ax, [bp+var_50]
push    ax
lea     ax, [bp+var_50]
push    ax
call    sub_19C57

loc_313A3:
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_46E60
inc     ax
inc     ax
push    ax
call    sub_319DA
mov     word ptr [bp+var_54+2], dx
mov     word ptr [bp+var_54], ax
les     bx, [bp+var_54]
mov     byte ptr es:[bx], 0FDh
inc     word ptr [bp+var_54]
push    dx
push    word ptr [bp+var_54]
push    ss
lea     ax, [bp+var_50]
push    ax
call    sub_46D76
inc     word ptr ds:0BFBAh
mov     sp, bp
pop     bp
retf    4
sub_31377 endp



; Attributes: bp-based frame

sub_313DD proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
les     bx, [bp+arg_2]
mov     word ptr ds:0BFB2h, es
mov     ds:0BFB0h, bx
mov     word ptr ds:93CEh, 1
push    [bp+arg_0]
call    sub_1B476
pop     bp
retf    6
sub_313DD endp




sub_313FD proc far
mov     byte ptr ds:0BE03h, 1
mov     word ptr ds:0BFAEh, 0
mov     word ptr ds:0BFACh, 0
mov     word ptr ds:0BFB4h, 0
mov     word ptr ds:0BFB6h, 0
mov     word ptr ds:0BFA8h, 0
mov     word ptr ds:0BFAAh, 0
push    ds
mov     ax, 699Ch
push    ax
push    cs
call    near ptr sub_31377
mov     byte ptr ds:0BE04h, 1
retf
sub_313FD endp

seg029 ends


; Segment type: Pure code
seg030 segment byte public 'CODE' use16
assume cs:seg030
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_31435 proc far

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 10h
push    si
push    di
mov     ax, ds:0BDCBh
sub     ax, [bp+arg_0]
mov     [bp+var_10], ax
mov     ax, [bp+arg_0]
and     ax, 3FFh
les     bx, ds:0BDEFh
add     bx, ax
add     bx, 0Ch
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, ds:0BDCBh
dec     ax
mov     [bp+var_E], ax
mov     ax, [bp+arg_0]
cmp     ax, [bp+var_10]
jnb     short loc_3146D
jmp     loc_3151E

loc_3146D:
mov     ax, [bp+var_E]
and     ax, 0FC00h
mov     dx, [bp+arg_0]
and     dx, 0FC00h
cmp     ax, dx
jz      short loc_31481
jmp     loc_3151E

loc_31481:
les     bx, ds:0BDDBh
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
push    ds
cld
mov     [bp+var_E], 0

loc_31492:
mov     ax, [bp+arg_0]
sub     ax, [bp+var_10]
cmp     ax, [bp+var_E]
jnb     short loc_314A0
jmp     short loc_3151D
align 2

loc_314A0:
les     bx, [bp+var_C]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     cx, [bp+var_E]
and     cx, 3FFh
push    si
push    di
lds     si, [bp+var_8]
add     si, 0Ch
add     si, cx
les     di, [bp+var_4]
mov     dx, [bp+var_10]

loc_314C0:
cmpsb
jnz     short loc_314FF
dec     dx
or      dx, dx
jnz     short loc_314E1
pop     di
pop     si
pop     ds
mov     ax, [bp+arg_0]
mov     ds:0BDCBh, ax
and     ax, 3FFh
les     bx, ds:0BDEFh
mov     es:[bx+2], ax
mov     ax, [bp+var_E]
jmp     short loc_31521

loc_314E1:
inc     cx
cmp     cx, 400h
jb      short loc_314C0
xor     cx, cx
les     bx, [bp+var_8]
les     bx, es:[bx+8]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
lds     si, [bp+var_8]
add     si, 0Ch
jmp     short loc_314C0

loc_314FF:
pop     di
pop     si
inc     [bp+var_E]
test    [bp+var_E], 3FFh
jz      short loc_3150D
jmp     short loc_31492

loc_3150D:
les     bx, [bp+var_C]
les     bx, es:[bx+8]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     loc_31492

loc_3151D:
pop     ds

loc_3151E:
mov     ax, [bp+arg_0]

loc_31521:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_31435 endp

seg030 ends


; Segment type: Pure code
seg031 segment byte public 'CODE' use16
assume cs:seg031
;org 9
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_31529 proc far
cmp     byte ptr ds:9A63h, 2
jnz     short loc_31537
call    sub_4B032
jmp     short locret_3156B

loc_31537:
mov     dx, ds:8
mov     ax, ds:6
mov     cx, ds:18h
mov     bx, ds:16h
call    sub_46BA0
push    dx
push    ax
mov     dx, ds:14h
mov     ax, ds:12h
mov     cx, ds:0Ch
mov     bx, ds:0Ah
call    sub_46BA0
mov     bx, ax
mov     cx, dx
pop     ax
pop     dx
add     ax, bx
adc     dx, cx

locret_3156B:
retf
sub_31529 endp



; Attributes: bp-based frame

sub_3156C proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     es, word ptr ds:1Ah
mov     bx, [bp+arg_0]
sub     bx, ds:1Ah
mov     ah, 4Ah
int     21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
                        ; ES = segment address of block to change
                        ; BX = new size in paragraphs
jb      short loc_31584
xor     ax, ax
jmp     short loc_3158A

loc_31584:
mov     ax, bx
add     ax, ds:1Ah

loc_3158A:
pop     bp
retn    2
sub_3156C endp



; Attributes: bp-based frame

sub_3158E proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 10h
push    si
mov     si, [bp+arg_0]
mov     bx, si
xor     cx, cx
mov     dx, ds:0Ch
mov     ax, ds:0Ah
call    sub_46B23
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
cmp     dx, ds:4
ja      short loc_315C7
jb      short loc_315BC
cmp     ax, ds:2
jnb     short loc_315C7

loc_315BC:
mov     ax, 6
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_315C7:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
cmp     dx, ds:14h
jnb     short loc_315D6
jmp     loc_3167F

loc_315D6:
ja      short loc_315E1
cmp     ax, ds:12h
ja      short loc_315E1
jmp     loc_3167F

loc_315E1:
push    cs
call    near ptr sub_31529
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, si
xor     dx, dx
cmp     dx, [bp+var_2]
jl      short loc_31606
jg      short loc_315FB
cmp     ax, [bp+var_4]
jbe     short loc_31606

loc_315FB:
mov     ax, 6
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_31606:
xor     dx, dx
mov     ax, 2
push    dx
push    ax
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     bx, si
xor     cx, cx
sub     ax, bx
sbb     dx, cx
push    dx
push    ax
call    sub_1ED51
mov     bx, ax
mov     cx, dx
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
call    sub_46B23
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
mov     dx, ds:18h
mov     ax, ds:16h
mov     cx, ds:14h
mov     bx, ds:12h
call    sub_46BA0
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, ax
jz      short loc_31669
push    word ptr ds:14h
push    word ptr ds:12h
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    ax
call    sub_46A2C

loc_31669:
les     bx, [bp+var_10]
mov     word ptr ds:14h, es
mov     ds:12h, bx
add     bx, [bp+var_4]
mov     word ptr ds:18h, es
mov     ds:16h, bx

loc_3167F:
les     bx, ds:0Ah
mov     [bp+var_6], es
mov     [bp+var_8], bx
les     bx, [bp+var_C]
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
pop     si
mov     sp, bp
pop     bp
retn    2
sub_3158E endp



; Attributes: bp-based frame

sub_316A1 proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     si, [bp+arg_0]
les     bx, ds:69D6h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+2]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_316BF:
les     bx, [bp+var_8]
mov     ax, es:[bx]
cmp     ax, si
jb      short loc_31710
mov     ax, es:[bx]
mov     dx, si
add     dx, 6
cmp     ax, dx
ja      short loc_316EA
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
jmp     short loc_316FB

loc_316EA:
les     bx, [bp+var_8]
sub     es:[bx], si
mov     ax, es:[bx]
add     bx, ax
mov     word ptr [bp+var_8], bx
mov     es:[bx], si

loc_316FB:
les     bx, [bp+var_4]
mov     word ptr ds:69D8h, es
mov     ds:69D6h, bx
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
inc     ax
inc     ax
jmp     short loc_3173D

loc_31710:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
cmp     dx, ds:69D8h
jnz     short loc_31728
cmp     ax, ds:69D6h
jnz     short loc_31728
xor     dx, dx
mov     ax, dx
jmp     short loc_3173D

loc_31728:
les     bx, [bp+var_8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+2]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_316BF

loc_3173D:
pop     si
mov     sp, bp
pop     bp
retn    2
sub_316A1 endp




sub_31744 proc far
push    si
mov     ax, ds:16h
xor     dx, dx
sub     ax, ds:12h
sbb     dx, 0
mov     si, ax
push    word ptr ds:14h
push    word ptr ds:12h
push    word ptr ds:0Ch
push    word ptr ds:0Ah
push    si
call    sub_46A2C
les     bx, ds:0Ah
mov     word ptr ds:14h, es
mov     ds:12h, bx
add     bx, si
mov     word ptr ds:18h, es
mov     ds:16h, bx
mov     dx, ds:18h
mov     ax, bx
xor     cx, cx
mov     bx, 0Fh
call    sub_46B23
push    dx
call    sub_3156C
pop     si
retf
sub_31744 endp




sub_31795 proc far
push    si
jmp     short loc_317A3

loc_31798:
mov     dx, si
xor     ax, ax
mov     ds:8, dx
mov     ds:6, ax

loc_317A3:
mov     ax, ds:8
push    ax
call    sub_3156C
mov     si, ax
mov     ax, si
or      ax, ax
jnz     short loc_31798
pop     si
retf
sub_31795 endp




sub_317B4 proc far
push    cs
call    near ptr sub_31795
mov     word ptr ds:0BFBEh, 0
mov     word ptr ds:0BFBCh, 0
mov     word ptr ds:0BFC8h, 0
mov     word ptr ds:0BFC6h, 0
retf
sub_317B4 endp




sub_317D1 proc far
les     bx, ds:0Ah
mov     word ptr ds:0BFD6h, es
mov     ds:0BFD4h, bx
retf
sub_317D1 endp




sub_317DE proc far
les     bx, ds:0BFD4h
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx
mov     word ptr ds:69D8h, ds
mov     word ptr ds:69D6h, 69D0h
mov     word ptr ds:69D4h, ds
mov     word ptr ds:69D2h, 69D0h
mov     word ptr ds:0BFCCh, 0
mov     word ptr ds:0BFCAh, 0
mov     word ptr ds:0BFD0h, 0
mov     word ptr ds:0BFCEh, 0
mov     word ptr ds:0BFD2h, 0
retf
sub_317DE endp



; Attributes: bp-based frame

sub_3181D proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 0Ch
push    cs
call    near ptr sub_31529
mov     [bp+var_2], dx
mov     [bp+var_4], ax
cmp     dx, ds:69DCh
jg      short loc_31848
jl      short loc_3183B
cmp     ax, ds:69DAh
jnb     short loc_31848

loc_3183B:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     ds:69DCh, dx
mov     ds:69DAh, ax

loc_31848:
mov     ax, ds:0BFCEh
or      ax, ds:0BFD0h
jnz     short loc_3185F
les     bx, ds:0BFCAh
mov     word ptr ds:0BFD0h, es
mov     ds:0BFCEh, bx
jmp     short loc_318A1

loc_3185F:
les     bx, ds:0BFCAh
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_31899

loc_3186B:
les     bx, [bp+var_C]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     dx, ds:0BFD0h
mov     ax, ds:0BFCEh
les     bx, [bp+var_C]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:0BFD0h, es
mov     ds:0BFCEh, bx
les     bx, [bp+var_8]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_31899:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_3186B

loc_318A1:
mov     word ptr ds:0BFCCh, 0
mov     word ptr ds:0BFCAh, 0
mov     word ptr ds:0BFD2h, 0
mov     sp, bp
pop     bp
retf
sub_3181D endp



; Attributes: bp-based frame

sub_318B7 proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     si, [bp+arg_0]
inc     si
and     si, 0FFFEh
cmp     si, ds:0BFD2h
jbe     short loc_31919
mov     ax, ds:0BFCEh
or      ax, ds:0BFD0h
jz      short loc_318EB
les     bx, ds:0BFCEh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx]
mov     word ptr ds:0BFD0h, es
mov     ds:0BFCEh, bx
jmp     short loc_318FA

loc_318EB:
mov     ax, 400h
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_318FA:
mov     dx, ds:0BFCCh
mov     ax, ds:0BFCAh
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     word ptr ds:0BFCCh, es
mov     ds:0BFCAh, bx
mov     word ptr ds:0BFD2h, 3FCh

loc_31919:
mov     ax, 3FCh
sub     ax, ds:0BFD2h
les     bx, ds:0BFCAh
add     bx, ax
add     bx, 4
mov     [bp+var_6], es
mov     [bp+var_8], bx
sub     ds:0BFD2h, si
mov     dx, [bp+var_6]
mov     ax, bx
pop     si
mov     sp, bp
pop     bp
retf    2
sub_318B7 endp



; Attributes: bp-based frame

sub_3193F proc far

var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_0]
inc     si
and     si, 0FFFEh

loc_3194D:
push    cs
call    near ptr sub_31529
mov     bx, si
xor     cx, cx
cmp     dx, cx
jl      short loc_31965
jnz     short loc_3195F
cmp     ax, bx
jb      short loc_31965

loc_3195F:
push    si
call    sub_3158E
jmp     short loc_319D3

loc_31965:
push    si
call    sub_316A1
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_3197B
mov     ax, word ptr [bp+var_4]
add     ax, 0FFFEh
jmp     short loc_319D3

loc_3197B:
mov     ax, ds:0BFCEh
or      ax, ds:0BFD0h
jz      short loc_319B1
les     bx, ds:0BFCEh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx]
mov     word ptr ds:0BFD0h, es
mov     ds:0BFCEh, bx
les     bx, [bp+var_4]
mov     word ptr es:[bx], 400h
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
inc     ax
inc     ax
push    dx
push    ax
call    sub_31B9A
jmp     short loc_3194D

loc_319B1:
cmp     byte ptr ds:9A63h, 0
jz      short loc_319BF
cmp     byte ptr ds:9A63h, 2
jnz     short loc_319C5

loc_319BF:
xor     dx, dx
mov     ax, dx
jmp     short loc_319D3

loc_319C5:
mov     ax, 6
push    ax
call    sub_3129B
inc     sp
inc     sp
jmp     loc_3194D

loc_319D3:
pop     si
mov     sp, bp
pop     bp
retf    2
sub_3193F endp



; Attributes: bp-based frame

sub_319DA proc far

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 10h
push    si
mov     si, [bp+arg_0]
cmp     byte ptr ds:9A63h, 2
jnz     short loc_319F4
push    si
call    sub_4B07A
jmp     loc_31B05

loc_319F4:
mov     bx, si
xor     cx, cx
mov     dx, ds:18h
mov     ax, ds:16h
call    sub_46B23
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
cmp     dx, ds:4
ja      short loc_31A26
jb      short loc_31A18
cmp     ax, ds:2
jnb     short loc_31A26

loc_31A18:
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 3
push    ax
call    sub_4698B

loc_31A26:
mov     dx, word ptr [bp+var_C+2]
mov     ax, word ptr [bp+var_C]
cmp     dx, ds:8
jnb     short loc_31A35
jmp     loc_31ADE

loc_31A35:
ja      short loc_31A40
cmp     ax, ds:6
ja      short loc_31A40
jmp     loc_31ADE

loc_31A40:
push    cs
call    near ptr sub_31529
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, si
xor     dx, dx
cmp     dx, [bp+var_2]
jl      short loc_31A68
jg      short loc_31A5A
cmp     ax, [bp+var_4]
jbe     short loc_31A68

loc_31A5A:
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 3
push    ax
call    sub_4698B

loc_31A68:
xor     dx, dx
mov     ax, 2
push    dx
push    ax
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     bx, si
xor     cx, cx
sub     ax, bx
sbb     dx, cx
push    dx
push    ax
call    sub_1ED51
mov     bx, ax
mov     cx, dx
mov     dx, ds:0Ch
mov     ax, ds:0Ah
call    sub_46B23
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
mov     dx, ds:18h
mov     ax, ds:16h
mov     cx, ds:14h
mov     bx, ds:12h
call    sub_46BA0
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    word ptr ds:14h
push    word ptr ds:12h
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    ax
call    sub_46A2C
les     bx, [bp+var_10]
mov     word ptr ds:14h, es
mov     ds:12h, bx
add     bx, [bp+var_4]
mov     word ptr ds:18h, es
mov     ds:16h, bx

loc_31ADE:
les     bx, ds:16h
add     bx, si
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     bx, ds:16h
mov     [bp+var_6], es
mov     [bp+var_8], bx
les     bx, [bp+var_C]
mov     word ptr ds:18h, es
mov     ds:16h, bx
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]

loc_31B05:
pop     si
mov     sp, bp
pop     bp
retf    2
sub_319DA endp ; sp-analysis failed



; Attributes: bp-based frame

sub_31B0C proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
cmp     dx, ds:4
jb      short loc_31B37
jnz     short loc_31B23
cmp     ax, ds:2
jb      short loc_31B37

loc_31B23:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
cmp     dx, ds:14h
jb      short loc_31B42
ja      short loc_31B37
cmp     ax, ds:12h
jbe     short loc_31B42

loc_31B37:
mov     ax, 6
push    ax
call    sub_3129B
mov     sp, bp

loc_31B42:
push    cs
call    near ptr sub_317DE
les     bx, [bp+arg_0]
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx
pop     bp
retf    4
sub_31B0C endp



; Attributes: bp-based frame

sub_31B55 proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     si, [bp+arg_0]
cmp     si, 4
jnb     short loc_31B67
mov     si, 4

loc_31B67:
add     si, 3
and     si, 0FFFEh
push    si
call    sub_316A1
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jz      short loc_31B80
mov     ax, [bp+var_4]
jmp     short loc_31B93

loc_31B80:
push    si
push    cs
call    near ptr sub_3193F
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     es:[bx], si
inc     ax
inc     ax

loc_31B93:
pop     si
mov     sp, bp
pop     bp
retf    2
sub_31B55 endp



; Attributes: bp-based frame

sub_31B9A proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_0]
add     bx, 0FFFEh
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, ds:69D6h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_31C04

loc_31BB8:
les     bx, [bp+var_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
cmp     dx, word ptr [bp+var_4+2]
ja      short loc_31BF7
jnz     short loc_31BCE
cmp     ax, bx
ja      short loc_31BF7

loc_31BCE:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
cmp     dx, word ptr [bp+var_4+2]
ja      short loc_31C31
jnz     short loc_31BE0
cmp     ax, word ptr [bp+var_4]
ja      short loc_31C31

loc_31BE0:
les     bx, [bp+var_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
cmp     dx, word ptr [bp+var_8+2]
ja      short loc_31C31
jnz     short loc_31BF7
cmp     ax, word ptr [bp+var_8]
ja      short loc_31C31

loc_31BF7:
les     bx, [bp+var_4]
les     bx, es:[bx+2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_31C04:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
cmp     dx, word ptr [bp+var_4+2]
jb      short loc_31BB8
ja      short loc_31C16
cmp     ax, word ptr [bp+var_4]
jbe     short loc_31BB8

loc_31C16:
les     bx, [bp+var_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
cmp     dx, word ptr [bp+var_8+2]
jnb     short loc_31C28
jmp     short loc_31BB8

loc_31C28:
ja      short loc_31C31
cmp     ax, word ptr [bp+var_8]
ja      short loc_31C31
jmp     short loc_31BB8

loc_31C31:
les     bx, [bp+var_8]
mov     ax, es:[bx]
mov     cx, word ptr [bp+var_8+2]
add     bx, ax
push    cx
push    bx
les     bx, [bp+var_4]
pop     ax
pop     dx
cmp     dx, es:[bx+4]
jnz     short loc_31C7B
cmp     ax, es:[bx+2]
jnz     short loc_31C7B
les     bx, [bp+var_4]
les     bx, es:[bx+2]
mov     ax, es:[bx]
les     bx, [bp+var_8]
add     es:[bx], ax
les     bx, [bp+var_4]
les     bx, es:[bx+2]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_8]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
jmp     short loc_31C91

loc_31C7B:
les     bx, [bp+var_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_8]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_31C91:
les     bx, [bp+var_4]
mov     ax, es:[bx]
mov     cx, word ptr [bp+var_4+2]
add     bx, ax
cmp     cx, word ptr [bp+var_8+2]
jnz     short loc_31CD0
cmp     bx, word ptr [bp+var_8]
jnz     short loc_31CD0
les     bx, [bp+var_8]
mov     ax, es:[bx]
les     bx, [bp+var_4]
add     es:[bx], ax
les     bx, [bp+var_8]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_31CE1

loc_31CD0:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax

loc_31CE1:
les     bx, [bp+var_8]
mov     ax, es:[bx]
mov     cx, word ptr [bp+var_8+2]
add     bx, ax
cmp     cx, ds:0Ch
jnz     short loc_31D46
cmp     bx, ds:0Ah
jnz     short loc_31D46
les     bx, [bp+var_8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_31D10

loc_31D03:
les     bx, [bp+var_4]
les     bx, es:[bx+2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_31D10:
les     bx, [bp+var_4]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
cmp     dx, word ptr [bp+var_8+2]
jnz     short loc_31D03
cmp     ax, word ptr [bp+var_8]
jnz     short loc_31D03
les     bx, [bp+var_8]
mov     dx, es:[bx+4]
mov     ax, es:[bx+2]
les     bx, [bp+var_4]
mov     es:[bx+4], dx
mov     es:[bx+2], ax
les     bx, [bp+var_8]
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx

loc_31D46:
les     bx, [bp+var_4]
mov     word ptr ds:69D8h, es
mov     ds:69D6h, bx
mov     sp, bp
pop     bp
retf    4
sub_31B9A endp

seg031 ends


; Segment type: Pure code
seg032 segment byte public 'CODE' use16
assume cs:seg032
;org 7
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_31D57 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
mov     ax, 3
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     ds:0C068h, dx
mov     ds:0C066h, ax
mov     word ptr ds:0BFE2h, ds
mov     word ptr ds:0BFE0h, 6B00h
mov     word ptr ds:0C06Ch, ds
mov     word ptr ds:0C06Ah, 6B06h
mov     word ptr ds:0C05Ah, 0
mov     word ptr ds:0C058h, 0
mov     word ptr ds:0BFE6h, ds
mov     word ptr ds:0BFE4h, 6B0Bh
mov     word ptr ds:0C05Eh, ds
mov     word ptr ds:0C05Ch, 6B11h
mov     word ptr ds:0C070h, ds
mov     word ptr ds:0C06Eh, 6B0Ch
mov     word ptr ds:0BFEAh, ds
mov     word ptr ds:0BFE8h, 6B11h
mov     word ptr ds:0BFDCh, ds
mov     word ptr ds:0BFDAh, 6B18h
mov     word ptr ds:0C062h, ds
mov     word ptr ds:0C060h, 6B19h
mov     word ptr ds:0C064h, 1
mov     al, ds:22B1h
cbw
cmp     ax, 2
jz      short loc_31E4B
cmp     ax, 4
jz      short loc_31E4B
cmp     ax, 5
jz      short loc_31DE9
jmp     loc_31E85

loc_31DE9:
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46E60
add     ax, 6
push    ax
call    sub_3193F
mov     ds:0BFE6h, dx
mov     ds:0BFE4h, ax
push    dx
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46D76
push    word ptr ds:0BFE6h
push    word ptr ds:0BFE4h
push    ds
mov     ax, 6B0Bh
push    ax
call    sub_46C3E
mov     word ptr ds:0C064h, 0
mov     word ptr ds:0BFEAh, 0
mov     word ptr ds:0BFE8h, 0
mov     word ptr ds:0C062h, ds
mov     word ptr ds:0C060h, 6A74h
mov     word ptr ds:0C05Eh, 0
mov     word ptr ds:0C05Ch, 0

loc_31E4B:
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46E60
add     ax, 6
push    ax
call    sub_3193F
mov     ds:0BFE2h, dx
mov     ds:0BFE0h, ax
push    dx
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46D76
push    word ptr ds:0BFE2h
push    word ptr ds:0BFE0h
push    ds
mov     ax, 6B00h
push    ax
call    sub_46C3E

loc_31E85:
mov     al, ds:22B1h
cbw
mov     dx, 6
mul     dx
mov     bx, ax
add     bx, 69E0h
mov     ax, ds
mov     es, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    ds
mov     ax, 6B1Dh
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_2C313
call    sub_32250
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_2A5CF
mov     ds:0BD88h, dx
mov     ds:0BD86h, ax
push    ds
mov     ax, 6B20h
push    ax
push    ds
mov     ax, 6B2Bh
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_2C313
push    ds
mov     ax, 6B33h
push    ax
push    ds
mov     ax, 6B1Dh
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_2C313
cmp     byte ptr ds:22C5h, 0
jz      short loc_31EFF
mov     ax, 6B3Dh
mov     dx, ds
jmp     short loc_31F04

loc_31EFF:
mov     ax, 6B48h
mov     dx, ds

loc_31F04:
push    dx
push    ax
push    ds
mov     ax, 6B1Dh
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_2C313
les     bx, ds:22D0h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31F26
mov     word ptr ds:0BFE2h, es
mov     ds:0BFE0h, bx

loc_31F26:
les     bx, ds:22D4h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31F50
cmp     byte ptr es:[bx], 0
jnz     short loc_31F44
mov     word ptr ds:0C05Ah, 0
mov     word ptr ds:0C058h, 0
jmp     short loc_31F50

loc_31F44:
les     bx, ds:22D4h
mov     word ptr ds:0C05Ah, es
mov     ds:0C058h, bx

loc_31F50:
les     bx, ds:22D8h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31F62
mov     word ptr ds:0C06Ch, es
mov     ds:0C06Ah, bx

loc_31F62:
les     bx, ds:22E8h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31F74
mov     word ptr ds:0BFDCh, es
mov     ds:0BFDAh, bx

loc_31F74:
les     bx, ds:22ECh
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31F9E
cmp     byte ptr es:[bx], 0
jnz     short loc_31F92
mov     word ptr ds:0BFEAh, 0
mov     word ptr ds:0BFE8h, 0
jmp     short loc_31F9E

loc_31F92:
les     bx, ds:22ECh
mov     word ptr ds:0BFEAh, es
mov     ds:0BFE8h, bx

loc_31F9E:
les     bx, ds:22F0h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31FB0
mov     word ptr ds:0C062h, es
mov     ds:0C060h, bx

loc_31FB0:
les     bx, ds:22DCh
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31FC2
mov     word ptr ds:0BFE6h, es
mov     ds:0BFE4h, bx

loc_31FC2:
les     bx, ds:22E0h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31FEC
cmp     byte ptr es:[bx], 0
jnz     short loc_31FE0
mov     word ptr ds:0C05Eh, 0
mov     word ptr ds:0C05Ch, 0
jmp     short loc_31FEC

loc_31FE0:
les     bx, ds:22E0h
mov     word ptr ds:0C05Eh, es
mov     ds:0C05Ch, bx

loc_31FEC:
les     bx, ds:22E4h
cmp     byte ptr es:[bx], 2Ah ; '*'
jz      short loc_31FFE
mov     word ptr ds:0C070h, es
mov     ds:0C06Eh, bx

loc_31FFE:
les     bx, ds:0C060h
cmp     byte ptr es:[bx], 0
jz      short loc_3200E
mov     word ptr ds:0C064h, 1

loc_3200E:
mov     ax, ds:0C05Ch
or      ax, ds:0C05Eh
jz      short loc_32039
mov     ax, ds:0BFE8h
or      ax, ds:0BFEAh
jz      short loc_32039
push    word ptr ds:0C05Eh
push    word ptr ds:0C05Ch
push    word ptr ds:0BFEAh
push    word ptr ds:0BFE8h
call    sub_46DF5
or      ax, ax
jz      short loc_3203E

loc_32039:
mov     ax, 1
jmp     short loc_32040

loc_3203E:
xor     ax, ax

loc_32040:
mov     ds:0C072h, ax
cmp     byte ptr ds:22BFh, 0
jz      short loc_3209F
cmp     byte ptr ds:0BE1Bh, 0
jz      short loc_32058
mov     ax, 6B52h
mov     dx, ds
jmp     short loc_3205D

loc_32058:
mov     ax, 6B5Ah
mov     dx, ds

loc_3205D:
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_2A9CF
add     ax, 0Ah
mov     [bp+var_6], dx
mov     [bp+var_8], ax
push    dx
push    ax
mov     ax, 2
push    ax
mov     ax, 6
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
cmp     word ptr ds:0C072h, 0
jz      short loc_32090
mov     ax, 100h
jmp     short loc_32092

loc_32090:
xor     ax, ax

loc_32092:
push    ax
call    sub_1F1E6
mov     ds:0BF90h, dx
mov     ds:0BF8Eh, ax

loc_3209F:
push    word ptr ds:22F6h
push    word ptr ds:22F4h
call    sub_46E60
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46E60
pop     dx
add     dx, ax
add     dx, 6
push    dx
call    sub_3193F
mov     ds:0BE2Fh, dx
mov     ds:0BE2Dh, ax
push    dx
push    ax
push    word ptr ds:22F6h
push    word ptr ds:22F4h
call    sub_46D76
push    word ptr ds:0BE2Fh
push    word ptr ds:0BE2Dh
call    sub_46494
push    word ptr ds:0BE2Fh
push    word ptr ds:0BE2Dh
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46C3E
push    word ptr ds:0BFE2h
push    word ptr ds:0BFE0h
call    sub_25E94
push    word ptr ds:0C06Ch
push    word ptr ds:0C06Ah
call    sub_25E94
push    word ptr ds:0C05Ah
push    word ptr ds:0C058h
call    sub_25E94
push    word ptr ds:0BFE6h
push    word ptr ds:0BFE4h
call    sub_25E94
push    word ptr ds:0C070h
push    word ptr ds:0C06Eh
call    sub_25E94
push    word ptr ds:0C05Eh
push    word ptr ds:0C05Ch
call    sub_25E94
push    word ptr ds:0BFDCh
push    word ptr ds:0BFDAh
call    sub_25E94
push    word ptr ds:0C062h
push    word ptr ds:0C060h
call    sub_25E94
push    word ptr ds:0BFEAh
push    word ptr ds:0BFE8h
call    sub_25E94
mov     word ptr ds:0BE15h, 9A78h
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_37C14
mov     word ptr ds:0BD92h, 1
cmp     byte ptr ds:22B6h, 0
jnz     short loc_321E6
mov     si, 6A04h
jmp     short loc_321D9

loc_32192:
mov     [bp+var_A], 0
mov     [bp+var_C], 0
cmp     word ptr [si], 0
jz      short loc_321B5
push    ds
push    word ptr [si]
xor     ax, ax
push    ax
call    sub_2A9CF
add     ax, 0Ah
mov     [bp+var_A], dx
mov     [bp+var_C], ax

loc_321B5:
push    [bp+var_A]
push    [bp+var_C]
mov     ax, 0Bh
push    ax
mov     al, [si+2]
cbw
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_1F1E6
add     si, 4

loc_321D9:
mov     ax, si
mov     dx, ds
mov     bx, 6A6Ch
mov     cx, ds
cmp     ax, bx
jb      short loc_32192

loc_321E6:
call    sub_2DCA8
mov     word ptr [bp+var_4+2], ds
mov     word ptr [bp+var_4], 7350h
jmp     short loc_32240

loc_321F5:
push    ds
les     bx, [bp+var_4]
push    word ptr es:[bx]
xor     ax, ax
push    ax
call    sub_2A9CF
add     ax, 0Ah
push    dx
push    ax
mov     ax, 0Dh
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_1F1E6
les     bx, [bp+var_4]
mov     al, es:[bx+2]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_3223C
cmp     byte ptr ds:0BE1Bh, 0
jz      short loc_32233
mov     al, 0Bh
jmp     short loc_32235

loc_32233:
mov     al, 7

loc_32235:
les     bx, [bp+var_4]
mov     es:[bx+2], al

loc_3223C:
add     word ptr [bp+var_4], 8

loc_32240:
les     bx, [bp+var_4]
cmp     word ptr es:[bx], 0
jnz     short loc_321F5
pop     si
mov     sp, bp
pop     bp
retf    8
sub_31D57 endp




sub_32250 proc far
mov     al, ds:22B1h
cbw
mov     dx, 6
mul     dx
mov     bx, ax
add     bx, 69E0h
mov     ax, ds
mov     es, ax
mov     al, es:[bx+4]
mov     ds:0BE1Bh, al
mov     al, ds:22B1h
cbw
mov     dx, 6
mul     dx
mov     bx, ax
add     bx, 69E0h
mov     ax, ds
mov     es, ax
mov     al, es:[bx+5]
mov     ds:0BE1Ah, al
retf
sub_32250 endp



; Attributes: bp-based frame

sub_32285 proc far

arg_0= dword ptr  6
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    si
mov     si, 6A04h
jmp     short loc_322C5

loc_3228E:
cmp     word ptr [si], 0
jz      short loc_322C2
push    ds
push    word ptr [si]
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46D55
or      ax, ax
jnz     short loc_322C2
mov     al, [si+2]
cbw
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
les     bx, [bp+arg_0]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     al, [si+3]
cbw
jmp     short loc_322D5

loc_322C2:
add     si, 4

loc_322C5:
mov     ax, si
mov     dx, ds
mov     bx, 6A6Ch
mov     cx, ds
cmp     ax, bx
jb      short loc_3228E
mov     ax, 0FFFFh

loc_322D5:
pop     si
pop     bp
retf    8
sub_32285 endp

seg032 ends


; Segment type: Pure code
seg033 segment byte public 'CODE' use16
assume cs:seg033
;org 0Ah
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_322DA proc far

var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 2Ch
push    si
push    di
mov     si, [bp+arg_0]
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+6]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx
les     bx, [bp+var_4]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
mov     word ptr ds:0C085h, 0
les     bx, [bp+var_4]
mov     al, es:[bx]
cbw
mov     dx, 13h
mul     dx
mov     bx, ax
add     bx, 6B64h
mov     ax, ds
mov     es, ax
push    es
push    bx
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
pop     bx
pop     es
add     bx, ax
mov     al, es:[bx]
mov     ah, 0
dec     ax              ; switch 81 cases
cmp     ax, 50h
jbe     short loc_32340
jmp     def_32344       ; jumptable 00032344 default case

loc_32340:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_32344[bx] ; switch jump
jpt_32344 dw offset loc_323EB, offset loc_323F8, offset loc_324BD ; jump table for switch statement
dw offset loc_32515, offset loc_35277, offset loc_32577
dw offset loc_326CB, offset loc_3273A, offset loc_32848
dw offset loc_328EC, offset loc_3296C, offset loc_32A6B
dw offset loc_32AD3, offset loc_32B57, offset loc_32B89
dw offset loc_32BBD, offset loc_32C21, offset loc_32CB8
dw offset loc_32D29, offset loc_32DFE, offset loc_32E97
dw offset loc_32FA9, offset loc_33021, offset loc_33065
dw offset loc_33073, offset loc_3313C, offset loc_3322A
dw offset loc_33449, offset loc_334FE, offset loc_33523
dw offset loc_33541, offset loc_33565, offset loc_335B7
dw offset loc_33656, offset loc_33682, offset loc_336B3
dw offset loc_337D0, offset loc_33922, offset loc_33AD7
dw offset loc_33B23, offset loc_33BD5, offset loc_33C20
dw offset loc_33EA2, offset loc_33ED8, offset loc_33EF8
dw offset loc_33F04, offset loc_33FDA, offset loc_340C6
dw offset loc_342D1, offset loc_34390, offset loc_3443F
dw offset loc_3449B, offset loc_34568, offset loc_34630
dw offset loc_346E2, offset loc_346FB, offset loc_34755
dw offset loc_34791, offset loc_34806, offset loc_34857
dw offset loc_348AB, offset loc_34900, offset loc_34900
dw offset loc_34908, offset loc_3495B, offset loc_349C2
dw offset loc_349C2, offset loc_349C2, offset loc_34A12
dw offset loc_34A2D, offset loc_34A57, offset loc_34A81
dw offset loc_35277, offset loc_34AC9, offset loc_34D38
dw offset loc_34DB7, offset loc_34F52, offset loc_34F7C
dw offset loc_35196, offset loc_35212, offset loc_35277

loc_323EB:              ; jumptable 00032344 case 1
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    si
call    sub_3528C
jmp     loc_35284

loc_323F8:              ; jumptable 00032344 case 2
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_24]
push    ax
call    sub_42DC8
test    si, 8
jz      short loc_32479
les     bx, [bp+var_4]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
mov     byte ptr es:[bx], 2
mov     byte ptr es:[bx+1], 8
mov     dx, [bp+var_22]
mov     ax, [bp+var_24]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_32433:
push    si
mov     ax, 8008h
push    ax
les     bx, [bp+var_20]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_3244C:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3D01E
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3CFBF
jmp     loc_34AB6

loc_32479:
call    dword ptr ds:0C044h
mov     ax, ds:0BDCBh
mov     [bp+var_10], ax
xor     di, di
jmp     short loc_32491

loc_32487:
db      36h
push    [bp+di+var_24]
call    sub_3780F
inc     di

loc_32491:
cmp     di, 4
jl      short loc_32487
mov     ax, 0Ch
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     [bp+var_26], dx
mov     [bp+var_28], ax
push    dx
push    ax
push    ds
mov     ax, 67EBh
push    ax
call    sub_299B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     loc_3255C

loc_324BD:              ; jumptable 00032344 case 3
call    dword ptr ds:0C044h
mov     ax, ds:0BDCBh
mov     [bp+var_10], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_28]
push    ax
call    sub_42E93
xor     di, di
jmp     short loc_324EA

loc_324E0:
db      36h
push    [bp+di+var_28]
call    sub_3780F
inc     di

loc_324EA:
cmp     di, 8
jl      short loc_324E0
mov     ax, 0Dh
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     [bp+var_2A], dx
mov     [bp+var_2C], ax
push    dx
push    ax
push    ds
mov     ax, 67EBh
push    ax
call    sub_299B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_3255C

loc_32515:              ; jumptable 00032344 case 4
call    dword ptr ds:0C044h
mov     ax, ds:0BDCBh
mov     [bp+var_10], ax
xor     di, di
jmp     short loc_32533

loc_32523:
les     bx, [bp+var_4]
add     bx, di
mov     al, es:[bx+6]
push    ax
call    sub_3780F
inc     di

loc_32533:
cmp     di, 0Ah
jl      short loc_32523
mov     ax, 0Eh
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
mov     [bp+var_22], dx
mov     [bp+var_24], ax
push    dx
push    ax
push    ds
mov     ax, 67EBh
push    ax
call    sub_299B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_3255C:
push    [bp+var_10]
call    sub_31435
les     bx, [bp+var_4]
mov     es:[bx+0Ah], ax
mov     byte ptr es:[bx+4], 0
call    dword ptr ds:0C028h
jmp     loc_34AB6

loc_32577:              ; jumptable 00032344 case 6
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 36h ; '6'
jnz     short loc_3258A
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_3258A:
push    si
mov     ax, 8108h
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
les     bx, [bp+var_1C]
mov     byte ptr es:[bx+3], 5
push    dx
push    ax
mov     ax, 8100h
push    ax
call    sub_2F14C
or      ax, ax
jnz     short loc_325B8
jmp     loc_3266C

loc_325B8:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 1
jnz     short loc_325EE
mov     ax, es:[bx+0Ah]
mov     [bp+var_10], ax
mov     ax, 0D7h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_18+2]
push    bx
call    sub_3C214
mov     ax, [bp+var_10]
les     bx, [bp+var_18]
mov     es:[bx+0Ah], ax
jmp     short loc_32609

loc_325EE:
mov     ax, 0D5h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 0Dh
push    dx
push    ax
call    sub_3C214

loc_32609:
mov     ax, 0DAh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3C214
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 1
jnz     short loc_3264D

loc_3262E:
mov     ax, 0CEh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3C214
jmp     loc_32727

loc_3264D:
mov     ax, 0D1h
push    ax
xor     dx, dx
mov     ax, 40h ; '@'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3C214
jmp     loc_32727

loc_3266C:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 1
jnz     short loc_326AD
mov     ax, 0D6h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_18+2]
push    bx
call    sub_3C214
mov     ax, 0DFh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3C214
jmp     short loc_32727

loc_326AD:
mov     ax, 0DDh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 0Dh
push    dx
push    ax
call    sub_3C214
jmp     loc_3264D

loc_326CB:              ; jumptable 00032344 case 7
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 36h ; '6'
jnz     short loc_326DE
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_326DE:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 8013h
push    ax
mov     ax, 7
push    ax
call    sub_2F19D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 1
jnz     short loc_32716
jmp     loc_3262E

loc_32716:
mov     ax, 40h ; '@'
push    ax
push    dx
push    word ptr [bp+var_1C]
push    word ptr [bp+var_18+2]
push    bx
call    sub_3D0C3

loc_32727:
mov     dx, word ptr [bp+var_1C+2]
mov     ax, word ptr [bp+var_1C]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_3273A:              ; jumptable 00032344 case 8
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F677
push    si
mov     ax, 0FFFFh
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
cmp     word ptr es:[bx+0Ah], 1Ah
jnz     short loc_3278D
mov     ax, 47h ; 'G'
push    ax
call    sub_3CF03
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3CF3D
jmp     def_32344       ; jumptable 00032344 default case

loc_3278D:
les     bx, [bp+var_20]
mov     ax, es:[bx+0Ah]
cmp     ax, 9
jz      short loc_327BD
jg      short loc_327A7
cmp     ax, 7
jz      short loc_327B3
cmp     ax, 8
jz      short loc_327BD
jmp     short loc_32810

loc_327A7:
cmp     ax, 16h
jz      short loc_327BD
cmp     ax, 17h
jz      short loc_327BD
jmp     short loc_32810

loc_327B3:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+0Ah], 17h
jz      short loc_327DE

loc_327BD:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F4F2
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F4F2
push    ax
call    sub_3CF5C

loc_327DE:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F53C
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F53C
push    ax
call    sub_3CF5C

loc_327FF:
les     bx, [bp+var_4]
mov     al, es:[bx+3]
les     bx, [bp+var_20]
mov     es:[bx+3], al
jmp     def_32344       ; jumptable 00032344 default case

loc_32810:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jg      short loc_32830
mov     ax, 51h ; 'Q'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_4+2]
push    bx
call    sub_3CFBF
jmp     def_32344       ; jumptable 00032344 default case

loc_32830:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D0C3
jmp     def_32344       ; jumptable 00032344 default case

loc_32848:              ; jumptable 00032344 case 9
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    si
mov     ax, 8008h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F53C
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF9E
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F4F2
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D060
mov     ax, 12h
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3C214
mov     ax, 9Bh
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3C214
jmp     loc_33719

loc_328EC:              ; jumptable 00032344 case 10
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8008h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8008h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
mov     ax, 12h
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3C214
mov     ax, 9Bh
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3C214
jmp     loc_32F96

loc_3296C:              ; jumptable 00032344 case 11
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 6
jnz     short loc_329D3
push    word ptr [bp+var_18+2]
push    bx
mov     ax, 8012h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
mov     ax, 2Ch ; ','
push    ax
push    dx
push    word ptr [bp+var_20]
call    sub_3CF3D
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D03F
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3D0C3
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3CF3D
jmp     loc_33719

loc_329D3:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_329DF
jmp     loc_336BC

loc_329DF:
test    si, 8000h
jnz     short loc_329EE
push    si
call    sub_2F356
mov     [bp+var_10], ax

loc_329EE:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
test    si, 8000h
jnz     short loc_32A18
cmp     [bp+var_10], 0
jz      short loc_32A18
push    si
call    sub_2F356
or      ax, ax
jnz     short loc_32A18
mov     si, 8062h

loc_32A18:
push    si
mov     ax, 8062h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D0C3

loc_32A51:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D03F
jmp     loc_33719

loc_32A6B:              ; jumptable 00032344 case 12
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    si
mov     ax, 8006h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFBF
mov     ax, 52h ; 'R'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3C214
jmp     loc_33719

loc_32AD3:              ; jumptable 00032344 case 13
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D300
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 12h
jz      short loc_32AF5
jmp     def_32344       ; jumptable 00032344 default case

loc_32AF5:
cmp     si, 3
jz      short loc_32AFD
jmp     def_32344       ; jumptable 00032344 default case

loc_32AFD:
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 2
push    ax
call    sub_3CF5C
mov     ax, 24h ; '$'
push    ax
mov     ax, 3
push    ax
mov     ax, 1
push    ax
call    sub_3CF5C
les     bx, [bp+arg_2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_2F677
mov     ax, 3
push    ax
push    ax
mov     ax, 7
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx+4], 0Ah
jmp     def_32344       ; jumptable 00032344 default case

loc_32B57:              ; jumptable 00032344 case 14
push    si
mov     ax, 8108h
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
mov     ax, 2Bh ; '+'
push    ax
push    dx
push    word ptr [bp+var_20]
call    sub_3CFE0
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3CFFF
jmp     short loc_32BAA

loc_32B89:              ; jumptable 00032344 case 15
push    si
mov     ax, 8273h
push    ax
mov     ax, 7
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
mov     ax, 2Bh ; '+'
push    ax
push    dx
push    word ptr [bp+var_20]
call    sub_3CF3D

loc_32BAA:
mov     dx, word ptr [bp+var_20+2]
mov     ax, word ptr [bp+var_20]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_327FF

loc_32BBD:              ; jumptable 00032344 case 16
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 8108h
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_20]
mov     al, es:[bx+3]
les     bx, [bp+var_4]
mov     es:[bx+3], al
push    dx
push    bx
mov     ax, 8100h
push    ax
call    sub_2F14C
or      ax, ax
jnz     short loc_32C09
jmp     loc_3244C

loc_32C09:
mov     ax, 41h ; 'A'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3D0C3
jmp     loc_34AB6

loc_32C21:              ; jumptable 00032344 case 17
push    si
mov     ax, 8108h
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
les     bx, [bp+var_4]
mov     al, es:[bx+3]
les     bx, [bp+var_20]
mov     es:[bx+3], al
push    dx
push    bx
mov     ax, 8100h
push    ax
call    sub_2F14C
or      ax, ax
jz      short loc_32C8B
mov     ax, 0D3h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3C214
mov     ax, 0E2h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 0Ah
push    dx
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3C214
jmp     short loc_32CA0

loc_32C8B:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D01E

loc_32CA0:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CFBF
jmp     loc_33719

loc_32CB8:              ; jumptable 00032344 case 18
les     bx, [bp+var_14]
les     bx, es:[bx+6]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
call    sub_29B97
mov     [bp+var_A], dx
mov     [bp+var_C], ax
call    sub_29B97
mov     [bp+var_6], dx
mov     [bp+var_8], ax
call    sub_2F40A
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    [bp+var_6]
push    [bp+var_8]
call    sub_2E706
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    [bp+var_A]
push    [bp+var_C]
push    [bp+var_6]
push    [bp+var_8]
push    si
call    sub_3ACD3
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_32E89

loc_32D29:              ; jumptable 00032344 case 19
les     bx, [bp+var_14]
les     bx, es:[bx+6]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
call    sub_29B97
mov     [bp+var_A], dx
mov     [bp+var_C], ax
call    sub_29B97
mov     [bp+var_6], dx
mov     [bp+var_8], ax
call    sub_2F40A
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    [bp+var_6]
push    [bp+var_8]
call    sub_2E706
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 0Fh
jnz     short loc_32D86
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2CC3E
jmp     short loc_32D98

loc_32D86:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax

loc_32D98:
push    [bp+var_A]
push    [bp+var_C]
call    sub_2DD94
push    [bp+var_6]
push    [bp+var_8]
call    sub_2DDC9
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 0Fh
jnz     short loc_32DD4
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2CC3E
les     bx, [bp+arg_2]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
jmp     loc_32E89

loc_32DD4:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F677
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
les     bx, [bp+var_20]
push    word ptr es:[bx+0Ah]
call    sub_2CC7D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_32E89

loc_32DFE:              ; jumptable 00032344 case 20
les     bx, [bp+var_14]
les     bx, es:[bx+6]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
call    sub_29B97
mov     [bp+var_A], dx
mov     [bp+var_C], ax
call    sub_29B97
mov     [bp+var_6], dx
mov     [bp+var_8], ax
call    sub_2F40A
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    [bp+var_6]
push    [bp+var_8]
call    sub_2E706
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
push    [bp+var_A]
push    [bp+var_C]
call    sub_2DD94
push    [bp+var_6]
push    [bp+var_8]
call    sub_2DDC9
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 8080h
push    ax
call    sub_2CC7D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_32E89:
push    [bp+var_A]
push    [bp+var_C]
call    sub_2DDC9
jmp     def_32344       ; jumptable 00032344 default case

loc_32E97:              ; jumptable 00032344 case 21
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_18]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
les     bx, [bp+var_20]
mov     al, es:[bx+1]
cbw
mov     di, ax
cmp     di, 6
jle     short loc_32EC3
jmp     loc_32FA9       ; jumptable 00032344 case 22

loc_32EC3:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 23h ; '#'
jz      short loc_32ECF
jmp     loc_32FA9       ; jumptable 00032344 case 22

loc_32ECF:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jz      short loc_32EDB
jmp     loc_32FA9       ; jumptable 00032344 case 22

loc_32EDB:
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_32EE8
jmp     loc_32FA9       ; jumptable 00032344 case 22

loc_32EE8:
cmp     di, 2
jg      short loc_32F50
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 8003h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 3Bh ; ';'
push    ax
push    dx
push    word ptr [bp+var_18]
call    sub_3CFE0
mov     ax, 3Ah ; ':'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFBF
mov     ax, 2Eh ; '.'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFE0
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jle     short loc_32F46
mov     ax, 43h ; 'C'
push    ax
call    sub_3CF03

loc_32F46:
les     bx, [bp+var_18]
mov     byte ptr es:[bx+1], 3
jmp     short loc_32F96

loc_32F50:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 8013h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 3Bh ; ';'
push    ax
push    dx
push    word ptr [bp+var_18]
call    sub_3CF3D
mov     ax, 3Ah ; ':'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D0C3
mov     ax, 2Eh ; '.'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D

loc_32F96:
mov     dx, word ptr [bp+var_18+2]
mov     ax, word ptr [bp+var_18]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_32FA9:              ; jumptable 00032344 case 22
push    word ptr ds:0C068h
push    word ptr ds:0C066h
xor     ax, ax
push    ax
push    ax
call    sub_29A88
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr ds:0C068h
push    word ptr ds:0C066h
xor     dx, dx
mov     ax, 1
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
mov     al, 31h ; '1'
push    ax
push    word ptr ds:0C068h
push    word ptr ds:0C066h
push    dx
push    word ptr [bp+var_1C]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_29862
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
mov     al, 30h ; '0'
push    ax
push    word ptr ds:0C068h
push    word ptr ds:0C066h
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    dx
push    word ptr [bp+var_20]
call    sub_29862
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33021:              ; jumptable 00032344 case 23
cmp     si, 0FFFFh
jnz     short loc_33041
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3B074
les     bx, [bp+arg_2]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
jmp     short loc_33057

loc_33041:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_33057:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3B074
jmp     def_32344       ; jumptable 00032344 default case

loc_33065:              ; jumptable 00032344 case 24
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3B074
jmp     loc_3461D

loc_33073:              ; jumptable 00032344 case 25
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jg      short loc_33082
mov     ax, 8006h
jmp     short loc_33085

loc_33082:
mov     ax, 8013h

loc_33085:
mov     [bp+var_10], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_330A6
les     bx, [bp+var_18]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
jmp     short loc_330B8

loc_330A6:
les     bx, [bp+var_14]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_18]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx

loc_330B8:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    [bp+var_10]
call    sub_39E93
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    ss
lea     ax, [bp+var_20]
push    ax
push    si
push    ss
lea     ax, [bp+var_1C]
push    ax
push    [bp+var_10]
call    sub_39BB1
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
mov     dx, word ptr [bp+var_20+2]
mov     ax, word ptr [bp+var_20]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jg      short loc_3311B
mov     ax, 52h ; 'R'
jmp     short loc_3311E

loc_3311B:
mov     ax, 49h ; 'I'

loc_3311E:
mov     [bp+var_10], ax
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3C214
jmp     def_32344       ; jumptable 00032344 default case

loc_3313C:              ; jumptable 00032344 case 26
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jg      short loc_3314B
mov     ax, 8006h
jmp     short loc_3314E

loc_3314B:
mov     ax, 8013h

loc_3314E:
mov     [bp+var_10], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_33196
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    [bp+var_10]
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
push    ss
lea     ax, [bp+var_14]
push    ax
push    [bp+var_10]
call    sub_39BB1
jmp     short loc_331EC

loc_33196:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_331B3
push    word ptr [bp+var_14+2]
push    bx
push    [bp+var_10]
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
jmp     short loc_331C7

loc_331B3:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    [bp+var_10]
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_331C7:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
push    [bp+var_10]
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
call    sub_39BB1

loc_331EC:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
mov     dx, word ptr [bp+var_18+2]
mov     ax, word ptr [bp+var_18]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jle     short loc_33214
jmp     loc_334E6

loc_33214:
mov     ax, 30h ; '0'
push    ax
push    dx
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3CFBF
jmp     def_32344       ; jumptable 00032344 default case

loc_3322A:              ; jumptable 00032344 case 27
les     bx, [bp+var_18]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_33237
jmp     loc_332FF

loc_33237:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_33284
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 16h
push    ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 17h
push    ax
call    sub_39BB1
jmp     short loc_332C5

loc_33284:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 17h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 16h
push    ax
call    sub_39BB1

loc_332C5:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
push    ds
mov     ax, 70F2h
push    ax
call    dword ptr ds:0C02Ch
mov     ax, 16h
push    ax
push    ax
mov     ax, 8
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_332FF:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_3334C
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8400h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 8400h
push    ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8013h
push    ax
call    sub_39BB1
jmp     short loc_3338D

loc_3334C:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8400h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8013h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 8400h
push    ax
call    sub_39BB1

loc_3338D:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
les     bx, [bp+var_18]
cmp     word ptr es:[bx+0Ah], 1
jnz     short loc_333B7
mov     di, 16h
mov     [bp+var_10], 2
jmp     short loc_333BF

loc_333B7:
mov     di, 17h
mov     [bp+var_10], 4

loc_333BF:
push    di
push    di
mov     ax, 8
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jnz     short loc_333EC
mov     ax, es:[bx+0Ah]
cmp     ax, [bp+var_10]
jz      short loc_33422

loc_333EC:
mov     ax, 34h ; '4'
push    ax
push    [bp+var_10]
push    [bp+var_10]
call    sub_3CF5C
mov     ax, 30h ; '0'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D0C3
mov     ax, 3Ah ; ':'
push    ax
push    [bp+var_10]
xor     ax, ax
push    ax
call    sub_3D081
jmp     def_32344       ; jumptable 00032344 default case

loc_33422:
mov     ax, 30h ; '0'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D0C3
mov     ax, 3Ah ; ':'
push    ax
push    [bp+var_10]
push    [bp+var_10]
call    sub_3CF5C
jmp     def_32344       ; jumptable 00032344 default case

loc_33449:              ; jumptable 00032344 case 28
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_33490
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8013h
push    ax
call    sub_39BB1
jmp     short loc_334CB

loc_33490:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8013h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
call    sub_39BB1

loc_334CB:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
mov     dx, word ptr [bp+var_18+2]
mov     ax, word ptr [bp+var_18]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_334E6:
mov     ax, 30h ; '0'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D0C3
jmp     def_32344       ; jumptable 00032344 default case

loc_334FE:              ; jumptable 00032344 case 29
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8080h
push    ax
call    sub_2CC7D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 1
push    ax
call    sub_3CF03
jmp     def_32344       ; jumptable 00032344 default case

loc_33523:              ; jumptable 00032344 case 30
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3A800
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33541:              ; jumptable 00032344 case 31
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3A6BD
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33565:              ; jumptable 00032344 case 32
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3A946
or      ax, ax
jz      short loc_33599
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    si
call    sub_3AA3F
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33599:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_335C2

loc_335A3:
les     bx, [bp+var_18]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
jmp     short loc_335D4

loc_335B7:              ; jumptable 00032344 case 33
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0Eh
jz      short loc_335A3
jmp     short loc_33599

loc_335C2:
les     bx, [bp+var_14]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_18]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx

loc_335D4:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 8008h
push    ax
call    sub_39E93
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    ss
lea     ax, [bp+var_20]
push    ax
push    si
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 8008h
push    ax
call    sub_39BB1
mov     ax, 12h
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3C214
mov     ax, 9Bh
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3C214
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
jmp     loc_33719

loc_33656:              ; jumptable 00032344 case 34
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 48h ; 'H'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    dx
push    word ptr [bp+var_18]
xor     ax, ax
push    ax
push    ax
call    sub_3C214
jmp     loc_32F96

loc_33682:              ; jumptable 00032344 case 35
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 39h ; '9'
push    ax
push    dx
push    word ptr [bp+var_18]
call    sub_3CFE0
mov     ax, 39h ; '9'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFFF
jmp     loc_32F96

loc_336B3:              ; jumptable 00032344 case 36
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_336D5

loc_336BC:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    si
call    sub_3A1C7
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_336D5:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 6
jnz     short loc_3372C
push    word ptr [bp+var_18+2]
push    bx
mov     ax, 8012h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    dx
push    ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D03F
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3D0C3

loc_33719:
mov     dx, word ptr [bp+var_20+2]
mov     ax, word ptr [bp+var_20]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_3372C:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jg      short loc_3373B
mov     ax, 8006h
jmp     short loc_3373E

loc_3373B:
mov     ax, 8013h

loc_3373E:
mov     [bp+var_10], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_39F46
or      ax, ax
jnz     short loc_33766
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    [bp+var_10]
call    sub_39DEE
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
jmp     short loc_3377A

loc_33766:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    [bp+var_10]
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_3377A:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
push    [bp+var_10]
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jg      short loc_337AF
mov     ax, 52h ; 'R'
jmp     short loc_337B2

loc_337AF:
mov     ax, 49h ; 'I'

loc_337B2:
mov     [bp+var_10], ax
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3C214
jmp     loc_35188

loc_337D0:              ; jumptable 00032344 case 37
cmp     byte ptr ds:22B2h, 0
jz      short loc_33827
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jnz     short loc_33827
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 4
jz      short loc_33802
cmp     byte ptr es:[bx+1], 2
jnz     short loc_33809

loc_33802:
mov     [bp+var_E], 8Ch
jmp     short loc_3380E

loc_33809:
mov     [bp+var_E], 4Ch ; 'L'

loc_3380E:
mov     di, 1
les     bx, [bp+var_14]
mov     ax, es:[bx+6]
mov     [bp+var_10], ax
or      ax, ax
jz      short loc_33822
jmp     loc_33918

loc_33822:
xor     di, di
jmp     loc_33918

loc_33827:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jnz     short loc_33890
cmp     word ptr es:[bx+8], 0
jl      short loc_33890
jnz     short loc_33840
cmp     word ptr es:[bx+6], 0
jb      short loc_33890

loc_33840:
les     bx, [bp+var_14]
cmp     word ptr es:[bx+8], 0
jg      short loc_33890
jl      short loc_33853
cmp     word ptr es:[bx+6], 4
jnb     short loc_33890

loc_33853:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 4
jz      short loc_33875
cmp     byte ptr es:[bx+1], 2
jnz     short loc_3387C

loc_33875:
mov     [bp+var_E], 8Ch
jmp     short loc_33881

loc_3387C:
mov     [bp+var_E], 4Ch ; 'L'

loc_33881:
les     bx, [bp+var_14]
mov     di, es:[bx+6]
mov     [bp+var_10], 1
jmp     loc_33918

loc_33890:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 4
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 4
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 4
jz      short loc_338DD
cmp     byte ptr es:[bx+1], 2
jnz     short loc_338E4

loc_338DD:
mov     [bp+var_E], 8Dh
jmp     short loc_338E9

loc_338E4:
mov     [bp+var_E], 4Dh ; 'M'

loc_338E9:
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
mov     di, 1
mov     [bp+var_10], 10h
jmp     short loc_33918

loc_338FE:
push    [bp+var_E]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, [bp+var_10]
cwd
push    dx
push    ax
call    sub_3C214

loc_33918:
mov     ax, di
dec     di
or      ax, ax
jg      short loc_338FE
jmp     loc_32F96

loc_33922:              ; jumptable 00032344 case 38
cmp     byte ptr ds:22B2h, 0
jz      short loc_3397A
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jnz     short loc_3397A
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 4
jz      short loc_33955
cmp     byte ptr es:[bx+1], 2
jnz     short loc_3395C

loc_33955:
mov     [bp+var_E], 8Ch
jmp     short loc_33961

loc_3395C:
mov     [bp+var_E], 4Ch ; 'L'

loc_33961:
mov     di, 1
les     bx, [bp+var_14]
mov     ax, es:[bx+6]
mov     [bp+var_10], ax
or      ax, ax
jz      short loc_33975
jmp     loc_33AA3

loc_33975:
xor     di, di
jmp     loc_33AA3

loc_3397A:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jnz     short loc_339E4
cmp     word ptr es:[bx+8], 0
jl      short loc_339E4
jnz     short loc_33993
cmp     word ptr es:[bx+6], 0
jb      short loc_339E4

loc_33993:
les     bx, [bp+var_14]
cmp     word ptr es:[bx+8], 0
jg      short loc_339E4
jl      short loc_339A6
cmp     word ptr es:[bx+6], 4
jnb     short loc_339E4

loc_339A6:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 4
jz      short loc_339C9
cmp     byte ptr es:[bx+1], 2
jnz     short loc_339D0

loc_339C9:
mov     [bp+var_E], 8Ch
jmp     short loc_339D5

loc_339D0:
mov     [bp+var_E], 4Ch ; 'L'

loc_339D5:
les     bx, [bp+var_14]
mov     di, es:[bx+6]
mov     [bp+var_10], 1
jmp     loc_33AA3

loc_339E4:
cmp     si, 10h
jz      short loc_339EE
cmp     si, 4
jnz     short loc_339F1

loc_339EE:
mov     si, 8013h

loc_339F1:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_33A38
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 10h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 10h
push    ax
call    sub_39BB1
jmp     short loc_33A73

loc_33A38:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 10h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 10h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
call    sub_39BB1

loc_33A73:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 4
jz      short loc_33A84
cmp     byte ptr es:[bx+1], 2
jnz     short loc_33A8B

loc_33A84:
mov     [bp+var_E], 8Dh
jmp     short loc_33A90

loc_33A8B:
mov     [bp+var_E], 4Dh ; 'M'

loc_33A90:
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
mov     di, 1
mov     [bp+var_10], 10h

loc_33AA3:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx+1], 2
jg      short loc_33ACD
add     [bp+var_E], 8
jmp     short loc_33ACD

loc_33AB3:
push    [bp+var_E]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, [bp+var_10]
cwd
push    dx
push    ax
call    sub_3C214

loc_33ACD:
mov     ax, di
dec     di
or      ax, ax
jg      short loc_33AB3
jmp     loc_32F96

loc_33AD7:              ; jumptable 00032344 case 39
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 3Bh ; ';'
push    ax
push    dx
push    word ptr [bp+var_18]
call    sub_3CFFF
mov     ax, 3Bh ; ';'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFE0
mov     ax, 0DCh
push    ax
xor     dx, dx
mov     ax, 3Ah ; ':'
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    dx
push    dx
call    sub_3C214
jmp     loc_32F96

loc_33B23:              ; jumptable 00032344 case 40
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_33B41
les     bx, [bp+var_18]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
jmp     short loc_33B53

loc_33B41:
les     bx, [bp+var_14]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_18]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx

loc_33B53:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    ss
lea     ax, [bp+var_20]
push    ax
mov     ax, 8008h
push    ax
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 8008h
push    ax
call    sub_39BB1
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F677
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3A3DD
mov     ax, 16h
push    ax
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33BD5:              ; jumptable 00032344 case 41
call    sub_2F40A
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D746
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D746
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3A3DD
add     word ptr ds:0C083h, 8
push    si
mov     ax, 16h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33C20:              ; jumptable 00032344 case 42
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jl      short loc_33C2D
jmp     loc_33E3E

loc_33C2D:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jz      short loc_33C39
jmp     loc_33D24

loc_33C39:
cmp     word ptr es:[bx+8], 0
jz      short loc_33C43
jmp     loc_33D24

loc_33C43:
cmp     word ptr es:[bx+6], 10h
jz      short loc_33C4D
jmp     loc_33D24

loc_33C4D:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 12h
jnz     short loc_33C9F
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 0DAh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3C214
mov     ax, 34h ; '4'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFBF
jmp     loc_32F96

loc_33C9F:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 9
jnz     short loc_33CF2
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 0D3h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3C214
mov     ax, 34h ; '4'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D01E
jmp     loc_32F96

loc_33CF2:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
mov     ax, 24h ; '$'
push    ax
mov     ax, 1
push    ax
mov     ax, 2
push    ax
call    sub_3CF5C
mov     ax, 42h ; 'B'
push    ax
call    sub_3CF03
jmp     loc_32F96

loc_33D24:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 2
jz      short loc_33D30
jmp     loc_33DFB

loc_33D30:
cmp     word ptr es:[bx+8], 0
jz      short loc_33D3A
jmp     loc_33DFB

loc_33D3A:
cmp     word ptr es:[bx+6], 1
jz      short loc_33D44
jmp     loc_33DFB

loc_33D44:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 12h
jnz     short loc_33D9B
mov     ax, 0D4h
push    ax
xor     dx, dx
mov     ax, 26h ; '&'
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    dx
push    ax
call    sub_3C214
mov     ax, 0DCh
push    ax
xor     dx, dx
mov     ax, 29h ; ')'
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    dx
push    ax
call    sub_3C214
jmp     loc_32F96

loc_33D9B:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 9
jnz     short loc_33DC2
mov     ax, 0DCh
push    ax
xor     dx, dx
mov     ax, 27h ; '''
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    dx
push    ax
call    sub_3C214
jmp     short loc_33DDD

loc_33DC2:
mov     ax, 0DCh
push    ax
xor     dx, dx
mov     ax, 28h ; '('
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    dx
push    ax
call    sub_3C214

loc_33DDD:
mov     ax, 0D4h
push    ax
xor     dx, dx
mov     ax, 2Ah ; '*'
push    dx
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    dx
push    ax
call    sub_3C214
jmp     loc_32F96

loc_33DFB:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 4
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 16h
push    ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 4
push    ax
call    sub_39BB1
jmp     short loc_33E7F

loc_33E3E:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 4
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 4
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 16h
push    ax
call    sub_39BB1

loc_33E7F:
mov     ax, 3
push    ax
push    ax
mov     ax, 5
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3A3DD
jmp     loc_35188

loc_33EA2:              ; jumptable 00032344 case 43
push    si
mov     ax, 8066h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 51h ; 'Q'
push    ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CFBF
jmp     def_32344       ; jumptable 00032344 default case

loc_33ED8:              ; jumptable 00032344 case 44
push    si
mov     ax, 8273h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_3483B

loc_33EF8:              ; jumptable 00032344 case 45
les     bx, [bp+var_4]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
jmp     loc_32433

loc_33F04:              ; jumptable 00032344 case 46
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_33F22
les     bx, [bp+var_18]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
jmp     short loc_33F34

loc_33F22:
les     bx, [bp+var_14]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_18]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx

loc_33F34:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
cmp     byte ptr ds:22B2h, 0
jz      short loc_33F59
les     bx, [bp+var_1C]
cmp     byte ptr es:[bx], 2
jz      short loc_33F85

loc_33F59:
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 8020h
push    ax
call    sub_39D63
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    ss
lea     ax, [bp+var_20]
push    ax
mov     ax, 1
push    ax
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 8020h
push    ax
call    sub_39BB1

loc_33F85:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F677
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
push    si
mov     ax, 16h
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
mov     ax, 35h ; '5'
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3CF3D
push    si
mov     ax, 1
push    ax
mov     ax, 4
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_33FDA:              ; jumptable 00032344 case 47
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8040h
push    ax
call    sub_39D63
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
push    ss
lea     ax, [bp+var_20]
push    ax
mov     ax, 1
push    ax
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 8040h
push    ax
call    sub_39BB1
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F677
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
mov     ax, 2
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 11h
jz      short loc_3406B
push    si
mov     ax, 1
push    ax
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     short loc_34088

loc_3406B:
push    si
mov     ax, 2
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_34088:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx+1], 3
jz      short loc_340A7
mov     ax, 34h ; '4'
push    ax
mov     ax, 2
push    ax
push    ax
call    sub_3CF5C
mov     [bp+var_10], 36h ; '6'
jmp     short loc_340B5

loc_340A7:
mov     ax, 42h ; 'B'
push    ax
call    sub_3CF03
mov     [bp+var_10], 37h ; '7'

loc_340B5:
push    [bp+var_10]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3CF3D
jmp     def_32344       ; jumptable 00032344 default case

loc_340C6:              ; jumptable 00032344 case 48
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_340EC
push    word ptr [bp+var_18+2]
push    bx
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    si
call    sub_39F63
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_340EC:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 6
jnz     short loc_3414F
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 6
jnz     short loc_34124
cmp     byte ptr ds:22C2h, 0
jnz     short loc_34124
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+var_14+2]
push    bx
call    sub_3CF3D
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D
jmp     loc_3461D

loc_34124:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8012h
push    ax
call    sub_39D63
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    dx
push    word ptr [bp+var_14]
call    sub_3D0C3
jmp     loc_3461D

loc_3414F:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 5
jz      short loc_3415B
jmp     loc_341EA

loc_3415B:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_22692
or      ax, ax
jz      short loc_3419A
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3961B
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    dx
push    ax
call    sub_2F677
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D0C3
jmp     loc_32F96

loc_3419A:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
les     bx, [bp+var_18]
push    word ptr es:[bx+0Ah]
call    sub_2EF91
or      ax, ax
jnz     short loc_341EA
les     bx, [bp+var_18]
push    word ptr es:[bx+0Ah]
call    sub_2F312
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
les     bx, [bp+var_18]
push    word ptr es:[bx+0Ah]
call    sub_2CC7D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_18]
push    word ptr es:[bx+0Ah]
call    sub_2F2B5
les     bx, [bp+var_4]
mov     byte ptr es:[bx], 5
jmp     loc_34AB6

loc_341EA:
cmp     si, 0FFFFh
jz      short loc_34203
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
jmp     short loc_34257

loc_34203:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8200h
push    ax
call    sub_2F14C
or      ax, ax
jz      short loc_3422F
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
les     bx, [bp+var_18]
push    word ptr es:[bx+0Ah]
call    sub_2EF91
or      ax, ax
jnz     short loc_3422F
jmp     loc_34594

loc_3422F:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8200h
push    ax
call    sub_2F14C
or      ax, ax
jnz     short loc_34257
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_34257:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 4
jnz     short loc_34295
cmp     word ptr es:[bx+0Ah], 1Ah
jnz     short loc_34295
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
mov     ax, 2Ch ; ','
push    ax
push    dx
push    word ptr [bp+var_14]
call    sub_3CF3D
mov     ax, 4Fh ; 'O'
push    ax
call    sub_3CF03
jmp     loc_3461D

loc_34295:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
push    si
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D0C3
jmp     loc_34612

loc_342D1:              ; jumptable 00032344 case 49
cmp     si, 0FFFFh
jz      short loc_34314
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8008h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
jmp     short loc_34363

loc_34314:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_3432A
push    word ptr [bp+var_18+2]
push    bx
call    sub_39B68
or      ax, ax
jz      short loc_3432D

loc_3432A:
mov     si, 8008h

loc_3432D:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    si
call    sub_39DEE
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
push    si
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1

loc_34363:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D01E
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3CFBF
jmp     loc_34612

loc_34390:              ; jumptable 00032344 case 50
test    si, 8
jz      short loc_343BF
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 3
jz      short loc_343AC
push    word ptr [bp+var_14+2]
push    bx
call    sub_22692
or      ax, ax
jz      short loc_343BF

loc_343AC:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 8
les     bx, [bp+var_18]
mov     byte ptr es:[bx+1], 8
jmp     def_32344       ; jumptable 00032344 default case

loc_343BF:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jz      short loc_3440E
call    sub_39197
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_3440E:
cmp     si, 0FFFFh
jnz     short loc_34424
mov     ax, 17h
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D
jmp     short loc_34433

loc_34424:
mov     ax, 18h
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D

loc_34433:
mov     ax, 4Eh ; 'N'
push    ax
call    sub_3CF03
jmp     loc_3461D

loc_3443F:              ; jumptable 00032344 case 51
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jz      short loc_34475
call    sub_39197
jmp     short loc_34480

loc_34475:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677

loc_34480:
mov     ax, 1Ah
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D
mov     ax, 4Eh ; 'N'
push    ax
call    sub_3CF03
jmp     loc_32F96

loc_3449B:              ; jumptable 00032344 case 52
cmp     si, 0FFFFh
jnz     short loc_344F0
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 1
jl      short loc_344F0
cmp     byte ptr es:[bx], 9
jg      short loc_344F0
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 1
jl      short loc_344F0
cmp     byte ptr es:[bx], 9
jg      short loc_344F0
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_39B68
or      ax, ax
jz      short loc_344DC
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_39B68
or      ax, ax
jnz     short loc_344F0

loc_344DC:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3AE83
jmp     loc_3461D

loc_344F0:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 4
jz      short loc_3453F
call    sub_39197
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_3453F:
cmp     si, 0FFFFh
jnz     short loc_34556
mov     ax, 8
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D
jmp     loc_34433

loc_34556:
mov     ax, 9
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CF3D
jmp     loc_34433

loc_34568:              ; jumptable 00032344 case 53
cmp     si, 0FFFFh
jz      short loc_34581
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
jmp     short loc_345D6

loc_34581:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8004h
push    ax
call    sub_2F14C
or      ax, ax
jz      short loc_345AE

loc_34594:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
les     bx, [bp+var_18]
push    word ptr es:[bx+0Ah]
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
jmp     short loc_3461D

loc_345AE:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8004h
push    ax
call    sub_2F14C
or      ax, ax
jnz     short loc_345D6
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8002h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_345D6:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8002h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
mov     ax, 51h ; 'Q'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3CFBF

loc_34612:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677

loc_3461D:
mov     dx, word ptr [bp+var_14+2]
mov     ax, word ptr [bp+var_14]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_34630:              ; jumptable 00032344 case 54
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 17h
jz      short loc_3463C
jmp     loc_346D1

loc_3463C:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Dh
push    ax
call    sub_3CF1E
mov     ax, 40h ; '@'
push    ax
mov     ax, 1
push    ax
les     bx, [bp+var_18]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3CF7D
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
les     bx, [bp+var_18]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E
mov     ax, 0E6h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 1
push    dx
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3C214
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
mov     ax, 24h ; '$'
push    ax
mov     ax, 4
push    ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3CF7D
push    ds
mov     ax, 70F8h
push    ax
call    dword ptr ds:0C02Ch
add     word ptr ds:0C083h, 8

loc_346D1:
les     bx, [bp+arg_2]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
jmp     def_32344       ; jumptable 00032344 default case

loc_346E2:              ; jumptable 00032344 case 55
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    si
call    sub_3DA27
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_346FB:              ; jumptable 00032344 case 56
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    si
mov     ax, 8011h
push    ax
mov     ax, 7
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 0CEh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3C214
les     bx, [bp+var_4]
mov     al, es:[bx+4]
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     es:[bx+4], al
jmp     def_32344       ; jumptable 00032344 default case

loc_34755:              ; jumptable 00032344 case 57
push    si
mov     ax, 8011h
push    ax
mov     ax, 7
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 40h ; '@'
push    ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D0C3
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     byte ptr es:[bx+4], 0Dh
jmp     def_32344       ; jumptable 00032344 default case

loc_34791:              ; jumptable 00032344 case 58
les     bx, [bp+var_18]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_347CF
push    word ptr [bp+var_18+2]
push    bx
mov     ax, 8100h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F44A
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, es:[bx]
mov     byte ptr es:[bx+1], 5
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     byte ptr es:[bx+4], 0Ah
jmp     def_32344       ; jumptable 00032344 default case

loc_347CF:
les     bx, [bp+var_18]
mov     al, es:[bx+3]
cbw
push    ax
call    sub_3A433
mov     [bp+var_10], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8011h
push    ax
call    sub_2CC7D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     al, byte ptr [bp+var_10]
les     bx, es:[bx]
mov     es:[bx+4], al
jmp     def_32344       ; jumptable 00032344 default case

loc_34806:              ; jumptable 00032344 case 59
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 8A73h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_3483B:
mov     ax, 24h ; '$'
push    ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D0C3
jmp     def_32344       ; jumptable 00032344 default case

loc_34857:              ; jumptable 00032344 case 60
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
mov     [bp+var_10], ax
push    si
mov     ax, 8002h
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 3
mov     ax, 24h ; '$'
push    ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D0C3
mov     al, byte ptr [bp+var_10]
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     es:[bx+1], al
jmp     def_32344       ; jumptable 00032344 default case

loc_348AB:              ; jumptable 00032344 case 61
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 8006h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 0D1h
push    ax
xor     dx, dx
mov     ax, 51h ; 'Q'
push    dx
push    ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3C214
jmp     def_32344       ; jumptable 00032344 default case

loc_34900:              ; jumptable 00032344 cases 62,63
test    si, 8
jnz     short loc_3490E
jmp     short loc_34919

loc_34908:              ; jumptable 00032344 case 64
test    si, 8
jz      short loc_34919

loc_3490E:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 8
jmp     def_32344       ; jumptable 00032344 default case

loc_34919:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
call    sub_2F677
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 16h
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CF3D
jmp     def_32344       ; jumptable 00032344 default case

loc_3495B:              ; jumptable 00032344 case 65
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 8008h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 24h ; '$'
push    ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D01E
mov     ax, 24h ; '$'
push    ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CFBF
jmp     def_32344       ; jumptable 00032344 default case

loc_349C2:              ; jumptable 00032344 cases 66-68
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3961B
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
call    sub_2F677
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 0Eh
jnz     short loc_34A01
mov     ax, 19h
jmp     short loc_34A03

loc_34A01:
xor     ax, ax

loc_34A03:
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CF3D
jmp     def_32344       ; jumptable 00032344 default case

loc_34A12:              ; jumptable 00032344 case 69
push    si
mov     ax, 8273h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_34A70

loc_34A2D:              ; jumptable 00032344 case 70
push    si
mov     ax, 8013h
push    ax
mov     ax, 4
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
mov     ax, 24h ; '$'
push    ax
push    dx
push    word ptr [bp+var_20]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D0C3
jmp     loc_33719

loc_34A57:              ; jumptable 00032344 case 71
push    si
mov     ax, 8002h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_34A70:
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CF3D
jmp     short loc_34AB6

loc_34A81:              ; jumptable 00032344 case 72
push    si
mov     ax, 8008h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, 2Bh ; '+'
push    ax
push    dx
push    word ptr [bp+var_4]
call    sub_3CFE0
mov     ax, 2Bh ; '+'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CFFF

loc_34AB6:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_32344       ; jumptable 00032344 default case

loc_34AC9:              ; jumptable 00032344 case 74
les     bx, [bp+var_4]
mov     al, es:[bx+3]
cbw
and     ax, 0Fh
cmp     ax, 6
jz      short loc_34ADC
jmp     loc_34BD9

loc_34ADC:
les     bx, [bp+var_18]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jnz     short loc_34B08
les     bx, [bp+var_14]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_18]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
les     bx, [bp+var_20]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx

loc_34B08:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_34B55
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 16h
push    ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 17h
push    ax
call    sub_39BB1
jmp     short loc_34B96

loc_34B55:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 17h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
mov     ax, 16h
push    ax
call    sub_39BB1

loc_34B96:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0Dh
jnz     short loc_34BAA
push    ds
mov     ax, 70FFh
push    ax
call    dword ptr ds:0C02Ch
jmp     short loc_34BB3

loc_34BAA:
push    ds
mov     ax, 7105h
push    ax
call    dword ptr ds:0C02Ch

loc_34BB3:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
mov     dx, word ptr [bp+var_18+2]
mov     ax, word ptr [bp+var_18]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, es:[bx]
mov     byte ptr es:[bx+3], 6
jmp     def_32344       ; jumptable 00032344 default case

loc_34BD9:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0Eh
jz      short loc_34BF8
cmp     byte ptr es:[bx+2], 0
jl      short loc_34BF8
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_39F17
or      ax, ax
jz      short loc_34C0C

loc_34BF8:
les     bx, [bp+var_18]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
les     bx, [bp+var_14]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
jmp     short loc_34C1E

loc_34C0C:
les     bx, [bp+var_18]
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx
les     bx, [bp+var_14]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx

loc_34C1E:
les     bx, [bp+var_1C]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_34CA1
push    word ptr [bp+var_1C+2]
push    bx
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_20]
cmp     byte ptr es:[bx], 2
jz      short loc_34C68
push    word ptr [bp+var_20+2]
push    bx
mov     ax, 8012h
push    ax
call    sub_39D63
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
push    ss
lea     ax, [bp+var_20]
push    ax
mov     ax, 8012h
push    ax
call    sub_39BB1

loc_34C68:
mov     ax, 51h ; 'Q'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_3C214
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
call    sub_2F677
mov     dx, word ptr [bp+var_18+2]
mov     ax, word ptr [bp+var_18]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_32F96

loc_34CA1:
les     bx, [bp+var_1C]
cmp     byte ptr es:[bx], 2
jz      short loc_34CE9
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_34CBD
push    word ptr [bp+var_1C+2]
push    bx
call    sub_39B68
or      ax, ax
jz      short loc_34CD4

loc_34CBD:
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 8012h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
jmp     short loc_34CE9

loc_34CD4:
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
mov     ax, 8012h
push    ax
call    sub_39D63
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax

loc_34CE9:
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_1C]
push    ax
mov     ax, 8012h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    si
call    sub_39BB1
mov     ax, 51h ; 'Q'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3C214
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_2F677
jmp     loc_32F96

loc_34D38:              ; jumptable 00032344 case 75
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_34D5B
mov     bx, ax
cmp     byte ptr es:[bx+4], 0Ah
jnz     short loc_34D62

loc_34D5B:
mov     [bp+var_10], 8002h
jmp     short loc_34D67

loc_34D62:
mov     [bp+var_10], 8013h

loc_34D67:
push    si
push    [bp+var_10]
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
mov     ax, 24h ; '$'
push    ax
push    dx
push    word ptr [bp+var_20]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D0C3
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D03F
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
jmp     loc_33719

loc_34DB7:              ; jumptable 00032344 case 76
les     bx, [bp+var_4]
mov     al, es:[bx+3]
cbw
and     ax, 0Fh
cmp     ax, 6
jz      short loc_34DCA
jmp     loc_34E9F

loc_34DCA:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_34DFC
mov     al, 2Ch ; ','
push    ax
xor     ax, ax
push    ax
push    ax
push    word ptr [bp+var_18+2]
push    bx
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_18]
mov     byte ptr es:[bx+1], 0Bh
mov     bx, ax
mov     byte ptr es:[bx+3], 5
jmp     short loc_34E09

loc_34DFC:
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx

loc_34E09:
les     bx, [bp+var_14]
mov     byte ptr es:[bx+1], 3
mov     ax, 16h
push    ax
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
mov     ax, 10h
push    ax
push    ax
mov     ax, 5
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 7
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 1
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 2Fh ; '/'
jnz     short loc_34E7B
push    ds
mov     ax, 710Bh
push    ax
call    dword ptr ds:0C02Ch
jmp     short loc_34E84

loc_34E7B:
push    ds
mov     ax, 7111h
push    ax
call    dword ptr ds:0C02Ch

loc_34E84:
mov     ax, 16h
push    ax
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_35127

loc_34E9F:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_18]
cmp     byte ptr es:[bx+4], 0Ah
jz      short loc_34EC2
mov     bx, ax
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_34EC9

loc_34EC2:
mov     [bp+var_10], 8008h
jmp     short loc_34ECE

loc_34EC9:
mov     [bp+var_10], 8108h

loc_34ECE:
push    si
push    [bp+var_10]
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_20+2], dx
mov     word ptr [bp+var_20], ax
les     bx, [bp+var_4]
mov     al, es:[bx+3]
les     bx, [bp+var_20]
mov     es:[bx+3], al
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
mov     ax, 8100h
push    ax
call    sub_2F14C
or      ax, ax
jz      short loc_34F25
mov     ax, 41h ; 'A'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D0C3
jmp     loc_32A51

loc_34F25:
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3D01E
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+var_20+2]
push    word ptr [bp+var_20]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3CFBF
jmp     loc_32A51

loc_34F52:              ; jumptable 00032344 case 77
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_39F46
or      ax, ax
jnz     short loc_34F64
jmp     loc_35135

loc_34F64:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39E93
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
jmp     loc_3514A

loc_34F7C:              ; jumptable 00032344 case 78
les     bx, [bp+var_4]
mov     al, es:[bx+3]
cbw
and     ax, 0Fh
cmp     ax, 6
jz      short loc_34F8F
jmp     loc_35135

loc_34F8F:
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_34FC1
mov     al, 2Ch ; ','
push    ax
xor     ax, ax
push    ax
push    ax
push    word ptr [bp+var_18+2]
push    bx
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_18]
mov     byte ptr es:[bx+1], 0Bh
mov     bx, ax
mov     byte ptr es:[bx+3], 5
jmp     short loc_34FCE

loc_34FC1:
les     bx, [bp+var_18]
les     bx, es:[bx+6]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx

loc_34FCE:
mov     ax, 0Ah
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_18]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_34FF4
mov     [bp+var_10], 1
jmp     short loc_34FF9

loc_34FF4:
mov     [bp+var_10], 16h

loc_34FF9:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+2], 0
jge     short loc_35044
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    [bp+var_10]
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    [bp+var_10]
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 17h
push    ax
call    sub_39BB1
jmp     short loc_35083

loc_35044:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    [bp+var_10]
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 17h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
push    [bp+var_10]
call    sub_39BB1

loc_35083:
cmp     [bp+var_10], 1
jnz     short loc_350EF
mov     ax, 2
push    ax
push    ax
mov     ax, 5
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_18]
mov     al, es:[bx+3]
cbw
mov     [bp+var_10], ax
or      ax, ax
jnz     short loc_350B2
mov     [bp+var_10], 4

loc_350B2:
mov     ax, 24h ; '$'
push    ax
mov     ax, 2
push    ax
push    [bp+var_10]
call    sub_3A433
push    ax
call    sub_3CF5C
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
mov     ax, 16h
push    ax
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_18]
mov     byte ptr es:[bx+3], 5

loc_350EF:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 19h
jnz     short loc_35103
push    ds
mov     ax, 7117h
push    ax
call    dword ptr ds:0C02Ch
jmp     short loc_3510C

loc_35103:
push    ds
mov     ax, 711Dh
push    ax
call    dword ptr ds:0C02Ch

loc_3510C:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
mov     dx, word ptr [bp+var_18+2]
mov     ax, word ptr [bp+var_18]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_35127:
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     byte ptr es:[bx+3], 5
jmp     def_32344       ; jumptable 00032344 default case

loc_35135:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 8013h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax

loc_3514A:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3961B
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    ss
lea     ax, [bp+var_14]
push    ax
mov     ax, 8013h
push    ax
push    ss
lea     ax, [bp+var_18]
push    ax
xor     ax, ax
push    ax
call    sub_39BB1
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_3D03F

loc_35188:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
jmp     loc_32F96

loc_35196:              ; jumptable 00032344 case 79
les     bx, [bp+var_4]
les     bx, es:[bx+6]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx
les     bx, [bp+var_4]
mov     al, es:[bx+0Bh]
cbw
push    ax
mov     al, es:[bx+0Ah]
cbw
pop     dx
add     dx, ax
mov     ax, 10h
sub     ax, dx
mov     [bp+var_10], ax
les     bx, [bp+var_18]
mov     byte ptr es:[bx+1], 3
push    word ptr [bp+var_18+2]
push    bx
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
cmp     [bp+var_10], 0
jz      short loc_351E8
push    dx
push    ax
mov     ax, 26h ; '&'
push    ax
push    [bp+var_10]
call    sub_3A376

loc_351E8:
les     bx, [bp+var_4]
mov     al, es:[bx+0Ah]
cbw
mov     dx, 10h
sub     dx, ax
mov     [bp+var_10], dx
or      dx, dx
jnz     short loc_351FF
jmp     loc_32F96

loc_351FF:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 28h ; '('
push    ax
push    dx
call    sub_3A376
jmp     loc_32F96

loc_35212:              ; jumptable 00032344 case 80
les     bx, [bp+var_4]
les     bx, es:[bx+6]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx
les     bx, [bp+var_4]
mov     cl, es:[bx+0Ah]
mov     ax, 1
shl     ax, cl
dec     ax
mov     [bp+var_10], ax
les     bx, [bp+var_18]
mov     byte ptr es:[bx+1], 4
push    word ptr [bp+var_18+2]
push    bx
push    si
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+0Bh], 0
jz      short loc_35262
push    dx
push    ax
mov     ax, 27h ; '''
push    ax
mov     al, es:[bx+0Bh]
cbw
push    ax
call    sub_3A376

loc_35262:
mov     ax, 31h ; '1'
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
push    [bp+var_10]
call    sub_3D0E4
jmp     loc_32F96

loc_35277:              ; jumptable 00032344 cases 5,73,81
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

def_32344:              ; jumptable 00032344 default case
mov     ax, 1

loc_35284:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    6
sub_322DA endp



; Attributes: bp-based frame

sub_3528C proc near

var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
mov     si, [bp+arg_0]
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
mov     [bp+var_12], ax
les     bx, es:[bx+6]
mov     al, es:[bx+1]
cbw
mov     di, ax
mov     ax, di
mov     dx, 0Fh
mul     dx
mov     bx, ax
add     bx, 7011h
mov     ax, ds
mov     es, ax
add     bx, [bp+var_12]
mov     al, es:[bx]
mov     ah, 0
dec     ax              ; switch 26 cases
cmp     ax, 19h
jbe     short loc_352E5
jmp     def_352E9       ; jumptable 000352E9 default case

loc_352E5:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_352E9[bx] ; switch jump
jpt_352E9 dw offset loc_35322 ; jump table for switch statement
dw offset loc_35337
dw offset loc_35373
dw offset loc_3542E
dw offset loc_35488
dw offset loc_354A8
dw offset loc_354C8
dw offset loc_354FD
dw offset loc_3551D
dw offset loc_3555B
dw offset loc_35591
dw offset loc_3562C
dw offset loc_35674
dw offset loc_356C6
dw offset loc_3576F
dw offset loc_357A5
dw offset loc_357CB
dw offset loc_357F8
dw offset loc_35826
dw offset loc_35854
dw offset loc_358C5
dw offset loc_35972
dw offset loc_359A2
dw offset loc_359DB
dw offset loc_359DB
dw offset loc_359DB

loc_35322:              ; jumptable 000352E9 case 1
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    si
call    sub_39D63
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     loc_3554A

loc_35337:              ; jumptable 000352E9 case 2
les     bx, [bp+var_4]
mov     al, es:[bx+3]
cbw
mov     [bp+var_10], ax
mov     al, es:[bx+1]
cbw
mov     [bp+var_E], ax
mov     byte ptr es:[bx+1], 9
push    word ptr [bp+var_4+2]
push    bx
push    si
call    sub_2CC7D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     al, byte ptr [bp+var_E]
les     bx, [bp+var_4]
mov     es:[bx+1], al
mov     al, byte ptr [bp+var_10]
mov     es:[bx+3], al
jmp     loc_35792

loc_35373:              ; jumptable 000352E9 case 3
les     bx, [bp+var_8]
mov     al, es:[bx+3]
cbw
push    ax
call    sub_3A433
mov     [bp+var_10], ax
test    si, 100h
jnz     short loc_3538F
cmp     si, 7
jnz     short loc_353EC

loc_3538F:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 3
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    dx
push    ax
call    sub_2F677
cmp     [bp+var_10], 0Ah
jz      short loc_353D6
mov     ax, 1
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
push    [bp+var_10]
mov     ax, 0Ah
push    ax
mov     ax, 1
push    ax
call    sub_391A9

loc_353D6:
push    si
mov     ax, 7
push    ax
mov     ax, 9
push    ax
call    sub_2F19D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_35459

loc_353EC:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    dx
push    ax
call    sub_2F677
mov     ax, 24h ; '$'
push    ax
mov     ax, 2
push    ax
push    [bp+var_10]
call    sub_3CF5C
push    si
mov     ax, 16h
push    ax
mov     ax, 9
push    ax
call    sub_2F19D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_35459

loc_3542E:              ; jumptable 000352E9 case 4
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_22692
or      ax, ax
jnz     short loc_35459
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8008h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F44A
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax

loc_35459:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
les     bx, [bp+var_8]
mov     es:[bx+1], al
les     bx, [bp+var_4]
mov     al, es:[bx+3]
les     bx, [bp+var_8]
mov     es:[bx+3], al
jmp     def_352E9       ; jumptable 000352E9 default case

loc_35488:              ; jumptable 000352E9 case 5
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+1], 8
jmp     loc_3575C

loc_354A8:              ; jumptable 000352E9 case 6
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8002h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+1], 1
jmp     loc_3575C

loc_354C8:              ; jumptable 000352E9 case 7
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 5
jnz     short loc_354E6
push    word ptr [bp+var_8+2]
push    bx
mov     ax, 8002h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_3554A

loc_354E6:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8002h
push    ax
call    sub_39D63
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_3554A

loc_354FD:              ; jumptable 000352E9 case 8
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     ax, 43h ; 'C'
push    ax
call    sub_3CF03
jmp     short loc_3554A

loc_3551D:              ; jumptable 000352E9 case 9
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8002h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     ax, 0DCh
push    ax
xor     dx, dx
mov     ax, 51h ; 'Q'
push    dx
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    dx
push    dx
call    sub_3C214

loc_3554A:
les     bx, [bp+var_4]
mov     al, es:[bx+1]
les     bx, [bp+var_8]
mov     es:[bx+1], al
jmp     loc_3575C

loc_3555B:              ; jumptable 000352E9 case 10
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 1
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 16h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     loc_35668

loc_35591:              ; jumptable 000352E9 case 11
cmp     si, 17h
jnz     short loc_3559D
mov     [bp+var_10], 3
jmp     short loc_355AE

loc_3559D:
cmp     si, 16h
jnz     short loc_355A9
mov     [bp+var_10], 1
jmp     short loc_355AE

loc_355A9:
mov     [bp+var_10], 8400h

loc_355AE:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    [bp+var_10]
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_8]
cmp     word ptr es:[bx+0Ah], 1
jnz     short loc_355DF
mov     [bp+var_10], 16h
mov     [bp+var_E], 2
jmp     short loc_355E9

loc_355DF:
mov     [bp+var_10], 17h
mov     [bp+var_E], 4

loc_355E9:
push    [bp+var_10]
push    [bp+var_10]
xor     ax, ax
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
mov     ax, 34h ; '4'
push    ax
push    [bp+var_E]
push    [bp+var_E]
call    sub_3CF5C
push    si
push    [bp+var_10]
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_3562C:              ; jumptable 000352E9 case 12
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 1
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 16h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 43h ; 'C'
push    ax
call    sub_3CF03

loc_35668:
mov     ax, 42h ; 'B'
push    ax
call    sub_3CF03
jmp     def_352E9       ; jumptable 000352E9 default case

loc_35674:              ; jumptable 000352E9 case 13
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 1
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 16h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 52h ; 'R'
push    ax
mov     ax, 12h
push    ax
push    ax
call    sub_3CF5C
mov     ax, 34h ; '4'
push    ax
mov     ax, 2
push    ax
push    ax
call    sub_3CF5C
jmp     def_352E9       ; jumptable 000352E9 default case

loc_356C6:              ; jumptable 000352E9 case 14
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3A9C9
or      ax, ax
jz      short loc_356EE
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    si
call    sub_3AC22
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_356EE:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8008h
push    ax
call    sub_39D63
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 4
jnz     short loc_3571C
push    dx
push    ax
call    sub_2F44A
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     loc_3554A

loc_3571C:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_2F677
push    si
mov     ax, 8073h
push    ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
mov     ax, 24h ; '$'
push    ax
push    dx
push    word ptr [bp+var_C]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3D0C3
les     bx, [bp+var_C]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_3575C:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_3576F:              ; jumptable 000352E9 case 15
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0Dh
push    word ptr [bp+var_4+2]
push    bx
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 0Ch

loc_35792:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_357A5:              ; jumptable 000352E9 case 16
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8080h
push    ax
call    sub_2CC7D
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
les     bx, es:[bx+6]
mov     byte ptr es:[bx+1], 0Dh
jmp     def_352E9       ; jumptable 000352E9 default case

loc_357CB:              ; jumptable 000352E9 case 17
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8080h
push    ax
call    sub_2CC7D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
mov     al, es:[bx+1]
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     es:[bx+1], al
jmp     def_352E9       ; jumptable 000352E9 default case

loc_357F8:              ; jumptable 000352E9 case 18
mov     al, 35h ; '5'
push    ax
mov     ax, 8
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
xor     ax, ax
push    ax
push    ax
call    sub_29862
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_35826:              ; jumptable 000352E9 case 19
mov     al, 35h ; '5'
push    ax
mov     ax, 9
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
xor     ax, ax
push    ax
push    ax
call    sub_29862
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_35854:              ; jumptable 000352E9 case 20
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 16h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
mov     ax, 2Ch ; ','
push    ax
mov     ax, 2
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
mov     ax, 10h
push    ax
mov     ax, 8
push    ax
mov     ax, 4
push    ax
call    sub_3A5F0
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     def_352E9       ; jumptable 000352E9 default case

loc_358C5:              ; jumptable 000352E9 case 21
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 16h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     ax, 4
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
mov     ax, 34h ; '4'
push    ax
mov     ax, 4
push    ax
push    ax
call    sub_3CF5C
mov     ax, 2Ch ; ','
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 2
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
mov     ax, 14h
push    ax
mov     ax, 0Dh
push    ax
mov     ax, 8
push    ax
call    sub_3A5F0
jmp     short def_352E9 ; jumptable 000352E9 default case

loc_35972:              ; jumptable 000352E9 case 22
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
mov     ax, 16h
push    ax
push    ax
mov     ax, 8
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     short loc_359D0

loc_359A2:              ; jumptable 000352E9 case 23
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
push    si
mov     ax, 16h
push    ax
mov     ax, 9
push    ax
call    sub_2F19D
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_359D0:
push    ds
mov     ax, 7123h
push    ax
call    dword ptr ds:0C02Ch
jmp     short def_352E9 ; jumptable 000352E9 default case

loc_359DB:              ; jumptable 000352E9 cases 24-26
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

def_352E9:              ; jumptable 000352E9 default case
mov     ax, 1
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3528C endp

seg033 ends


; Segment type: Pure code
seg034 segment byte public 'CODE' use16
assume cs:seg034
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_359F0 proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, ds:0BDF7h
or      ax, ds:0BDF9h
jnz     short loc_35A1B
mov     ax, 1Ah
push    ax
call    sub_3193F
mov     ds:0BDF9h, dx
mov     ds:0BDF7h, ax
les     bx, ds:0BDF7h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_35A35

loc_35A1B:
mov     ax, 1Ah
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, ds:0C07Ch
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_35A35:
les     bx, [bp+var_4]
mov     word ptr ds:0C07Eh, es
mov     ds:0C07Ch, bx
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     word ptr es:[bx+14h], 0
mov     word ptr es:[bx+12h], 0
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+18h], 0
mov     word ptr es:[bx+16h], 0
mov     word ptr es:[bx+10h], 0
mov     word ptr es:[bx+0Eh], 0
inc     word ptr ds:0BE21h
mov     ax, ds:0BE21h
mov     es:[bx+0Ah], ax
mov     word ptr es:[bx+0Ch], 0
mov     ax, es:[bx+0Ah]
mov     sp, bp
pop     bp
retf    4
sub_359F0 endp



; Attributes: bp-based frame

sub_35A9E proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     si, [bp+arg_0]
les     bx, ds:0BDF7h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_35AC8

loc_35AB4:
les     bx, [bp+var_8]
mov     ax, es:[bx+0Ah]
cmp     ax, si
jz      short loc_35AD0
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_35AC8:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_35AB4

loc_35AD0:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_35ADD
xor     ax, ax
jmp     loc_35B84

loc_35ADD:
mov     ax, 1Ah
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, ds:0C07Ch
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_4]
mov     word ptr ds:0C07Eh, es
mov     ds:0C07Ch, bx
mov     bx, ax
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
les     bx, [bp+var_8]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
jmp     short loc_35B34

loc_35B27:
les     bx, [bp+var_8]
les     bx, es:[bx+0Eh]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_35B34:
les     bx, [bp+var_8]
mov     ax, es:[bx+0Eh]
or      ax, es:[bx+10h]
jnz     short loc_35B27
mov     dx, word ptr [bp+var_8+2]
mov     ax, bx
les     bx, [bp+var_4]
mov     es:[bx+10h], dx
mov     es:[bx+0Eh], ax
mov     word ptr es:[bx+14h], 0
mov     word ptr es:[bx+12h], 0
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+18h], 0
mov     word ptr es:[bx+16h], 0
inc     word ptr ds:0BE21h
mov     ax, ds:0BE21h
mov     es:[bx+0Ah], ax
mov     word ptr es:[bx+0Ch], 0
mov     ax, es:[bx+0Ah]

loc_35B84:
pop     si
mov     sp, bp
pop     bp
retf    2
sub_35A9E endp



; Attributes: bp-based frame

sub_35B8B proc far

var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Eh
push    si
push    di
mov     si, [bp+arg_0]
mov     di, [bp+arg_2]
les     bx, ds:0BDF7h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_35BB9

loc_35BA5:
les     bx, [bp+var_8]
mov     ax, es:[bx+0Ah]
cmp     ax, di
jz      short loc_35BC1
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_35BB9:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_35BA5

loc_35BC1:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_35BCC
jmp     loc_35CCF

loc_35BCC:
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
mov     ax, [bx-4231h]
or      ax, [bx-422Fh]
jnz     short loc_35BE9
call    sub_35F29
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_35BFB

loc_35BE9:
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
les     bx, [bx-421Dh]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_35BFB:
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
add     ax, es:[bx]
mov     [bp+var_A], ax
les     bx, [bp+var_8]
mov     ax, es:[bx+16h]
or      ax, es:[bx+18h]
jz      short loc_35C61
les     bx, es:[bx+16h]
mov     ax, es:[bx+4]
cmp     ax, si
jnz     short loc_35C24
jmp     loc_35CCF

loc_35C24:
les     bx, [bp+var_8]
les     bx, es:[bx+16h]
mov     ax, es:[bx+4]
cmp     ax, si
jbe     short loc_35C61
les     bx, [bp+var_8]
les     bx, es:[bx+12h]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
jmp     short loc_35C59

loc_35C42:
les     bx, [bp+var_E]
mov     ax, es:[bx+4]
cmp     ax, si
jnz     short loc_35C50
jmp     loc_35CCF

loc_35C50:
les     bx, es:[bx]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx

loc_35C59:
mov     ax, word ptr [bp+var_E]
or      ax, word ptr [bp+var_E+2]
jnz     short loc_35C42

loc_35C61:
mov     ax, 8
push    ax
call    sub_3193F
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
les     bx, [bp+var_E]
mov     word ptr es:[bx+2], 0
mov     word ptr es:[bx], 0
les     bx, [bp+var_8]
mov     ax, es:[bx+16h]
or      ax, es:[bx+18h]
jz      short loc_35C9B
mov     ax, word ptr [bp+var_E]
les     bx, es:[bx+16h]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     short loc_35CAC

loc_35C9B:
mov     dx, word ptr [bp+var_E+2]
mov     ax, word ptr [bp+var_E]
les     bx, [bp+var_8]
mov     es:[bx+14h], dx
mov     es:[bx+12h], ax

loc_35CAC:
mov     dx, word ptr [bp+var_E+2]
mov     ax, word ptr [bp+var_E]
les     bx, [bp+var_8]
mov     es:[bx+18h], dx
mov     es:[bx+16h], ax
inc     word ptr es:[bx+8]
les     bx, [bp+var_E]
mov     es:[bx+4], si
mov     ax, [bp+var_A]
mov     es:[bx+6], ax

loc_35CCF:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_35B8B endp

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+6]
les     bx, ds:0BDF7h
mov     word ptr [bp-2], es
mov     [bp-4], bx
jmp     short loc_35D01

loc_35CED:
les     bx, [bp-4]
mov     ax, es:[bx+0Ah]
cmp     ax, si
jz      short loc_35D09
les     bx, es:[bx]
mov     word ptr [bp-2], es
mov     [bp-4], bx

loc_35D01:
mov     ax, [bp-4]
or      ax, [bp-2]
jnz     short loc_35CED

loc_35D09:
mov     dx, [bp-2]
mov     ax, [bp-4]
pop     si
mov     sp, bp
pop     bp
retf    2


; Attributes: bp-based frame

sub_35D16 proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
xor     si, si
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E800h
push    ax
call    sub_377E8
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Eh]
or      ax, es:[bx+10h]
jz      short loc_35D43
les     bx, es:[bx+0Eh]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_35D43:
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+0Ch], 0
jz      short loc_35D50
jmp     loc_35DEE

loc_35D50:
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
mov     bx, word ptr [bp+arg_0]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
call    sub_376F2
les     bx, [bp+arg_0]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
call    sub_11CC1
mov     [bp+var_6], dx
mov     [bp+var_8], ax
mov     al, byte ptr [bp+var_8]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     al, byte ptr [bp+var_8+1]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     al, byte ptr [bp+var_6]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     al, byte ptr [bp+var_6+1]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, ds:0BDF7h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_35DDA

loc_35DBF:
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ch]
cmp     ax, si
jbe     short loc_35DCE
mov     si, es:[bx+0Ch]

loc_35DCE:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_35DDA:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_35DBF
mov     ax, si
inc     ax
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], ax
jmp     short loc_35DF8

loc_35DEE:
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
call    sub_376C0

loc_35DF8:
mov     al, 88h
push    ax
call    sub_373E8
pop     si
mov     sp, bp
pop     bp
retf    4
sub_35D16 endp



; Attributes: bp-based frame

sub_35E05 proc near

var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 8
push    si
xor     si, si
mov     ds:0BE21h, si
les     bx, ds:0BDF7h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_35E3D

loc_35E1E:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+8], 0
jz      short loc_35E2B
mov     si, 1

loc_35E2B:
les     bx, [bp+var_4]
mov     word ptr es:[bx+0Ah], 0
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_35E3D:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_35E1E
or      si, si
jnz     short loc_35E61
mov     ax, ds:0BDF7h
or      ax, ds:0BDF9h
jz      short loc_35E61
push    word ptr ds:0BDF9h
push    word ptr ds:0BDF7h
push    cs
call    near ptr sub_35D16
jmp     loc_35F24

loc_35E61:
les     bx, ds:0BDF7h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     loc_35F19

loc_35E6E:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+8], 0
jnz     short loc_35E7B
jmp     loc_35F0D

loc_35E7B:
push    word ptr [bp+var_4+2]
push    bx
push    cs
call    near ptr sub_35D16
xor     si, si
mov     word ptr ds:0C074h, 9A78h
mov     al, ds:713Ah
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 1
inc     word ptr ds:0C074h
les     bx, [bp+var_4]
les     bx, es:[bx+12h]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_35EFF

loc_35EB2:
cmp     si, 3E8h
jl      short loc_35EDE
mov     al, 94h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     al, ds:713Ah
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 1
inc     word ptr ds:0C074h
xor     si, si

loc_35EDE:
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
call    sub_377E8
les     bx, [bp+var_8]
push    word ptr es:[bx+6]
call    sub_377E8
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
inc     si

loc_35EFF:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_35EB2
mov     al, 94h
push    ax
call    sub_373E8

loc_35F0D:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_35F19:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_35F24
jmp     loc_35E6E

loc_35F24:
pop     si
mov     sp, bp
pop     bp
retn
sub_35E05 endp



; Attributes: bp-based frame

sub_35F29 proc near

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 40Ch
push    ax
call    sub_3193F
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
add     ax, 0Ch
xor     dx, dx
sub     ax, word ptr [bp+var_4]
sbb     dx, 0
push    ax
mov     al, 0
push    ax
call    sub_46C10
mov     bx, ds:0BFDEh
shl     bx, 1
mov     ax, [bx-423Bh]
les     bx, [bp+var_4]
mov     es:[bx], ax
mov     word ptr es:[bx+0Ah], 0
mov     word ptr es:[bx+8], 0
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
mov     ax, [bx-4231h]
or      ax, [bx-422Fh]
jz      short loc_35F9E
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
les     bx, [bx-421Dh]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
jmp     short loc_35FB4

loc_35F9E:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
mov     [bx-422Fh], dx
mov     [bx-4231h], ax

loc_35FB4:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
mov     [bx-421Bh], dx
mov     [bx-421Dh], ax
mov     sp, bp
pop     bp
retn
sub_35F29 endp



; Attributes: bp-based frame

sub_35FCE proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
mov     ax, [bx-4231h]
or      ax, [bx-422Fh]
jnz     short loc_35FF1
call    sub_35F29
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_36003

loc_35FF1:
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
les     bx, [bx-421Dh]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_36003:
cmp     [bp+arg_4], 7
jnz     short loc_36016
les     bx, [bp+var_4]
cmp     word ptr es:[bx+2], 3FCh
jbe     short loc_3602A
jmp     short loc_36021

loc_36016:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+2], 3FEh
jbe     short loc_3602A

loc_36021:
call    sub_35F29
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_3602A:
mov     ax, 0Bh
push    ax
call    sub_3193F
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
mov     al, byte ptr [bp+arg_4]
les     bx, [bp+var_8]
mov     es:[bx], al
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
les     bx, [bp+var_8]
mov     es:[bx+1], ax
mov     dx, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     es:[bx+5], dx
mov     es:[bx+3], ax
les     bx, [bp+var_4]
mov     dx, es:[bx+6]
mov     ax, es:[bx+4]
les     bx, [bp+var_8]
mov     es:[bx+9], dx
mov     es:[bx+7], ax
mov     dx, word ptr [bp+var_8+2]
mov     ax, bx
les     bx, [bp+var_4]
mov     es:[bx+6], dx
mov     es:[bx+4], ax
mov     sp, bp
pop     bp
retf    6
sub_35FCE endp


loc_3608A:
cmp     byte ptr ds:22C0h, 0
jz      short locret_36094
call    sub_372AA

locret_36094:
retf


; Attributes: bp-based frame

sub_36095 proc far

var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     word ptr ds:0C074h, 9A78h
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_376F2
mov     al, 80h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
xor     ax, ax
push    ax
call    sub_377E8
push    ds
mov     ax, 71A4h
push    ax
call    sub_376F2
mov     al, 88h
push    ax
call    sub_373E8
mov     [bp+var_2], 6
cmp     word ptr ds:0C064h, 0
jz      short loc_360E4
mov     [bp+var_2], 8
mov     byte ptr ds:7156h, 3
jmp     short loc_360F5

loc_360E4:
mov     byte ptr ds:7156h, 2
mov     word ptr ds:0BFEAh, 0
mov     word ptr ds:0BFE8h, 0

loc_360F5:
mov     word ptr ds:713Ah, 0
mov     word ptr ds:7144h, 0
mov     word ptr ds:7158h, 0
mov     ax, ds:0C058h
or      ax, ds:0C05Ah
jz      short loc_36120
mov     ax, [bp+var_2]
mov     ds:713Ch, ax
inc     [bp+var_2]
mov     byte ptr ds:7139h, 1
jmp     short loc_36125

loc_36120:
mov     byte ptr ds:7139h, 0

loc_36125:
mov     ax, ds:0C05Ch
or      ax, ds:0C05Eh
jz      short loc_3613E
mov     ax, [bp+var_2]
mov     ds:7146h, ax
inc     [bp+var_2]
mov     byte ptr ds:7143h, 1
jmp     short loc_36143

loc_3613E:
mov     byte ptr ds:7143h, 0

loc_36143:
mov     ax, ds:0BFE8h
or      ax, ds:0BFEAh
jz      short loc_3615C
mov     ax, [bp+var_2]
mov     ds:715Ah, ax
inc     [bp+var_2]
mov     byte ptr ds:7157h, 1
jmp     short loc_36161

loc_3615C:
mov     byte ptr ds:7157h, 0

loc_36161:
mov     [bp+var_2], 1
mov     di, 1
jmp     loc_36222

loc_3616C:
mov     ax, di
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     byte ptr es:[bx+5], 0
jnz     short loc_36187
jmp     loc_36221

loc_36187:
mov     si, di
jmp     loc_36216

loc_3618C:
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     byte ptr es:[bx+5], 0
jz      short loc_36215
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     word ptr es:[bx+6], 0
jnz     short loc_36215
mov     ax, di
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
les     bx, es:[bx]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
les     bx, es:[bx]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D55
or      ax, ax
jnz     short loc_36215
mov     ax, [bp+var_2]
push    ax
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
pop     ax
mov     es:[bx+6], ax

loc_36215:
inc     si

loc_36216:
cmp     si, 4
jg      short loc_3621E
jmp     loc_3618C

loc_3621E:
inc     [bp+var_2]

loc_36221:
inc     di

loc_36222:
cmp     di, 4
jg      short loc_3622A
jmp     loc_3616C

loc_3622A:
mov     ax, ds:7144h
mov     ds:714Eh, ax
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_36095 endp


loc_36238:
push    bp
mov     bp, sp
sub     sp, 0Ah
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_46E60
mov     [bp-0Ah], ax
mov     al, 88h
push    ax
mov     ax, [bp-0Ah]
add     ax, 8
push    ax
call    sub_378D1
mov     al, 0
push    ax
call    sub_378F8
mov     al, 0E9h
push    ax
call    sub_378F8
push    word ptr ds:0BFAEh
push    word ptr ds:0BFACh
call    sub_11CC1
mov     [bp-2], dx
mov     [bp-4], ax
push    ax
call    sub_378F8
push    word ptr [bp-3]
call    sub_378F8
push    word ptr [bp-2]
call    sub_378F8
push    word ptr [bp-1]
call    sub_378F8
push    word ptr [bp-0Ah]
call    sub_378F8
les     bx, ds:0BFACh
mov     word ptr [bp-6], es
mov     [bp-8], bx
jmp     short loc_362AF

loc_362A2:
les     bx, [bp-8]
mov     al, es:[bx]
push    ax
call    sub_378F8
inc     word ptr [bp-8]

loc_362AF:
les     bx, [bp-8]
cmp     byte ptr es:[bx], 0
jnz     short loc_362A2
call    sub_37910
mov     sp, bp
pop     bp
retf


; Attributes: bp-based frame

sub_362BF proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E900h
push    ax
call    sub_377E8
mov     al, 88h
push    ax
call    sub_373E8
cmp     byte ptr ds:22C0h, 0
jz      short loc_36316
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0EA00h
push    ax
call    sub_377E8
mov     bx, ds:0C074h
mov     byte ptr [bx], 1
inc     word ptr ds:0C074h
mov     al, ds:22CCh
shl     al, 1
shl     al, 1
shl     al, 1
or      al, ds:22B1h
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     al, 88h
push    ax
call    sub_373E8

loc_36316:
mov     word ptr ds:0C074h, 9A78h
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
push    word ptr ds:0BFE2h
push    word ptr ds:0BFE0h
call    sub_376F2
push    word ptr ds:0C06Ch
push    word ptr ds:0C06Ah
call    sub_376F2
push    word ptr ds:0BFE6h
push    word ptr ds:0BFE4h
call    sub_376F2
push    word ptr ds:0C070h
push    word ptr ds:0C06Eh
call    sub_376F2
cmp     word ptr ds:0C064h, 0
jz      short loc_36370
push    word ptr ds:0BFDCh
push    word ptr ds:0BFDAh
call    sub_376F2
push    word ptr ds:0C062h
push    word ptr ds:0C060h
call    sub_376F2

loc_36370:
mov     ax, ds:0C058h
or      ax, ds:0C05Ah
jz      short loc_36384
push    word ptr ds:0C05Ah
push    word ptr ds:0C058h
call    sub_376F2

loc_36384:
mov     ax, ds:0C05Ch
or      ax, ds:0C05Eh
jz      short loc_36398
push    word ptr ds:0C05Eh
push    word ptr ds:0C05Ch
call    sub_376F2

loc_36398:
mov     ax, ds:0BFE8h
or      ax, ds:0BFEAh
jz      short loc_363AC
push    word ptr ds:0BFEAh
push    word ptr ds:0BFE8h
call    sub_376F2

loc_363AC:
mov     al, 96h
push    ax
call    sub_373E8
mov     ax, ds:0BDC9h
xor     dx, dx
mov     bx, ds:0BDCBh
xor     cx, cx
add     ax, bx
adc     dx, cx
mov     bx, ds:0BDCDh
xor     cx, cx
add     ax, bx
adc     dx, cx
or      dx, dx
jl      short loc_363E1
jg      short loc_363D6
cmp     ax, 0FFFFh
jbe     short loc_363E1

loc_363D6:
mov     ax, 1Fh
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_363E1:
mov     ax, ds:0BDC7h
mov     ds:7165h, ax
mov     ax, ds:0BDCDh
mov     ds:7179h, ax
mov     ax, ds:0BDC9h
add     ax, ds:0BDCBh
mov     ds:716Fh, ax
push    ds
mov     ax, 7161h
push    ax
call    sub_37923
push    ds
mov     ax, 716Bh
push    ax
call    sub_37923
cmp     word ptr ds:0C064h, 0
jz      short loc_36416
push    ds
mov     ax, 7175h
push    ax
call    sub_37923

loc_36416:
mov     si, 1
jmp     loc_3650B

loc_3641C:
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     byte ptr es:[bx+5], 0
jnz     short loc_36437
jmp     loc_3650A

loc_36437:
mov     word ptr ds:0C074h, 9A78h
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+8]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     di, si
jmp     loc_364FC

loc_36461:
mov     ax, di
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     byte ptr es:[bx+5], 0
jnz     short loc_3647C
jmp     loc_364FB

loc_3647C:
mov     ax, si
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
les     bx, es:[bx]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
mov     ax, di
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
les     bx, es:[bx]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D55
or      ax, ax
jnz     short loc_364FB
mov     bx, ds:0C074h
mov     byte ptr [bx], 0FFh
inc     word ptr ds:0C074h
mov     ax, di
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+4]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     ax, di
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     byte ptr es:[bx+5], 0

loc_364FB:
inc     di

loc_364FC:
cmp     di, 4
jg      short loc_36504
jmp     loc_36461

loc_36504:
mov     al, 9Ah
push    ax
call    sub_373E8

loc_3650A:
inc     si

loc_3650B:
cmp     si, 4
jg      short loc_36513
jmp     loc_3641C

loc_36513:
mov     word ptr ds:0C074h, 9A78h
mov     si, 1
les     bx, ds:0BD98h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     loc_365AE

loc_36529:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jnz     short loc_365A1
cmp     word ptr es:[bx+10h], 0
jbe     short loc_365A1
mov     es:[bx+0Ah], si
inc     si
push    word ptr [bp+var_8+2]
push    bx
call    sub_3772C
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
cmp     byte ptr ds:22C0h, 0
jz      short loc_3658F
mov     al, 8Ch
push    ax
call    sub_373E8
les     bx, [bp+var_8]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_369C2
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E000h
push    ax
call    sub_377E8
les     bx, [bp+var_8]
les     bx, es:[bx+0Ch]
push    word ptr es:[bx+0Eh]
call    sub_376C0
mov     al, 88h
push    ax
call    sub_373E8
jmp     short loc_3659B

loc_3658F:
test    si, 7Fh
jnz     short loc_365A1
mov     al, 8Ch
push    ax
call    sub_373E8

loc_3659B:
mov     word ptr ds:0C074h, 9A78h

loc_365A1:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_365AE:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_365B9
jmp     loc_36529

loc_365B9:
cmp     byte ptr ds:0BE19h, 0
jz      short loc_365D5
push    ds
mov     ax, 71BFh
push    ax
call    sub_376F2
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
jmp     short loc_365DA

loc_365D5:
cmp     si, 1
jle     short loc_365E0

loc_365DA:
mov     al, 8Ch
push    ax
call    sub_373E8

loc_365E0:
les     bx, ds:0BD98h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     loc_36720

loc_365ED:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 1
jz      short loc_365FA
jmp     loc_366FB

loc_365FA:
mov     word ptr ds:0C074h, 9A78h
mov     al, es:[bx+12h]
cbw
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+6]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+var_8]
mov     al, es:[bx+12h]
cbw
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+4]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+12h], 3
jnz     short loc_36658
mov     ax, ds:0BDC9h
add     es:[bx+0Ah], ax

loc_36658:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3772C
les     bx, [bp+var_8]
push    word ptr es:[bx+0Ah]
call    sub_377E8
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
mov     al, 90h
push    ax
call    sub_373E8
cmp     byte ptr ds:22C0h, 0
jnz     short loc_36686
jmp     loc_36713

loc_36686:
les     bx, [bp+var_8]
les     bx, es:[bx+0Ch]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
push    word ptr [bp+var_C+2]
push    bx
call    sub_369C2
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E100h
push    ax
call    sub_377E8
les     bx, [bp+var_C]
push    word ptr es:[bx+0Eh]
call    sub_376C0
les     bx, [bp+var_C]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_366E8
les     bx, [bp+var_8]
test    byte ptr es:[bx+9], 40h
jz      short loc_366E8
les     bx, [bp+var_C]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 7
cmp     ax, 3
jnz     short loc_366DA
mov     al, 98h
jmp     short loc_366DC

loc_366DA:
mov     al, 18h

loc_366DC:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short loc_366F3

loc_366E8:
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h

loc_366F3:
mov     al, 88h
push    ax
call    sub_373E8
jmp     short loc_36713

loc_366FB:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 3
jnz     short loc_36713
cmp     byte ptr es:[bx+12h], 3
jnz     short loc_36713
mov     ax, ds:0BDC9h
add     es:[bx+0Ah], ax

loc_36713:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_36720:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_3672B
jmp     loc_365ED

loc_3672B:
cmp     byte ptr ds:22C0h, 0
jnz     short loc_36735
jmp     loc_368DD

loc_36735:
les     bx, ds:0BD98h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_36763

loc_36741:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 3
jnz     short loc_36756
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_369C2

loc_36756:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_36763:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_36741
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1
les     bx, ds:0BD98h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_367C4

loc_36787:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 3
jnz     short loc_367B7
test    si, 3Fh
jnz     short loc_367AD
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1

loc_367AD:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_36903
inc     si

loc_367B7:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_367C4:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_36787
les     bx, ds:0BD98h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_3683D

loc_367D8:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 8
jnz     short loc_36830
les     bx, es:[bx+0Ch]
cmp     word ptr es:[bx+0Eh], 0
jz      short loc_36830
test    si, 3Fh
jnz     short loc_36809
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1

loc_36809:
inc     si
les     bx, [bp+var_8]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp+var_8]
les     bx, es:[bx+0Ch]
push    word ptr es:[bx+0Eh]
call    sub_376C0
mov     bx, ds:0C074h
mov     byte ptr [bx], 6
inc     word ptr ds:0C074h

loc_36830:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_3683D:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_367D8
les     bx, ds:0BD9Ch
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     loc_368C7

loc_36852:
les     bx, [bp+var_4]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jz      short loc_368BB
les     bx, es:[bx+8]
cmp     word ptr es:[bx+0Eh], 0
jz      short loc_368BB
les     bx, [bp+var_4]
mov     ax, es:[bx+0Ch]
or      ax, es:[bx+0Eh]
jz      short loc_368BB
test    si, 3Fh
jnz     short loc_36893
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1

loc_36893:
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_376F2
les     bx, [bp+var_4]
les     bx, es:[bx+8]
push    word ptr es:[bx+0Eh]
call    sub_376C0
mov     bx, ds:0C074h
mov     byte ptr [bx], 7
inc     word ptr ds:0C074h
inc     si

loc_368BB:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_368C7:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jz      short loc_368D2
jmp     loc_36852

loc_368D2:
cmp     si, 1
jle     short loc_368DD
mov     al, 88h
push    ax
call    sub_373E8

loc_368DD:
mov     ax, 2
push    ax
call    sub_372EB
mov     ax, 3
push    ax
call    sub_372EB
mov     ax, 1
push    ax
call    sub_372EB
call    sub_35E05
push    ds
mov     ax, 715Ch
push    ax
call    sub_37923
pop     di
pop     si
mov     sp, bp
pop     bp
retf
sub_362BF endp



; Attributes: bp-based frame

sub_36903 proc near

var_1= byte ptr -1
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 2
mov     [bp+var_1], 0
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 11h
jnz     short loc_36940
les     bx, [bp+arg_0]
test    byte ptr es:[bx+9], 40h
jz      short loc_36940
les     bx, es:[bx+0Ch]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 7
cmp     ax, 3
jnz     short loc_3693B
mov     al, 98h
jmp     short loc_3693D

loc_3693B:
mov     al, 18h

loc_3693D:
or      [bp+var_1], al

loc_36940:
les     bx, [bp+arg_0]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ch]
push    word ptr es:[bx+0Eh]
call    sub_376C0
mov     al, [bp+var_1]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
mov     al, es:[bx+12h]
cbw
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+6]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
mov     al, es:[bx+12h]
cbw
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+4]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ah]
call    sub_377E8
mov     sp, bp
pop     bp
retn    4
sub_36903 endp



; Attributes: bp-based frame

sub_369C2 proc near

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 0Ch
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+0Eh], 0
jz      short loc_369D5
jmp     loc_36C36

loc_369D5:
mov     [bp+var_2], ds
mov     [bp+var_4], 71BEh
mov     ax, ds:0BE23h
mov     es:[bx+0Eh], ax
inc     word ptr ds:0BE23h
mov     al, es:[bx+4]
cbw
sub     ax, 7           ; switch 13 cases
cmp     ax, 0Ch
jbe     short loc_369F8
jmp     def_369FC       ; jumptable 000369FC default case, cases 8-10,12-15

loc_369F8:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_369FC[bx] ; switch jump
jpt_369FC dw offset loc_36A8F ; jump table for switch statement
dw offset def_369FC
dw offset def_369FC
dw offset def_369FC
dw offset loc_36A8F
dw offset def_369FC
dw offset def_369FC
dw offset def_369FC
dw offset def_369FC
dw offset loc_36A8F
dw offset loc_36A8F
dw offset loc_36A56
dw offset loc_36A1B

loc_36A1B:              ; jumptable 000369FC case 19
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
push    word ptr [bp+var_C+2]
push    bx
call    sub_36C3C

loc_36A3D:
les     bx, [bp+var_C]
mov     ax, es:[bx+0Ch]
or      ax, es:[bx+0Eh]
jz      short loc_36AA5
les     bx, es:[bx+0Ch]
mov     [bp+var_2], es
mov     [bp+var_4], bx
jmp     short loc_36AA5

loc_36A56:              ; jumptable 000369FC case 18
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
mov     es:[bx+0Ah], dx
mov     es:[bx+8], ax
cmp     byte ptr es:[bx+19h], 1
jnz     short loc_36A7D
mov     ax, 1Eh
jmp     short loc_36A80

loc_36A7D:
mov     ax, 1Fh

loc_36A80:
mov     [bp+var_8], ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
push    ax
call    sub_36D06
jmp     short loc_36A3D

loc_36A8F:              ; jumptable 000369FC cases 7,11,16,17
les     bx, [bp+arg_0]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_369C2
jmp     short loc_36AA5

def_369FC:              ; jumptable 000369FC default case, cases 8-10,12-15
dec     word ptr ds:0BE23h
jmp     loc_36C36

loc_36AA5:
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E300h
push    ax
call    sub_377E8
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Eh]
call    sub_376C0
push    [bp+var_2]
push    [bp+var_4]
call    sub_376F2
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2A8BF
push    ax
call    sub_377E8
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
cbw
sub     ax, 7           ; switch 13 cases
cmp     ax, 0Ch
jbe     short loc_36AE7
jmp     def_36AEB       ; jumptable 00036AEB default case, cases 8,9,12-15

loc_36AE7:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_36AEB[bx] ; switch jump
jpt_36AEB dw offset loc_36B52 ; jump table for switch statement
dw offset def_36AEB
dw offset def_36AEB
dw offset loc_36B80
dw offset loc_36B9B
dw offset def_36AEB
dw offset def_36AEB
dw offset def_36AEB
dw offset def_36AEB
dw offset loc_36B45
dw offset loc_36BD6
dw offset loc_36B35
dw offset loc_36B0A

loc_36B0A:              ; jumptable 00036AEB case 19
mov     bx, ds:0C074h
mov     byte ptr [bx], 22h ; '"'
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
mov     ax, 8000h
push    ax
call    sub_377E8
mov     ax, 7FFFh
push    ax
call    sub_377E8
inc     word ptr ds:0BE23h
jmp     def_36AEB       ; jumptable 00036AEB default case, cases 8,9,12-15

loc_36B35:              ; jumptable 00036AEB case 18
mov     al, byte ptr [bp+var_8]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     def_36AEB       ; jumptable 00036AEB default case, cases 8,9,12-15

loc_36B45:              ; jumptable 00036AEB case 16
mov     bx, ds:0C074h
mov     byte ptr [bx], 1Ah
inc     word ptr ds:0C074h
jmp     short loc_36B8B

loc_36B52:              ; jumptable 00036AEB case 7
mov     bx, ds:0C074h
mov     byte ptr [bx], 15h
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
les     bx, es:[bx]
push    word ptr es:[bx+0Eh]
call    sub_376C0
les     bx, [bp+arg_0]
mov     al, es:[bx+5]
and     al, 0Fh
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     def_36AEB       ; jumptable 00036AEB default case, cases 8,9,12-15

loc_36B80:              ; jumptable 00036AEB case 10
mov     bx, ds:0C074h
mov     byte ptr [bx], 17h
inc     word ptr ds:0C074h

loc_36B8B:
les     bx, [bp+arg_0]
les     bx, es:[bx]
push    word ptr es:[bx+0Eh]
call    sub_376C0
jmp     def_36AEB       ; jumptable 00036AEB default case, cases 8,9,12-15

loc_36B9B:              ; jumptable 00036AEB case 11
mov     bx, ds:0C074h
mov     byte ptr [bx], 16h
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
les     bx, es:[bx]
push    word ptr es:[bx+0Eh]
call    sub_376C0
les     bx, [bp+arg_0]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
cmp     ax, 6
jnz     short loc_36BC8
mov     al, 1
jmp     short loc_36BCA

loc_36BC8:
mov     al, 0

loc_36BCA:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short def_36AEB ; jumptable 00036AEB default case, cases 8,9,12-15

loc_36BD6:              ; jumptable 00036AEB case 17
les     bx, [bp+arg_0]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 3
mov     [bp+var_6], ax
test    byte ptr es:[bx+5], 28h
jz      short loc_36BF1
or      [bp+var_6], 4

loc_36BF1:
mov     bx, ds:0C074h
mov     byte ptr [bx], 23h ; '#'
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
les     bx, es:[bx]
push    word ptr es:[bx+0Eh]
call    sub_376C0
mov     al, byte ptr [bp+var_6]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+arg_0]
test    byte ptr es:[bx+5], 80h
jz      short loc_36C24
mov     al, 1
jmp     short loc_36C26

loc_36C24:
mov     al, 0

loc_36C26:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h

def_36AEB:              ; jumptable 00036AEB default case, cases 8,9,12-15
mov     al, 88h
push    ax
call    sub_373E8

loc_36C36:
mov     sp, bp
pop     bp
retn    4
sub_369C2 endp



; Attributes: bp-based frame

sub_36C3C proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_36C6C

loc_36C51:
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_369C2
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_36C6C:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_36C51
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E400h
push    ax
call    sub_377E8
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_36CF2

loc_36C90:
mov     ax, ds:0C074h
mov     dx, ds
mov     bx, 9B51h
mov     cx, ds
cmp     ax, bx
jbe     short loc_36CB1
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E400h
push    ax
call    sub_377E8

loc_36CB1:
les     bx, [bp+var_4]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jz      short loc_36CC2
mov     al, 0
jmp     short loc_36CC4

loc_36CC2:
mov     al, 80h

loc_36CC4:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+var_4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp+var_4]
push    word ptr es:[bx+0Ah]
call    sub_377E8
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_36CF2:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_36C90
mov     al, 88h
push    ax
call    sub_373E8
mov     sp, bp
pop     bp
retn    4
sub_36C3C endp



; Attributes: bp-based frame

sub_36D06 proc near

var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
xor     di, di
mov     si, di
les     bx, [bp+arg_2]
les     bx, es:[bx+4]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
jmp     short loc_36D3C

loc_36D21:
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_369C2
les     bx, [bp+var_6]
les     bx, es:[bx+4]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx

loc_36D3C:
mov     ax, word ptr [bp+var_6]
or      ax, word ptr [bp+var_6+2]
jnz     short loc_36D21
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E200h
push    ax
call    sub_377E8
les     bx, [bp+arg_2]
les     bx, es:[bx+4]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
jmp     loc_36EA5

loc_36D61:
cmp     [bp+arg_0], 1Eh
jnz     short loc_36DB1
les     bx, [bp+var_6]
mov     ax, es:[bx+0Ah]
cmp     ax, di
jz      short loc_36DB1
mov     ax, es:[bx+0Ah]
sub     ax, di
mov     [bp+var_2], ax
mov     al, byte ptr [bp+var_2]
shl     al, 1
shl     al, 1
shl     al, 1
mov     dx, si
sub     al, dl
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
mov     bx, word ptr [bp+var_6]
mov     di, es:[bx+0Ah]
xor     si, si

loc_36DB1:
mov     ax, ds:0C074h
mov     dx, ds
mov     bx, 9B4Dh
mov     cx, ds
cmp     ax, bx
jbe     short loc_36DD2
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E200h
push    ax
call    sub_377E8

loc_36DD2:
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 14h
jz      short loc_36E2E
les     bx, [bp+var_6]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jz      short loc_36DF1
mov     al, 0
jmp     short loc_36DF3

loc_36DF1:
mov     al, 80h

loc_36DF3:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+var_6]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
add     di, ax
xor     si, si
les     bx, [bp+var_6]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
push    word ptr es:[bx+0Eh]
call    sub_376C0
jmp     short loc_36E98

loc_36E2E:
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
mov     ax, es:[bx+0Ch]
mov     [bp+var_2], ax
les     bx, [bp+var_6]
mov     ax, es:[bx+4]
or      ax, es:[bx+6]
jz      short loc_36E4D
mov     al, 0
jmp     short loc_36E4F

loc_36E4D:
mov     al, 80h

loc_36E4F:
add     al, byte ptr [bp+var_2]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
add     si, [bp+var_2]
cmp     byte ptr ds:22B4h, 0
jz      short loc_36E75
cmp     si, 10h
jl      short loc_36E7A
inc     di
inc     di
xor     si, si
jmp     short loc_36E7A

loc_36E71:
inc     di
sub     si, 8

loc_36E75:
cmp     si, 8
jge     short loc_36E71

loc_36E7A:
les     bx, [bp+var_6]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp+var_6]
les     bx, es:[bx+0Ch]
les     bx, es:[bx]
push    word ptr es:[bx+0Eh]
call    sub_376C0

loc_36E98:
les     bx, [bp+var_6]
les     bx, es:[bx+4]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx

loc_36EA5:
mov     ax, word ptr [bp+var_6]
or      ax, word ptr [bp+var_6+2]
jz      short loc_36EB0
jmp     loc_36D61

loc_36EB0:
mov     al, 88h
push    ax
call    sub_373E8
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_36D06 endp



; Attributes: bp-based frame

sub_36EBE proc far

var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 2
mov     bx, ds:0BFDEh
shl     bx, 1
mov     ax, [bx-423Bh]
mov     [bp+var_2], ax
mov     al, 88h
push    ax
mov     ax, 6
push    ax
call    sub_378D1
mov     al, 0
push    ax
call    sub_378F8
mov     al, 0E5h
push    ax
call    sub_378F8
mov     al, 1
push    ax
call    sub_378F8
push    [bp+var_2]
call    sub_378F8
mov     ax, [bp+var_2]
mov     cl, 8
shr     ax, cl
push    ax
call    sub_378F8
call    sub_37910
mov     sp, bp
pop     bp
retf
sub_36EBE endp



; Attributes: bp-based frame

sub_36F05 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    ds
mov     ax, 9A78h
push    ax
push    ds
mov     ax, 0BC78h
push    ax
mov     ax, 101h
push    ax
call    sub_46A2C
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_36F61

loc_36F2E:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 5
jnz     short loc_36F46
test    byte ptr es:[bx+9], 80h
jnz     short loc_36F46
cmp     word ptr es:[bx+10h], 0
jz      short loc_36F54

loc_36F46:
les     bx, [bp+var_8]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_369C2

loc_36F54:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_36F61:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_36F2E
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
les     bx, [bp+arg_0]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     si, 1
jmp     loc_370E3

loc_36F89:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 5
jnz     short loc_36FA4
test    byte ptr es:[bx+9], 80h
jnz     short loc_36FA4
cmp     word ptr es:[bx+10h], 0
jnz     short loc_36FA4
jmp     def_3700A       ; jumptable 0003700A default case, case 7

loc_36FA4:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 2
jnz     short loc_36FB1
jmp     def_3700A       ; jumptable 0003700A default case, case 7

loc_36FB1:
cmp     byte ptr es:[bx+8], 9
jnz     short loc_36FBB
jmp     def_3700A       ; jumptable 0003700A default case, case 7

loc_36FBB:
test    si, 3Fh
jnz     short loc_36FD7
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1

loc_36FD7:
inc     si
les     bx, [bp+var_8]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp+var_8]
les     bx, es:[bx+0Ch]
push    word ptr es:[bx+0Eh]
call    sub_376C0
les     bx, [bp+var_8]
mov     al, es:[bx+8]
cbw
sub     ax, 4           ; switch 5 cases
cmp     ax, 4
jbe     short loc_37006
jmp     def_3700A       ; jumptable 0003700A default case, case 7

loc_37006:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3700A[bx] ; switch jump
jpt_3700A dw offset loc_37019 ; jump table for switch statement
dw offset loc_37067
dw offset loc_3708B
dw offset def_3700A
dw offset loc_370CB

loc_37019:              ; jumptable 0003700A case 4
mov     bx, ds:0C074h
mov     byte ptr [bx], 0
inc     word ptr ds:0C074h
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+12h], 2
jnz     short loc_37033
mov     al, ds:7144h
jmp     short loc_37036

loc_37033:
mov     al, ds:7158h

loc_37036:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+12h], 2
jnz     short loc_3704E
mov     al, 2
jmp     short loc_37051

loc_3704E:
mov     al, ds:7156h

loc_37051:
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h

loc_3705B:
les     bx, [bp+var_8]
push    word ptr es:[bx+0Ah]
call    sub_377E8
jmp     short def_3700A ; jumptable 0003700A default case, case 7

loc_37067:              ; jumptable 0003700A case 5
les     bx, [bp+var_8]
test    byte ptr es:[bx+9], 80h
jz      short loc_3707E
mov     bx, ds:0C074h
mov     byte ptr [bx], 4
inc     word ptr ds:0C074h
jmp     short loc_370A0

loc_3707E:
mov     bx, ds:0C074h
mov     byte ptr [bx], 2
inc     word ptr ds:0C074h
jmp     short loc_3705B

loc_3708B:              ; jumptable 0003700A case 6
les     bx, [bp+var_8]
test    byte ptr es:[bx+9], 80h
jz      short loc_370BE
mov     bx, ds:0C074h
mov     byte ptr [bx], 0Ch
inc     word ptr ds:0C074h

loc_370A0:
les     bx, [bp+var_8]
push    word ptr es:[bx+10h]
call    sub_3A41E
mov     bx, ax
mov     al, [bx+717Eh]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short def_3700A ; jumptable 0003700A default case, case 7

loc_370BE:
mov     bx, ds:0C074h
mov     byte ptr [bx], 0Ah
inc     word ptr ds:0C074h
jmp     short loc_3705B

loc_370CB:              ; jumptable 0003700A case 8
mov     bx, ds:0C074h
mov     byte ptr [bx], 6
inc     word ptr ds:0C074h

def_3700A:              ; jumptable 0003700A default case, case 7
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_370E3:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jz      short loc_370EE
jmp     loc_36F89

loc_370EE:
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_37164

loc_370FD:
les     bx, [bp+var_4]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jz      short loc_37158
mov     ax, es:[bx+0Ch]
or      ax, es:[bx+0Eh]
jz      short loc_37158
test    si, 3Fh
jnz     short loc_37130
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1

loc_37130:
les     bx, [bp+var_4]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_376F2
les     bx, [bp+var_4]
les     bx, es:[bx+8]
push    word ptr es:[bx+0Eh]
call    sub_376C0
mov     bx, ds:0C074h
mov     byte ptr [bx], 7
inc     word ptr ds:0C074h
inc     si

loc_37158:
les     bx, [bp+var_4]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_37164:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_370FD
cmp     si, 1
jle     short loc_37177
mov     al, 88h
push    ax
call    sub_373E8

loc_37177:
call    sub_372AA
push    ds
mov     ax, 0BC78h
push    ax
push    ds
mov     ax, 9A78h
push    ax
mov     ax, 101h
push    ax
call    sub_46A2C
pop     si
mov     sp, bp
pop     bp
retf    4
sub_36F05 endp


loc_37194:
push    bp
mov     bp, sp
sub     sp, 4
push    si
call    sub_2DE99
call    sub_2DCA8
les     bx, [bp+0Ah]
les     bx, es:[bx+4]
mov     word ptr [bp-2], es
mov     [bp-4], bx
jmp     short loc_371D6

loc_371B4:
les     bx, [bp-4]
cmp     byte ptr es:[bx+8], 6
jnz     short loc_371C9
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_369C2

loc_371C9:
les     bx, [bp-4]
les     bx, es:[bx+4]
mov     word ptr [bp-2], es
mov     [bp-4], bx

loc_371D6:
mov     ax, [bp-4]
or      ax, [bp-2]
jnz     short loc_371B4
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
les     bx, [bp+0Ah]
les     bx, es:[bx+4]
mov     word ptr [bp-2], es
mov     [bp-4], bx
mov     si, 1
jmp     loc_3728D

loc_371FE:
les     bx, [bp-4]
cmp     byte ptr es:[bx+8], 6
jz      short loc_3720B
jmp     loc_37280

loc_3720B:
test    si, 3Fh
jnz     short loc_37227
mov     al, 88h
push    ax
call    sub_373E8
mov     word ptr ds:0C074h, 9A78h
mov     ax, 0E600h
push    ax
call    sub_377E8
mov     si, 1

loc_37227:
inc     si
les     bx, [bp-4]
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_376F2
les     bx, [bp-4]
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 0Ch
jnz     short loc_3725D
les     bx, [bp+6]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_3725D
mov     bx, ds:0C074h
mov     byte ptr [bx], 0Dh
inc     word ptr ds:0C074h
jmp     short loc_3726B

loc_3725D:
les     bx, [bp-4]
les     bx, es:[bx+0Ch]
push    word ptr es:[bx+0Eh]
call    sub_376C0

loc_3726B:
mov     bx, ds:0C074h
mov     byte ptr [bx], 0Ah
inc     word ptr ds:0C074h
les     bx, [bp-4]
push    word ptr es:[bx+0Ah]
call    sub_377E8

loc_37280:
les     bx, [bp-4]
les     bx, es:[bx+4]
mov     word ptr [bp-2], es
mov     [bp-4], bx

loc_3728D:
mov     ax, [bp-4]
or      ax, [bp-2]
jz      short loc_37298
jmp     loc_371FE

loc_37298:
cmp     si, 1
jle     short loc_372A3
mov     al, 88h
push    ax
call    sub_373E8

loc_372A3:
pop     si
mov     sp, bp
pop     bp
retf    8


; Attributes: bp-based frame

sub_372AA proc near

var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 2
mov     bx, ds:0BFDEh
shl     bx, 1
mov     ax, [bx-423Bh]
mov     [bp+var_2], ax
mov     al, 88h
push    ax
mov     ax, 5
push    ax
call    sub_378D1
mov     al, 0
push    ax
call    sub_378F8
mov     al, 0E7h
push    ax
call    sub_378F8
push    [bp+var_2]
call    sub_378F8
mov     ax, [bp+var_2]
mov     cl, 8
shr     ax, cl
push    ax
call    sub_378F8
call    sub_37910
mov     sp, bp
pop     bp
retn
sub_372AA endp



; Attributes: bp-based frame

sub_372EB proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 10h
push    si
push    di
mov     [bp+var_4], 0
mov     ax, [bp+arg_0]
mov     ds:0BFDEh, ax
mov     bx, ax
shl     bx, 1
shl     bx, 1
les     bx, [bx-4231h]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
jmp     loc_373D5

loc_37311:
les     bx, [bp+var_10]
mov     si, es:[bx+2]
mov     ax, si
mov     [bp+var_2], ax
mov     word ptr ds:0C074h, 9A78h
les     bx, es:[bx+4]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_3734B

loc_3732F:
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_37430
les     bx, [bp+var_C]
les     bx, es:[bx+7]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_3734B:
mov     ax, word ptr [bp+var_C]
or      ax, word ptr [bp+var_C+2]
jnz     short loc_3732F
mov     al, 0A0h
push    ax
mov     ax, si
add     ax, 4
push    ax
call    sub_378D1
cmp     [bp+arg_0], 1
jnz     short loc_37369
mov     al, 1
jmp     short loc_3736B

loc_37369:
mov     al, 2

loc_3736B:
push    ax
call    sub_378F8
cmp     [bp+arg_0], 3
jnz     short loc_37381
les     bx, [bp+var_10]
mov     di, es:[bx]
add     di, ds:0BDC9h
jmp     short loc_37387

loc_37381:
les     bx, [bp+var_10]
mov     di, es:[bx]

loc_37387:
mov     ax, di
and     al, 0FFh
push    ax
call    sub_378F8
mov     ax, di
mov     cl, 8
shr     ax, cl
push    ax
call    sub_378F8
les     bx, [bp+var_10]
add     bx, 0Ch
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_373B5

loc_373A7:
dec     si
les     bx, [bp+var_8]
mov     al, es:[bx]
push    ax
call    sub_378F8
inc     word ptr [bp+var_8]

loc_373B5:
or      si, si
ja      short loc_373A7
call    sub_37910
mov     al, 9Ch
push    ax
call    sub_373E8
mov     ax, [bp+var_2]
add     [bp+var_4], ax
les     bx, [bp+var_10]
les     bx, es:[bx+8]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx

loc_373D5:
mov     ax, word ptr [bp+var_10]
or      ax, word ptr [bp+var_10+2]
jz      short loc_373E0
jmp     loc_37311

loc_373E0:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_372EB endp



; Attributes: bp-based frame

sub_373E8 proc near

var_4= dword ptr -4
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, ds:0C074h
sub     si, 9A78h
or      si, si
jle     short loc_37429
push    [bp+arg_0]
mov     ax, si
inc     ax
push    ax
call    sub_378D1
mov     word ptr [bp+var_4+2], ds
mov     word ptr [bp+var_4], 9A78h
jmp     short loc_3741C

loc_3740F:
les     bx, [bp+var_4]
mov     al, es:[bx]
push    ax
call    sub_378F8
inc     word ptr [bp+var_4]

loc_3741C:
mov     ax, ds:0C074h
mov     dx, ds
cmp     ax, word ptr [bp+var_4]
ja      short loc_3740F
call    sub_37910

loc_37429:
pop     si
mov     sp, bp
pop     bp
retn    2
sub_373E8 endp



; Attributes: bp-based frame

sub_37430 proc near

var_6= dword ptr -6
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 6
push    si
les     bx, [bp+arg_0]
les     bx, es:[bx+3]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
les     bx, [bp+arg_0]
mov     si, es:[bx+1]
mov     al, es:[bx]
cbw
mov     [bp+var_2], ax
cmp     ax, 3
jnz     short loc_37462
les     bx, [bp+var_6]
mov     ax, es:[bx]
mov     [bp+var_2], ax
jmp     short loc_3749F

loc_37462:
cmp     [bp+var_2], 5
jnz     short loc_37488
les     bx, [bp+var_6]
mov     ax, es:[bx]
les     bx, [bp+arg_4]
mov     dx, es:[bx]
add     dx, si
inc     dx
sub     ax, dx
mov     [bp+var_2], ax
mov     al, byte ptr [bp+var_2]
add     bx, si
mov     es:[bx+0Ch], al
jmp     loc_376B9

loc_37488:
cmp     [bp+var_2], 6
jnz     short loc_374B8
les     bx, [bp+var_6]
cmp     byte ptr es:[bx+8], 2
jz      short loc_374DB
mov     ax, es:[bx+0Ah]
mov     [bp+var_2], ax

loc_3749F:
les     bx, [bp+arg_4]
mov     ax, es:[bx]
add     ax, si
inc     ax
inc     ax
sub     [bp+var_2], ax
mov     ax, [bp+var_2]
add     bx, si
mov     es:[bx+0Ch], ax
jmp     loc_376B9

loc_374B8:
cmp     [bp+var_2], 2
jz      short loc_374C4
cmp     [bp+var_2], 7
jnz     short loc_374DB

loc_374C4:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx+8], 2
jz      short loc_374DB
mov     ax, es:[bx+0Ah]
les     bx, [bp+arg_4]
add     bx, si
add     es:[bx+0Ch], ax

loc_374DB:
mov     ax, si
mov     cl, 8
shr     ax, cl
mov     bx, [bp+var_2]
or      al, [bx+7198h]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     ax, si
and     al, 0FFh
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
cmp     [bp+var_2], 1
jnz     short loc_3754F
les     bx, [bp+var_6]
mov     ax, es:[bx]
les     bx, [bp+arg_4]
add     bx, si
add     es:[bx+0Ch], ax
cmp     word ptr ds:713Ah, 0
jz      short loc_37536
mov     bx, ds:0C074h
mov     byte ptr [bx], 14h
inc     word ptr ds:0C074h
mov     al, ds:713Ah
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short loc_37541

loc_37536:
mov     bx, ds:0C074h
mov     byte ptr [bx], 54h ; 'T'
inc     word ptr ds:0C074h

loc_37541:
mov     bx, ds:0C074h
mov     byte ptr [bx], 1
inc     word ptr ds:0C074h
jmp     loc_376B9

loc_3754F:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0Ah
jnz     short loc_37590
cmp     word ptr ds:7144h, 0
jnz     short loc_3756C
mov     bx, ds:0C074h
mov     byte ptr [bx], 54h ; 'T'
inc     word ptr ds:0C074h
jmp     short loc_37582

loc_3756C:
mov     bx, ds:0C074h
mov     byte ptr [bx], 14h
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 1
inc     word ptr ds:0C074h

loc_37582:
mov     bx, ds:0C074h
mov     byte ptr [bx], 2
inc     word ptr ds:0C074h
jmp     loc_376B9

loc_37590:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0Bh
jnz     short loc_375A7
mov     bx, ds:0C074h
mov     byte ptr [bx], 46h ; 'F'
inc     word ptr ds:0C074h
jmp     loc_37626

loc_375A7:
les     bx, [bp+var_6]
mov     al, es:[bx+8]
cbw
cmp     ax, 1
jnz     short loc_375B7
jmp     loc_37633

loc_375B7:
cmp     ax, 2
jz      short loc_375C4
cmp     ax, 3
jz      short loc_37633
jmp     loc_376B9

loc_375C4:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx+12h], 5
jz      short loc_375E9
mov     al, es:[bx+12h]
cbw
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     word ptr es:[bx+6], 0
jnz     short loc_375F6

loc_375E9:
mov     bx, ds:0C074h
mov     byte ptr [bx], 56h ; 'V'
inc     word ptr ds:0C074h
jmp     short loc_37626

loc_375F6:
mov     bx, ds:0C074h
mov     byte ptr [bx], 16h
inc     word ptr ds:0C074h
les     bx, [bp+var_6]
mov     al, es:[bx+12h]
cbw
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+6]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h

loc_37626:
les     bx, [bp+var_6]
push    word ptr es:[bx+0Ah]
call    sub_376C0
jmp     loc_376B9

loc_37633:
les     bx, [bp+var_6]
mov     al, es:[bx+12h]
cbw
mov     [bp+var_2], ax
cmp     ax, 3
jnz     short loc_37648
mov     [bp+var_2], 2

loc_37648:
mov     ax, [bp+var_2]
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
cmp     word ptr es:[bx+6], 0
jz      short loc_3768E
mov     bx, ds:0C074h
mov     byte ptr [bx], 14h
inc     word ptr ds:0C074h
mov     ax, [bp+var_2]
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+6]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short loc_37699

loc_3768E:
mov     bx, ds:0C074h
mov     byte ptr [bx], 54h ; 'T'
inc     word ptr ds:0C074h

loc_37699:
mov     ax, [bp+var_2]
mov     dx, 0Ah
mul     dx
mov     bx, ax
add     bx, 712Ah
mov     ax, ds
mov     es, ax
mov     al, es:[bx+4]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h

loc_376B9:
pop     si
mov     sp, bp
pop     bp
retn    8
sub_37430 endp



; Attributes: bp-based frame

sub_376C0 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     [bp+arg_0], 7Fh
jbe     short loc_376E1
mov     ax, [bp+arg_0]
mov     cl, 8
shr     ax, cl
or      al, 80h
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
and     [bp+arg_0], 0FFh

loc_376E1:
mov     al, byte ptr [bp+arg_0]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
pop     bp
retn    2
sub_376C0 endp



; Attributes: bp-based frame

sub_376F2 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_46E60
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short loc_3771F

loc_3770C:
les     bx, [bp+arg_0]
mov     al, es:[bx]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr [bp+arg_0]
inc     word ptr ds:0C074h

loc_3771F:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_3770C
pop     bp
retn    4
sub_376F2 endp



; Attributes: bp-based frame

sub_3772C proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+arg_0]
test    byte ptr es:[bx+9], 80h
jz      short loc_37784
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_46E60
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short loc_37779

loc_3775F:
les     bx, [bp+var_4]
inc     word ptr [bp+var_4]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F25
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h

loc_37779:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_3775F
jmp     short loc_377E2

loc_37784:
cmp     byte ptr ds:22CCh, 0
jz      short loc_377AF
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_46E60
inc     al
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     bx, ds:0C074h
mov     byte ptr [bx], 5Fh ; '_'
inc     word ptr ds:0C074h
jmp     short loc_377D9

loc_377AF:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_46E60
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
jmp     short loc_377D9

loc_377C6:
les     bx, [bp+var_4]
mov     al, es:[bx]
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr [bp+var_4]
inc     word ptr ds:0C074h

loc_377D9:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_377C6

loc_377E2:
mov     sp, bp
pop     bp
retn    4
sub_3772C endp



; Attributes: bp-based frame

sub_377E8 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     al, byte ptr [bp+arg_0]
and     al, 0FFh
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
mov     ax, [bp+arg_0]
mov     cl, 8
shr     ax, cl
mov     bx, ds:0C074h
mov     [bx], al
inc     word ptr ds:0C074h
pop     bp
retn    2
sub_377E8 endp



; Attributes: bp-based frame

sub_3780F proc far

var_4= dword ptr -4
arg_0= byte ptr  6

push    bp
mov     bp, sp
sub     sp, 4
cmp     word ptr ds:0BFDEh, 4
jz      short loc_37873
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
mov     ax, [bx-4231h]
or      ax, [bx-422Fh]
jnz     short loc_37839
call    sub_35F29
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_3784B

loc_37839:
mov     bx, ds:0BFDEh
shl     bx, 1
shl     bx, 1
les     bx, [bx-421Dh]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_3784B:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+2], 400h
jb      short loc_3785F
call    sub_35F29
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_3785F:
mov     al, [bp+arg_0]
les     bx, [bp+var_4]
mov     dx, es:[bx+2]
inc     word ptr es:[bx+2]
add     bx, dx
mov     es:[bx+0Ch], al

loc_37873:
mov     bx, ds:0BFDEh
shl     bx, 1
cmp     word ptr [bx-423Bh], 0FFFFh
jnz     short loc_37897
cmp     word ptr ds:0BFDEh, 1
jnz     short loc_3788C
mov     ax, 4Dh ; 'M'
jmp     short loc_3788F

loc_3788C:
mov     ax, 1Fh

loc_3788F:
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_37897:
mov     bx, ds:0BFDEh
shl     bx, 1
inc     word ptr [bx-423Bh]
mov     sp, bp
pop     bp
retf    2
sub_3780F endp



; Attributes: bp-based frame

sub_378A7 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, 3
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_35FCE
pop     bp
retf    4
sub_378A7 endp



; Attributes: bp-based frame

sub_378BC proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, 5
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_35FCE
pop     bp
retf    4
sub_378BC endp



; Attributes: bp-based frame

sub_378D1 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     word ptr ds:0C076h, 0
push    [bp+arg_2]
call    sub_378F8
mov     al, byte ptr [bp+arg_0]
and     al, 0FFh
push    ax
call    sub_378F8
mov     ax, [bp+arg_0]
mov     cl, 8
shr     ax, cl
push    ax
call    sub_378F8
pop     bp
retn    4
sub_378D1 endp



; Attributes: bp-based frame

sub_378F8 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     al, byte ptr [bp+arg_0]
mov     ah, 0
add     ds:0C076h, ax
push    [bp+arg_0]
call    sub_25959
pop     bp
retn    2
sub_378F8 endp




sub_37910 proc near
push    si
mov     si, ds:0C076h
neg     si
and     si, 0FFh
mov     ax, si
push    ax
call    sub_378F8
pop     si
retn
sub_37910 endp



; Attributes: bp-based frame

sub_37923 proc near

var_6= dword ptr -6
var_2= word ptr -2
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 6
push    si
mov     [bp+var_2], 0
les     bx, [bp+arg_0]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
mov     al, es:[bx+1]
mov     ah, 0
mov     si, ax
inc     si
inc     si
jmp     short loc_37953

loc_37944:
les     bx, [bp+var_6]
mov     al, es:[bx]
mov     ah, 0
add     [bp+var_2], ax
dec     si
inc     word ptr [bp+var_6]

loc_37953:
or      si, si
jg      short loc_37944
mov     al, byte ptr [bp+var_2]
neg     al
les     bx, [bp+var_6]
mov     es:[bx], al
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
mov     ah, 0
mov     si, ax
add     si, 3
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
jmp     short loc_37987

loc_37978:
les     bx, [bp+var_6]
mov     al, es:[bx]
push    ax
call    sub_25959
inc     word ptr [bp+var_6]

loc_37987:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, si
mov     dx, word ptr [bp+var_6]
cmp     ax, dx
ja      short loc_37978
pop     si
mov     sp, bp
pop     bp
retn    4
sub_37923 endp

seg034 ends


; Segment type: Pure code
seg035 segment byte public 'CODE' use16
assume cs:seg035
;org 0Dh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

loc_3799D:
push    bp
mov     bp, sp
push    si
push    di
les     bx, [bp+6]
mov     al, es:[bx+8]
mov     ah, 0
dec     ax              ; switch 9 cases
cmp     ax, 8
jbe     short loc_379B4
jmp     def_379B8       ; jumptable 000379B8 default case

loc_379B4:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_379B8[bx] ; switch jump
jpt_379B8 dw offset loc_37AAE ; jump table for switch statement
dw offset loc_37AD4
dw offset loc_37A87
dw offset loc_37AE7
dw offset loc_37A87
dw offset loc_37AF6
dw offset loc_37AAE
dw offset loc_37A58
dw offset loc_379CF

loc_379CF:              ; jumptable 000379B8 case 9
les     bx, [bp+6]
mov     al, es:[bx+9]
mov     ah, 0
cmp     ax, 0Dh
jz      short loc_379F2
jg      short loc_379EB
cmp     ax, 1
jz      short loc_37A0D
cmp     ax, 0Ch
jz      short loc_37A2B
jmp     short loc_37A3E

loc_379EB:
cmp     ax, 0Eh
jz      short loc_379FA
jmp     short loc_37A3E

loc_379F2:
call    sub_36EBE
jmp     def_379B8       ; jumptable 000379B8 default case

loc_379FA:
les     bx, [bp+6]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_36F05
jmp     def_379B8       ; jumptable 000379B8 default case

loc_37A0D:
les     bx, [bp+6]
mov     al, es:[bx+9]
mov     ah, 0
push    ax
les     bx, es:[bx+10h]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_35FCE
jmp     def_379B8       ; jumptable 000379B8 default case

loc_37A2B:
les     bx, [bp+6]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_35B8B
jmp     def_379B8       ; jumptable 000379B8 default case

loc_37A3E:
les     bx, [bp+6]
mov     al, es:[bx+9]
mov     ah, 0
push    ax
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
call    sub_35FCE
jmp     def_379B8       ; jumptable 000379B8 default case

loc_37A58:              ; jumptable 000379B8 case 8
les     bx, [bp+6]
mov     si, es:[bx+10h]
mov     di, es:[bx+0Eh]
jmp     short loc_37A80

loc_37A65:
mov     bx, si
inc     si
push    word ptr [bx]
call    sub_3780F
mov     ax, si
mov     dx, ds
mov     bx, 0AA78h
mov     cx, ds
cmp     ax, bx
jb      short loc_37A7F
mov     si, 9A78h

loc_37A7F:
dec     di

loc_37A80:
or      di, di
jg      short loc_37A65
jmp     def_379B8       ; jumptable 000379B8 default case

loc_37A87:              ; jumptable 000379B8 cases 3,5
les     bx, [bp+6]
mov     al, es:[bx+9]
and     al, 0FEh
mov     dl, es:[bx+9]
and     dl, 1
neg     dl
sbb     dl, dl
inc     dl
cbw
add     al, dl
push    ax
call    sub_3780F
mov     al, 3
push    ax
call    sub_3780F

loc_37AAE:              ; jumptable 000379B8 cases 1,7
mov     al, 0E9h
push    ax
call    sub_3780F
les     bx, [bp+6]
les     bx, es:[bx+10h]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_378A7
mov     al, 0
push    ax
call    sub_3780F
jmp     short loc_37B12

loc_37AD4:              ; jumptable 000379B8 case 2
mov     ax, ds:0BDC7h
les     bx, [bp+6]
les     bx, es:[bx+10h]
les     bx, es:[bx+0Ah]
mov     es:[bx], ax
jmp     short def_379B8 ; jumptable 000379B8 default case

loc_37AE7:              ; jumptable 000379B8 case 4
les     bx, [bp+6]
mov     al, es:[bx+9]
push    ax
call    sub_3780F
jmp     short loc_37AFE

loc_37AF6:              ; jumptable 000379B8 case 6
mov     al, 0EBh
push    ax
call    sub_3780F

loc_37AFE:
les     bx, [bp+6]
les     bx, es:[bx+10h]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_378BC

loc_37B12:
mov     al, 0
push    ax
call    sub_3780F

def_379B8:              ; jumptable 000379B8 default case
pop     di
pop     si
pop     bp
retf    4


; Attributes: bp-based frame

sub_37B20 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
cmp     word ptr ds:0BFDEh, 1
jz      short loc_37B34
push    [bp+arg_0]
call    sub_3780F
jmp     short loc_37B40

loc_37B34:
push    [bp+arg_0]
call    sub_2E245
inc     word ptr ds:6934h

loc_37B40:
pop     bp
retn    2
sub_37B20 endp


loc_37B44:
push    bp
mov     bp, sp
push    word ptr [bp+6]
call    sub_37B20
pop     bp
retf    2


; Attributes: bp-based frame

sub_37B51 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     al, byte ptr [bp+arg_0]
and     al, 0FFh
push    ax
call    sub_37B20
mov     ax, [bp+arg_0]
mov     cl, 8
sar     ax, cl
push    ax
call    sub_37B20
pop     bp
retn    2
sub_37B51 endp



; Attributes: bp-based frame

sub_37B6C proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     al, 1
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_37BE4
xor     ax, ax
push    ax
call    sub_37B51
pop     bp
retn    4
sub_37B6C endp

push    bp
mov     bp, sp
mov     al, 1
push    ax
push    word ptr [bp+6]
push    word ptr [bp+4]
call    sub_37BE4
pop     bp
retn    4


; Attributes: bp-based frame

sub_37B98 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     al, 2
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_37BE4
pop     bp
retn    4
sub_37B98 endp



; Attributes: bp-based frame

sub_37BAB proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     al, 7
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_37BE4
pop     bp
retn    4
sub_37BAB endp



; Attributes: bp-based frame

sub_37BBE proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     al, 6
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_37BE4
pop     bp
retn    4
sub_37BBE endp



; Attributes: bp-based frame

sub_37BD1 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     al, 4
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_37BE4
pop     bp
retn    4
sub_37BD1 endp



; Attributes: bp-based frame

sub_37BE4 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= byte ptr  8

push    bp
mov     bp, sp
cmp     word ptr ds:0BFDEh, 1
jz      short loc_37C00
mov     al, [bp+arg_4]
cbw
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_35FCE
jmp     short loc_37C10

loc_37C00:
mov     al, [bp+arg_4]
cbw
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2E2D1

loc_37C10:
pop     bp
retn    6
sub_37BE4 endp



; Attributes: bp-based frame

sub_37C14 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     bx, 0BFECh
push    ds
push    bx
mov     bx, 71CCh
push    ds
push    bx
mov     cx, 6Ch ; 'l'
call    sub_46BE5
push    word ptr ds:0BE2Fh
push    word ptr ds:0BE2Dh
push    ds
mov     ax, 7303h
push    ax
call    sub_46C3E
push    word ptr ds:0BE2Fh
push    word ptr ds:0BE2Dh
call    sub_2593B
or      ax, ax
jge     short loc_37C5F
push    word ptr ds:0BE2Fh
push    word ptr ds:0BE2Dh
mov     ax, 5
push    ax
call    sub_3129B
mov     sp, bp

loc_37C5F:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_36095
pop     bp
retf    4
sub_37C14 endp




sub_37C6E proc far
mov     word ptr ds:0BFDEh, 2
retf
sub_37C6E endp


loc_37C75:
mov     word ptr ds:0BFDEh, 3
retf

loc_37C7C:
cmp     word ptr ds:0C064h, 0
jnz     short loc_37C89
push    cs
call    near ptr sub_37C6E
jmp     short locret_37C8F

loc_37C89:
mov     word ptr ds:0BFDEh, 4

locret_37C8F:
retf

loc_37C90:
mov     word ptr ds:0BFDEh, 1
retf

loc_37C97:
push    bp
mov     bp, sp
pop     bp
retf    4
call    sub_362BF
retf


; Attributes: bp-based frame

sub_37CA4 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     al, byte ptr [bp+arg_0]
and     al, 0FFh
push    ax
call    sub_37B20
mov     ax, [bp+arg_0]
mov     cl, 8
shr     ax, cl
push    ax
call    sub_37B20
pop     bp
retf    2
sub_37CA4 endp


loc_37CBF:
push    bp
mov     bp, sp
push    si
mov     si, [bp+6]
cmp     word ptr ds:0BFDEh, 4
jnz     short loc_37CF6
mov     ax, ds:0BDCDh
xor     dx, dx
mov     bx, si
xor     cx, cx
add     ax, bx
adc     dx, cx
or      dx, dx
jl      short loc_37CF0
jnz     short loc_37CE5
cmp     ax, 0FFFFh
jb      short loc_37CF0

loc_37CE5:
mov     ax, 1Fh
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_37CF0:
add     ds:0BDCDh, si
jmp     short loc_37D1B

loc_37CF6:
cmp     word ptr ds:0BFDEh, 3
jnz     short loc_37D17
jmp     short loc_37D08

loc_37CFF:
xor     ax, ax
push    ax
call    sub_3B175
dec     si

loc_37D08:
or      si, si
ja      short loc_37CFF
jmp     short loc_37D1B

loc_37D0E:
mov     al, 0
push    ax
call    sub_3780F
dec     si

loc_37D17:
or      si, si
ja      short loc_37D0E

loc_37D1B:
pop     si
pop     bp
retf    2

loc_37D20:
push    bp
mov     bp, sp
cmp     byte ptr ds:22B4h, 0
jz      short loc_37D46
cmp     word ptr [bp+6], 1
jle     short loc_37D46
mov     bx, ds:0BFDEh
shl     bx, 1
test    word ptr [bx-423Bh], 1
jz      short loc_37D46
mov     al, 0
push    ax
call    sub_3780F

loc_37D46:
pop     bp
retf    2

loc_37D4A:
push    bp
mov     bp, sp
mov     bx, ds:0BFDEh
shl     bx, 1
mov     ax, [bx-423Bh]
les     bx, [bp+6]
mov     es:[bx+0Ah], ax
mov     al, ds:0BFDEh
mov     es:[bx+12h], al
pop     bp
retf    4

loc_37D69:
push    bp
mov     bp, sp
call    sub_2DE99
call    sub_2DCA8
mov     word ptr ds:0BFDEh, 1
mov     ax, ds:0BDC7h
les     bx, [bp+6]
mov     es:[bx+0Ah], ax
mov     byte ptr es:[bx+12h], 1
cmp     byte ptr ds:22C0h, 0
jz      short loc_37D9C
push    ds
mov     ax, 0BEE6h
push    ax
call    sub_2E30E

loc_37D9C:
call    sub_2DEE8
pop     bp
retf    4

loc_37DA5:
push    bp
mov     bp, sp
sub     sp, 4
mov     ax, [bp+0Ah]
dec     ax
dec     ax              ; switch 13 cases
cmp     ax, 0Ch
ja      short def_37DB9 ; jumptable 00037DB9 default case, cases 2,4,7,9
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_37DB9[bx] ; switch jump
jpt_37DB9 dw offset loc_37DD8 ; jump table for switch statement
dw offset def_37DB9
dw offset loc_37DD8
dw offset def_37DB9
dw offset loc_37DD8
dw offset loc_37DD8
dw offset def_37DB9
dw offset loc_37DD8
dw offset def_37DB9
dw offset loc_37DD8
dw offset loc_37DD8
dw offset loc_37DD8
dw offset loc_37DD8

loc_37DD8:              ; jumptable 00037DB9 cases 1,3,5,6,8,10-13
mov     word ptr [bp-2], ds
mov     word ptr [bp-4], 72F7h
jmp     short loc_37DEA

def_37DB9:              ; jumptable 00037DB9 default case, cases 2,4,7,9
mov     word ptr [bp-2], ds
mov     word ptr [bp-4], 72EBh

loc_37DEA:
call    sub_2DE99
push    word ptr [bp+8]
push    word ptr [bp+6]
les     bx, [bp-4]
add     bx, [bp+0Ch]
add     bx, 0FFDEh
mov     al, es:[bx]
cbw
push    ax
call    sub_2DE60
call    sub_2DEE8
mov     sp, bp
pop     bp
retf    8

loc_37E13:
push    bp
mov     bp, sp
mov     al, 2Eh ; '.'
push    ax
call    sub_37B20
mov     al, 0FFh
push    ax
call    sub_37B20
mov     al, 0A7h
push    ax
call    sub_37B20
push    word ptr [bp+8]
push    word ptr [bp+6]
call    sub_37B6C
push    word ptr [bp+8]
push    word ptr [bp+6]
call    sub_2DDC9
pop     bp
retf    4

loc_37E40:
push    bp
mov     bp, sp
push    word ptr [bp+8]
push    word ptr [bp+6]
call    sub_37B6C
pop     bp
retf    4

loc_37E50:
push    bp
mov     bp, sp
mov     al, 0BBh
push    ax
call    sub_37B20
push    word ptr [bp+8]
push    word ptr [bp+6]
call    sub_37B6C
pop     bp
retf    4

loc_37E66:
push    bp
mov     bp, sp
mov     al, 0E2h
push    ax
call    sub_37B20
mov     al, 0F7h
push    ax
call    sub_37B20
pop     bp
retf    4

loc_37E79:
mov     al, 2Eh ; '.'
push    ax
call    sub_37B20
mov     al, 3Bh ; ';'
push    ax
call    sub_37B20
mov     al, 7
push    ax
call    sub_37B20
retf

loc_37E8C:
push    bp
mov     bp, sp
cmp     byte ptr ds:22B1h, 0
jnz     short loc_37EC0
mov     al, 2Eh ; '.'
push    ax
call    sub_37B20
mov     al, 8Eh
push    ax
call    sub_37B20
mov     al, 1Eh
push    ax
call    sub_37B20
push    ds
mov     ax, 7308h
push    ax
call    sub_3B1BA
push    dx
push    ax
call    sub_37B98
xor     ax, ax
push    ax
push    cs
call    near ptr sub_37CA4
jmp     short loc_37EF1

loc_37EC0:
cmp     word ptr [bp+6], 18h
jnz     short loc_37ECA
mov     al, 0BDh
jmp     short loc_37ECC

loc_37ECA:
mov     al, 0B8h

loc_37ECC:
push    ax
call    sub_37B20
mov     al, 0Ah
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_37BE4
xor     ax, ax
push    ax
push    cs
call    near ptr sub_37CA4
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Bh
push    ax
push    word ptr [bp+6]
call    sub_3CF5C

loc_37EF1:
pop     bp
retf    2

loc_37EF5:
push    bp
mov     bp, sp
mov     bx, [bp+0Ah]
mov     al, [bx+72D1h]
add     al, 0B8h
push    ax
call    sub_37B20
push    word ptr [bp+8]
push    word ptr [bp+6]
call    sub_37B6C
pop     bp
retf    6

loc_37F12:
push    bp
mov     bp, sp
mov     al, 2Eh ; '.'
push    ax
call    sub_37B20
mov     al, 0FFh
push    ax
call    sub_37B20
cmp     word ptr [bp+6], 80h
jnb     short loc_37F36
mov     al, 67h ; 'g'
push    ax
call    sub_37B20
push    word ptr [bp+6]
call    sub_37B20
jmp     short loc_37F42

loc_37F36:
mov     al, 0A7h
push    ax
call    sub_37B20
push    word ptr [bp+6]
call    sub_37B51

loc_37F42:
pop     bp
retf    2


; Attributes: bp-based frame

sub_37F46 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     al, 0Bh
push    ax
push    ds
push    [bp+arg_0]
call    sub_3B1BA
push    dx
push    ax
call    sub_37BE4
pop     bp
retn    2
sub_37F46 endp


loc_37F5E:
push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     di, [bp+8]
mov     word ptr ds:0C085h, 0
mov     ax, 0C094h
push    ax
call    sub_38724
mov     ax, 0C09Eh
push    ax
call    sub_38724
mov     bx, di
shl     bx, 1
shl     bx, 1
add     bx, 7238h
mov     ax, ds
mov     es, ax
mov     al, es:[bx+2]
mov     [bp-1], al
cmp     di, 4Eh ; 'N'
jnz     short loc_37FA9
mov     ax, 7310h
push    ax
call    sub_37F46
mov     ax, 9B90h
push    ax
push    cs
call    near ptr sub_37CA4
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_37FA9:
cmp     di, 1Dh
jle     short loc_37FC2
cmp     word ptr ds:0C085h, 0
jz      short loc_37FC2
push    word ptr ds:0C085h
call    sub_38742
add     al, 26h ; '&'
push    ax
call    sub_37B20

loc_37FC2:
cmp     di, 3Eh ; '>'
jl      short loc_37FCE
push    word ptr [di+7281h]
call    sub_37B20

loc_37FCE:
mov     ax, di
cmp     ax, 44h         ; switch 69 cases
jbe     short loc_37FD8
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_37FD8:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_37FDC[bx] ; switch jump
jpt_37FDC dw offset loc_380CD, offset loc_380CD, offset loc_380C3 ; jump table for switch statement
dw offset loc_380C3, offset loc_380C3, offset loc_380C3
dw offset loc_380CD, offset loc_380CD, offset loc_380CD
dw offset loc_380CD, offset loc_380CD, offset loc_380C3
dw offset loc_380C3, offset loc_380CD, offset loc_380CD
dw offset loc_380CD, offset loc_380CD, offset loc_380CD
dw offset loc_380CD, offset loc_380CD, offset loc_380CD
dw offset loc_380CD, offset loc_380CD, offset loc_380CD
dw offset loc_380CD, offset loc_380CD, offset loc_380CD
dw offset loc_380CD, offset loc_380C3, offset loc_380CD
dw offset loc_3806B, offset loc_38083, offset loc_380A3
dw offset loc_38704, offset loc_386E6, offset loc_38698
dw offset loc_383B4, offset loc_38646, offset loc_3859E
dw offset loc_3859E, offset loc_3859E, offset loc_3859E
dw offset loc_3859E, offset loc_38298, offset loc_382DA
dw offset loc_381DF, offset loc_3823C, offset loc_38519
dw offset loc_38519, offset loc_38519, offset loc_38519
dw offset loc_38519, offset loc_38519, offset loc_38361
dw offset loc_38361, offset loc_38361, offset loc_38519
dw offset loc_38361, offset loc_38519, offset loc_38361
dw offset loc_38519, offset loc_3862E, offset loc_381CE
dw offset def_37FDC, offset loc_38581, offset loc_38581
dw offset def_37FDC, offset def_37FDC, offset loc_38667

loc_3806B:              ; jumptable 00037FDC case 30
cmp     word ptr ds:0C098h, 3
jnz     short loc_3807B
mov     al, 0CCh
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3807B:
mov     al, 0CDh
push    ax
call    sub_37B20
jmp     short loc_380B0

loc_38083:              ; jumptable 00037FDC case 31
cmp     byte ptr ds:0C09Eh, 4
jnz     short loc_3809A
mov     al, 0E4h
push    ax
call    sub_37B20
push    word ptr ds:0C0A2h
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3809A:
mov     al, 0ECh
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_380A3:              ; jumptable 00037FDC case 32
cmp     byte ptr ds:0C094h, 1
jz      short loc_380BA
mov     al, 0E6h
push    ax
call    sub_37B20

loc_380B0:
push    word ptr ds:0C098h
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_380BA:
mov     al, 0EEh
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_380C3:              ; jumptable 00037FDC cases 2-5,11,12,28
cmp     word ptr [bp+6], 0Ch
jnz     short loc_380CD ; jumptable 00037FDC cases 0,1,6-10,13-27,29
mov     byte ptr [bp-1], 0D8h

loc_380CD:              ; jumptable 00037FDC cases 0,1,6-10,13-27,29
mov     ax, ds:0C085h
sub     ax, 0Ah         ; switch 4 cases
cmp     ax, 3
ja      short def_380DC ; jumptable 000380DC default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_380DC[bx] ; switch jump
jpt_380DC dw offset loc_38105 ; jump table for switch statement
dw offset loc_380E9
dw offset loc_38136
dw offset loc_3811A

loc_380E9:              ; jumptable 000380DC case 11
mov     ax, 7317h
push    ax
call    sub_37F46
mov     al, 9Bh
push    ax
call    sub_37B20
mov     ax, 731Eh
push    ax
call    sub_37F46
mov     al, 3Eh ; '>'
push    ax
call    sub_37B20
jmp     short loc_3815F

loc_38105:              ; jumptable 000380DC case 10
mov     ax, 7325h
push    ax
call    sub_37F46
mov     al, 9Bh
push    ax
call    sub_37B20
mov     al, 26h ; '&'
push    ax
call    sub_37B20
jmp     short loc_3815F

loc_3811A:              ; jumptable 000380DC case 13
mov     ax, 732Ch
push    ax
call    sub_37F46
mov     al, 9Bh
push    ax
call    sub_37B20
mov     ax, 7333h
push    ax
call    sub_37F46
mov     al, 36h ; '6'
push    ax
call    sub_37B20
jmp     short loc_3815F

loc_38136:              ; jumptable 000380DC case 12
mov     ax, 733Ah
push    ax
call    sub_37F46
mov     al, 9Bh
push    ax
call    sub_37B20
mov     ax, 7341h
push    ax
call    sub_37F46
mov     al, 2Eh ; '.'
push    ax
call    sub_37B20
jmp     short loc_3815F

def_380DC:              ; jumptable 000380DC default case
mov     ax, 7348h
push    ax
call    sub_37F46
mov     al, 9Bh
push    ax
call    sub_37B20

loc_3815F:
cmp     byte ptr ds:0C094h, 0
jnz     short loc_3817E
mov     bx, di
shl     bx, 1
shl     bx, 1
add     bx, 7238h
mov     ax, ds
mov     es, ax
push    word ptr es:[bx]
push    cs
call    near ptr sub_37CA4
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3817E:
cmp     byte ptr ds:0C094h, 1
jnz     short loc_381AA
mov     bx, di
shl     bx, 1
shl     bx, 1
add     bx, 7238h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx]
mov     dl, ds:0C097h
mov     dh, 0
mov     cl, 8
shl     dx, cl
add     ax, dx
push    ax
push    cs
call    near ptr sub_37CA4
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_381AA:
push    word ptr [bp-1]
call    sub_37B20
mov     ax, 0C094h
push    ax
mov     bx, di
shl     bx, 1
shl     bx, 1
add     bx, 7238h
mov     ax, ds
mov     es, ax
mov     al, es:[bx+3]
cbw
push    ax
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_381CE:              ; jumptable 00037FDC case 62
push    word ptr ds:0C0A2h
push    cs
call    near ptr sub_37CA4
mov     al, 0
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_381DF:              ; jumptable 00037FDC case 45
cmp     byte ptr ds:0C094h, 1
jnz     short loc_3821E
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
cbw
mov     si, ax
cmp     byte ptr ds:0C097h, 0Eh
jb      short loc_38213
cmp     byte ptr ds:0C097h, 15h
ja      short loc_38213
mov     al, 0FEh
push    ax
call    sub_37B20
mov     ax, si
add     al, 0C8h
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38213:
mov     ax, si
add     al, 48h ; 'H'
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3821E:
cmp     word ptr [bp+6], 2
jg      short loc_38228
mov     al, 0FEh
jmp     short loc_3822A

loc_38228:
mov     al, 0FFh

loc_3822A:
push    ax
call    sub_37B20
mov     ax, 0C094h
push    ax
mov     ax, 8
push    ax
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3823C:              ; jumptable 00037FDC case 46
cmp     byte ptr ds:0C094h, 1
jnz     short loc_3827B
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
cbw
mov     si, ax
cmp     byte ptr ds:0C097h, 0Eh
jb      short loc_38270
cmp     byte ptr ds:0C097h, 15h
ja      short loc_38270
mov     al, 0FEh
push    ax
call    sub_37B20
mov     ax, si
add     al, 0C0h
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38270:
mov     ax, si
add     al, 40h ; '@'
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3827B:
cmp     word ptr [bp+6], 2
jg      short loc_38285
mov     al, 0FEh
jmp     short loc_38287

loc_38285:
mov     al, 0FFh

loc_38287:
push    ax
call    sub_37B20

loc_3828B:
mov     ax, 0C094h
push    ax
xor     ax, ax
push    ax
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38298:              ; jumptable 00037FDC case 43
cmp     byte ptr ds:0C094h, 1
jnz     short loc_382D2
mov     al, ds:0C097h
mov     ah, 0
push    ax
call    sub_38742
or      ax, ax
jl      short loc_382BE
mov     al, ds:0C097h
mov     ah, 0
push    ax
call    sub_38742
add     al, 7
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_382BE:
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
add     al, 58h ; 'X'
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_382D2:
mov     al, 8Fh
push    ax
call    sub_37B20
jmp     short loc_3828B

loc_382DA:              ; jumptable 00037FDC case 44
cmp     byte ptr ds:0C094h, 1
jnz     short loc_38314
mov     al, ds:0C097h
mov     ah, 0
push    ax
call    sub_38742
or      ax, ax
jl      short loc_38300
mov     al, ds:0C097h
mov     ah, 0
push    ax
call    sub_38742
add     al, 6
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38300:
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
add     al, 50h ; 'P'
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38314:
cmp     byte ptr ds:0C094h, 4
jnz     short loc_3834D
mov     ax, ds:0C098h
mov     [bp-4], ax
cmp     ax, 7Fh
jg      short loc_3833D
cmp     ax, 0FF80h
jl      short loc_3833D
mov     al, 6Ah ; 'j'
push    ax
call    sub_37B20

loc_38331:
mov     al, [bp-4]
and     al, 0FFh
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3833D:
mov     al, 68h ; 'h'
push    ax
call    sub_37B20

loc_38343:
push    word ptr [bp-4]
push    cs
call    near ptr sub_37CA4
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3834D:
mov     al, 0FFh
push    ax
call    sub_37B20
mov     ax, 0C094h
push    ax
mov     ax, 30h ; '0'
push    ax
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38361:              ; jumptable 00037FDC cases 53-55,57,59
cmp     byte ptr ds:0C094h, 4
jnz     short loc_38394
mov     ax, ds:0C098h
mov     [bp-4], ax
cmp     ax, 7Fh
jg      short loc_38386
cmp     ax, 0FF80h
jl      short loc_38386
mov     al, 6Bh ; 'k'
push    ax
call    sub_37B20
mov     al, 0C0h
push    ax
call    sub_37B20
jmp     short loc_38331

loc_38386:
mov     al, 69h ; 'i'
push    ax
call    sub_37B20
mov     al, 0C0h
push    ax
call    sub_37B20
jmp     short loc_38343

loc_38394:
cmp     word ptr [bp+6], 2
jle     short loc_3839E
mov     al, 0F7h
jmp     short loc_383A0

loc_3839E:
mov     al, 0F6h

loc_383A0:
push    ax
call    sub_37B20
mov     ax, 0C094h
push    ax
mov     al, [di+7281h]
cbw
push    ax
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_383B4:              ; jumptable 00037FDC case 36
cmp     byte ptr ds:0C09Eh, 4
jz      short loc_383C9
cmp     byte ptr ds:0C09Eh, 2
jz      short loc_383C9
cmp     byte ptr ds:0C09Eh, 3
jnz     short loc_38423

loc_383C9:
cmp     byte ptr ds:0C094h, 1
jnz     short loc_383F4
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
cbw
add     ax, 0B0h
mov     [bp-4], ax
cmp     word ptr [bp+6], 2
jle     short loc_383EC
add     word ptr [bp-4], 8

loc_383EC:
push    word ptr [bp-4]
call    sub_37B20
jmp     short loc_38412

loc_383F4:
mov     word ptr [bp-4], 0C6h
cmp     word ptr [bp+6], 2
jle     short loc_38402
inc     word ptr [bp-4]

loc_38402:
push    word ptr [bp-4]
call    sub_37B20
mov     ax, 0C094h
push    ax
xor     ax, ax
push    ax
call    sub_389F7

loc_38412:
mov     word ptr [bp-4], 0
push    word ptr [bp+6]
push    word ptr [bp-4]
call    sub_38926
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38423:
mov     word ptr [bp-4], 88h
cmp     word ptr [bp+6], 2
jle     short loc_38431
inc     word ptr [bp-4]

loc_38431:
cmp     byte ptr ds:0C094h, 1
jz      short loc_3843B
jmp     loc_384C2

loc_3843B:
mov     al, ds:0C097h
mov     ah, 0
push    ax
call    sub_38742
mov     si, ax
or      si, si
jl      short loc_38453
mov     al, 8Eh
push    ax
call    sub_37B20
jmp     loc_38576

loc_38453:
cmp     byte ptr ds:0C09Eh, 1
jnz     short loc_38469
mov     al, ds:0C0A1h
mov     ah, 0
push    ax
call    sub_38742
mov     si, ax
or      si, si
jge     short loc_384D1

loc_38469:
cmp     byte ptr ds:0C097h, 1
jz      short loc_38477
cmp     byte ptr ds:0C097h, 0Eh
jnz     short loc_384A7

loc_38477:
cmp     byte ptr ds:0C09Eh, 1
jz      short loc_384A7
cmp     byte ptr ds:0C0A1h, 0
jnz     short loc_384A7
cmp     byte ptr ds:0C0A0h, 0
jnz     short loc_384A7
mov     word ptr [bp-4], 9Ah
cmp     word ptr [bp+6], 2
jle     short loc_3849A
inc     word ptr [bp-4]

loc_3849A:
mov     ax, 0C09Eh
push    ax
push    word ptr [bp-4]
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_384A7:
add     word ptr [bp-4], 2

loc_384AB:
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
cbw
mov     si, ax
shl     si, 1
shl     si, 1
shl     si, 1
jmp     loc_38570

loc_384C2:
mov     al, ds:0C0A1h
mov     ah, 0
push    ax
call    sub_38742
mov     si, ax
or      si, si
jl      short loc_384E2

loc_384D1:
mov     al, 8Ch
push    ax
call    sub_37B20
mov     ax, 0C094h
push    ax
push    si
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_384E2:
cmp     byte ptr ds:0C0A1h, 1
jz      short loc_384F0
cmp     byte ptr ds:0C0A1h, 0Eh
jnz     short loc_3854A

loc_384F0:
cmp     byte ptr ds:0C097h, 0
jnz     short loc_3854A
cmp     byte ptr ds:0C096h, 0
jnz     short loc_3854A
mov     word ptr [bp-4], 9Ch
cmp     word ptr [bp+6], 2
jle     short loc_3850C
inc     word ptr [bp-4]

loc_3850C:
mov     ax, 0C094h
push    ax
push    word ptr [bp-4]
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38519:              ; jumptable 00037FDC cases 47-52,56,58,60
push    di
push    word ptr [bp+6]
call    sub_3877B
or      ax, ax
jz      short loc_38527
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38527:
mov     al, [di+7281h]
cbw
mov     [bp-4], ax
cmp     word ptr [bp+6], 2
jle     short loc_38538
inc     word ptr [bp-4]

loc_38538:
cmp     byte ptr ds:0C094h, 1
jnz     short loc_3854A
cmp     di, 3Ch ; '<'
jnz     short loc_38547
jmp     loc_384AB

loc_38547:
jmp     loc_384A7

loc_3854A:
mov     al, ds:0C0A1h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
cbw
mov     si, ax
shl     si, 1
shl     si, 1
shl     si, 1
mov     bx, 0C09Eh
push    ds
push    bx
mov     bx, 0C094h
push    ds
push    bx
mov     cx, 0Ah
call    sub_46BE5

loc_38570:
push    word ptr [bp-4]
call    sub_37B20

loc_38576:
mov     ax, 0C09Eh
push    ax
push    si
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38581:              ; jumptable 00037FDC cases 64,65
mov     ax, 0C09Eh
push    ax
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
cbw
shl     ax, 1
shl     ax, 1
shl     ax, 1
push    ax
call    sub_389F7
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3859E:              ; jumptable 00037FDC cases 38-42
cmp     byte ptr ds:0C09Eh, 4
jnz     short loc_385BC
cmp     word ptr ds:0C0A2h, 1
jz      short loc_385BC
mov     word ptr [bp-4], 0C0h
cmp     word ptr [bp+6], 2
jle     short loc_385D5
inc     word ptr [bp-4]
jmp     short loc_385D5

loc_385BC:
mov     word ptr [bp-4], 0D0h
cmp     word ptr [bp+6], 2
jle     short loc_385CA
inc     word ptr [bp-4]

loc_385CA:
cmp     byte ptr ds:0C09Eh, 4
jz      short loc_385D5
add     word ptr [bp-4], 2

loc_385D5:
push    word ptr [bp-4]
call    sub_37B20
cmp     di, 26h ; '&'
jnz     short loc_385E5
mov     si, 20h ; ' '
jmp     short loc_38606

loc_385E5:
cmp     di, 27h ; '''
jnz     short loc_385EF
mov     si, 28h ; '('
jmp     short loc_38606

loc_385EF:
cmp     di, 29h ; ')'
jnz     short loc_385F9
mov     si, 10h
jmp     short loc_38606

loc_385F9:
cmp     di, 2Ah ; '*'
jnz     short loc_38603
mov     si, 18h
jmp     short loc_38606

loc_38603:
mov     si, 38h ; '8'

loc_38606:
mov     ax, 0C094h
push    ax
push    si
call    sub_389F7
cmp     byte ptr ds:0C09Eh, 4
jz      short loc_38618
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38618:
cmp     word ptr ds:0C0A2h, 1
jnz     short loc_38622
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38622:
mov     al, ds:0C0A2h
and     al, 0FFh
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3862E:              ; jumptable 00037FDC case 61
cmp     byte ptr ds:0C09Eh, 0
jz      short loc_3863D
mov     al, 0CAh
push    ax
call    sub_37B20
jmp     short loc_38653

loc_3863D:
mov     al, 0CBh
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38646:              ; jumptable 00037FDC case 37
cmp     byte ptr ds:0C09Eh, 0
jz      short loc_3865E
mov     al, 0C2h
push    ax
call    sub_37B20

loc_38653:
push    word ptr ds:0C0A2h
push    cs
call    near ptr sub_37CA4
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_3865E:
mov     al, 0C3h
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38667:              ; jumptable 00037FDC case 68
cmp     byte ptr ds:0C094h, 1
jnz     short loc_38682
mov     al, ds:0C097h
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
add     al, 0D0h
push    ax
call    sub_37B20
jmp     def_37FDC       ; jumptable 00037FDC default case, cases 63,66,67

loc_38682:
cmp     word ptr [bp+6], 0Ch
jnz     short loc_38690
mov     word ptr [bp-4], 18h
jmp     loc_3850C

loc_38690:
mov     word ptr [bp-4], 10h
jmp     loc_3850C

loc_38698:              ; jumptable 00037FDC case 35
les     bx, ds:0C09Ah
mov     word ptr [bp-6], es
mov     [bp-8], bx
cmp     word ptr [bp+6], 13h
jnz     short loc_386D5
cmp     byte ptr ds:22B1h, 0
jz      short loc_386B6
cmp     byte ptr es:[bx+8], 2
jz      short loc_386BE

loc_386B6:
mov     al, 0Eh
push    ax
call    sub_37B20
jmp     short loc_386D5

loc_386BE:
mov     al, 9Ah
push    ax
call    sub_37B20
push    word ptr [bp-6]
push    word ptr [bp-8]
call    sub_37BAB
xor     ax, ax
push    ax
call    sub_37B51
jmp     short loc_38716

loc_386D5:
mov     al, 0E8h
push    ax
call    sub_37B20
push    word ptr [bp-6]
push    word ptr [bp-8]
call    sub_37BBE
jmp     short loc_38716

loc_386E6:              ; jumptable 00037FDC case 34
mov     bx, 0C09Eh
push    ds
push    bx
mov     bx, 0C094h
push    ds
push    bx
mov     cx, 0Ah
call    sub_46BE5
mov     ax, 5
push    ax
xor     ax, ax
push    ax
call    sub_38926
jmp     short def_37FDC ; jumptable 00037FDC default case, cases 63,66,67

loc_38704:              ; jumptable 00037FDC case 33
push    word ptr ds:0C09Ch
push    word ptr ds:0C09Ah
call    sub_37BAB
push    word ptr ds:0C098h
call    sub_37B51

loc_38716:
xor     ax, ax
push    ax
call    sub_37B51

def_37FDC:              ; jumptable 00037FDC default case, cases 63,66,67
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4


; Attributes: bp-based frame

sub_38724 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     bx, [bp+arg_0]
cmp     byte ptr [bx], 5
jnz     short loc_3873E
cmp     word ptr ds:0C085h, 0
jnz     short loc_3873E
mov     al, [bx+1]
mov     ah, 0
mov     ds:0C085h, ax

loc_3873E:
pop     bp
retn    2
sub_38724 endp



; Attributes: bp-based frame

sub_38742 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
sub     ax, 0Ah         ; switch 4 cases
cmp     ax, 3
ja      short def_38754 ; jumptable 00038754 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_38754[bx] ; switch jump
jpt_38754 dw offset loc_38761 ; jump table for switch statement
dw offset loc_3876A
dw offset loc_3876F
dw offset loc_38765

loc_38761:              ; jumptable 00038754 case 10
xor     ax, ax
jmp     short loc_38777

loc_38765:              ; jumptable 00038754 case 13
mov     ax, 10h
jmp     short loc_38777

loc_3876A:              ; jumptable 00038754 case 11
mov     ax, 18h
jmp     short loc_38777

loc_3876F:              ; jumptable 00038754 case 12
mov     ax, 8
jmp     short loc_38777

def_38754:              ; jumptable 00038754 default case
mov     ax, 0FFFFh

loc_38777:
pop     bp
retn    2
sub_38742 endp



; Attributes: bp-based frame

sub_3877B proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_0]
mov     si, [bp+arg_2]
mov     al, ds:0C09Eh
mov     ah, 0
cmp     ax, 2
jz      short loc_387A0
cmp     ax, 3
jz      short loc_387A0
cmp     ax, 4
jz      short loc_387A0
jmp     loc_3891C

loc_387A0:
cmp     byte ptr ds:0C09Eh, 4
jnz     short loc_387DE
mov     ax, ds:0C0A2h
and     ax, 0FF80h
mov     [bp+var_4], ax
cmp     di, 2
jle     short loc_387C5
or      ax, ax
jz      short loc_387BE
cmp     ax, 0FF80h
jnz     short loc_387C5

loc_387BE:
mov     [bp+var_4], 2
jmp     short loc_387CA

loc_387C5:
mov     [bp+var_4], 0

loc_387CA:
cmp     si, 31h ; '1'
jz      short loc_387DE
cmp     si, 32h ; '2'
jz      short loc_387DE
cmp     si, 3Ch ; '<'
jz      short loc_387DE
cmp     si, 34h ; '4'
jnz     short loc_387E3

loc_387DE:
mov     [bp+var_4], 0

loc_387E3:
cmp     byte ptr ds:0C094h, 1
jz      short loc_387ED
jmp     loc_38880

loc_387ED:
cmp     byte ptr ds:0C097h, 1
jz      short loc_387FE
cmp     byte ptr ds:0C097h, 0Eh
jz      short loc_387FE
jmp     loc_38880

loc_387FE:
mov     ax, si
sub     ax, 2Fh ; '/'   ; switch 14 cases
cmp     ax, 0Dh
ja      short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3880C[bx] ; switch jump
jpt_3880C dw offset loc_3882D ; jump table for switch statement
dw offset loc_38834
dw offset loc_38850
dw offset loc_38857
dw offset loc_38849
dw offset loc_38865
dw offset def_3880C
dw offset def_3880C
dw offset def_3880C
dw offset loc_3883B
dw offset def_3880C
dw offset loc_38842
dw offset def_3880C
dw offset loc_3885E

loc_3882D:              ; jumptable 0003880C case 47
mov     [bp+var_4], 4
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_38834:              ; jumptable 0003880C case 48
mov     [bp+var_4], 2Ch ; ','
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_3883B:              ; jumptable 0003880C case 56
mov     [bp+var_4], 14h
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_38842:              ; jumptable 0003880C case 58
mov     [bp+var_4], 1Ch
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_38849:              ; jumptable 0003880C case 51
mov     [bp+var_4], 3Ch ; '<'
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_38850:              ; jumptable 0003880C case 49
mov     [bp+var_4], 24h ; '$'
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_38857:              ; jumptable 0003880C case 50
mov     [bp+var_4], 0Ch
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_3885E:              ; jumptable 0003880C case 60
mov     [bp+var_4], 0A8h
jmp     short def_3880C ; jumptable 0003880C default case, cases 53-55,57,59

loc_38865:              ; jumptable 0003880C case 52
mov     [bp+var_4], 34h ; '4'

def_3880C:              ; jumptable 0003880C default case, cases 53-55,57,59
cmp     di, 2
jle     short loc_38872
inc     [bp+var_4]

loc_38872:
push    [bp+var_4]
call    sub_37B20
mov     [bp+var_4], 0
jmp     loc_38910

loc_38880:
cmp     si, 3Ch ; '<'
jnz     short loc_3888A
mov     ax, 0F6h
jmp     short loc_3888D

loc_3888A:
mov     ax, 80h

loc_3888D:
add     ax, [bp+var_4]
mov     [bp+var_2], ax
cmp     di, 2
jle     short loc_3889B
inc     [bp+var_2]

loc_3889B:
push    [bp+var_2]
call    sub_37B20
mov     ax, si
sub     ax, 2Fh ; '/'   ; switch 14 cases
cmp     ax, 0Dh
ja      short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_388AF[bx] ; switch jump
jpt_388AF dw offset loc_388FA ; jump table for switch statement
dw offset loc_388D0
dw offset loc_388EC
dw offset loc_388F3
dw offset loc_388E5
dw offset loc_38901
dw offset def_388AF
dw offset def_388AF
dw offset def_388AF
dw offset loc_388D7
dw offset def_388AF
dw offset loc_388DE
dw offset def_388AF
dw offset loc_388FA

loc_388D0:              ; jumptable 000388AF case 48
mov     [bp+var_2], 28h ; '('
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_388D7:              ; jumptable 000388AF case 56
mov     [bp+var_2], 10h
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_388DE:              ; jumptable 000388AF case 58
mov     [bp+var_2], 18h
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_388E5:              ; jumptable 000388AF case 51
mov     [bp+var_2], 38h ; '8'
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_388EC:              ; jumptable 000388AF case 49
mov     [bp+var_2], 20h ; ' '
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_388F3:              ; jumptable 000388AF case 50
mov     [bp+var_2], 8
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_388FA:              ; jumptable 000388AF cases 47,60
mov     [bp+var_2], 0
jmp     short def_388AF ; jumptable 000388AF default case, cases 53-55,57,59

loc_38901:              ; jumptable 000388AF case 52
mov     [bp+var_2], 30h ; '0'

def_388AF:              ; jumptable 000388AF default case, cases 53-55,57,59
mov     ax, 0C094h
push    ax
push    [bp+var_2]
call    sub_389F7

loc_38910:
push    di
push    [bp+var_4]
call    sub_38926
mov     ax, 1
jmp     short loc_3891E

loc_3891C:
xor     ax, ax

loc_3891E:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_3877B endp



; Attributes: bp-based frame

sub_38926 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
mov     al, ds:0C09Eh
mov     ah, 0
cmp     ax, 2
jz      short loc_3896A
cmp     ax, 4
jz      short loc_3893F
cmp     ax, 5
jz      short loc_38961
jmp     short loc_3897E

loc_3893F:
mov     al, ds:0C0A2h
and     al, 0FFh
push    ax
call    sub_37B20
cmp     [bp+arg_2], 2
jle     short loc_3898F
cmp     [bp+arg_0], 0
jnz     short loc_3898F
mov     ax, ds:0C0A2h
mov     cl, 8
sar     ax, cl
push    ax
call    sub_37B20
jmp     short loc_3898F

loc_38961:
mov     ax, ds:0C0A4h
or      ax, ds:0C0A6h
jz      short loc_38975

loc_3896A:
push    word ptr ds:0C0A6h
push    word ptr ds:0C0A4h
call    sub_37B98

loc_38975:
push    word ptr ds:0C0A2h
call    sub_37B51
jmp     short loc_3898F

loc_3897E:
push    word ptr ds:0C0A6h
push    word ptr ds:0C0A4h
call    sub_37BD1
xor     ax, ax
push    ax
call    sub_37B51

loc_3898F:
pop     bp
retn    4
sub_38926 endp


loc_38993:
push    bp
mov     bp, sp
sub     sp, 4
push    word ptr [bp+8]
push    word ptr [bp+6]
call    sub_3B1BA
mov     [bp-2], dx
mov     [bp-4], ax
call    sub_3C0B0
cmp     byte ptr ds:22B3h, 0
jz      short loc_389C7

loc_389B6:
mov     al, 0E8h
push    ax
call    sub_37B20
push    word ptr [bp-2]
push    word ptr [bp-4]
call    sub_37BBE
jmp     short loc_389EB

loc_389C7:
cmp     byte ptr ds:22B1h, 0
jnz     short loc_389D6
mov     al, 0Eh
push    ax
call    sub_37B20
jmp     short loc_389B6

loc_389D6:
mov     al, 9Ah
push    ax
call    sub_37B20
push    word ptr [bp-2]
push    word ptr [bp-4]
call    sub_37BAB
xor     ax, ax
push    ax
call    sub_37B51

loc_389EB:
xor     ax, ax
push    ax
call    sub_37B51
mov     sp, bp
pop     bp
retf    4


; Attributes: bp-based frame

sub_389F7 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_2]
cmp     byte ptr [si], 1
jnz     short loc_38A1B
mov     al, [si+3]
mov     ah, 0
mov     bx, ax
mov     al, [bx+72D1h]
add     al, byte ptr [bp+arg_0]
add     al, 0C0h
push    ax
call    sub_37B20
jmp     loc_38AC8

loc_38A1B:
cmp     byte ptr [si+3], 0
jnz     short loc_38A31
cmp     byte ptr [si+2], 0
jnz     short loc_38A31
add     [bp+arg_0], 6
mov     di, 80h
jmp     loc_38A98

loc_38A31:
mov     ax, [si+6]
or      ax, [si+8]
jnz     short loc_38A45
cmp     word ptr [si+4], 7Fh
jg      short loc_38A45
cmp     word ptr [si+4], 0FF80h
jge     short loc_38A4A

loc_38A45:
mov     di, 80h
jmp     short loc_38A63

loc_38A4A:
cmp     word ptr [si+4], 0
jnz     short loc_38A5C
cmp     byte ptr [si+3], 18h
jnz     short loc_38A61
cmp     byte ptr [si+2], 0
jnz     short loc_38A61

loc_38A5C:
mov     di, 40h ; '@'
jmp     short loc_38A63

loc_38A61:
xor     di, di

loc_38A63:
or      [bp+arg_0], di
cmp     byte ptr [si+2], 6
jnz     short loc_38A71
or      [bp+arg_0], 1

loc_38A71:
cmp     byte ptr [si+3], 18h
jnz     short loc_38A7C
or      [bp+arg_0], 2

loc_38A7C:
cmp     byte ptr [si+2], 0
jz      short loc_38A88
cmp     byte ptr [si+3], 0
jnz     short loc_38A98

loc_38A88:
or      [bp+arg_0], 4
cmp     byte ptr [si+3], 3
jnz     short loc_38A98
or      [bp+arg_0], 3

loc_38A98:
push    [bp+arg_0]
call    sub_37B20
cmp     di, 80h
jnz     short loc_38ABD
mov     ax, [si+6]
or      ax, [si+8]
jz      short loc_38AB5
push    word ptr [si+8]
push    word ptr [si+6]
call    sub_37B98

loc_38AB5:
push    word ptr [si+4]
call    sub_37B51
jmp     short loc_38AC8

loc_38ABD:
cmp     di, 40h ; '@'
jnz     short loc_38AC8
push    word ptr [si+4]
call    sub_37B20

loc_38AC8:
pop     di
pop     si
pop     bp
retn    4
sub_389F7 endp

seg035 ends


; Segment type: Pure code
seg036 segment byte public 'CODE' use16
assume cs:seg036
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_38ACE proc far

var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 24h
push    si
push    di
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jz      short loc_38AE6
jmp     loc_38F40

loc_38AE6:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     [bp+var_1E], es
mov     [bp+var_20], bx
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
cmp     byte ptr es:[bx+8], 0Dh
jz      short loc_38B07
jmp     loc_38F40

loc_38B07:
mov     bx, es:[bx+0Ah]
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, 7350h
mov     ax, ds
mov     es, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx
les     bx, [bp+var_4]
mov     al, es:[bx+3]
cbw
mov     di, ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
les     bx, [bp+var_4]
cmp     al, es:[bx+2]
jz      short loc_38B49
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38B49:
mov     ax, word ptr [bp+var_1C]
or      ax, word ptr [bp+var_1C+2]
jnz     short loc_38B54
jmp     loc_38BD6

loc_38B54:
or      di, di
jge     short loc_38B5B
jmp     loc_38BD6

loc_38B5B:
mov     si, di
jmp     short loc_38BAB

loc_38B5F:
or      si, si
jg      short loc_38B66
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38B66:
les     bx, [bp+var_1C]
les     bx, es:[bx+0Ah]
mov     al, es:[bx+1]
les     bx, [bp+var_4]
add     bx, si
cmp     al, es:[bx+3]
jz      short loc_38B7F
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38B7F:
les     bx, [bp+var_1C]
mov     dx, es:[bx+0Ch]
mov     ax, es:[bx+0Ah]
mov     bx, si
dec     bx
shl     bx, 1
shl     bx, 1
lea     cx, [bp+var_18]
add     bx, cx
mov     ss:[bx+2], dx
mov     ss:[bx], ax
dec     si
mov     bx, word ptr [bp+var_1C]
les     bx, es:[bx+6]
mov     word ptr [bp+var_1C+2], es
mov     word ptr [bp+var_1C], bx

loc_38BAB:
les     bx, [bp+var_1C]
cmp     byte ptr es:[bx], 39h ; '9'
jz      short loc_38B5F
or      si, si
jg      short loc_38BBB
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38BBB:
mov     al, es:[bx+1]
les     bx, [bp+var_4]
cmp     al, es:[bx+4]
jz      short loc_38BCB
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38BCB:
les     bx, [bp+var_1C]
mov     word ptr [bp+var_18+2], es
mov     word ptr [bp+var_18], bx
jmp     short loc_38BDD

loc_38BD6:
or      di, di
jle     short loc_38BDD
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38BDD:
les     bx, [bp+var_8]
mov     ax, es:[bx+0Ah]
cmp     ax, 6           ; switch 7 cases
jbe     short loc_38BEC
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38BEC:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_38BF0[bx] ; switch jump
jpt_38BF0 dw offset loc_38E20 ; jump table for switch statement
dw offset loc_38C03
dw offset loc_38CB1
dw offset loc_38CBD
dw offset loc_38CC9
dw offset loc_38DBA
dw offset loc_38F24

loc_38C03:              ; jumptable 00038BF0 case 1
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 8013h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
les     bx, [bp+var_1C]
cmp     word ptr es:[bx+0Ah], 1
jnz     short loc_38C5C
mov     ax, 2
push    ax
call    sub_2F356
or      ax, ax
jz      short loc_38C5C
mov     ax, 42h ; 'B'
push    ax
call    sub_3CF03
mov     ax, 34h ; '4'
push    ax
mov     ax, 1
push    ax
mov     ax, 2
push    ax
call    sub_3CF5C
mov     ax, 30h ; '0'
push    ax
mov     ax, 1
push    ax
mov     ax, 2
push    ax
call    sub_3CF5C
jmp     short loc_38CA8

loc_38C5C:
call    sub_29B97
mov     [bp+var_22], dx
mov     [bp+var_24], ax
mov     ax, 32h ; '2'
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3D0C3
mov     ax, 26h ; '&'
push    ax
mov     ax, 5
push    ax
push    [bp+var_22]
push    [bp+var_24]
call    dword ptr ds:0C03Ch
mov     ax, 3Bh ; ';'
push    ax
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_3CF3D
push    [bp+var_22]
push    [bp+var_24]
call    sub_2DDC9

loc_38CA8:
mov     dx, word ptr [bp+var_1C+2]
mov     ax, word ptr [bp+var_1C]
jmp     loc_38F46

loc_38CB1:              ; jumptable 00038BF0 case 2
mov     ax, 48h ; 'H'
push    ax
call    sub_3CF03
jmp     loc_38F2D

loc_38CBD:              ; jumptable 00038BF0 case 3
mov     ax, 49h ; 'I'
push    ax
call    sub_3CF03
jmp     loc_38F2D

loc_38CC9:              ; jumptable 00038BF0 case 4
les     bx, [bp+var_18]
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
les     bx, [bp+var_14]
push    ax
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
pop     dx
cmp     dx, ax
jle     short loc_38D3D
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2
jnz     short loc_38CFA
cmp     word ptr es:[bx+6], 0FFh
jbe     short loc_38D0F

loc_38CFA:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 2
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax

loc_38D0F:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 1
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 3Ch ; '<'
jnz     short loc_38D8E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 2
push    ax
call    sub_3CF1E
jmp     short loc_38D8E

loc_38D3D:
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2
jnz     short loc_38D63
cmp     word ptr es:[bx+6], 0FFh
jbe     short loc_38D8E

loc_38D63:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 2
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
les     bx, [bp+var_14]
cmp     byte ptr es:[bx], 3Ch ; '<'
jnz     short loc_38D8E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E

loc_38D8E:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_2F677
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_2F677
mov     ax, 20h ; ' '
push    ax
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 0Eh
push    ax
call    sub_3D0A2
jmp     loc_38F2D

loc_38DBA:              ; jumptable 00038BF0 case 5
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2
jnz     short loc_38DD4
cmp     word ptr es:[bx+8], 0
jb      short loc_38DF0
ja      short loc_38DD4
cmp     word ptr es:[bx+6], 0FFh
jbe     short loc_38DF0

loc_38DD4:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 2
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_18+2], dx
mov     word ptr [bp+var_18], ax
push    dx
push    ax
call    sub_2F677

loc_38DF0:
mov     ax, 1
push    ax
push    ax
push    ax
call    sub_2F19D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
mov     ax, 0D1h
push    ax
xor     dx, dx
mov     ax, 1Fh
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
call    sub_3C214
jmp     loc_38F40

loc_38E20:              ; jumptable 00038BF0 case 0
call    sub_2F40A
les     bx, [bp+var_18]
cmp     byte ptr es:[bx], 2
jnz     short loc_38E49
cmp     word ptr es:[bx+6], 0FFh
jbe     short loc_38E39
jmp     def_38BF0       ; jumptable 00038BF0 default case

loc_38E39:
mov     ax, 1Eh
push    ax
push    word ptr [bp+var_18+2]
push    bx
call    sub_3CF3D
jmp     loc_38F1D

loc_38E49:
push    word ptr [bp+var_18+2]
push    word ptr [bp+var_18]
mov     ax, 3
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
mov     ax, 4
push    ax
push    ax
mov     ax, 5
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
mov     ax, 7
push    ax
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
les     bx, [bp+var_1C]
mov     byte ptr es:[bx+3], 5
mov     ax, 26h ; '&'
push    ax
mov     ax, 3
push    ax
mov     ax, 1
push    ax
call    sub_3D081
mov     ax, 26h ; '&'
push    ax
mov     ax, 3
push    ax
mov     ax, 1
push    ax
call    sub_3D081
mov     ax, 34h ; '4'
push    ax
mov     ax, 4
push    ax
push    ax
call    sub_3CF5C
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 4
push    ax
call    sub_3CF5C
mov     ax, 47h ; 'G'
push    ax
call    sub_3CF03
mov     al, 2Bh ; '+'
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_1C+2], dx
mov     word ptr [bp+var_1C], ax
les     bx, [bp+var_1C]
mov     byte ptr es:[bx+1], 0Bh
mov     bx, ax
mov     byte ptr es:[bx+3], 5
mov     bx, ax
mov     byte ptr es:[bx+4], 0Ah
mov     ax, 44h ; 'D'
push    ax
push    dx
push    word ptr [bp+var_1C]
call    sub_3CF3D

loc_38F1D:
call    sub_3C0B0
jmp     short loc_38F2D

loc_38F24:              ; jumptable 00038BF0 case 6
push    word ptr [bp+var_1C+2]
push    word ptr [bp+var_1C]
call    sub_38F4E

loc_38F2D:
mov     dx, [bp+var_1E]
mov     ax, [bp+var_20]
jmp     short loc_38F46

def_38BF0:              ; jumptable 00038BF0 default case
mov     ax, 2
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_38F40:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_38F46:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_38ACE endp



; Attributes: bp-based frame

sub_38F4E proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 39h ; '9'
jnz     short loc_38F75
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_38F4E
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_38F75:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 3
jnz     short loc_38FB1
cmp     byte ptr es:[bx], 2
jnz     short loc_38FB1
cmp     word ptr es:[bx+8], 0
jl      short loc_38FB1
jnz     short loc_38F95
cmp     word ptr es:[bx+6], 0
jb      short loc_38FB1

loc_38F95:
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+8], 0
jg      short loc_38FB1
jnz     short loc_38FA9
cmp     word ptr es:[bx+6], 0FFh
ja      short loc_38FB1

loc_38FA9:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+1], 1

loc_38FB1:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_38FFC
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
cmp     byte ptr es:[bx], 7
jz      short loc_38FD0
cmp     byte ptr es:[bx], 8
jnz     short loc_38FFC

loc_38FD0:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+0Ah], 0FF80h
jl      short loc_38FE1
cmp     word ptr es:[bx+0Ah], 7Fh
jle     short loc_38FEE

loc_38FE1:
les     bx, [bp+var_4]
push    word ptr es:[bx+0Ah]
call    dword ptr ds:0C014h
jmp     short loc_39007

loc_38FEE:
les     bx, [bp+var_4]
mov     al, es:[bx+0Ah]
push    ax
call    dword ptr ds:0C01Ch
jmp     short loc_39007

loc_38FFC:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3D105

loc_39007:
mov     sp, bp
pop     bp
retn    4
sub_38F4E endp



; Attributes: bp-based frame

sub_3900D proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
cmp     [bp+arg_4], 6
jnz     short loc_39037
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jnz     short loc_3902E
push    ds
mov     ax, 73C9h
push    ax
mov     ax, 51h ; 'Q'
push    ax
call    sub_312DE
mov     sp, bp

loc_3902E:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3903B

loc_39037:
pop     bp
retf    6
sub_3900D endp



; Attributes: bp-based frame

sub_3903B proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 39h ; '9'
jnz     short loc_3905F
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3903B
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_3905F:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 2Ch ; ','
jz      short loc_3909C
jg      short loc_39079
cmp     ax, 2
jz      short loc_3909C
cmp     ax, 3
jz      short loc_3909C
jmp     short loc_3908F

loc_39079:
cmp     ax, 35h ; '5'
jz      short loc_39080
jmp     short loc_3908F

loc_39080:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
jmp     short loc_3905F

loc_3908F:
mov     ax, 8Dh
push    ax
call    sub_312DE
mov     sp, bp
jmp     short loc_3905F

loc_3909C:
pop     bp
retn    4
sub_3903B endp

seg036 ends


; Segment type: Pure code
seg037 segment byte public 'CODE' use16
assume cs:seg037
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_390A0 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
push    di
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jnz     short loc_390B0
jmp     loc_3912C

loc_390B0:
test    [bp+arg_0], 80h
jz      short loc_390E3
xor     di, di
mov     si, 74A2h
jmp     short loc_390D3

loc_390BE:
test    word ptr [si+2], 80h
jz      short loc_390D0
push    si
call    sub_2F36D
or      ax, ax
jnz     short loc_390D0
inc     di

loc_390D0:
add     si, 10h

loc_390D3:
cmp     word ptr [si], 0
jnz     short loc_390BE
mov     ax, di
dec     ax
push    ax
call    sub_39132
jmp     short loc_39125

loc_390E3:
test    [bp+arg_0], 108h
jz      short loc_39116
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_2F53C
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_2F4F2
push    ax
call    sub_3CF1E
jmp     short loc_39125

loc_39116:
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_3CF3D

loc_39125:
les     bx, [bp+arg_2]
mov     byte ptr es:[bx], 3Ch ; '<'

loc_3912C:
pop     di
pop     si
pop     bp
retf    6
sub_390A0 endp



; Attributes: bp-based frame

sub_39132 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     si, 7
jnz     short loc_39154
mov     ax, 0C0h
push    ax
xor     dx, dx
mov     ax, 0Eh
push    dx
push    ax
push    dx
push    dx
push    dx
push    dx
call    sub_3C214
jmp     short loc_3916F

loc_39154:
or      si, si
jz      short loc_3916F
mov     ax, 0Ah
push    ax
push    si
call    sub_3CF1E
mov     ax, 0Dh
push    ax
mov     ax, si
inc     ax
push    ax
call    sub_3CF1E

loc_3916F:
mov     ax, 1Ah
push    ax
mov     ax, 0Eh
push    ax
mov     ax, 0FFF6h
push    ax
call    sub_3A5F0
pop     si
pop     bp
retf    2
sub_39132 endp




sub_39185 proc far
mov     ax, 8
push    ax
mov     ax, 0Dh
push    ax
mov     ax, 0FFF8h
push    ax
call    sub_3A5F0
retf
sub_39185 endp




sub_39197 proc far
mov     ax, 19h
push    ax
mov     ax, 0Eh
push    ax
mov     ax, 0Ah
push    ax
call    sub_3A5F0
retf
sub_39197 endp



; Attributes: bp-based frame

sub_391A9 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     byte ptr ds:22C2h, 0
jz      short loc_391D7
or      si, si
jz      short loc_391D7
mov     ax, 24h ; '$'
push    ax
push    si
push    [bp+arg_4]
call    sub_3CF5C
mov     ax, 24h ; '$'
push    ax
push    [bp+arg_2]
push    si
call    sub_3CF5C
jmp     short loc_391EF

loc_391D7:
mov     ax, 2Ch ; ','
push    ax
push    [bp+arg_4]
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
push    [bp+arg_2]
call    sub_3CF1E

loc_391EF:
pop     si
pop     bp
retf    6
sub_391A9 endp

push    bp
mov     bp, sp
les     bx, [bp+6]
cmp     byte ptr es:[bx+4], 0
jz      short loc_39208
cmp     byte ptr es:[bx+4], 0Bh
jnz     short loc_3920D

loc_39208:
mov     ax, 1
jmp     short loc_3920F

loc_3920D:
xor     ax, ax

loc_3920F:
pop     bp
retf    4


; Attributes: bp-based frame

sub_39213 proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_0]
les     bx, es:[bx+1Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
call    sub_2F0E0
les     bx, [bp+arg_0]
push    word ptr es:[bx+12h]
push    word ptr es:[bx+10h]
mov     ax, 1
push    ax
call    sub_2CC7D
les     bx, [bp+var_4]
mov     ax, es:[bx+4]
les     bx, [bp+var_8]
sub     ax, es:[bx+4]
les     bx, [bp+arg_0]
push    ax
mov     ax, es:[bx+14h]
mov     dx, 3
mul     dx
pop     dx
cmp     dx, ax
jbe     short loc_3927A
cmp     byte ptr ds:22C2h, 0
jnz     short loc_3927A
cmp     word ptr es:[bx+14h], 4
jge     short loc_39292

loc_3927A:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+arg_0]
push    word ptr es:[bx+14h]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_393C8
jmp     short loc_392A1

loc_39292:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_392A7

loc_392A1:
mov     sp, bp
pop     bp
retf    4
sub_39213 endp



; Attributes: bp-based frame

sub_392A7 proc near

var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 10h
push    si
call    sub_29B97
mov     [bp+var_A], dx
mov     [bp+var_C], ax
call    sub_29B97
mov     [bp+var_6], dx
mov     [bp+var_8], ax
call    sub_29B97
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 24h ; '$'
push    ax
mov     ax, 4
push    ax
les     bx, [bp+arg_4]
push    word ptr es:[bx+14h]
call    sub_3D081
push    [bp+var_A]
push    [bp+var_C]
call    dword ptr ds:0C008h
push    [bp+var_2]
push    [bp+var_4]
call    sub_2DDC9
call    dword ptr ds:0C010h
mov     ax, 22h ; '"'
push    ax
mov     ax, 3
push    ax
push    [bp+var_6]
push    [bp+var_8]
call    dword ptr ds:0C03Ch
mov     ax, 2Eh ; '.'
push    ax
mov     ax, 3
push    ax
call    sub_3CF1E
mov     ax, 2Eh ; '.'
push    ax
mov     ax, 3
push    ax
call    sub_3CF1E
push    [bp+var_2]
push    [bp+var_4]
call    dword ptr ds:0C024h
les     bx, [bp+arg_4]
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    sub_2DD94
push    [bp+var_6]
push    [bp+var_8]
call    sub_2DDC9
les     bx, [bp+arg_4]
mov     ax, es:[bx+14h]
shl     ax, 1
push    ax
call    dword ptr ds:0C018h
push    [bp+var_A]
push    [bp+var_C]
call    sub_2DDC9
les     bx, [bp+arg_0]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
xor     si, si
jmp     short loc_3938B

loc_39373:
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
call    dword ptr ds:0C014h
inc     si
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_3938B:
les     bx, [bp+arg_4]
mov     ax, es:[bx+14h]
cmp     ax, si
jg      short loc_39373
xor     si, si
jmp     short loc_393B6

loc_3939A:
les     bx, [bp+var_10]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    dword ptr ds:0BFF4h
inc     si
les     bx, [bp+var_10]
les     bx, es:[bx]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx

loc_393B6:
les     bx, [bp+arg_4]
mov     ax, es:[bx+14h]
cmp     ax, si
jg      short loc_3939A
pop     si
mov     sp, bp
pop     bp
retn    8
sub_392A7 endp



; Attributes: bp-based frame

sub_393C8 proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di

loc_393D0:
cmp     [bp+arg_4], 3
jg      short loc_3942A
xor     si, si
jmp     short loc_39412

loc_393DA:
mov     ax, 33h ; '3'
push    ax
mov     ax, 1
push    ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
call    sub_3D081
mov     ax, 22h ; '"'
push    ax
mov     ax, 3
push    ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    dword ptr ds:0C03Ch
inc     si
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_39412:
cmp     si, [bp+arg_4]
jl      short loc_393DA
les     bx, [bp+arg_6]
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    sub_2DD94
jmp     loc_39507

loc_3942A:
mov     si, [bp+arg_4]
shr     si, 1
les     bx, [bp+arg_0]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     di, 1
jmp     short loc_3945A

loc_3943D:
mov     ax, di
dec     ax
cmp     ax, si
jnz     short loc_3944D
les     bx, [bp+var_C]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_3944D:
inc     di
les     bx, [bp+var_C]
les     bx, es:[bx]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx

loc_3945A:
cmp     di, [bp+arg_4]
jl      short loc_3943D
les     bx, [bp+var_C]
mov     di, es:[bx+4]
les     bx, [bp+arg_0]
sub     di, es:[bx+4]
mov     ax, [bp+arg_4]
mov     dx, 3
mul     dx
cmp     ax, di
jb      short loc_39491
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    bx
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_3950F
jmp     short loc_39507

loc_39491:
mov     ax, 33h ; '3'
push    ax
mov     ax, 1
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+4]
call    sub_3D081
mov     ax, 22h ; '"'
push    ax
mov     ax, 3
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    dword ptr ds:0C03Ch
call    sub_29B97
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 24h ; '$'
push    ax
mov     ax, 3
push    ax
push    dx
push    [bp+var_4]
call    dword ptr ds:0C03Ch
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    si
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_393C8
push    [bp+var_2]
push    [bp+var_4]
call    sub_2DDC9
mov     ax, si
inc     ax
sub     [bp+arg_4], ax
les     bx, [bp+var_8]
les     bx, es:[bx]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
jmp     loc_393D0

loc_39507:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ah
sub_393C8 endp



; Attributes: bp-based frame

sub_3950F proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= word ptr  0Ch
arg_A= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
les     bx, [bp+arg_4]
cmp     word ptr es:[bx+4], 0
jz      short loc_39532
mov     ax, 30h ; '0'
push    ax
mov     ax, 1
push    ax
push    word ptr es:[bx+4]
call    sub_3D081

loc_39532:
mov     ax, 33h ; '3'
push    ax
mov     ax, 1
push    ax
les     bx, [bp+arg_0]
mov     ax, es:[bx+4]
les     bx, [bp+arg_4]
sub     ax, es:[bx+4]
push    ax
call    sub_3D081
mov     ax, 24h ; '$'
push    ax
mov     ax, 4
push    ax
les     bx, [bp+arg_A]
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    dword ptr ds:0C03Ch
mov     ax, 24h ; '$'
push    ax
mov     ax, 3
push    ax
mov     ax, 1
push    ax
call    sub_3CF5C
mov     ax, 26h ; '&'
push    ax
mov     ax, 3
push    ax
mov     ax, 1
push    ax
call    sub_3D081
call    sub_29B97
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    dx
push    ax
call    dword ptr ds:0C004h
xor     di, di
les     bx, [bp+arg_4]
mov     si, es:[bx+4]
jmp     short loc_395D8

loc_395A3:
inc     si
les     bx, [bp+arg_A]
push    word ptr es:[bx+18h]
push    word ptr es:[bx+16h]
call    dword ptr ds:0BFF4h

loc_395B3:
les     bx, [bp+arg_4]
mov     ax, es:[bx+4]
cmp     ax, si
jg      short loc_395A3
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    dword ptr ds:0BFF4h
inc     si
inc     di
les     bx, [bp+arg_4]
les     bx, es:[bx]
mov     word ptr [bp+arg_4+2], es
mov     word ptr [bp+arg_4], bx

loc_395D8:
cmp     di, [bp+arg_8]
jl      short loc_395B3
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Eh
sub_3950F endp



; Attributes: bp-based frame

sub_395E5 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     si, 17h
jl      short loc_395F6
cmp     si, 21h ; '!'
jle     short loc_3960F

loc_395F6:
cmp     si, 33h ; '3'
jz      short loc_3960F
cmp     si, 32h ; '2'
jz      short loc_3960F
cmp     si, 30h ; '0'
jz      short loc_3960F
cmp     si, 36h ; '6'
jz      short loc_3960F
cmp     si, 34h ; '4'
jnz     short loc_39614

loc_3960F:
mov     ax, 1
jmp     short loc_39616

loc_39614:
xor     ax, ax

loc_39616:
pop     si
pop     bp
retn    2
sub_395E5 endp



; Attributes: bp-based frame

sub_3961B proc far

var_E= dword ptr -0Eh
var_A= dword ptr -0Ah
var_6= dword ptr -6
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 0Eh
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 12h
jnz     short loc_39630
mov     byte ptr es:[bx+4], 0

loc_39630:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 5
jnz     short loc_39646
cmp     byte ptr es:[bx+1], 2
jg      short loc_39643
jmp     loc_39706

loc_39643:
jmp     loc_398B5

loc_39646:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 8
jnz     short loc_39652
jmp     loc_398B5

loc_39652:
cmp     byte ptr es:[bx], 7
jnz     short loc_3965B
jmp     loc_398B5

loc_3965B:
cmp     byte ptr es:[bx], 4
jnz     short loc_39664
jmp     loc_398B5

loc_39664:
cmp     byte ptr es:[bx], 3
jnz     short loc_3967B
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 8080h
push    ax
call    sub_322DA
jmp     loc_398B5

loc_3967B:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jz      short loc_39687
jmp     loc_39706

loc_39687:
push    word ptr [bp+arg_0+2]
push    bx
call    sub_39B68
or      ax, ax
jnz     short loc_39697
jmp     loc_398B5

loc_39697:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 0
jz      short loc_396A4
jmp     loc_398B5

loc_396A4:
mov     ax, 8013h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
mov     ax, 0CFh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3C214
mov     ax, 0Ah
push    ax
call    sub_2F2D7
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_3CF7D
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
call    sub_2F677
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+4], 0Ah
jmp     loc_398B5

loc_39706:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_39719
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_39719:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
mov     al, es:[bx+3]
cbw
mov     [bp+var_2], ax
cmp     byte ptr es:[bx], 0Dh
jnz     short loc_39773
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_39795
les     bx, [bp+var_E]
les     bx, es:[bx+0Ah]
cmp     byte ptr es:[bx], 2
jnz     short loc_39795
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
les     bx, [bp+var_E]
les     bx, es:[bx+6]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
les     bx, [bp+var_E]
les     bx, es:[bx+0Ah]
push    word ptr es:[bx+6]
call    sub_3DC8C
jmp     loc_398BB

loc_39773:
les     bx, [bp+var_E]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_39795
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
xor     ax, ax
push    ax
call    sub_3DC8C
jmp     loc_398BB

loc_39795:
les     bx, [bp+var_E]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_397AB
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_398C1
jmp     loc_398A7

loc_397AB:
push    [bp+var_2]
call    sub_3A433
les     bx, [bp+arg_0]
mov     es:[bx+4], al
les     bx, [bp+var_E]
cmp     byte ptr es:[bx], 0Dh
jz      short loc_397E7
cmp     byte ptr es:[bx], 2
jnz     short loc_397CC
jmp     loc_398B5

loc_397CC:
push    word ptr [bp+var_E+2]
push    bx
mov     ax, 8011h
push    ax
call    sub_39E5C
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     loc_398A7

loc_397E7:
les     bx, [bp+var_E]
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
les     bx, es:[bx+6]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
les     bx, [bp+var_A]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
les     bx, [bp+var_E]
cmp     byte ptr es:[bx], 5
jnz     short loc_3985B
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    sub_39F17
or      ax, ax
jz      short loc_39822
jmp     loc_398B5

loc_39822:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_3982E
jmp     loc_398B5

loc_3982E:
mov     dx, word ptr [bp+var_E+2]
mov     ax, word ptr [bp+var_E]
les     bx, [bp+var_A]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
mov     ax, 8001h
push    ax
call    sub_2CC7D
les     bx, [bp+var_A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_398A7

loc_3985B:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx], 5
jz      short loc_39871
push    word ptr [bp+var_6+2]
push    bx
call    sub_39F17
or      ax, ax
jz      short loc_3988D

loc_39871:
push    word ptr [bp+var_E+2]
push    word ptr [bp+var_E]
mov     ax, 8001h
push    ax
call    sub_2CC7D
les     bx, [bp+var_A]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_398A7

loc_3988D:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
mov     ax, 8011h
push    ax
call    sub_2CC7D
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_398A7:
mov     al, byte ptr [bp+var_2]
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     es:[bx+3], al

loc_398B5:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_398BB:
mov     sp, bp
pop     bp
retf    4
sub_3961B endp



; Attributes: bp-based frame

sub_398C1 proc near

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 10h
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+4], 0Ah
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
cmp     byte ptr es:[bx], 0Dh
jz      short loc_398E2
jmp     loc_39A9C

loc_398E2:
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+var_4]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
cmp     byte ptr es:[bx], 2
jnz     short loc_3995E
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 14h
jz      short loc_39936
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 5
jz      short loc_39919
jmp     loc_39A9C

loc_39919:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8100h
push    ax
call    sub_2CC7D
les     bx, [bp+var_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
jmp     loc_39B62

loc_39936:
les     bx, [bp+var_8]
cmp     word ptr es:[bx+8], 0
jnb     short loc_39943
jmp     loc_39AF7

loc_39943:
ja      short loc_3994F
cmp     word ptr es:[bx+6], 0FFF0h
ja      short loc_3994F
jmp     loc_39AF7

loc_3994F:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 5
jnz     short loc_3995B
jmp     loc_39B62

loc_3995B:
jmp     loc_39A9C

loc_3995E:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 2Ch ; ','
jz      short loc_3996A
jmp     loc_399FF

loc_3996A:
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_39B68
or      ax, ax
jnz     short loc_3997E
jmp     loc_399FF

loc_3997E:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+4], 0Ah
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
mov     ax, 8011h
push    ax
call    sub_39E5C
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, 8013h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     [bp+var_E], dx
mov     [bp+var_10], ax
mov     ax, 0CFh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    [bp+var_E]
push    [bp+var_10]
les     bx, [bp+var_8]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3C214
mov     ax, 0Ah
push    ax
call    sub_2F2D7
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
push    [bp+var_E]
push    [bp+var_10]
call    sub_3CF7D
push    [bp+var_E]
push    [bp+var_10]
call    sub_2F677
jmp     loc_39B62

loc_399FF:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_39F17
or      ax, ax
jz      short loc_39A11
jmp     loc_39B13

loc_39A11:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 2Ch ; ','
jz      short loc_39A1D
jmp     loc_39AB9

loc_39A1D:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 5
jnz     short loc_39A9C
les     bx, [bp+var_8]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_39B68
or      ax, ax
jnz     short loc_39A3D
jmp     loc_39B5A

loc_39A3D:
mov     ax, 8013h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
mov     ax, 0CFh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
les     bx, [bp+var_8]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3C214
mov     ax, 0Ah
push    ax
call    sub_2F2D7
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_3CF7D
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
call    sub_2F677
jmp     loc_39B62

loc_39A9C:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 8100h
push    ax
call    sub_2CC7D
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     loc_39B62

loc_39AB9:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 5
jnz     short loc_39AEE
mov     dx, word ptr [bp+var_C+2]
mov     ax, bx
les     bx, [bp+var_4]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8100h
push    ax
call    sub_2CC7D
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_39B62

loc_39AEE:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 5
jnz     short loc_39A9C

loc_39AF7:
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
mov     ax, 8100h
push    ax
call    sub_2CC7D
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_39B62

loc_39B13:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 5
jz      short loc_39B5A
cmp     byte ptr es:[bx], 35h ; '5'
jz      short loc_39B3A
mov     al, 35h ; '5'
push    ax
xor     ax, ax
push    ax
push    ax
push    word ptr [bp+var_C+2]
push    bx
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax

loc_39B3A:
les     bx, [bp+var_C]
mov     byte ptr es:[bx+1], 4
push    word ptr [bp+var_C+2]
push    bx
mov     ax, 8011h
push    ax
call    sub_2CC7D
les     bx, [bp+var_4]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_39B5A:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+4], 0

loc_39B62:
mov     sp, bp
pop     bp
retn    4
sub_398C1 endp



; Attributes: bp-based frame

sub_39B68 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jnz     short loc_39BA9
les     bx, es:[bx+6]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     ax, bx
or      ax, [bp+var_2]
jz      short loc_39BA9
cmp     byte ptr es:[bx+12h], 5
jz      short loc_39BA4
cmp     word ptr ds:0C072h, 0
jz      short loc_39BA9
cmp     byte ptr es:[bx+12h], 4
jz      short loc_39BA4
cmp     byte ptr es:[bx+8], 2
jnz     short loc_39BA9

loc_39BA4:
mov     ax, 1
jmp     short loc_39BAB

loc_39BA9:
xor     ax, ax

loc_39BAB:
mov     sp, bp
pop     bp
retf    4
sub_39B68 endp



; Attributes: bp-based frame

sub_39BB1 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
mov     si, [bp+arg_6]
les     bx, [bp+arg_8]
les     bx, es:[bx]
mov     [bp+var_A], es
mov     [bp+var_C], bx
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_39BD0
jmp     loc_39CD5

loc_39BD0:
cmp     byte ptr es:[bx], 3Ch ; '<'
jz      short loc_39BD9
jmp     loc_39CEB

loc_39BD9:
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
push    word ptr [bp+var_8+2]
push    bx
call    sub_39CF2
or      ax, ax
jz      short loc_39C09
cmp     si, 0FFFFh
jz      short loc_39C09
test    si, 1
jz      short loc_39C00
mov     si, 8012h
jmp     short loc_39C09

loc_39C00:
test    si, 100h
jz      short loc_39C09
mov     si, 8008h

loc_39C09:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 4
jz      short loc_39C15
jmp     loc_39CD5

loc_39C15:
push    word ptr es:[bx+0Ah]
push    si
call    sub_39D16
or      ax, ax
jnz     short loc_39C24
jmp     loc_39CD5

loc_39C24:
push    [bp+arg_0]
cmp     si, 16h
jnz     short loc_39C3B
les     bx, [bp+var_8]
cmp     word ptr es:[bx+0Ah], 16h
jz      short loc_39C3B
mov     ax, 3
jmp     short loc_39C3E

loc_39C3B:
mov     ax, [bp+arg_0]

loc_39C3E:
push    ax
les     bx, [bp+var_8]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     [bp+var_2], dx
mov     [bp+var_4], ax
les     bx, [bp+var_8]
mov     ax, es:[bx+0Ah]
cmp     ax, 9
jz      short loc_39C79
jg      short loc_39C6D
cmp     ax, 7
jz      short loc_39C79
cmp     ax, 8
jz      short loc_39C79
jmp     short loc_39CA5

loc_39C6D:
cmp     ax, 16h
jz      short loc_39C79
cmp     ax, 17h
jz      short loc_39C79
jmp     short loc_39CA5

loc_39C79:
mov     ax, 24h ; '$'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3CFBF
mov     ax, 24h ; '$'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3D01E
jmp     short loc_39CBA

loc_39CA5:
mov     ax, 24h ; '$'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3D0C3

loc_39CBA:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
les     bx, [bp+arg_2]
mov     es:[bx+2], dx
mov     es:[bx], ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_2F677

loc_39CD5:
push    [bp+var_A]
push    [bp+var_C]
push    si
call    sub_2CC7D
les     bx, [bp+arg_8]
mov     es:[bx+2], dx
mov     es:[bx], ax

loc_39CEB:
pop     si
mov     sp, bp
pop     bp
retf    0Ch
sub_39BB1 endp



; Attributes: bp-based frame

sub_39CF2 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_39D0B
cmp     byte ptr es:[bx], 1
jnz     short loc_39D10
cmp     byte ptr es:[bx+4], 0Ah
jnz     short loc_39D10

loc_39D0B:
mov     ax, 1
jmp     short loc_39D12

loc_39D10:
xor     ax, ax

loc_39D12:
pop     bp
retn    4
sub_39CF2 endp



; Attributes: bp-based frame

sub_39D16 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_2]
mov     ax, [bp+arg_0]
cmp     ax, 7
jz      short loc_39D44
cmp     ax, 16h
jz      short loc_39D2C
jmp     short loc_39D52

loc_39D2C:
cmp     si, 1
jz      short loc_39D3B
cmp     si, 2
jz      short loc_39D3B
cmp     si, 16h
jnz     short loc_39D40

loc_39D3B:
mov     ax, 1
jmp     short loc_39D42

loc_39D40:
xor     ax, ax

loc_39D42:
jmp     short loc_39D5E

loc_39D44:
cmp     si, 3
jnz     short loc_39D4E
mov     ax, 1
jmp     short loc_39D50

loc_39D4E:
xor     ax, ax

loc_39D50:
jmp     short loc_39D5E

loc_39D52:
cmp     si, [bp+arg_0]
jnz     short loc_39D5C
mov     ax, 1
jmp     short loc_39D5E

loc_39D5C:
xor     ax, ax

loc_39D5E:
pop     si
pop     bp
retn    4
sub_39D16 endp



; Attributes: bp-based frame

sub_39D63 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
les     bx, [bp+arg_2]
mov     al, es:[bx]
cbw
cmp     ax, 7
jz      short loc_39DB1
jg      short loc_39D85
cmp     ax, 1
jz      short loc_39DB1
cmp     ax, 4
jz      short loc_39D96
cmp     ax, 5
jz      short loc_39DA7
jmp     short loc_39DDC

loc_39D85:
cmp     ax, 8
jz      short loc_39DB1
cmp     ax, 2Bh ; '+'
jz      short loc_39DB1
cmp     ax, 2Ch ; ','
jz      short loc_39DBD
jmp     short loc_39DDC

loc_39D96:
les     bx, [bp+arg_2]
cmp     word ptr es:[bx+0Ah], 1Ah
jz      short loc_39DDC
mov     dx, word ptr [bp+arg_2+2]
mov     ax, bx
jmp     short loc_39DEA

loc_39DA7:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+1], 2
jle     short loc_39DDC

loc_39DB1:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    cs
call    near ptr sub_3961B
jmp     short loc_39DEA

loc_39DBD:
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 36h ; '6'
jnz     short loc_39DDC
les     bx, [bp+arg_2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3D300
jmp     short loc_39DEA

loc_39DDC:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+arg_0]
call    sub_2CC7D

loc_39DEA:
pop     bp
retf    6
sub_39D63 endp



; Attributes: bp-based frame

sub_39DEE proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     al, es:[bx]
cbw
cmp     ax, 5
jz      short loc_39E27
jg      short loc_39E14
cmp     ax, 2
jz      short loc_39E40
cmp     ax, 4
jz      short loc_39E1B
jmp     short loc_39E48

loc_39E14:
cmp     ax, 2Ch ; ','
jz      short loc_39E33
jmp     short loc_39E48

loc_39E1B:
les     bx, [bp+var_4]
cmp     word ptr es:[bx+0Ah], 1Ah
jz      short loc_39E48
jmp     short loc_39E40

loc_39E27:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+1], 2
jle     short loc_39E48
jmp     short loc_39E40

loc_39E33:
les     bx, [bp+var_4]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jnz     short loc_39E48

loc_39E40:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
jmp     short loc_39E56

loc_39E48:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    [bp+arg_0]
call    sub_2CC7D

loc_39E56:
mov     sp, bp
pop     bp
retf    6
sub_39DEE endp



; Attributes: bp-based frame

sub_39E5C proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_2]
mov     [bp+var_2], es
mov     [bp+var_4], bx
cmp     byte ptr es:[bx], 5
jnz     short loc_39E7F
cmp     byte ptr es:[bx+1], 2
jle     short loc_39E7F
mov     dx, [bp+var_2]
mov     ax, bx
jmp     short loc_39E8D

loc_39E7F:
push    [bp+var_2]
push    [bp+var_4]
push    [bp+arg_0]
call    sub_2CC7D

loc_39E8D:
mov     sp, bp
pop     bp
retf    6
sub_39E5C endp



; Attributes: bp-based frame

sub_39E93 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
les     bx, [bp+arg_2]
mov     al, es:[bx]
cbw
cmp     ax, 7
jz      short loc_39EE4 ; jumptable 00039EAE case 1
jg      short loc_39EBD
dec     ax              ; switch 5 cases
cmp     ax, 4
ja      short def_39EAE ; jumptable 00039EAE default case, case 3
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_39EAE[bx] ; switch jump
jpt_39EAE dw offset loc_39EE4 ; jump table for switch statement
dw offset loc_39EFD
dw offset def_39EAE
dw offset loc_39ECE
dw offset loc_39EDA

loc_39EBD:
cmp     ax, 8
jz      short loc_39EE4 ; jumptable 00039EAE case 1
cmp     ax, 2Bh ; '+'
jz      short loc_39EE4 ; jumptable 00039EAE case 1
cmp     ax, 2Ch ; ','
jz      short loc_39EF0
jmp     short def_39EAE ; jumptable 00039EAE default case, case 3

loc_39ECE:              ; jumptable 00039EAE case 4
les     bx, [bp+arg_2]
cmp     word ptr es:[bx+0Ah], 1Ah
jz      short def_39EAE ; jumptable 00039EAE default case, case 3
jmp     short loc_39EFD ; jumptable 00039EAE case 2

loc_39EDA:              ; jumptable 00039EAE case 5
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+1], 2
jle     short def_39EAE ; jumptable 00039EAE default case, case 3

loc_39EE4:              ; jumptable 00039EAE case 1
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    cs
call    near ptr sub_3961B
jmp     short loc_39F13

loc_39EF0:
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jnz     short def_39EAE ; jumptable 00039EAE default case, case 3

loc_39EFD:              ; jumptable 00039EAE case 2
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
jmp     short loc_39F13

def_39EAE:              ; jumptable 00039EAE default case, case 3
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+arg_0]
call    sub_2CC7D

loc_39F13:
pop     bp
retf    6
sub_39E93 endp



; Attributes: bp-based frame

sub_39F17 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_39F28
mov     ax, 1
jmp     short loc_39F42

loc_39F28:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_39F40
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jnz     short loc_39F40
mov     ax, 3
jmp     short loc_39F42

loc_39F40:
xor     ax, ax

loc_39F42:
pop     bp
retf    4
sub_39F17 endp



; Attributes: bp-based frame

sub_39F46 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4
jz      short loc_39F58
cmp     byte ptr es:[bx], 5
jnz     short loc_39F5D

loc_39F58:
mov     ax, 1
jmp     short loc_39F5F

loc_39F5D:
xor     ax, ax

loc_39F5F:
pop     bp
retf    4
sub_39F46 endp



; Attributes: bp-based frame

sub_39F63 proc far

var_A= dword ptr -0Ah
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
les     bx, [bp+arg_6]
les     bx, es:[bx+6]
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jz      short loc_39F93
push    word ptr [bp+arg_2+2]
push    bx
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_2+2], dx
mov     word ptr [bp+arg_2], ax

loc_39F93:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    cs
call    near ptr sub_3961B
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
les     bx, [bp+var_A]
mov     byte ptr es:[bx+1], 3
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jz      short loc_39FC9
push    ss
lea     ax, [bp+arg_2]
push    ax
mov     ax, 1
push    ax
push    ss
lea     ax, [bp+var_A]
push    ax
xor     ax, ax
push    ax
push    cs
call    near ptr sub_39BB1

loc_39FC9:
les     bx, [bp+arg_6]
mov     cl, es:[bx+0Ah]
mov     ax, 1
shl     ax, cl
dec     ax
mov     [bp+var_2], ax
mov     cl, es:[bx+0Bh]
mov     si, ax
shl     si, cl
not     si
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, si
cwd
push    dx
push    ax
call    sub_29A88
mov     word ptr [bp+var_6+2], dx
mov     word ptr [bp+var_6], ax
les     bx, [bp+arg_6]
cmp     byte ptr es:[bx+0Ah], 1
jz      short loc_3A008
jmp     loc_3A082

loc_3A008:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jnz     short loc_3A082
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
and     ax, 1
and     dx, 0
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_3A05F
les     bx, [bp+arg_6]
mov     cl, es:[bx+0Bh]
mov     ax, 1
shl     ax, cl
cwd
les     bx, [bp+var_6]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, 32h ; '2'
push    ax
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    word ptr [bp+var_6+2]
push    bx
call    sub_3D0C3
jmp     short loc_3A074

loc_3A05F:
mov     ax, 31h ; '1'
push    ax
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    sub_3D0C3

loc_3A074:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_2F677
jmp     loc_3A1BA

loc_3A082:
mov     ax, 31h ; '1'
push    ax
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    sub_3D0C3
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jz      short loc_3A0C2
mov     ax, [bp+var_2]
cwd
les     bx, [bp+var_6]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     ax, 31h ; '1'
push    ax
mov     ax, 1
push    ax
push    word ptr [bp+var_6+2]
push    bx
call    sub_3CF7D
jmp     short loc_3A0E8

loc_3A0C2:
les     bx, [bp+arg_2]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
push    dx
push    ax
mov     ax, [bp+var_2]
cwd
pop     bx
pop     cx
and     bx, ax
and     cx, dx
push    cx
push    bx
mov     bx, word ptr [bp+arg_2]
pop     ax
pop     dx
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_3A0E8:
les     bx, [bp+arg_6]
mov     al, es:[bx+0Bh]
cbw
mov     [bp+var_2], ax
cmp     [bp+arg_0], 0FFFFh
jz      short loc_3A10F
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jz      short loc_3A10F
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E

loc_3A10F:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jnz     short loc_3A135
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     cl, byte ptr [bp+var_2]
call    sub_1EDF6
les     bx, [bp+arg_2]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_3A147

loc_3A135:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, 26h ; '&'
push    ax
push    [bp+var_2]
call    sub_3A376

loc_3A147:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jnz     short loc_3A15A
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_3A16F

loc_3A15A:
mov     ax, 32h ; '2'
push    ax
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_3D0C3

loc_3A16F:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_2F677
cmp     [bp+arg_0], 0FFFFh
jz      short loc_3A1BA
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jz      short loc_3A198
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
jmp     short loc_3A1BA

loc_3A198:
les     bx, [bp+arg_2]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
les     bx, [bp+arg_6]
mov     cl, es:[bx+0Bh]
call    sub_1EE15
les     bx, [bp+arg_2]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_3A1BA:
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_39F63 endp



; Attributes: bp-based frame

sub_3A1C7 proc far

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, es:[bx+6]
mov     [bp+var_6], es
mov     [bp+var_8], bx
les     bx, [bp+var_C]
mov     cl, es:[bx+0Bh]
mov     si, 1
shl     si, cl
push    [bp+var_6]
push    [bp+var_8]
push    cs
call    near ptr sub_3961B
mov     [bp+var_6], dx
mov     [bp+var_8], ax
les     bx, [bp+var_C]
mov     cl, es:[bx+0Ah]
mov     di, 1
shl     di, cl
dec     di
mov     cl, es:[bx+0Bh]
shl     di, cl
push    [bp+arg_0]
mov     ax, 8073h
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 24h ; '$'
push    ax
push    dx
push    [bp+var_4]
push    [bp+var_6]
push    [bp+var_8]
call    sub_3D0C3
cmp     [bp+arg_0], 0FFFFh
jz      short loc_3A25C
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 19h
jle     short loc_3A25C
mov     ax, 2Ch ; ','
push    ax
push    [bp+var_2]
push    [bp+var_4]
call    sub_3CF3D

loc_3A25C:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2Eh ; '.'
jz      short loc_3A26B
cmp     byte ptr es:[bx], 18h
jnz     short loc_3A27D

loc_3A26B:
mov     ax, 2Fh ; '/'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    si
call    sub_3D0E4
jmp     short loc_3A28D

loc_3A27D:
mov     ax, 30h ; '0'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    si
call    sub_3D0E4

loc_3A28D:
mov     ax, 31h ; '1'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    di
call    sub_3D0E4
mov     ax, 31h ; '1'
push    ax
push    [bp+var_6]
push    [bp+var_8]
mov     ax, di
not     ax
and     ax, 0FFFFh
push    ax
call    sub_3D0E4
mov     ax, 32h ; '2'
push    ax
push    [bp+var_6]
push    [bp+var_8]
push    [bp+var_2]
push    [bp+var_4]
call    sub_3D0C3
cmp     [bp+arg_0], 0FFFFh
jnz     short loc_3A2D2
jmp     loc_3A368

loc_3A2D2:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 19h
jle     short loc_3A2EA
mov     ax, 2Bh ; '+'
push    ax
push    [bp+var_2]
push    [bp+var_4]
call    sub_3CF3D

loc_3A2EA:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx+1], 3
jnz     short loc_3A336
mov     al, es:[bx+0Bh]
cbw
push    ax
mov     al, es:[bx+0Ah]
cbw
pop     dx
add     dx, ax
mov     si, 10h
sub     si, dx
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 26h ; '&'
push    ax
push    si
call    sub_3A376
les     bx, [bp+var_C]
mov     al, es:[bx+0Ah]
cbw
mov     si, 10h
sub     si, ax
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 28h ; '('
push    ax
push    si
call    sub_3A376
jmp     short loc_3A368

loc_3A336:
les     bx, [bp+var_C]
mov     cl, es:[bx+0Ah]
mov     si, 1
shl     si, cl
dec     si
push    [bp+var_2]
push    [bp+var_4]
mov     ax, 27h ; '''
push    ax
mov     al, es:[bx+0Bh]
cbw
push    ax
call    sub_3A376
mov     ax, 31h ; '1'
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    si
call    sub_3D0E4

loc_3A368:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     di
pop     si
mov     sp, bp
pop     bp
retf    6
sub_3A1C7 endp



; Attributes: bp-based frame

sub_3A376 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    si
push    di
mov     si, [bp+arg_0]
mov     di, [bp+arg_2]
or      si, si
jz      short loc_3A3D7
cmp     byte ptr ds:22B2h, 0
jz      short loc_3A39B
push    di
push    [bp+arg_6]
push    [bp+arg_4]
push    si
call    sub_3D0E4
jmp     short loc_3A3D7

loc_3A39B:
cmp     si, 4
jge     short loc_3A3B9
jmp     short loc_3A3B3

loc_3A3A2:
push    di
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 1
push    ax
call    sub_3D0E4
dec     si

loc_3A3B3:
or      si, si
jg      short loc_3A3A2
jmp     short loc_3A3D7

loc_3A3B9:
mov     ax, 24h ; '$'
push    ax
mov     ax, 10h
push    ax
push    si
call    sub_3D081
push    di
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 10h
push    ax
call    sub_3D0A2

loc_3A3D7:
pop     di
pop     si
pop     bp
retf    8
sub_3A376 endp



; Attributes: bp-based frame

sub_3A3DD proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
mov     bx, ax
add     bx, 0FFF1h
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, 7A51h
mov     ax, ds
mov     es, ax
push    es
push    bx
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
add     ax, 0FFF8h
shl     ax, 1
shl     ax, 1
pop     bx
pop     es
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    dword ptr ds:0C02Ch
pop     bp
retf    4
sub_3A3DD endp



; Attributes: bp-based frame

sub_3A41E proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
cmp     [bp+arg_0], 0
jnz     short loc_3A42C
mov     ax, 5
jmp     short loc_3A42F

loc_3A42C:
mov     ax, 6

loc_3A42F:
pop     bp
retf    2
sub_3A41E endp



; Attributes: bp-based frame

sub_3A433 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
and     ax, 0Fh
dec     ax              ; switch 4 cases
cmp     ax, 3
ja      short def_3A446 ; jumptable 0003A446 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3A446[bx] ; switch jump
jpt_3A446 dw offset loc_3A458 ; jump table for switch statement
dw offset loc_3A462
dw offset loc_3A45D
dw offset loc_3A453

loc_3A453:              ; jumptable 0003A446 case 4
mov     ax, 0Bh
jmp     short loc_3A469

loc_3A458:              ; jumptable 0003A446 case 1
mov     ax, 0Ah
jmp     short loc_3A469

loc_3A45D:              ; jumptable 0003A446 case 3
mov     ax, 0Dh
jmp     short loc_3A469

loc_3A462:              ; jumptable 0003A446 case 2
mov     ax, 0Ch
jmp     short loc_3A469

def_3A446:              ; jumptable 0003A446 default case
xor     ax, ax

loc_3A469:
pop     bp
retf    2
sub_3A433 endp



; Attributes: bp-based frame

sub_3A46D proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_3A484
jmp     def_3A49A       ; jumptable 0003A49A default case, cases 15-20,23,26-30

loc_3A484:
mov     bx, word ptr [bp+arg_0]
mov     al, es:[bx]
cbw
sub     ax, 0Dh         ; switch 21 cases
cmp     ax, 14h
jbe     short loc_3A496
jmp     def_3A49A       ; jumptable 0003A49A default case, cases 15-20,23,26-30

loc_3A496:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3A49A[bx] ; switch jump
jpt_3A49A dw offset loc_3A4C9 ; jump table for switch statement
dw offset loc_3A4C9
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset loc_3A4F0
dw offset loc_3A4F0
dw offset def_3A49A
dw offset loc_3A4F5
dw offset loc_3A4F5
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset def_3A49A
dw offset loc_3A51C
dw offset loc_3A51C
dw offset loc_3A51C

loc_3A4C9:              ; jumptable 0003A49A cases 13,14
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
cmp     byte ptr es:[bx], 2
jnz     short loc_3A4F0 ; jumptable 0003A49A cases 21,22
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
cmp     word ptr es:[bx+8], 0
jnz     short loc_3A4F0 ; jumptable 0003A49A cases 21,22
cmp     word ptr es:[bx+6], 1
jnz     short loc_3A4F0 ; jumptable 0003A49A cases 21,22
mov     ax, 4
jmp     short loc_3A523

loc_3A4F0:              ; jumptable 0003A49A cases 21,22
mov     ax, 2
jmp     short loc_3A523

loc_3A4F5:              ; jumptable 0003A49A cases 24,25
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
cmp     byte ptr es:[bx], 2
jnz     short loc_3A51C ; jumptable 0003A49A cases 31-33
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
cmp     word ptr es:[bx+8], 0
jnz     short loc_3A51C ; jumptable 0003A49A cases 31-33
cmp     word ptr es:[bx+6], 1
jnz     short loc_3A51C ; jumptable 0003A49A cases 31-33
mov     ax, 3
jmp     short loc_3A523

loc_3A51C:              ; jumptable 0003A49A cases 31-33
mov     ax, 1
jmp     short loc_3A523

def_3A49A:              ; jumptable 0003A49A default case, cases 15-20,23,26-30
xor     ax, ax

loc_3A523:
pop     bp
retf    4
sub_3A46D endp



; Attributes: bp-based frame

sub_3A527 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 1
jz      short loc_3A56C
cmp     ax, 7
jz      short loc_3A542
cmp     ax, 8
jz      short loc_3A542
jmp     short loc_3A59C

loc_3A542:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+4], 0
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Dh
push    ax
call    sub_3CF1E
mov     ax, 40h ; '@'
push    ax
mov     ax, 1
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CF7D
jmp     short loc_3A5DF

loc_3A56C:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    cs
call    near ptr sub_39B68
or      ax, ax
jnz     short loc_3A59C
mov     ax, 2Ch ; ','
push    ax
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+12h], 1
jnz     short loc_3A591
mov     ax, 0Ch
jmp     short loc_3A594

loc_3A591:
mov     ax, 0Bh

loc_3A594:
push    ax
call    sub_3CF1E
jmp     short loc_3A5C4

loc_3A59C:
mov     ax, 0E7h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 1
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3C214
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E

loc_3A5C4:
mov     ax, 0E6h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 1
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3C214

loc_3A5DF:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
pop     bp
retf    4
sub_3A527 endp



; Attributes: bp-based frame

sub_3A5F0 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
or      si, si
jge     short loc_3A611
mov     ax, 30h ; '0'
push    ax
mov     ax, 19h
push    ax
mov     ax, si
neg     ax
push    ax
call    sub_3D081
add     ds:0C083h, si

loc_3A611:
cmp     word ptr ds:0BF0Dh, 0
jnz     short loc_3A626
cmp     word ptr ds:0BF15h, 0
jnz     short loc_3A626
cmp     byte ptr ds:22C6h, 0
jz      short loc_3A64B

loc_3A626:
push    [bp+arg_4]
mov     al, 7
push    ax
push    [bp+arg_2]
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr ds:0C083h
call    sub_298D7
push    dx
push    ax
call    sub_3CF3D
jmp     short loc_3A699

loc_3A64B:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 18h
push    ax
call    sub_3CF1E
mov     ax, 24h ; '$'
push    ax
mov     ax, 18h
push    ax
mov     ax, 19h
push    ax
call    sub_3CF5C
push    [bp+arg_4]
mov     al, 7
push    ax
push    [bp+arg_2]
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
mov     ax, 2
push    ax
call    sub_298D7
push    dx
push    ax
call    sub_3CF3D
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 18h
push    ax
call    sub_3CF1E

loc_3A699:
mov     ax, 4Eh ; 'N'
push    ax
call    sub_3CF03
or      si, si
jle     short loc_3A6B8
mov     ax, 2Fh ; '/'
push    ax
mov     ax, 19h
push    ax
push    si
call    sub_3D081
add     ds:0C083h, si

loc_3A6B8:
pop     si
pop     bp
retf    6
sub_3A5F0 endp



; Attributes: bp-based frame

sub_3A6BD proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= dword ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx+2], 0
jge     short loc_3A6E5
les     bx, [bp+arg_0]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
xor     di, di
jmp     short loc_3A6FA

loc_3A6E5:
mov     di, 1
les     bx, [bp+arg_4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_3A6FA:
les     bx, [bp+arg_8]
mov     al, es:[bx]
cbw
mov     dx, 6
mul     dx
mov     si, ax
add     si, 7A2Bh
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx+1], 0Eh
jz      short loc_3A795
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_22692
or      ax, ax
jnz     short loc_3A743
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 3
jnz     short loc_3A795

loc_3A743:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    cs
call    near ptr sub_3961B
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 4
jz      short loc_3A77B
push    cs
call    near ptr sub_39197
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_3A77B:
or      di, di
jz      short loc_3A784
mov     al, [si+1]
jmp     short loc_3A786

loc_3A784:
mov     al, [si]

loc_3A786:
cbw
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3CF3D
jmp     short loc_3A7F2

loc_3A795:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 4
jz      short loc_3A7E0
push    cs
call    near ptr sub_39197
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      di, di
jz      short loc_3A7D4
mov     al, [si]
jmp     short loc_3A7D7

loc_3A7D4:
mov     al, [si+1]

loc_3A7D7:
cbw
push    ax
call    sub_3CF03
jmp     short loc_3A7F2

loc_3A7E0:
or      di, di
jz      short loc_3A7E9
mov     al, [si+1]
jmp     short loc_3A7EB

loc_3A7E9:
mov     al, [si]

loc_3A7EB:
cbw
push    ax
call    sub_3CF03

loc_3A7F2:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ch
sub_3A6BD endp



; Attributes: bp-based frame

sub_3A800 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3961B
mov     [bp+arg_2], dx
mov     [bp+arg_0], ax
mov     ax, 8080h
push    ax
push    ax
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Eh ; '.'
jz      short loc_3A856
cmp     byte ptr es:[bx], 2Fh ; '/'
jz      short loc_3A856
jmp     loc_3A8D4

loc_3A856:
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Ch
jnz     short loc_3A87A
mov     ax, 16h
jmp     short loc_3A87C

loc_3A87A:
xor     ax, ax

loc_3A87C:
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3CF3D
mov     ax, 0Ah
push    ax
xor     ax, ax
push    ax
call    sub_3CF1E
mov     ax, 1Bh
push    ax
call    sub_3CF03
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Eh ; '.'
jnz     short loc_3A8AB
mov     ax, 2
jmp     short loc_3A8AE

loc_3A8AB:
mov     ax, 0Bh

loc_3A8AE:
push    ax
call    sub_3CF03
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Ch
jnz     short loc_3A8C3
mov     ax, 17h
jmp     short loc_3A8C6

loc_3A8C3:
mov     ax, 8

loc_3A8C6:
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3CF3D
jmp     short loc_3A92F

loc_3A8D4:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Ch
jnz     short loc_3A8E3
mov     ax, 16h
jmp     short loc_3A8E5

loc_3A8E3:
xor     ax, ax

loc_3A8E5:
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3CF3D
mov     ax, 1Bh
push    ax
call    sub_3CF03
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Eh ; '.'
jnz     short loc_3A908
mov     ax, 2
jmp     short loc_3A90B

loc_3A908:
mov     ax, 0Bh

loc_3A90B:
push    ax
call    sub_3CF03
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Ch
jnz     short loc_3A920
mov     ax, 18h
jmp     short loc_3A923

loc_3A920:
mov     ax, 9

loc_3A923:
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3CF3D

loc_3A92F:
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2F677
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
mov     sp, bp
pop     bp
retf    8
sub_3A800 endp



; Attributes: bp-based frame

sub_3A946 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 12h
jz      short loc_3A958
jmp     loc_3A9BC

loc_3A958:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_3A967
cmp     byte ptr es:[bx], 35h ; '5'
jnz     short loc_3A9BC

loc_3A967:
les     bx, [bp+arg_4]
les     bx, es:[bx+0Ah]
mov     [bp+var_2], es
mov     [bp+var_4], bx
cmp     byte ptr es:[bx], 2
jnz     short loc_3A9BC
cmp     word ptr es:[bx+8], 0
jnz     short loc_3A9BC
cmp     word ptr es:[bx+6], 10h
jnz     short loc_3A9BC
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3A9A1
cmp     word ptr es:[bx+8], 0
jb      short loc_3A9C0
ja      short loc_3A9A1
cmp     word ptr es:[bx+6], 0FFFFh
jbe     short loc_3A9C0

loc_3A9A1:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_3A9BC
cmp     byte ptr es:[bx+1], 4
jz      short loc_3A9C0

loc_3A9BC:
xor     ax, ax
jmp     short loc_3A9C3

loc_3A9C0:
mov     ax, 1

loc_3A9C3:
mov     sp, bp
pop     bp
retf    8
sub_3A946 endp



; Attributes: bp-based frame

sub_3A9C9 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 13h
jnz     short loc_3A9F3
les     bx, es:[bx+0Ah]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
cmp     byte ptr es:[bx], 2
jnz     short loc_3A9F3
cmp     word ptr es:[bx+8], 0
jnz     short loc_3A9F3
cmp     word ptr es:[bx+6], 10h
jz      short loc_3A9F7

loc_3A9F3:
xor     ax, ax
jmp     short loc_3A9FA

loc_3A9F7:
mov     ax, 1

loc_3A9FA:
pop     bp
retf    4
sub_3A9C9 endp



; Attributes: bp-based frame

sub_3A9FE proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_22692
or      ax, ax
jz      short loc_3AA21
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 0Ah
push    ax
call    sub_2CC7D
jmp     short loc_3AA3B

loc_3AA21:
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 3
push    ax
call    sub_2CC7D
push    dx
push    ax
mov     ax, 0Ah
push    ax
call    sub_2CC7D

loc_3AA3B:
pop     bp
retn    4
sub_3A9FE endp



; Attributes: bp-based frame

sub_3AA3F proc far

var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 2
push    si
mov     si, [bp+arg_0]
les     bx, [bp+arg_6]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_6+2], es
mov     word ptr [bp+arg_6], bx
cmp     byte ptr es:[bx], 35h ; '5'
jz      short loc_3AA96
mov     al, es:[bx+2]
cbw
mov     [bp+var_2], ax
mov     al, 35h ; '5'
push    ax
mov     ax, 4
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
push    dx
push    ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
mov     al, byte ptr [bp+var_2]
les     bx, [bp+arg_6]
mov     es:[bx+2], al
jmp     short loc_3AA9E

loc_3AA96:
les     bx, [bp+arg_6]
mov     byte ptr es:[bx+1], 4

loc_3AA9E:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 2
jnz     short loc_3AAB4
mov     byte ptr es:[bx+1], 4
cmp     si, 8100h
jz      short loc_3AAEA
jmp     short loc_3AB27

loc_3AAB4:
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_2+2], es
mov     word ptr [bp+arg_2], bx
les     bx, [bp+arg_6]
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
les     bx, [bp+arg_2]
push    ax
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
pop     dx
cmp     dx, ax
jg      short loc_3AAE4
jmp     loc_3AB6A

loc_3AAE4:
cmp     si, 8100h
jnz     short loc_3AB27

loc_3AAEA:
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_3A9FE
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, 3
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_2+2], dx
mov     word ptr [bp+arg_2], ax
push    ss
lea     ax, [bp+arg_6]
push    ax
mov     ax, 0Ah
push    ax
push    ss
lea     ax, [bp+arg_2]
push    ax
mov     ax, 3
push    ax
push    cs
call    near ptr sub_39BB1
jmp     loc_3ABAA

loc_3AB27:
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
mov     ax, 2
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_2+2], dx
mov     word ptr [bp+arg_2], ax
push    ss
lea     ax, [bp+arg_6]
push    ax
mov     ax, 2
push    ax
push    ss
lea     ax, [bp+arg_2]
push    ax
mov     ax, 1
push    ax
push    cs
call    near ptr sub_39BB1
jmp     loc_3ABF1

loc_3AB6A:
cmp     si, 8100h
jnz     short loc_3ABB1
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, 3
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_2+2], dx
mov     word ptr [bp+arg_2], ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_3A9FE
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
push    ss
lea     ax, [bp+arg_2]
push    ax
mov     ax, 3
push    ax
push    ss
lea     ax, [bp+arg_6]
push    ax
mov     ax, 0Ah
push    ax
push    cs
call    near ptr sub_39BB1

loc_3ABAA:
mov     [bp+var_2], 7
jmp     short loc_3ABF6

loc_3ABB1:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, 1
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_2+2], dx
mov     word ptr [bp+arg_2], ax
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
mov     ax, 2
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_6+2], dx
mov     word ptr [bp+arg_6], ax
push    ss
lea     ax, [bp+arg_2]
push    ax
mov     ax, 1
push    ax
push    ss
lea     ax, [bp+arg_6]
push    ax
mov     ax, 2
push    ax
push    cs
call    near ptr sub_39BB1

loc_3ABF1:
mov     [bp+var_2], 16h

loc_3ABF6:
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
call    sub_2F677
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_2F677
push    [bp+var_2]
push    [bp+var_2]
mov     ax, 9
push    ax
call    sub_2F19D
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_3AA3F endp



; Attributes: bp-based frame

sub_3AC22 proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 8
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
cmp     byte ptr es:[bx], 35h ; '5'
jnz     short loc_3AC56
les     bx, es:[bx+6]
mov     [bp+var_2], es
mov     [bp+var_4], bx
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_3AC56
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_3AC56:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8008h
push    ax
push    cs
call    near ptr sub_39D63
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 4
jnz     short loc_3AC8A
push    dx
push    ax
call    sub_2F49E
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+1], 4
jmp     short loc_3ACCD

loc_3AC8A:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_2F677
push    [bp+arg_0]
mov     ax, 8013h
push    ax
mov     ax, 4
push    ax
call    sub_2F19D
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     ax, 0CBh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    [bp+var_2]
push    [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3C214
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]

loc_3ACCD:
mov     sp, bp
pop     bp
retf    6
sub_3AC22 endp



; Attributes: bp-based frame

sub_3ACD3 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= dword ptr  10h
arg_E= dword ptr  14h

push    bp
mov     bp, sp
push    si
push    word ptr [bp+arg_E+2]
push    word ptr [bp+arg_E]
push    [bp+arg_0]
call    sub_2CC7D
mov     word ptr [bp+arg_E+2], dx
mov     word ptr [bp+arg_E], ax
les     bx, [bp+arg_E]
cmp     byte ptr es:[bx+4], 0Ah
jz      short loc_3AD11
mov     bx, ax
mov     al, es:[bx+4]
cbw
mov     si, ax
or      si, si
jnz     short loc_3AD05
mov     si, 0Bh

loc_3AD05:
push    si
mov     ax, 0Ah
push    ax
xor     ax, ax
push    ax
push    cs
call    near ptr sub_391A9

loc_3AD11:
push    [bp+arg_8]
push    [bp+arg_6]
call    sub_2DD94
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_2DDC9
push    word ptr [bp+arg_E+2]
push    word ptr [bp+arg_E]
call    sub_2F677
push    word ptr [bp+arg_A+2]
push    word ptr [bp+arg_A]
les     bx, [bp+arg_E]
push    word ptr es:[bx+0Ah]
call    sub_2CC7D
mov     word ptr [bp+arg_A+2], dx
mov     word ptr [bp+arg_A], ax
les     bx, [bp+arg_A]
cmp     byte ptr es:[bx+4], 0Ah
jz      short loc_3AD81
mov     bx, ax
mov     al, es:[bx+4]
cbw
mov     si, ax
or      si, si
jnz     short loc_3AD64
mov     si, 0Bh

loc_3AD64:
mov     ax, 0Ah
push    ax
call    sub_2F2D7
push    si
mov     ax, 0Ah
push    ax
xor     ax, ax
push    ax
push    cs
call    near ptr sub_391A9
les     bx, [bp+arg_A]
mov     byte ptr es:[bx+4], 0Ah

loc_3AD81:
mov     dx, word ptr [bp+arg_A+2]
mov     ax, word ptr [bp+arg_A]
pop     si
pop     bp
retf    12h
sub_3ACD3 endp



; Attributes: bp-based frame

sub_3AD8C proc far

var_C= dword ptr -0Ch
var_8= byte ptr -8
var_2= byte ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    ds
mov     ax, 7B53h
push    ax
call    sub_3B1BA
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
dec     ax              ; switch 8 cases
cmp     ax, 7
jbe     short loc_3ADAD
jmp     def_3ADB1       ; jumptable 0003ADB1 default case, cases 2,4-6

loc_3ADAD:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3ADB1[bx] ; switch jump
jpt_3ADB1 dw offset loc_3AE48 ; jump table for switch statement
dw offset def_3ADB1
dw offset loc_3ADC6
dw offset def_3ADB1
dw offset def_3ADB1
dw offset def_3ADB1
dw offset loc_3AE1A
dw offset loc_3AE1A

loc_3ADC6:              ; jumptable 0003ADB1 case 3
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
call    sub_42E93
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_2]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_3AE0E

loc_3ADEA:
mov     ax, 24h ; '$'
push    ax
mov     ax, 1
push    ax
les     bx, [bp+var_C]
push    word ptr es:[bx]
call    sub_3D081
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
sub     word ptr [bp+var_C], 2

loc_3AE0E:
mov     dx, ss
lea     ax, [bp+var_8]
cmp     ax, word ptr [bp+var_C]
jbe     short loc_3ADEA
jmp     short def_3ADB1 ; jumptable 0003ADB1 default case, cases 2,4-6

loc_3AE1A:              ; jumptable 0003ADB1 cases 7,8
les     bx, [bp+arg_0]
add     word ptr es:[bx+0Ah], 8
mov     byte ptr es:[bx+1], 3
mov     si, 3
jmp     short loc_3AE42

loc_3AE2C:
les     bx, [bp+arg_0]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_0+2]
push    bx
call    sub_3CF3D
dec     si

loc_3AE42:
or      si, si
jge     short loc_3AE2C
jmp     short def_3ADB1 ; jumptable 0003ADB1 default case, cases 2,4-6

loc_3AE48:              ; jumptable 0003ADB1 case 1
les     bx, [bp+arg_0]
add     word ptr es:[bx+0Ah], 8
mov     byte ptr es:[bx+1], 3
push    word ptr [bp+arg_0+2]
push    bx
push    cs
call    near ptr sub_3961B
mov     si, 3
jmp     short loc_3AE78

loc_3AE62:
les     bx, [bp+arg_0]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_0+2]
push    bx
call    sub_3CF3D
dec     si

loc_3AE78:
or      si, si
jge     short loc_3AE62

def_3ADB1:              ; jumptable 0003ADB1 default case, cases 2,4-6
pop     si
mov     sp, bp
pop     bp
retf    4
sub_3AD8C endp



; Attributes: bp-based frame

sub_3AE83 proc far

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= byte ptr -8
var_2= byte ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 10h
push    si
push    ds
mov     ax, 7B53h
push    ax
call    sub_3B1BA
les     bx, [bp+arg_4]
add     word ptr es:[bx+0Ah], 8
mov     byte ptr es:[bx+1], 3
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
dec     ax              ; switch 8 cases
cmp     ax, 7
jbe     short loc_3AEB1
jmp     def_3AEB5       ; jumptable 0003AEB5 default case, cases 2,4-6

loc_3AEB1:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3AEB5[bx] ; switch jump
jpt_3AEB5 dw offset loc_3AF99 ; jump table for switch statement
dw offset def_3AEB5
dw offset loc_3AECA
dw offset def_3AEB5
dw offset def_3AEB5
dw offset def_3AEB5
dw offset loc_3AF24
dw offset loc_3AF24

loc_3AECA:              ; jumptable 0003AEB5 case 3
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
call    sub_42E93
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_2]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    cs
call    near ptr sub_3961B
jmp     short loc_3AF17

loc_3AEF8:
les     bx, [bp+arg_4]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+arg_4+2]
push    bx
les     bx, [bp+var_C]
push    word ptr es:[bx]
call    sub_3D0E4
sub     word ptr [bp+var_C], 2

loc_3AF17:
mov     dx, ss
lea     ax, [bp+var_8]
cmp     ax, word ptr [bp+var_C]
jbe     short loc_3AEF8
jmp     def_3AEB5       ; jumptable 0003AEB5 default case, cases 2,4-6

loc_3AF24:              ; jumptable 0003AEB5 cases 7,8
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    cs
call    near ptr sub_3961B
mov     ax, 8012h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     [bp+var_E], dx
mov     [bp+var_10], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_0]
add     word ptr es:[bx+0Ah], 8
mov     byte ptr es:[bx+1], 3
mov     si, 3
jmp     short loc_3AF92

loc_3AF5B:
les     bx, [bp+arg_0]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 24h ; '$'
push    ax
push    [bp+var_E]
push    [bp+var_10]
push    word ptr [bp+arg_0+2]
push    bx
call    sub_3D0C3
les     bx, [bp+arg_4]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+arg_4+2]
push    bx
push    [bp+var_E]
push    [bp+var_10]
call    sub_3D0C3
dec     si

loc_3AF92:
or      si, si
jge     short loc_3AF5B
jmp     def_3AEB5       ; jumptable 0003AEB5 default case, cases 2,4-6

loc_3AF99:              ; jumptable 0003AEB5 case 1
mov     ax, 8012h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     [bp+var_E], dx
mov     [bp+var_10], ax
les     bx, [bp+arg_0]
add     word ptr es:[bx+0Ah], 8
mov     byte ptr es:[bx+1], 3
push    word ptr [bp+arg_0+2]
push    bx
push    cs
call    near ptr sub_39B68
or      ax, ax
jz      short loc_3AFD2
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    cs
call    near ptr sub_3961B
jmp     short loc_3AFDC

loc_3AFD2:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    cs
call    near ptr sub_3961B

loc_3AFDC:
mov     si, 3
jmp     short loc_3B018

loc_3AFE1:
les     bx, [bp+arg_0]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 24h ; '$'
push    ax
push    [bp+var_E]
push    [bp+var_10]
push    word ptr [bp+arg_0+2]
push    bx
call    sub_3D0C3
les     bx, [bp+arg_4]
sub     word ptr es:[bx+0Ah], 2
mov     ax, 24h ; '$'
push    ax
push    word ptr [bp+arg_4+2]
push    bx
push    [bp+var_E]
push    [bp+var_10]
call    sub_3D0C3
dec     si

loc_3B018:
or      si, si
jge     short loc_3AFE1
push    [bp+var_E]
push    [bp+var_10]
call    sub_2F677

def_3AEB5:              ; jumptable 0003AEB5 default case, cases 2,4-6
pop     si
mov     sp, bp
pop     bp
retf    8
sub_3AE83 endp



; Attributes: bp-based frame

sub_3B02E proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     [bp+var_2], es
mov     [bp+var_4], bx
cmp     word ptr es:[bx+0Ah], 0Ah
jb      short loc_3B056
cmp     word ptr es:[bx+0Ah], 0Dh
ja      short loc_3B056
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 6

loc_3B056:
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+0Ah], 6
jz      short loc_3B067
cmp     word ptr es:[bx+0Ah], 5
jnz     short loc_3B06E

loc_3B067:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 5

loc_3B06E:
mov     sp, bp
pop     bp
retf    4
sub_3B02E endp



; Attributes: bp-based frame

sub_3B074 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
xor     si, si
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_3B0BA
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Eh ; '.'
jnz     short loc_3B091
mov     byte ptr es:[bx], 18h
jmp     short loc_3B0BA

loc_3B091:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Fh ; '/'
jnz     short loc_3B0A0
mov     byte ptr es:[bx], 19h
jmp     short loc_3B0BA

loc_3B0A0:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 36h ; '6'
jnz     short loc_3B0BA
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 2
jz      short loc_3B0BA
mov     si, 1

loc_3B0BA:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_3B0D1
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jl      short loc_3B0EB
cmp     byte ptr es:[bx], 9
jg      short loc_3B0EB

loc_3B0D1:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677

loc_3B0DC:
or      si, si
jz      short loc_3B13F
mov     ax, 13h
push    ax
call    sub_3CF03
jmp     short loc_3B13F

loc_3B0EB:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
push    ax
call    sub_395E5
or      ax, ax
jnz     short loc_3B120
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_3B074
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Dh ; '-'
jz      short loc_3B0DC
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_3B074
jmp     short loc_3B0DC

loc_3B120:
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 0FFFFh
push    ax
call    sub_322DA
or      ax, ax
jz      short loc_3B135
jmp     loc_3B0BA

loc_3B135:
xor     ax, ax
push    ax
call    sub_3129B
inc     sp
inc     sp

loc_3B13F:
pop     si
pop     bp
retf    4
sub_3B074 endp



; Attributes: bp-based frame

sub_3B144 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
cmp     ax, 6
jnz     short loc_3B16A
mov     ax, 8
push    ax
xor     ax, ax
push    ax
call    sub_2A52D
jmp     short loc_3B171

loc_3B16A:
mov     dx, ds:0BD80h
mov     ax, ds:0BD7Eh

loc_3B171:
pop     bp
retf    4
sub_3B144 endp



; Attributes: bp-based frame

sub_3B175 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
cmp     word ptr ds:0BFDEh, 3
jnz     short loc_3B189
push    [bp+arg_0]
call    sub_3780F
jmp     short loc_3B190

loc_3B189:
push    [bp+arg_0]
call    dword ptr ds:0C01Ch

loc_3B190:
pop     bp
retf    2
sub_3B175 endp



; Attributes: bp-based frame

sub_3B194 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
cmp     [bp+arg_0], 5
jnz     short loc_3B1AB
cmp     byte ptr ds:0BF23h, 1
jge     short loc_3B1AB
mov     byte ptr ds:0BF23h, 1
jmp     short loc_3B1B6

loc_3B1AB:
cmp     [bp+arg_0], 6
jnz     short loc_3B1B6
mov     byte ptr ds:0BF23h, 2

loc_3B1B6:
pop     bp
retf    2
sub_3B194 endp



; Attributes: bp-based frame

sub_3B1BA proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_2A9CF
add     ax, 0Ah
push    dx
push    ax
mov     ax, 2
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
cmp     byte ptr ds:22B3h, 0
jz      short loc_3B1EF
mov     ax, 11h
jmp     short loc_3B1F2

loc_3B1EF:
mov     ax, 9

loc_3B1F2:
push    ax
call    sub_2A5CF
push    dx
push    ax
cmp     byte ptr ds:22B3h, 0
jz      short loc_3B206
mov     ax, 80h
jmp     short loc_3B209

loc_3B206:
mov     ax, 180h

loc_3B209:
push    ax
call    sub_1F1E6
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     word ptr es:[bx+10h], 1
mov     sp, bp
pop     bp
retf    4
sub_3B1BA endp

push    bp
mov     bp, sp
sub     sp, 4
push    word ptr [bp+8]
push    word ptr [bp+6]
xor     ax, ax
push    ax
call    sub_2A9CF
add     ax, 0Ah
push    dx
push    ax
mov     ax, 2
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, 80h
push    ax
call    sub_1F1E6
mov     [bp-2], dx
mov     [bp-4], ax
les     bx, [bp-4]
mov     word ptr es:[bx+10h], 1
mov     sp, bp
pop     bp
retf    4


; Attributes: bp-based frame

sub_3B267 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 0Ch
cmp     byte ptr ds:22B1h, 5
jz      short loc_3B293
mov     ax, ds:0C05Ch
or      ax, ds:0C05Eh
jz      short loc_3B293
push    word ptr ds:0C05Eh
push    word ptr ds:0C05Ch
push    ds
mov     ax, 7B5Ah
push    ax
call    sub_46DF5
or      ax, ax
jz      short loc_3B2E0

loc_3B293:
cmp     byte ptr ds:0BE05h, 0
jnz     short loc_3B2B0
mov     ax, ds:0BDC9h
mov     ds:0BE07h, ax
call    dword ptr ds:0C048h
mov     ax, 2
push    ax
call    dword ptr ds:0BFF0h
call    dword ptr ds:0C028h

loc_3B2B0:
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    ds
mov     ax, 67D8h
push    ax
call    sub_299B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, ds:0BE07h
les     bx, [bp+var_4]
mov     es:[bx+0Ah], ax
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+2], 0
jmp     short loc_3B340

loc_3B2E0:
push    ds
mov     ax, 7B61h
push    ax
xor     ax, ax
push    ax
call    sub_2A9CF
add     ax, 0Ah
mov     [bp+var_A], dx
mov     [bp+var_C], ax
push    dx
push    ax
mov     ax, 2
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
mov     ax, 80h
push    ax
call    sub_1F1E6
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     byte ptr es:[bx+12h], 2
mov     bx, ax
mov     word ptr es:[bx+10h], 1
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    dx
push    ax
call    sub_299B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     byte ptr es:[bx+4], 0

loc_3B340:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
mov     sp, bp
pop     bp
retf
sub_3B267 endp

seg037 ends


; Segment type: Pure code
seg038 segment byte public 'CODE' use16
assume cs:seg038
;org 0Ah
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_3B34A proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+4], 12h
jz      short loc_3B35C
xor     ax, ax
jmp     short loc_3B378

loc_3B35C:
les     bx, [bp+arg_0]
les     bx, es:[bx+8]
mov     si, es:[bx+10h]
cmp     si, 4
jg      short loc_3B371
cmp     si, 3
jnz     short loc_3B376

loc_3B371:
mov     ax, 1
jmp     short loc_3B378

loc_3B376:
xor     ax, ax

loc_3B378:
pop     si
pop     bp
retf    4
sub_3B34A endp




sub_3B37D proc far
push    si
mov     ax, 9Eh
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_3B389:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_3B39B
call    sub_2B0D7
mov     si, ax
jmp     short loc_3B3AA

loc_3B39B:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_3B3AA:
cmp     si, 0Dh
jz      short loc_3B417
cmp     si, 3Bh ; ';'
jz      short loc_3B417
cmp     si, 27h ; '''
jnz     short loc_3B3E1

loc_3B3B9:
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_3B3CB
call    sub_2B0D7
mov     si, ax
jmp     short loc_3B3DA

loc_3B3CB:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0
mov     si, ax

loc_3B3DA:
cmp     si, 27h ; '''
jnz     short loc_3B3B9
jmp     short loc_3B389

loc_3B3E1:
cmp     si, 2Fh ; '/'
jnz     short loc_3B389
mov     ax, ds:0BF6Eh
cmp     ax, ds:0BF66h
jb      short loc_3B3F6
call    sub_2B0D7
jmp     short loc_3B403

loc_3B3F6:
les     bx, ds:0BF6Eh
inc     word ptr ds:0BF6Eh
mov     al, es:[bx]
mov     ah, 0

loc_3B403:
cmp     ax, 2Ah ; '*'
jnz     short loc_3B410
call    sub_2B687
jmp     loc_3B389

loc_3B410:
dec     word ptr ds:0BF6Eh
jmp     loc_3B389

loc_3B417:
pop     si
retf
sub_3B37D endp

seg038 ends


; Segment type: Pure code
seg039 segment byte public 'CODE' use16
assume cs:seg039
;org 9
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_3B419 proc far
call    sub_3C0B0
call    dword ptr ds:0C028h
push    word ptr ds:0C08Ah
push    word ptr ds:0C088h
call    sub_2E282
push    word ptr ds:0BEFDh
push    word ptr ds:0BEFBh
call    dword ptr ds:0BFF8h
cmp     byte ptr ds:22C7h, 0
jz      short loc_3B44A
push    ds
mov     ax, 0BEE6h
push    ax
call    sub_3BD5C

loc_3B44A:
push    ds
mov     ax, 0BEE6h
push    ax
xor     ax, ax
push    ax
call    sub_3B97A
inc     ax
and     ax, 0FFFEh
mov     ds:0BF0Dh, ax
push    ds
mov     ax, 0BEE6h
push    ax
les     bx, ds:0BEFBh
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_3BA3E
mov     ds:0BF15h, ax
mov     al, ds:0BEFAh
cmp     al, ds:0BF23h
jle     short loc_3B482
mov     al, ds:0BEFAh
mov     ds:0BF23h, al

loc_3B482:
mov     word ptr ds:0BF17h, 0
cmp     byte ptr ds:22C7h, 0
jz      short loc_3B4A1
mov     ax, 5
push    ax
call    sub_2F2B5
mov     ax, 6
push    ax
call    sub_2F2B5

loc_3B4A1:
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 3
jz      short loc_3B4B0
jmp     loc_3B569

loc_3B4B0:
mov     byte ptr ds:0BF24h, 8
mov     word ptr ds:0BF17h, 12h
mov     byte ptr ds:0BF23h, 2
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 3
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 2
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Ah
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 5
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 6
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 18h
push    ax
call    sub_3CF1E
mov     ax, 18h
push    ax
call    dword ptr ds:0C04Ch
cmp     word ptr ds:0BF0Dh, 0
jnz     short loc_3B552
cmp     word ptr ds:0BF15h, 0
jnz     short loc_3B552
cmp     byte ptr ds:22C6h, 0
jz      short loc_3B563

loc_3B552:
mov     ax, 24h ; '$'
push    ax
mov     ax, 18h
push    ax
mov     ax, 19h
push    ax
call    sub_3CF5C

loc_3B563:
call    sub_3B683
jmp     loc_3B65B

loc_3B569:
mov     al, ds:0BF14h
and     al, 18h
mov     ds:0BF24h, al
cmp     word ptr ds:0BF0Dh, 0
jnz     short loc_3B586
cmp     word ptr ds:0BF15h, 0
jnz     short loc_3B586
cmp     byte ptr ds:22C6h, 0
jz      short loc_3B5E5

loc_3B586:
mov     word ptr ds:0BF17h, 2
cmp     byte ptr ds:22B2h, 0
jz      short loc_3B5C4
cmp     byte ptr ds:22C2h, 0
jnz     short loc_3B5C4
cmp     word ptr ds:0BF0Dh, 0
jbe     short loc_3B5C4
mov     ax, 0C4h
push    ax
xor     dx, dx
mov     ax, 3Eh ; '>'
push    dx
push    ax
push    dx
push    dx
mov     ax, ds:0BF0Dh
xor     dx, dx
push    dx
push    ax
call    sub_3C214
mov     ax, ds:0BF0Dh
neg     ax
mov     ds:0C083h, ax
jmp     short loc_3B5E5

loc_3B5C4:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 18h
push    ax
call    sub_3CF1E
mov     ax, 24h ; '$'
push    ax
mov     ax, 18h
push    ax
mov     ax, 19h
push    ax
call    sub_3CF5C
call    sub_3B683

loc_3B5E5:
cmp     byte ptr ds:0BF23h, 0
jz      short loc_3B5F9
mov     ax, 2Ch ; ','
push    ax
mov     ax, 5
push    ax
call    sub_3CF1E

loc_3B5F9:
cmp     byte ptr ds:0BF23h, 1
jle     short loc_3B60D
mov     ax, 2Ch ; ','
push    ax
mov     ax, 6
push    ax
call    sub_3CF1E

loc_3B60D:
cmp     byte ptr ds:22B1h, 5
jz      short loc_3B61B
test    byte ptr ds:0BF14h, 20h
jz      short loc_3B65B

loc_3B61B:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E
cmp     byte ptr ds:0BE25h, 0
jz      short loc_3B653
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
mov     ax, 1
push    ax
call    dword ptr ds:0C04Ch
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
jmp     short loc_3B65B

loc_3B653:
mov     ax, 1
push    ax
call    dword ptr ds:0C04Ch

loc_3B65B:
call    sub_3B700
les     bx, ds:0BEFBh
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_3BACD
cmp     word ptr ds:0BF17h, 0
jz      short loc_3B67D
les     bx, ds:0BEFBh
or      byte ptr es:[bx+9], 40h

loc_3B67D:
mov     byte ptr ds:0BE25h, 0
retf
sub_3B419 endp




sub_3B683 proc near
cmp     word ptr ds:0BF0Dh, 1
jb      short loc_3B6A5
mov     ax, 30h ; '0'
push    ax
mov     ax, 19h
push    ax
push    word ptr ds:0BF0Dh
call    sub_3D081
mov     ax, ds:0BF0Dh
neg     ax
mov     ds:0C083h, ax
jmp     short locret_3B6AB

loc_3B6A5:
mov     word ptr ds:0C083h, 0

locret_3B6AB:
retn
sub_3B683 endp




sub_3B6AC proc near
cmp     word ptr ds:0BF0Dh, 0
jz      short loc_3B6D8
cmp     byte ptr ds:22B2h, 0
jz      short loc_3B6C5
mov     ax, 3Fh ; '?'
push    ax
call    sub_3CF03
jmp     short locret_3B6FF

loc_3B6C5:
mov     ax, 24h ; '$'
push    ax
mov     ax, 19h
push    ax
mov     ax, 18h
push    ax
call    sub_3CF5C
jmp     short loc_3B6F2

loc_3B6D8:
cmp     word ptr ds:0BF15h, 0
jnz     short loc_3B6F2
cmp     byte ptr ds:22C6h, 0
jnz     short loc_3B6F2
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 3
jnz     short locret_3B6FF

loc_3B6F2:
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 18h
push    ax
call    sub_3CF1E

locret_3B6FF:
retn
sub_3B6AC endp



; Attributes: bp-based frame

sub_3B700 proc near

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 0Ch
cmp     byte ptr ds:22BFh, 0
jnz     short loc_3B710
jmp     loc_3B82A

loc_3B710:
call    sub_29B97
mov     [bp+var_A], dx
mov     [bp+var_C], ax
cmp     word ptr ds:0BF0Dh, 0C8h
jbe     short loc_3B72E
call    sub_29B97
mov     [bp+var_6], dx
mov     [bp+var_8], ax

loc_3B72E:
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr ds:0BF90h
push    word ptr ds:0BF8Eh
call    sub_299B0
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, ds:0BF8Eh
mov     word ptr es:[bx+10h], 1
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2CCC0
cmp     byte ptr ds:22B1h, 5
jnz     short loc_3B798
mov     ax, 0E7h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 1
push    dx
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3C214
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 1
push    ax
call    sub_3CF5C
les     bx, [bp+var_4]
mov     byte ptr es:[bx+4], 0Ah

loc_3B798:
cmp     word ptr ds:0BF0Dh, 0C8h
jbe     short loc_3B7C3
mov     ax, 33h ; '3'
push    ax
mov     ax, 18h
push    ax
mov     ax, 19h
push    ax
call    sub_3CF5C
mov     ax, 25h ; '%'
push    ax
mov     ax, 6
push    ax
push    [bp+var_6]
push    [bp+var_8]
call    dword ptr ds:0C03Ch

loc_3B7C3:
mov     ax, 33h ; '3'
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 19h
push    ax
call    sub_3D0A2
cmp     byte ptr ds:0BE1Bh, 0
jz      short loc_3B7F1
mov     ax, 24h ; '$'
push    ax
mov     ax, 6
push    ax
push    [bp+var_A]
push    [bp+var_C]
call    dword ptr ds:0C03Ch
jmp     short loc_3B803

loc_3B7F1:
mov     ax, 25h ; '%'
push    ax
mov     ax, 6
push    ax
push    [bp+var_A]
push    [bp+var_C]
call    dword ptr ds:0C03Ch

loc_3B803:
cmp     word ptr ds:0BF0Dh, 0C8h
jbe     short loc_3B816
push    [bp+var_6]
push    [bp+var_8]
call    sub_2DDC9

loc_3B816:
push    ds
mov     ax, 7C36h
push    ax
call    dword ptr ds:0C02Ch
push    [bp+var_A]
push    [bp+var_C]
call    sub_2DDC9

loc_3B82A:
mov     sp, bp
pop     bp
retn
sub_3B700 endp



; Attributes: bp-based frame

sub_3B82E proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_2E282
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 3
jnz     short loc_3B8C0
call    sub_3B6AC
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 6
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 5
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 0Ah
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 2
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 3
push    ax
call    sub_3CF1E
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
mov     ax, 46h ; 'F'
push    ax
call    sub_3CF03
jmp     loc_3B93E

loc_3B8C0:
cmp     byte ptr ds:22B1h, 5
jz      short loc_3B8CE
test    byte ptr ds:0BF14h, 20h
jz      short loc_3B8DB

loc_3B8CE:
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E

loc_3B8DB:
cmp     byte ptr ds:0BF23h, 1
jle     short loc_3B8EF
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 6
push    ax
call    sub_3CF1E

loc_3B8EF:
cmp     byte ptr ds:0BF23h, 0
jz      short loc_3B903
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 5
push    ax
call    sub_3CF1E

loc_3B903:
call    sub_3B6AC
test    byte ptr ds:0BF14h, 8
jz      short loc_3B912
mov     si, 3Dh ; '='
jmp     short loc_3B915

loc_3B912:
mov     si, 25h ; '%'

loc_3B915:
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 1
jnz     short loc_3B938
cmp     word ptr ds:0BF15h, 0
jz      short loc_3B938
push    si
mov     ax, 0Ch
push    ax
push    word ptr ds:0BF15h
call    sub_3D081
jmp     short loc_3B93E

loc_3B938:
push    si
call    sub_3CF03

loc_3B93E:
mov     ax, 6
push    ax
call    sub_2F312
mov     ax, 5
push    ax
call    sub_2F312
cmp     byte ptr ds:22C0h, 0
jz      short loc_3B967
les     bx, [bp+arg_4]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_2E323

loc_3B967:
call    sub_2DE99
call    sub_2DCA8
call    dword ptr ds:0BFECh
pop     si
pop     bp
retf    8
sub_3B82E endp



; Attributes: bp-based frame

sub_3B97A proc near

var_A= dword ptr -0Ah
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     si, [bp+arg_0]
les     bx, [bp+arg_2]
les     bx, es:[bx+4]
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
jmp     short loc_3B9EC

loc_3B994:
les     bx, [bp+var_A]
cmp     byte ptr es:[bx+8], 5
jnz     short loc_3B9DF
cmp     word ptr es:[bx+10h], 0
jz      short loc_3B9DF
test    byte ptr es:[bx+9], 80h
jnz     short loc_3B9DF
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
mov     dx, si
sub     dx, ax
les     bx, [bp+var_A]
mov     es:[bx+0Ah], dx
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 2
jle     short loc_3B9D8
les     bx, [bp+var_A]
and     word ptr es:[bx+0Ah], 0FFFEh

loc_3B9D8:
les     bx, [bp+var_A]
mov     si, es:[bx+0Ah]

loc_3B9DF:
les     bx, [bp+var_A]
les     bx, es:[bx+4]
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx

loc_3B9EC:
mov     ax, word ptr [bp+var_A]
or      ax, word ptr [bp+var_A+2]
jnz     short loc_3B994
mov     ax, si
neg     ax
mov     [bp+var_2], ax
les     bx, [bp+arg_2]
les     bx, es:[bx+0Ch]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
jmp     short loc_3BA2B

loc_3BA0A:
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    si
call    sub_3B97A
mov     di, ax
cmp     di, [bp+var_2]
jbe     short loc_3BA1E
mov     [bp+var_2], di

loc_3BA1E:
les     bx, [bp+var_6]
les     bx, es:[bx+10h]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx

loc_3BA2B:
mov     ax, word ptr [bp+var_6]
or      ax, word ptr [bp+var_6+2]
jnz     short loc_3BA0A
mov     ax, [bp+var_2]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3B97A endp



; Attributes: bp-based frame

sub_3BA3E proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
xor     si, si
les     bx, [bp+arg_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_3BABB

loc_3BA57:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+8], 6
jnz     short loc_3BAAE
les     bx, es:[bx+0Ch]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     di, [bx+7BA2h]
or      di, di
jz      short loc_3BA95
les     bx, [bp+arg_0]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_3BA95
mov     bx, di
shl     bx, 1
mov     ax, [bx+7BE1h]
add     si, ax
jmp     short loc_3BAA7

loc_3BA95:
les     bx, [bp+var_8]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
add     si, ax

loc_3BAA7:
test    si, 1
jz      short loc_3BAAE
inc     si

loc_3BAAE:
les     bx, [bp+var_8]
les     bx, es:[bx+4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_3BABB:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_3BA57
mov     ax, si
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_3BA3E endp



; Attributes: bp-based frame

sub_3BACD proc near

var_12= dword ptr -12h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 3
jnz     short loc_3BAE8
mov     [bp+var_A], 0
jmp     short loc_3BB01

loc_3BAE8:
test    byte ptr ds:0BF14h, 8
jz      short loc_3BAF6
mov     [bp+var_A], 4
jmp     short loc_3BAFB

loc_3BAF6:
mov     [bp+var_A], 2

loc_3BAFB:
mov     ax, ds:0BF17h
add     [bp+var_A], ax

loc_3BB01:
mov     ax, [bp+var_A]
mov     ds:0BF92h, ax
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 1
jz      short loc_3BB19
mov     si, ds:0BF15h
jmp     short loc_3BB1B

loc_3BB19:
xor     si, si

loc_3BB1B:
les     bx, ds:0BEEAh
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx
jmp     loc_3BC02

loc_3BB28:
les     bx, [bp+var_12]
cmp     byte ptr es:[bx+8], 6
jz      short loc_3BB35
jmp     loc_3BBF5

loc_3BB35:
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 1
jz      short loc_3BB9C
les     bx, es:[bx+0Ch]
mov     [bp+var_C], es
mov     [bp+var_E], bx
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     di, [bx+7BA2h]
or      di, di
jz      short loc_3BB75
les     bx, [bp+arg_0]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_3BB75
mov     bx, di
shl     bx, 1
mov     ax, [bx+7BE1h]
sub     si, ax
jmp     short loc_3BB87

loc_3BB75:
les     bx, [bp+var_12]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
sub     si, ax

loc_3BB87:
test    si, 1
jz      short loc_3BB8E
dec     si

loc_3BB8E:
mov     ax, si
add     ax, [bp+var_A]
les     bx, [bp+var_12]
mov     es:[bx+0Ah], ax
jmp     short loc_3BBF5

loc_3BB9C:
mov     ax, si
add     ax, [bp+var_A]
les     bx, [bp+var_12]
mov     es:[bx+0Ah], ax
les     bx, es:[bx+0Ch]
mov     [bp+var_C], es
mov     [bp+var_E], bx
mov     al, es:[bx+4]
cbw
mov     bx, ax
shl     bx, 1
mov     di, [bx+7BA2h]
or      di, di
jz      short loc_3BBDC
les     bx, [bp+arg_0]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jnz     short loc_3BBDC
mov     bx, di
shl     bx, 1
mov     ax, [bx+7BE1h]
add     si, ax
jmp     short loc_3BBEE

loc_3BBDC:
les     bx, [bp+var_12]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
call    sub_2A8BF
add     si, ax

loc_3BBEE:
test    si, 1
jz      short loc_3BBF5
inc     si

loc_3BBF5:
les     bx, [bp+var_12]
les     bx, es:[bx+4]
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx

loc_3BC02:
mov     ax, word ptr [bp+var_12]
or      ax, word ptr [bp+var_12+2]
jz      short loc_3BC0D
jmp     loc_3BB28

loc_3BC0D:
les     bx, ds:0BEEAh
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx
cmp     byte ptr ds:22C0h, 0
jnz     short loc_3BC21
jmp     loc_3BD49

loc_3BC21:
push    ds
mov     ax, 0BEE6h
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    dword ptr ds:0C020h
jmp     loc_3BD49

loc_3BC33:
les     bx, [bp+var_12]
cmp     byte ptr es:[bx+8], 6
jz      short loc_3BC40
jmp     loc_3BD3C

loc_3BC40:
test    byte ptr es:[bx+9], 80h
jz      short loc_3BC8F
mov     al, 8
push    ax
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_298D7
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+2], 0
mov     ax, 24h ; '$'
push    ax
les     bx, [bp+var_12]
push    word ptr es:[bx+10h]
call    sub_3A41E
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3CF7D
jmp     loc_3BD3C

loc_3BC8F:
les     bx, [bp+var_12]
les     bx, es:[bx+0Ch]
cmp     byte ptr es:[bx+4], 0Ch
jz      short loc_3BCA0
jmp     loc_3BD3C

loc_3BCA0:
les     bx, [bp+arg_0]
mov     ax, es:[bx+8]
or      ax, es:[bx+0Ah]
jz      short loc_3BCB0
jmp     loc_3BD3C

loc_3BCB0:
mov     al, 8
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
les     bx, [bp+var_12]
push    word ptr es:[bx+0Ah]
call    sub_298D7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+2], 0
mov     bx, ax
mov     byte ptr es:[bx+1], 0Dh
mov     al, 8
push    ax
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
les     bx, [bp+var_12]
push    word ptr es:[bx+0Ah]
call    sub_298D7
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
les     bx, [bp+var_8]
mov     word ptr es:[bx+4], 0
mov     word ptr es:[bx+2], 0
mov     bx, ax
mov     byte ptr es:[bx+1], 0Ch
xor     ax, ax
push    ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CF3D
mov     ax, 17h
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_3CF3D
mov     ax, 4Eh ; 'N'
push    ax
call    sub_3CF03

loc_3BD3C:
les     bx, [bp+var_12]
les     bx, es:[bx+4]
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx

loc_3BD49:
mov     ax, word ptr [bp+var_12]
or      ax, word ptr [bp+var_12+2]
jz      short loc_3BD54
jmp     loc_3BC33

loc_3BD54:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_3BACD endp



; Attributes: bp-based frame

sub_3BD5C proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    si
mov     al, ds:0BF23h
cbw
mov     si, ax
inc     si
jmp     short loc_3BD78

loc_3BD69:
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3BD82
or      ax, ax
jz      short loc_3BD7D
inc     si

loc_3BD78:
cmp     si, 2
jle     short loc_3BD69

loc_3BD7D:
pop     si
pop     bp
retn    4
sub_3BD5C endp



; Attributes: bp-based frame

sub_3BD82 proc near

var_E= dword ptr -0Eh
var_A= dword ptr -0Ah
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Eh
push    si
xor     si, si

loc_3BD8B:
mov     [bp+var_2], 1
mov     word ptr [bp+var_6+2], 0
mov     word ptr [bp+var_6], 0
mov     word ptr [bp+var_A+2], 0
mov     word ptr [bp+var_A], 0
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_2]
push    ax
push    ss
lea     ax, [bp+var_6]
push    ax
push    ss
lea     ax, [bp+var_A]
push    ax
call    sub_3BE1D
mov     ax, word ptr [bp+var_6]
or      ax, word ptr [bp+var_6+2]
jz      short loc_3BE14
les     bx, [bp+var_6]
or      byte ptr es:[bx+9], 80h
mov     ax, [bp+arg_4]
dec     ax
mov     es:[bx+10h], ax
les     bx, [bp+var_A]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
jmp     short loc_3BDF5

loc_3BDE2:
mov     al, byte ptr [bp+arg_4]
les     bx, [bp+var_E]
mov     es:[bx+14h], al
les     bx, es:[bx]
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx

loc_3BDF5:
mov     ax, word ptr [bp+var_E]
or      ax, word ptr [bp+var_E+2]
jnz     short loc_3BDE2
les     bx, [bp+var_A]
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    [bp+arg_4]
call    sub_3BED8
mov     si, 1
jmp     loc_3BD8B

loc_3BE14:
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3BD82 endp



; Attributes: bp-based frame

sub_3BE1D proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= dword ptr  10h
arg_10= word ptr  14h

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_10]
les     bx, [bp+arg_C]
mov     al, es:[bx+14h]
cbw
cmp     ax, di
jge     short loc_3BE90
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_3BE88

loc_3BE40:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3BF0E
mov     si, ax
les     bx, [bp+arg_8]
mov     ax, es:[bx]
cmp     ax, si
ja      short loc_3BE7B
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, word ptr [bp+arg_C+2]
mov     ax, word ptr [bp+arg_C]
les     bx, [bp+arg_0]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+arg_8]
mov     es:[bx], si

loc_3BE7B:
les     bx, [bp+var_4]
les     bx, es:[bx+4]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_3BE88:
mov     ax, word ptr [bp+var_4]
or      ax, word ptr [bp+var_4+2]
jnz     short loc_3BE40

loc_3BE90:
les     bx, [bp+arg_C]
les     bx, es:[bx+0Ch]
mov     word ptr [bp+arg_C+2], es
mov     word ptr [bp+arg_C], bx
jmp     short loc_3BEC8

loc_3BE9F:
push    di
push    word ptr [bp+arg_C+2]
push    word ptr [bp+arg_C]
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3BE1D
les     bx, [bp+arg_C]
les     bx, es:[bx+10h]
mov     word ptr [bp+arg_C+2], es
mov     word ptr [bp+arg_C], bx

loc_3BEC8:
mov     ax, word ptr [bp+arg_C]
or      ax, word ptr [bp+arg_C+2]
jnz     short loc_3BE9F
pop     di
pop     si
mov     sp, bp
pop     bp
retn    12h
sub_3BE1D endp



; Attributes: bp-based frame

sub_3BED8 proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
jmp     short loc_3BF02

loc_3BEDD:
mov     al, byte ptr [bp+arg_0]
les     bx, [bp+arg_2]
mov     es:[bx+14h], al
push    word ptr es:[bx+0Eh]
push    word ptr es:[bx+0Ch]
push    [bp+arg_0]
call    sub_3BED8
les     bx, [bp+arg_2]
les     bx, es:[bx+10h]
mov     word ptr [bp+arg_2+2], es
mov     word ptr [bp+arg_2], bx

loc_3BF02:
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jnz     short loc_3BEDD
pop     bp
retn    6
sub_3BED8 endp



; Attributes: bp-based frame

sub_3BF0E proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+8], 4
jnz     short loc_3BF23
jmp     loc_3BFBF

loc_3BF23:
cmp     byte ptr es:[bx+8], 2
jnz     short loc_3BF2D
jmp     loc_3BFBF

loc_3BF2D:
test    byte ptr es:[bx+9], 88h
jz      short loc_3BF37
jmp     loc_3BFBF

loc_3BF37:
les     bx, es:[bx+0Ch]
mov     [bp+var_2], es
mov     [bp+var_4], bx
test    byte ptr es:[bx+5], 80h
jz      short loc_3BF4B
jmp     loc_3BFBF

loc_3BF4B:
mov     al, es:[bx+4]
cbw
cmp     ax, 5
jz      short loc_3BF61
cmp     ax, 6
jz      short loc_3BF61
cmp     ax, 7
jz      short loc_3BF61
jmp     short loc_3BFBF

loc_3BF61:
les     bx, [bp+arg_0]
test    byte ptr es:[bx+9], 40h
jz      short loc_3BF70
mov     si, 8000h
jmp     short loc_3BF8F

loc_3BF70:
cmp     byte ptr ds:22C7h, 2
jz      short loc_3BFBF
mov     al, ds:0BF14h
cbw
and     ax, 7
cmp     ax, 3
jnz     short loc_3BF8D
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+8], 6
jz      short loc_3BFBF

loc_3BF8D:
xor     si, si

loc_3BF8F:
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+10h], 7FFFh
jbe     short loc_3BFA0
add     si, 7FFFh
jmp     short loc_3BFA9

loc_3BFA0:
les     bx, [bp+arg_0]
mov     ax, es:[bx+10h]
add     si, ax

loc_3BFA9:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+8], 6
jnz     short loc_3BFB8
mov     di, 2
jmp     short loc_3BFBB

loc_3BFB8:
mov     di, 1

loc_3BFBB:
cmp     si, di
jnb     short loc_3BFC3

loc_3BFBF:
xor     ax, ax
jmp     short loc_3BFC7

loc_3BFC3:
mov     ax, si
sub     ax, di

loc_3BFC7:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_3BF0E endp



; Attributes: bp-based frame

sub_3BFCF proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si

loc_3BFD3:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 18 cases
cmp     ax, 11h
jbe     short loc_3BFE4
jmp     def_3BFE8       ; jumptable 0003BFE8 default case, cases 5,6,15-17

loc_3BFE4:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3BFE8[bx] ; switch jump
jpt_3BFE8 dw offset loc_3C09C ; jump table for switch statement
dw offset loc_3C09C
dw offset loc_3C09C
dw offset loc_3C09C
dw offset def_3BFE8
dw offset def_3BFE8
dw offset loc_3C09C
dw offset loc_3C097
dw offset loc_3C097
dw offset loc_3C09C
dw offset loc_3C097
dw offset loc_3C011
dw offset loc_3C011
dw offset loc_3C011
dw offset def_3BFE8
dw offset def_3BFE8
dw offset def_3BFE8
dw offset loc_3C017

loc_3C011:              ; jumptable 0003BFE8 cases 12-14
mov     si, 8080h
jmp     def_3BFE8       ; jumptable 0003BFE8 default case, cases 5,6,15-17

loc_3C017:              ; jumptable 0003BFE8 case 18
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
les     bx, es:[bx+8]
mov     si, es:[bx+10h]
cmp     si, 4
jg      short loc_3C03E
cmp     si, 3
jz      short loc_3C03E
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    si
call    sub_3DF73
jmp     short loc_3BFD3

loc_3C03E:
test    byte ptr ds:0BF14h, 8
jz      short loc_3C07A
cmp     word ptr ds:0C072h, 0
jz      short loc_3C069
mov     ax, 0E7h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 2
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3C214
jmp     short loc_3C07A

loc_3C069:
mov     ax, 24h ; '$'
push    ax
mov     ax, 2
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF5C

loc_3C07A:
mov     ax, 0E6h
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
mov     ax, 1
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3C214
jmp     short loc_3C0AB

loc_3C097:              ; jumptable 0003BFE8 cases 8,9,11
mov     si, 16h
jmp     short def_3BFE8 ; jumptable 0003BFE8 default case, cases 5,6,15-17

loc_3C09C:              ; jumptable 0003BFE8 cases 1-4,7,10
mov     si, 1

def_3BFE8:              ; jumptable 0003BFE8 default case, cases 5,6,15-17
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    si
call    sub_2CC7D

loc_3C0AB:
pop     si
pop     bp
retf    4
sub_3BFCF endp

seg039 ends


; Segment type: Pure code
seg040 segment byte public 'CODE' use16
assume cs:seg040
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_3C0B0 proc far
push    si
mov     si, 7C54h
jmp     short loc_3C0C3

loc_3C0B6:
mov     word ptr [si+4], 0
mov     word ptr [si+0Ch], 0
add     si, 14h

loc_3C0C3:
mov     ax, si
mov     dx, ds
mov     bx, 7D44h
mov     cx, ds
cmp     ax, bx
jbe     short loc_3C0B6
mov     word ptr ds:7E24h, 0
mov     word ptr ds:7E2Ch, 0
mov     word ptr ds:7E38h, 0
mov     word ptr ds:7E40h, 0
pop     si
retf
sub_3C0B0 endp



; Attributes: bp-based frame

sub_3C0EA proc far

var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
cmp     [bp+arg_0], 2
jg      short loc_3C10A
cmp     word ptr ds:0C08Ch, 2
jz      short loc_3C10A
mov     [bp+var_2], 1
dec     word ptr ds:0C08Eh
jmp     short loc_3C10F

loc_3C10A:
mov     [bp+var_2], 0

loc_3C10F:
mov     ax, ds:0C08Ch
cmp     ax, ds:7D0Ch
jnz     short loc_3C13A
mov     ax, ds:0C08Eh
cmp     ax, ds:7D0Eh
jnz     short loc_3C13A
mov     dx, ds:0C092h
mov     ax, ds:0C090h
cmp     dx, ds:7D12h
jnz     short loc_3C13A
cmp     ax, ds:7D10h
jnz     short loc_3C13A
mov     word ptr ds:7D0Ch, 0

loc_3C13A:
mov     ax, ds:0C08Ch
cmp     ax, ds:7D14h
jnz     short loc_3C165
mov     ax, ds:0C08Eh
cmp     ax, ds:7D16h
jnz     short loc_3C165
mov     dx, ds:0C092h
mov     ax, ds:0C090h
cmp     dx, ds:7D1Ah
jnz     short loc_3C165
cmp     ax, ds:7D18h
jnz     short loc_3C165
mov     word ptr ds:7D14h, 0

loc_3C165:
cld
mov     ax, ds
mov     es, ax
xor     dl, dl
mov     bx, 7CCCh
mov     si, 7C58h

loc_3C172:
mov     ax, si
mov     di, 0C08Ch
mov     cx, 4
repe cmpsw
mov     si, ax
jnz     short loc_3C182
mov     [si], dl

loc_3C182:
add     si, 8
mov     ax, si
mov     di, 0C08Ch
mov     cx, 4
repe cmpsw
mov     si, ax
jnz     short loc_3C195
mov     [si], dl

loc_3C195:
add     si, 0Ch
cmp     si, bx
jb      short loc_3C172
cmp     [bp+var_2], 0
jz      short loc_3C1AE
mov     [bp+var_2], 0
inc     word ptr ds:0C08Eh
jmp     loc_3C10F

loc_3C1AE:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_3C0EA endp




sub_3C1B6 proc near
push    si
push    di
cld
mov     ax, ds
mov     es, ax
mov     dx, 1
mov     bx, 7CCCh
mov     si, 7C58h

loc_3C1C6:
mov     ax, si
mov     di, 0C08Ch
mov     cx, 4
repe cmpsw
mov     si, ax
jnz     short loc_3C1D6
jmp     short loc_3C1E7

loc_3C1D6:
add     si, 8
mov     ax, si
mov     di, 0C08Ch
mov     cx, 4
repe cmpsw
mov     si, ax
jnz     short loc_3C1EB

loc_3C1E7:
mov     ax, dx
jmp     short loc_3C1F5

loc_3C1EB:
inc     dx
add     si, 0Ch
cmp     si, bx
jb      short loc_3C1C6
xor     ax, ax

loc_3C1F5:
pop     di
pop     si
retn
sub_3C1B6 endp




sub_3C1F8 proc far
mov     word ptr ds:0C08Eh, 0
mov     word ptr ds:0C092h, 0
mov     word ptr ds:0C090h, 0
mov     word ptr ds:0C08Ch, 2
call    sub_3C1B6
retf
sub_3C1F8 endp



; Attributes: bp-based frame

sub_3C214 proc far

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= dword ptr  0Eh
arg_C= word ptr  12h

push    bp
mov     bp, sp
sub     sp, 10h
push    si
push    di
mov     ax, [bp+arg_C]
and     ax, 0C0h
mov     [bp+var_E], ax
mov     ax, [bp+arg_C]
and     ax, 38h
mov     [bp+var_C], ax
mov     di, [bp+arg_C]
and     di, 7
mov     [bp+var_8], 5
cmp     [bp+var_E], 0C0h
jz      short loc_3C29E
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx+1], 2
jg      short loc_3C24F
mov     [bp+var_8], 1

loc_3C24F:
les     bx, [bp+arg_8]
mov     al, es:[bx]
cbw
add     ax, 0FFF3h
mov     dx, 3
mul     dx
mov     bx, ax
add     bx, 7652h
mov     ax, ds
mov     es, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
cmp     [bp+var_E], 40h ; '@'
jnz     short loc_3C27E
mov     al, es:[bx]
cbw
mov     [bp+var_10], ax
jmp     short loc_3C2F0
align 2

loc_3C27E:
cmp     [bp+var_E], 0
jnz     short loc_3C291
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
mov     [bp+var_10], ax
jmp     short loc_3C2F0

loc_3C291:
les     bx, [bp+var_4]
mov     al, es:[bx+2]
cbw
mov     [bp+var_10], ax
jmp     short loc_3C2F0

loc_3C29E:
mov     ax, word ptr [bp+arg_8]
mov     [bp+var_10], ax
cmp     [bp+var_C], 18h
jg      short loc_3C2E0
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
mov     [bp+var_8], ax
cmp     [bp+var_10], 23h ; '#'
jnz     short loc_3C2C9
test    byte ptr es:[bx+3], 8
jz      short loc_3C2C9
mov     [bp+var_8], 13h
jmp     short loc_3C2F0

loc_3C2C9:
cmp     [bp+var_10], 44h ; 'D'
jnz     short loc_3C2F0
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_3C2F0
mov     [bp+var_8], 0Ch
jmp     short loc_3C2F0

loc_3C2E0:
cmp     di, 3
jg      short loc_3C2F0
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     [bp+var_8], ax

loc_3C2F0:
mov     [bp+var_A], 0
cmp     [bp+var_C], 0
jnz     short loc_3C2FE
jmp     loc_3C38E

loc_3C2FE:
cmp     [bp+var_C], 18h
jle     short loc_3C307
jmp     short loc_3C382
db 90h

loc_3C307:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 4
jz      short loc_3C31F
cmp     byte ptr es:[bx], 5
jz      short loc_3C31F
cmp     byte ptr es:[bx], 6
jz      short loc_3C31F
jmp     short loc_3C38E
db 90h

loc_3C31F:
les     bx, [bp+arg_4]
mov     ax, es:[bx+0Ah]
mov     [bp+var_A], ax
cmp     [bp+var_C], 8
jnz     short loc_3C33D
mov     ax, es:[bx+0Ah]
xor     dx, dx
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_3C36F

loc_3C33D:
cmp     [bp+var_C], 18h
jnz     short loc_3C357
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F53C
cwd
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_3C36F

loc_3C357:
cmp     [bp+var_C], 10h
jnz     short loc_3C36F
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F4F2
cwd
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_3C36F:
mov     [bp+var_C], 20h ; ' '
cmp     word ptr [bp+arg_4], 6
jle     short loc_3C388
cmp     word ptr [bp+arg_4], 0Ah
jnz     short loc_3C38E
jmp     short loc_3C388

loc_3C382:
cmp     [bp+var_C], 20h ; ' '
jnz     short loc_3C38E

loc_3C388:
mov     ax, word ptr [bp+arg_4]
mov     [bp+var_A], ax

loc_3C38E:
or      di, di
jnz     short loc_3C395
jmp     loc_3C487

loc_3C395:
cmp     di, 3
jnz     short loc_3C3B0
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_3C3B0
mov     di, 7
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_3C3B0:
cmp     di, 7
jnz     short loc_3C3EE
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_39B68
or      ax, ax
jz      short loc_3C3C7
jmp     loc_3C487

loc_3C3C7:
mov     di, 5
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 11h
jnz     short loc_3C3E1
mov     word ptr [bp+arg_0+2], 0
mov     word ptr [bp+arg_0], 0Ch
jmp     loc_3C487

loc_3C3E1:
mov     word ptr [bp+arg_0+2], 0
mov     word ptr [bp+arg_0], 0Bh
jmp     loc_3C487

loc_3C3EE:
cmp     di, 3
jle     short loc_3C3F6
jmp     loc_3C487

loc_3C3F6:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4
jz      short loc_3C40B
cmp     byte ptr es:[bx], 5
jz      short loc_3C40B
cmp     byte ptr es:[bx], 6
jnz     short loc_3C456

loc_3C40B:
cmp     di, 1
jnz     short loc_3C421
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
xor     dx, dx
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_3C451

loc_3C421:
cmp     di, 3
jnz     short loc_3C43A
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F53C
cwd
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_3C451

loc_3C43A:
cmp     di, 2
jnz     short loc_3C451
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F4F2
cwd
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_3C451:
mov     di, 5
jmp     short loc_3C487

loc_3C456:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3C487
cmp     di, 3
jnz     short loc_3C471
mov     ax, es:[bx+8]
cwd
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_3C484

loc_3C471:
cmp     di, 4
jz      short loc_3C484
les     bx, [bp+arg_0]
mov     ax, es:[bx+6]
cwd
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_3C484:
mov     di, 4

loc_3C487:
cmp     byte ptr ds:22C4h, 0
jnz     short loc_3C491
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C491:
cmp     [bp+var_8], 2
jg      short loc_3C49A
jmp     def_3C4B6       ; jumptable 0003C4B6 default case, cases 37-43,45,46

loc_3C49A:
mov     ax, [bp+var_10]
cmp     ax, 33h ; '3'
jnz     short loc_3C4A5
jmp     loc_3C5FB       ; jumptable 0003C4B6 case 44

loc_3C4A5:
jg      short loc_3C4D9
sub     ax, 24h ; '$'   ; switch 15 cases
cmp     ax, 0Eh
jbe     short loc_3C4B2
jmp     def_3C4B6       ; jumptable 0003C4B6 default case, cases 37-43,45,46

loc_3C4B2:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3C4B6[bx] ; switch jump
jpt_3C4B6 dw offset loc_3C621 ; jump table for switch statement
dw offset def_3C4B6
dw offset def_3C4B6
dw offset def_3C4B6
dw offset def_3C4B6
dw offset def_3C4B6
dw offset def_3C4B6
dw offset def_3C4B6
dw offset loc_3C5FB
dw offset def_3C4B6
dw offset def_3C4B6
dw offset loc_3C621
dw offset loc_3C621
dw offset loc_3C621
dw offset loc_3C621

loc_3C4D9:
cmp     ax, 41h ; 'A'
jz      short loc_3C50E
jg      short loc_3C4FB
cmp     ax, 38h ; '8'
jnz     short loc_3C4E8
jmp     loc_3C621       ; jumptable 0003C4B6 cases 36,47-50

loc_3C4E8:
cmp     ax, 3Ah ; ':'
jnz     short loc_3C4F0
jmp     loc_3C621       ; jumptable 0003C4B6 cases 36,47-50

loc_3C4F0:
cmp     ax, 3Ch ; '<'
jnz     short loc_3C4F8
jmp     loc_3C5FB       ; jumptable 0003C4B6 case 44

loc_3C4F8:              ; jumptable 0003C4B6 default case, cases 37-43,45,46
jmp     def_3C4B6

loc_3C4FB:
cmp     ax, 53h ; 'S'
jnz     short loc_3C503
jmp     loc_3C621       ; jumptable 0003C4B6 cases 36,47-50

loc_3C503:
cmp     ax, 54h ; 'T'
jnz     short loc_3C50B
jmp     loc_3C621       ; jumptable 0003C4B6 cases 36,47-50

loc_3C50B:              ; jumptable 0003C4B6 default case, cases 37-43,45,46
jmp     def_3C4B6

loc_3C50E:
cmp     word ptr [bp+arg_4], 7
jnz     short loc_3C520
mov     word ptr [bp+arg_4+2], 0
mov     word ptr [bp+arg_4], 3
jmp     short loc_3C542

loc_3C520:
cmp     word ptr [bp+arg_4], 9
jnz     short loc_3C532
mov     word ptr [bp+arg_4+2], 0
mov     word ptr [bp+arg_4], 5
jmp     short loc_3C542

loc_3C532:
cmp     word ptr [bp+arg_4], 8
jnz     short loc_3C542
mov     word ptr [bp+arg_4+2], 0
mov     word ptr [bp+arg_4], 6

loc_3C542:
mov     ax, 3
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CE4F
or      ax, ax
jz      short loc_3C5A5
mov     ax, ds:0C08Ch
cmp     ax, ds:7D0Ch
jnz     short loc_3C578
mov     ax, ds:0C08Eh
cmp     ax, ds:7D0Eh
jnz     short loc_3C578
mov     dx, ds:0C092h
mov     ax, ds:0C090h
cmp     dx, ds:7D12h
jnz     short loc_3C578
cmp     ax, ds:7D10h
jz      short loc_3C59D

loc_3C578:
mov     ax, ds:0C08Ch
cmp     ax, ds:7D14h
jnz     short loc_3C5A5
mov     ax, ds:0C08Eh
cmp     ax, ds:7D16h
jnz     short loc_3C5A5
mov     dx, ds:0C092h
mov     ax, ds:0C090h
cmp     dx, ds:7D1Ah
jnz     short loc_3C5A5
cmp     ax, ds:7D18h
jnz     short loc_3C5A5

loc_3C59D:
mov     [bp+var_10], 24h ; '$'
jmp     short loc_3C621 ; jumptable 0003C4B6 cases 36,47-50
db 90h

loc_3C5A5:
mov     word ptr ds:7D14h, 0
mov     ax, ds:0C08Ch
mov     ds:7D0Ch, ax
mov     ax, ds:0C08Eh
mov     ds:7D0Eh, ax
les     bx, ds:0C090h
mov     word ptr ds:7D12h, es
mov     ds:7D10h, bx
push    di
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CE4F
mov     ax, word ptr [bp+arg_4]
mov     dx, 14h
mul     dx
mov     si, ax
add     si, 7C40h
mov     word ptr [si+0Ch], 0
mov     ax, ds:0C08Ch
mov     [si+4], ax
mov     ax, ds:0C08Eh
mov     [si+6], ax
mov     dx, ds:0C092h
mov     ax, ds:0C090h
mov     [si+0Ah], dx
mov     [si+8], ax
jmp     short def_3C4B6 ; jumptable 0003C4B6 default case, cases 37-43,45,46

loc_3C5FB:              ; jumptable 0003C4B6 case 44
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CE4F
or      ax, ax
jz      short loc_3C621 ; jumptable 0003C4B6 cases 36,47-50
call    sub_3C1B6
mov     [bp+var_6], ax
or      ax, ax
jz      short loc_3C621 ; jumptable 0003C4B6 cases 36,47-50
mov     [bp+var_C], 20h ; ' '
cwd
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax

loc_3C621:              ; jumptable 0003C4B6 cases 36,47-50
push    di
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CE4F
or      ax, ax
jz      short def_3C4B6 ; jumptable 0003C4B6 default case, cases 37-43,45,46
call    sub_3C1B6
mov     [bp+var_6], ax
or      ax, ax
jz      short def_3C4B6 ; jumptable 0003C4B6 default case, cases 37-43,45,46
mov     di, 5
cwd
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

def_3C4B6:              ; jumptable 0003C4B6 default case, cases 37-43,45,46
mov     ax, [bp+var_10]
sub     ax, 8           ; switch 77 cases
cmp     ax, 4Ch
jbe     short loc_3C651
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C651:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3C655[bx] ; switch jump
jpt_3C655 dw offset loc_3C725, offset loc_3C725, offset def_3C655 ; jump table for switch statement
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset loc_3C742, offset loc_3C742, offset def_3C655
dw offset loc_3C75F, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset loc_3C716
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset loc_3C6F4, offset loc_3C77C, offset def_3C655
dw offset loc_3C94A, offset loc_3C94A, offset loc_3C94A
dw offset loc_3C94A, offset loc_3C94A, offset loc_3C94A
dw offset def_3C655, offset loc_3C94A, offset loc_3C94A
dw offset loc_3C94A, offset loc_3C94A, offset loc_3C94A
dw offset loc_3C94A, offset def_3C655, offset loc_3C94A
dw offset loc_3C70A, offset loc_3C70A, offset loc_3C70A
dw offset loc_3C94A, offset loc_3C94A, offset loc_3C94A
dw offset loc_3C94A, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset loc_3C94A
dw offset def_3C655, offset loc_3C6FB, offset loc_3C716
dw offset loc_3C6F4, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset def_3C655, offset def_3C655, offset def_3C655
dw offset loc_3C716, offset def_3C655, offset def_3C655
dw offset def_3C655, offset loc_3C94A, offset loc_3C94A
dw offset loc_3C94A, offset loc_3C94A

loc_3C6F4:              ; jumptable 0003C655 cases 35,68
push    cs
call    near ptr sub_3C0B0
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C6FB:              ; jumptable 0003C655 case 66
mov     word ptr ds:7C6Ch, 0
mov     word ptr ds:7C74h, 0
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C70A:              ; jumptable 0003C655 cases 53-55
mov     word ptr ds:7C6Ch, 0
mov     word ptr ds:7C74h, 0

loc_3C716:              ; jumptable 0003C655 cases 31,67,77
mov     word ptr ds:7C58h, 0
mov     word ptr ds:7C60h, 0
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C725:              ; jumptable 0003C655 cases 8,9
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CE4F
or      ax, ax
jnz     short loc_3C738
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C738:
mov     ax, 8
push    ax
call    sub_3CBDF
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C742:              ; jumptable 0003C655 cases 23,24
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CE4F
or      ax, ax
jnz     short loc_3C755
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C755:
mov     ax, 4
push    ax
call    sub_3CBDF
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C75F:              ; jumptable 0003C655 case 26
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CE4F
or      ax, ax
jnz     short loc_3C772
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C772:
mov     ax, 0Ah
push    ax
call    sub_3CBDF
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C77C:              ; jumptable 0003C655 case 36
cmp     [bp+var_C], 20h ; ' '
jnz     short loc_3C785
jmp     loc_3C81F

loc_3C785:
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CE4F
or      ax, ax
jnz     short loc_3C798
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C798:
cmp     di, 5
jz      short loc_3C7A0
jmp     loc_3C960

loc_3C7A0:
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     si, ax
add     si, 7C40h
mov     ax, [si+4]
cmp     ax, ds:0C08Ch
jnz     short loc_3C7D5
mov     ax, [si+6]
cmp     ax, ds:0C08Eh
jnz     short loc_3C7D5
mov     dx, [si+0Ah]
mov     ax, [si+8]
cmp     dx, ds:0C092h
jnz     short loc_3C7D5
cmp     ax, ds:0C090h
jnz     short loc_3C7D5
jmp     loc_3CBD7

loc_3C7D5:
mov     ax, [si+0Ch]
cmp     ax, ds:0C08Ch
jnz     short loc_3C7FC
mov     ax, [si+0Eh]
cmp     ax, ds:0C08Eh
jnz     short loc_3C7FC
mov     dx, [si+12h]
mov     ax, [si+10h]
cmp     dx, ds:0C092h
jnz     short loc_3C7FC
cmp     ax, ds:0C090h
jnz     short loc_3C7FC
jmp     loc_3CBD7

loc_3C7FC:
push    [bp+var_8]
push    cs
call    near ptr sub_3C0EA
mov     ax, ds:0C08Ch
mov     [si+0Ch], ax
mov     ax, ds:0C08Eh
mov     [si+0Eh], ax
mov     dx, ds:0C092h
mov     ax, ds:0C090h
mov     [si+12h], dx
mov     [si+10h], ax
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C81F:
cmp     di, 5
jnz     short loc_3C837
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
cmp     dx, word ptr [bp+arg_0+2]
jnz     short loc_3C837
cmp     ax, word ptr [bp+arg_0]
jnz     short loc_3C837
jmp     loc_3CBD7

loc_3C837:
mov     ax, [bp+var_A]
mov     dx, 14h
mul     dx
mov     si, ax
add     si, 7C40h
mov     word ptr [si+4], 0
mov     word ptr [si+0Ch], 0
mov     bx, [si]
mov     word ptr [bx+4], 0
mov     bx, [si]
mov     word ptr [bx+0Ch], 0
mov     bx, [si+2]
mov     word ptr [bx+4], 0
mov     bx, [si+2]
mov     word ptr [bx+0Ch], 0
cmp     [bp+var_8], 1
jnz     short loc_3C876
jmp     def_3C655       ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C876:
cmp     di, 5
jz      short loc_3C87E
jmp     loc_3C925

loc_3C87E:
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     bx, ax
add     bx, 7C40h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx+4]
mov     [si+4], ax
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     bx, ax
add     bx, 7C40h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx+6]
mov     [si+6], ax
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     bx, ax
add     bx, 7C40h
mov     ax, ds
mov     es, ax
mov     dx, es:[bx+0Ah]
mov     ax, es:[bx+8]
mov     [si+0Ah], dx
mov     [si+8], ax
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     bx, ax
add     bx, 7C40h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx+0Ch]
mov     [si+0Ch], ax
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     bx, ax
add     bx, 7C40h
mov     ax, ds
mov     es, ax
mov     ax, es:[bx+0Eh]
mov     [si+0Eh], ax
mov     ax, word ptr [bp+arg_0]
mov     dx, 14h
mul     dx
mov     bx, ax
add     bx, 7C40h
mov     ax, ds
mov     es, ax
mov     dx, es:[bx+12h]
mov     ax, es:[bx+10h]
mov     [si+12h], dx
mov     [si+10h], ax
jmp     short def_3C655 ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80
db 90h

loc_3C925:
push    di
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CE4F
mov     ax, ds:0C08Ch
mov     [si+4], ax
mov     ax, ds:0C08Eh
mov     [si+6], ax
mov     dx, ds:0C092h
mov     ax, ds:0C090h
mov     [si+0Ah], dx
mov     [si+8], ax
jmp     short def_3C655 ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C94A:              ; jumptable 0003C655 cases 38-43,45-50,52,56-59,64,81-84
cmp     [bp+var_C], 20h ; ' '
jz      short loc_3C969
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CE4F
or      ax, ax
jz      short def_3C655 ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C960:
push    [bp+var_8]
push    cs
call    near ptr sub_3C0EA
jmp     short def_3C655 ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80

loc_3C969:
mov     ax, [bp+var_A]
mov     dx, 14h
mul     dx
mov     si, ax
add     si, 7C40h
mov     word ptr [si+4], 0
mov     word ptr [si+0Ch], 0
mov     bx, [si]
mov     word ptr [bx+4], 0
mov     bx, [si]
mov     word ptr [bx+0Ch], 0
mov     bx, [si+2]
mov     word ptr [bx+4], 0
mov     bx, [si+2]
mov     word ptr [bx+0Ch], 0

def_3C655:              ; jumptable 0003C655 default case, cases 10-22,25,27-30,32-34,37,44,51,60-63,65,69-76,78-80
mov     ax, [bp+var_10]
cmp     ax, 50h ; 'P'
jz      short loc_3CA0B
jg      short loc_3C9DD
sub     ax, 24h ; '$'   ; switch 16 cases
cmp     ax, 0Fh
jbe     short loc_3C9B4
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3C9B4:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3C9B8[bx] ; switch jump
jpt_3C9B8 dw offset loc_3CA4F ; jump table for switch statement
dw offset def_3C9B8
dw offset def_3C9B8
dw offset def_3C9B8
dw offset def_3C9B8
dw offset def_3C9B8
dw offset def_3C9B8
dw offset loc_3CA03
dw offset loc_3C9FB
dw offset def_3C9B8
dw offset def_3C9B8
dw offset loc_3CAC0
dw offset loc_3CB2F
dw offset def_3C9B8
dw offset def_3C9B8
dw offset loc_3CA15

loc_3C9DD:              ; switch 5 cases
sub     ax, 51h ; 'Q'
cmp     ax, 4
jbe     short loc_3C9E8
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3C9E8:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3C9EC[bx] ; switch jump
jpt_3C9EC dw offset loc_3CA45 ; jump table for switch statement
dw offset loc_3CAA6
dw offset loc_3CBA3
dw offset loc_3CBAA
dw offset loc_3CAB3

loc_3C9FB:              ; jumptable 0003C9B8 case 44
sub     word ptr ds:0C083h, 2
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA03:              ; jumptable 0003C9B8 case 43
add     word ptr ds:0C083h, 2
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA0B:
mov     [bp+var_8], 1
mov     [bp+var_10], 33h ; '3'

loc_3CA15:              ; jumptable 0003C9B8 case 51
cmp     [bp+var_C], 20h ; ' '
jz      short loc_3CA1E
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA1E:
cmp     di, 4
jz      short loc_3CA26
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA26:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_3CA31
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA31:
mov     [bp+var_10], 32h ; '2'
mov     di, 5
les     bx, [bp+arg_4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA45:              ; jumptable 0003C9EC case 81
mov     [bp+var_8], 1
mov     [bp+var_10], 24h ; '$'

loc_3CA4F:              ; jumptable 0003C9B8 case 36
cmp     [bp+var_C], 20h ; ' '
jnz     short loc_3CA6D
cmp     di, 5
jnz     short loc_3CA6D
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
cmp     dx, word ptr [bp+arg_0+2]
jnz     short loc_3CA6D
cmp     ax, word ptr [bp+arg_0]
jnz     short loc_3CA6D
jmp     loc_3CBD7

loc_3CA6D:
cmp     [bp+var_C], 20h ; ' '
jz      short loc_3CA76
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA76:
cmp     di, 4
jz      short loc_3CA7E
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA7E:
cmp     [bp+var_8], 1
jnz     short loc_3CA87
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA87:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_3CA92
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CA92:
mov     [bp+var_10], 34h ; '4'
les     bx, [bp+arg_4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
mov     di, 5
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CAA6:              ; jumptable 0003C9EC case 82
mov     [bp+var_8], 1
mov     [bp+var_10], 34h ; '4'
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CAB3:              ; jumptable 0003C9EC case 85
mov     [bp+var_8], 1
mov     [bp+var_10], 3Ch ; '<'
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CAC0:              ; jumptable 0003C9B8 case 47
cmp     di, 4
jz      short loc_3CAC8
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CAC8:
cmp     word ptr [bp+arg_0], 1
jnz     short loc_3CAD8

loc_3CACE:
xor     di, di
mov     [bp+var_10], 2Eh ; '.'
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CAD8:
cmp     word ptr [bp+arg_0], 2
jnz     short loc_3CB24
cmp     [bp+var_C], 20h ; ' '
jnz     short loc_3CB24
cmp     word ptr [bp+arg_4+2], 0
jnz     short loc_3CAF0
cmp     word ptr [bp+arg_4], 19h
jz      short loc_3CB24

loc_3CAF0:
cmp     [bp+var_8], 2
jle     short loc_3CB24
mov     ax, 0C094h
push    ax
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CBFE
mov     byte ptr ds:0C09Eh, 0
mov     ax, 2Eh ; '.'
push    ax
push    [bp+var_8]
call    dword ptr ds:0C030h
mov     ax, 2Eh ; '.'
push    ax
push    [bp+var_8]
call    dword ptr ds:0C030h
jmp     loc_3CBD7

loc_3CB24:
cmp     word ptr [bp+arg_0], 0FFFFh
jz      short loc_3CB2D
jmp     def_3C9B8       ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CB2D:
jmp     short loc_3CB46

loc_3CB2F:              ; jumptable 0003C9B8 case 48
cmp     [bp+var_10], 30h ; '0'
jz      short loc_3CB38
jmp     short def_3C9B8 ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case
align 2

loc_3CB38:
cmp     di, 4
jz      short loc_3CB40
jmp     short def_3C9B8 ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case
align 2

loc_3CB40:
cmp     word ptr [bp+arg_0], 1
jnz     short loc_3CB4F

loc_3CB46:
xor     di, di
mov     [bp+var_10], 2Dh ; '-'
jmp     short def_3C9B8 ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CB4F:
cmp     word ptr [bp+arg_0], 2
jnz     short loc_3CB9A
cmp     [bp+var_C], 20h ; ' '
jnz     short loc_3CB9A
cmp     word ptr [bp+arg_4+2], 0
jnz     short loc_3CB67
cmp     word ptr [bp+arg_4], 19h
jz      short loc_3CB9A

loc_3CB67:
cmp     [bp+var_8], 2
jle     short loc_3CB9A
mov     ax, 0C094h
push    ax
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CBFE
mov     byte ptr ds:0C09Eh, 0
mov     ax, 2Dh ; '-'
push    ax
push    [bp+var_8]
call    dword ptr ds:0C030h
mov     ax, 2Dh ; '-'
push    ax
push    [bp+var_8]
call    dword ptr ds:0C030h
jmp     short loc_3CBD7

loc_3CB9A:
cmp     word ptr [bp+arg_0], 0FFFFh
jnz     short def_3C9B8 ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case
jmp     loc_3CACE

loc_3CBA3:              ; jumptable 0003C9EC case 83
mov     [bp+var_10], 2Fh ; '/'
jmp     short def_3C9B8 ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
                        ; jumptable 0003C9EC default case

loc_3CBAA:              ; jumptable 0003C9EC case 84
mov     [bp+var_10], 30h ; '0'

def_3C9B8:              ; jumptable 0003C9B8 default case, cases 37-42,45,46,49,50
mov     ax, 0C094h      ; jumptable 0003C9EC default case
push    ax
push    [bp+var_C]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CBFE
mov     ax, 0C09Eh
push    ax
push    di
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CBFE
push    [bp+var_10]
push    [bp+var_8]
call    dword ptr ds:0C030h

loc_3CBD7:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Eh
sub_3C214 endp



; Attributes: bp-based frame

sub_3CBDF proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]

loc_3CBE6:
mov     ax, 5
push    ax
push    cs
call    near ptr sub_3C0EA
dec     si
dec     si
add     word ptr ds:0C08Eh, 2
or      si, si
jg      short loc_3CBE6
pop     si
pop     bp
retn    2
sub_3CBDF endp



; Attributes: bp-based frame

sub_3CBFE proc near

var_2= word ptr -2
arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 2
push    si
push    di
mov     di, [bp+arg_4]
mov     si, [bp+arg_6]
push    ds
push    si
mov     ax, 0Ah
push    ax
mov     al, 0
push    ax
call    sub_46C10
mov     ax, di
dec     ax              ; switch 32 cases
cmp     ax, 1Fh
jbe     short loc_3CC25
jmp     def_3CC29       ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31

loc_3CC25:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3CC29[bx] ; switch jump
jpt_3CC29 dw offset loc_3CCA1 ; jump table for switch statement
dw offset loc_3CCA1
dw offset loc_3CC9C
dw offset loc_3CC7A
dw offset loc_3CC6E
dw offset loc_3CC86
dw offset loc_3CC96
dw offset loc_3CCA1
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset loc_3CCA1
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset loc_3CC9C
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset def_3CC29
dw offset loc_3CC6E

loc_3CC6E:              ; jumptable 0003CC29 cases 5,32
mov     byte ptr [si], 1
mov     al, byte ptr [bp+arg_0]
mov     [si+3], al
jmp     def_3CC29       ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31

loc_3CC7A:              ; jumptable 0003CC29 case 4
mov     byte ptr [si], 4
mov     ax, word ptr [bp+arg_0]
mov     [si+4], ax
jmp     def_3CC29       ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31

loc_3CC86:              ; jumptable 0003CC29 case 6
mov     byte ptr [si], 2
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
mov     [si+4], ax
jmp     loc_3CD55

loc_3CC96:              ; jumptable 0003CC29 case 7
mov     byte ptr [si], 3
jmp     loc_3CD55

loc_3CC9C:              ; jumptable 0003CC29 cases 3,24
mov     word ptr [si+4], 2

loc_3CCA1:              ; jumptable 0003CC29 cases 1,2,8,16
les     bx, [bp+arg_0]
mov     al, es:[bx+4]
cbw
mov     [bp+var_2], ax
or      ax, ax
jz      short loc_3CCBB
cmp     ax, 0Bh
jz      short loc_3CCBB
mov     al, byte ptr [bp+var_2]
mov     [si+1], al

loc_3CCBB:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 8
jz      short loc_3CD2A
jg      short loc_3CCDB
cmp     ax, 1
jz      short loc_3CD10
cmp     ax, 2
jz      short loc_3CCEB
cmp     ax, 7
jz      short loc_3CD2A
jmp     loc_3CD77

loc_3CCDB:
cmp     ax, 2Bh ; '+'
jnz     short loc_3CCE3
jmp     loc_3CD68

loc_3CCE3:
cmp     ax, 2Ch ; ','
jz      short loc_3CD3E
jmp     loc_3CD77

loc_3CCEB:
mov     byte ptr [si], 4
cmp     di, 3
jz      short loc_3CCF8
cmp     di, 18h
jnz     short loc_3CD04

loc_3CCF8:
les     bx, [bp+arg_0]
mov     ax, es:[bx+8]
mov     [si+4], ax
jmp     short def_3CC29 ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31

loc_3CD04:
les     bx, [bp+arg_0]
mov     ax, es:[bx+6]
mov     [si+4], ax
jmp     short def_3CC29 ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31

loc_3CD10:
les     bx, [bp+arg_0]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [si+8], dx
mov     [si+6], ax
mov     ax, es:[bx+0Ah]
add     [si+4], ax
jmp     short loc_3CD77

loc_3CD2A:
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
add     [si+4], ax
mov     byte ptr [si+3], 18h
mov     byte ptr [si+1], 0
jmp     short loc_3CD77

loc_3CD3E:
mov     byte ptr [si], 2
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
mov     ax, es:[bx+0Ah]
add     [si+4], ax

loc_3CD55:
les     bx, [bp+arg_0]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [si+8], dx
mov     [si+6], ax
jmp     short def_3CC29 ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31

loc_3CD68:
push    si
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3CD82

loc_3CD77:
mov     byte ptr [si], 5

def_3CC29:              ; jumptable 0003CC29 default case, cases 9-15,17-23,25-31
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_3CBFE endp



; Attributes: bp-based frame

sub_3CD82 proc near

arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_4]
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 5
jz      short loc_3CDC1
jg      short loc_3CDA4
cmp     ax, 2
jz      short loc_3CDB4
cmp     ax, 4
jz      short loc_3CDC1
jmp     def_3CDD7       ; jumptable 0003CDD7 default case, case 4

loc_3CDA4:
cmp     ax, 0Dh
jnz     short loc_3CDAC
jmp     loc_3CE2C

loc_3CDAC:
cmp     ax, 2Ch ; ','
jz      short loc_3CDFC
jmp     def_3CDD7       ; jumptable 0003CDD7 default case, case 4

loc_3CDB4:
les     bx, [bp+arg_0]
mov     ax, es:[bx+6]
add     [si+4], ax
jmp     def_3CDD7       ; jumptable 0003CDD7 default case, case 4

loc_3CDC1:
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
sub     ax, 3           ; switch 7 cases
cmp     ax, 6
jbe     short loc_3CDD3
jmp     short def_3CDD7 ; jumptable 0003CDD7 default case, case 4
db 90h

loc_3CDD3:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3CDD7[bx] ; switch jump
jpt_3CDD7 dw offset loc_3CDEA ; jump table for switch statement
dw offset def_3CDD7
dw offset loc_3CDF0
dw offset loc_3CDF6
dw offset loc_3CDEA
dw offset loc_3CDF6
dw offset loc_3CDF0

loc_3CDEA:              ; jumptable 0003CDD7 cases 3,7
mov     byte ptr [si+3], 3
jmp     short def_3CDD7 ; jumptable 0003CDD7 default case, case 4

loc_3CDF0:              ; jumptable 0003CDD7 cases 5,9
mov     byte ptr [si+2], 5
jmp     short def_3CDD7 ; jumptable 0003CDD7 default case, case 4

loc_3CDF6:              ; jumptable 0003CDD7 cases 6,8
mov     byte ptr [si+2], 6
jmp     short def_3CDD7 ; jumptable 0003CDD7 default case, case 4

loc_3CDFC:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
mov     ax, es:[bx+0Ah]
add     [si+4], ax
cmp     byte ptr es:[bx], 1
jnz     short loc_3CE26
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [si+8], dx
mov     [si+6], ax
jmp     short def_3CDD7 ; jumptable 0003CDD7 default case, case 4

loc_3CE26:
mov     byte ptr [si+3], 18h
jmp     short def_3CDD7 ; jumptable 0003CDD7 default case, case 4

loc_3CE2C:
push    si
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3CD82
push    si
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_3CD82

def_3CDD7:              ; jumptable 0003CDD7 default case, case 4
pop     si
pop     bp
retn    6
sub_3CD82 endp



; Attributes: bp-based frame

sub_3CE4F proc near

arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_4]
mov     word ptr ds:0C08Ch, 0
mov     ax, si
cmp     ax, 6
jnz     short loc_3CE66
jmp     loc_3CEFC

loc_3CE66:
jg      short loc_3CE7E
or      ax, ax
jnz     short loc_3CE6F
jmp     loc_3CEFC

loc_3CE6F:
cmp     ax, 4
jz      short loc_3CE90
cmp     ax, 5
jnz     short loc_3CE7C
jmp     loc_3CEFC

loc_3CE7C:
jmp     short loc_3CEAA

loc_3CE7E:
cmp     ax, 7
jnz     short loc_3CE86
jmp     short loc_3CEFC
align 2

loc_3CE86:
cmp     ax, 20h ; ' '
jnz     short loc_3CE8E
jmp     short loc_3CEFC
align 2

loc_3CE8E:
jmp     short loc_3CEAA

loc_3CE90:
mov     ax, word ptr [bp+arg_0]
mov     ds:0C08Eh, ax
mov     word ptr ds:0C092h, 0
mov     word ptr ds:0C090h, 0
mov     word ptr ds:0C08Ch, 2
jmp     short loc_3CEF1

loc_3CEAA:
les     bx, [bp+arg_0]
test    byte ptr es:[bx+3], 80h
jnz     short loc_3CEFC
mov     al, es:[bx]
cbw
mov     ds:0C08Ch, ax
cmp     ax, 1
jz      short loc_3CECC
cmp     ax, 7
jz      short loc_3CECC
cmp     ax, 8
jz      short loc_3CECC
jmp     short loc_3CEF6

loc_3CECC:
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
mov     ds:0C08Eh, ax
les     bx, es:[bx+6]
mov     word ptr ds:0C092h, es
mov     ds:0C090h, bx
cmp     si, 3
jz      short loc_3CEEC
cmp     si, 18h
jnz     short loc_3CEF1

loc_3CEEC:
add     word ptr ds:0C08Eh, 2

loc_3CEF1:
mov     ax, 1
jmp     short loc_3CEFE

loc_3CEF6:
mov     word ptr ds:0C08Ch, 0

loc_3CEFC:
xor     ax, ax

loc_3CEFE:
pop     si
pop     bp
retn    6
sub_3CE4F endp



; Attributes: bp-based frame

sub_3CF03 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     ax, 0C0h
push    ax
mov     ax, [bp+arg_0]
cwd
push    dx
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    2
sub_3CF03 endp



; Attributes: bp-based frame

sub_3CF1E proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
mov     ax, 0E0h
push    ax
mov     ax, [bp+arg_2]
cwd
push    dx
push    ax
mov     ax, [bp+arg_0]
cwd
push    dx
push    ax
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    4
sub_3CF1E endp



; Attributes: bp-based frame

sub_3CF3D proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
mov     ax, 0C8h
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    6
sub_3CF3D endp



; Attributes: bp-based frame

sub_3CF5C proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
mov     ax, 0E5h
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
mov     ax, [bp+arg_2]
cwd
push    dx
push    ax
mov     ax, [bp+arg_0]
cwd
push    dx
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    6
sub_3CF5C endp



; Attributes: bp-based frame

sub_3CF7D proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     ax, 0E1h
push    ax
mov     ax, [bp+arg_6]
cwd
push    dx
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    8
sub_3CF7D endp



; Attributes: bp-based frame

sub_3CF9E proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     ax, 0E3h
push    ax
mov     ax, [bp+arg_6]
cwd
push    dx
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    8
sub_3CF9E endp



; Attributes: bp-based frame

sub_3CFBF proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
mov     ax, 0D2h
push    ax
mov     ax, [bp+arg_8]
cwd
push    dx
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    0Ah
sub_3CFBF endp



; Attributes: bp-based frame

sub_3CFE0 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
mov     ax, 0D0h
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    6
sub_3CFE0 endp



; Attributes: bp-based frame

sub_3CFFF proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
mov     ax, 0D8h
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    6
sub_3CFFF endp



; Attributes: bp-based frame

sub_3D01E proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
mov     ax, 0DBh
push    ax
mov     ax, [bp+arg_8]
cwd
push    dx
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    0Ah
sub_3D01E endp



; Attributes: bp-based frame

sub_3D03F proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
mov     ax, 49h ; 'I'
push    ax
push    [bp+arg_A]
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    0Ch
sub_3D03F endp



; Attributes: bp-based frame

sub_3D060 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     ax, 0E2h
push    ax
mov     ax, [bp+arg_6]
cwd
push    dx
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    8
sub_3D060 endp



; Attributes: bp-based frame

sub_3D081 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
mov     ax, 0E4h
push    ax
mov     ax, [bp+arg_4]
cwd
push    dx
push    ax
mov     ax, [bp+arg_2]
cwd
push    dx
push    ax
mov     ax, [bp+arg_0]
cwd
push    dx
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    6
sub_3D081 endp



; Attributes: bp-based frame

sub_3D0A2 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     ax, 0CDh
push    ax
mov     ax, [bp+arg_6]
cwd
push    dx
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, [bp+arg_0]
cwd
push    dx
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    8
sub_3D0A2 endp



; Attributes: bp-based frame

sub_3D0C3 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
mov     ax, 0C9h
push    ax
mov     ax, [bp+arg_8]
cwd
push    dx
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3C214
pop     bp
retf    0Ah
sub_3D0C3 endp



; Attributes: bp-based frame

sub_3D0E4 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     ax, 0CCh
push    ax
mov     ax, [bp+arg_6]
cwd
push    dx
push    ax
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, [bp+arg_0]
cwd
push    dx
push    ax
push    cs
call    near ptr sub_3C214
pop     bp
retf    8
sub_3D0E4 endp

seg040 ends


; Segment type: Pure code
seg041 segment byte public 'CODE' use16
assume cs:seg041
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_3D105 proc far

var_10= word ptr -10h
var_C= word ptr -0Ch
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 10h
push    si
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3D18D
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 19 cases
cmp     ax, 12h
jbe     short loc_3D123
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D123:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3D127[bx] ; switch jump
jpt_3D127 dw offset loc_3D152 ; jump table for switch statement
dw offset loc_3D152
dw offset loc_3D165
dw offset loc_3D165
dw offset loc_3D165
dw offset loc_3D165
dw offset loc_3D165
dw offset loc_3D173
dw offset loc_3D173
dw offset def_3D127
dw offset loc_3D173
dw offset def_3D127
dw offset def_3D127
dw offset def_3D127
dw offset def_3D127
dw offset def_3D127
dw offset def_3D127
dw offset def_3D127
dw offset loc_3D165

loc_3D152:              ; jumptable 0003D127 cases 1,2
les     bx, [bp+arg_0]
mov     ax, es:[bx+6]
and     ax, 0FFh
push    ax
call    sub_3B175
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D165:              ; jumptable 0003D127 cases 3-7,19
les     bx, [bp+arg_0]
push    word ptr es:[bx+6]
call    dword ptr ds:0C014h
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D173:              ; jumptable 0003D127 cases 8,9,11
les     bx, [bp+arg_0]
push    word ptr es:[bx+6]
call    dword ptr ds:0C014h
les     bx, [bp+arg_0]
mov     ax, es:[bx+8]
push    ax
call    dword ptr ds:0C014h
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D18D:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 3
jz      short loc_3D199
jmp     loc_3D21F

loc_3D199:
mov     al, es:[bx+1]
cbw
cmp     ax, 0Ch
jz      short loc_3D1B0
cmp     ax, 0Dh
jz      short loc_3D1DA
cmp     ax, 0Eh
jz      short loc_3D204
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D1B0:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_42DC8
xor     si, si
jmp     short loc_3D1D2

loc_3D1C9:
db      36h
push    [bp+si+var_10]
call    dword ptr ds:0C01Ch
inc     si

loc_3D1D2:
cmp     si, 4
jl      short loc_3D1C9
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D1DA:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_C]
push    ax
call    sub_42E93
xor     si, si
jmp     short loc_3D1FC

loc_3D1F3:
db      36h
push    [bp+si+var_C]
call    dword ptr ds:0C01Ch
inc     si

loc_3D1FC:
cmp     si, 8
jl      short loc_3D1F3
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D204:
xor     si, si
jmp     short loc_3D217

loc_3D208:
les     bx, [bp+arg_0]
add     bx, si
mov     al, es:[bx+6]
push    ax
call    dword ptr ds:0C01Ch
inc     si

loc_3D217:
cmp     si, 0Ah
jl      short loc_3D208
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D21F:
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_3D237

loc_3D22A:
les     bx, [bp+var_4]
les     bx, es:[bx+6]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_3D237:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 35h ; '5'
jz      short loc_3D22A
cmp     byte ptr es:[bx], 2Ch ; ','
jz      short loc_3D249
jmp     def_3D29B       ; jumptable 0003D29B default case, cases 10,12-18

loc_3D249:
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_3D25C
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 1
jz      short loc_3D25C
jmp     def_3D29B       ; jumptable 0003D29B default case, cases 10,12-18

loc_3D25C:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 2Ch ; ','
jz      short loc_3D268
jmp     def_3D127       ; jumptable 0003D127 default case, cases 10,12-18

loc_3D268:
push    word ptr [bp+var_4+2]
push    bx
call    sub_2E388
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_2CCC0
les     bx, [bp+var_4]
les     bx, es:[bx+6]
mov     byte ptr es:[bx+4], 0
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
sub     ax, 3           ; switch 17 cases
cmp     ax, 10h
ja      short def_3D29B ; jumptable 0003D29B default case, cases 10,12-18
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3D29B[bx] ; switch jump
jpt_3D29B dw offset loc_3D2C2 ; jump table for switch statement
dw offset loc_3D2C2
dw offset loc_3D2C2
dw offset loc_3D2C2
dw offset loc_3D2C2
dw offset loc_3D2D8
dw offset loc_3D2D8
dw offset def_3D29B
dw offset loc_3D2D8
dw offset def_3D29B
dw offset def_3D29B
dw offset def_3D29B
dw offset def_3D29B
dw offset def_3D29B
dw offset def_3D29B
dw offset def_3D29B
dw offset loc_3D2C2

loc_3D2C2:              ; jumptable 0003D29B cases 3-7,19
mov     ax, 22h ; '"'
push    ax
les     bx, [bp+var_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3CF3D
jmp     short def_3D127 ; jumptable 0003D127 default case, cases 10,12-18

loc_3D2D8:              ; jumptable 0003D29B cases 8,9,11
mov     ax, 21h ; '!'
push    ax
les     bx, [bp+var_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3CF3D
jmp     short def_3D127 ; jumptable 0003D127 default case, cases 10,12-18

def_3D29B:              ; jumptable 0003D29B default case, cases 10,12-18
mov     ax, 95h
push    ax
call    sub_312DE
inc     sp
inc     sp

def_3D127:              ; jumptable 0003D127 default case, cases 10,12-18
pop     si
mov     sp, bp
pop     bp
retf    4
sub_3D105 endp

seg041 ends


; Segment type: Pure code
seg042 segment byte public 'CODE' use16
assume cs:seg042
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_3D300 proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_38ACE
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 36h ; '6'
jz      short loc_3D325
jmp     loc_3D450

loc_3D325:
call    sub_2F40A
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     al, es:[bx+3]
cbw
mov     di, ax
mov     ax, di
and     ax, 7
mov     [bp+var_8], ax
les     bx, [bp+arg_0]
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_3D360
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    [bp+var_8]
call    sub_3D458
mov     [bp+var_6], ax
jmp     short loc_3D365

loc_3D360:
mov     [bp+var_6], 0

loc_3D365:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    [bp+var_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_3D4ED
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
sub     ax, 7           ; switch 12 cases
cmp     ax, 0Bh
ja      short def_3D390 ; jumptable 0003D390 default case, cases 15-17
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3D390[bx] ; switch jump
jpt_3D390 dw offset loc_3D424 ; jump table for switch statement
dw offset loc_3D3F4
dw offset loc_3D3F4
dw offset loc_3D424
dw offset loc_3D409
dw offset loc_3D3C3
dw offset loc_3D3C3
dw offset loc_3D3C3
dw offset def_3D390
dw offset def_3D390
dw offset def_3D390
dw offset loc_3D3D4

def_3D390:              ; jumptable 0003D390 default case, cases 15-17
mov     ax, 1
push    ax
push    ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     loc_3D450

loc_3D3C3:              ; jumptable 0003D390 cases 12-14
mov     ax, 8080h
push    ax
push    ax
mov     ax, 0Dh
push    ax
call    sub_2F19D
jmp     loc_3D450

loc_3D3D4:              ; jumptable 0003D390 case 18
test    di, 8
jz      short loc_3D3DF
mov     si, 16h
jmp     short loc_3D3E2

loc_3D3DF:
mov     si, 1

loc_3D3E2:
push    si
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     short loc_3D450

loc_3D3F4:              ; jumptable 0003D390 cases 8,9
mov     ax, 16h
push    ax
push    ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     short loc_3D450

loc_3D409:              ; jumptable 0003D390 case 11
mov     ax, 16h
push    ax
push    ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
jmp     short loc_3D43D

loc_3D424:              ; jumptable 0003D390 cases 7,10
mov     ax, 1
push    ax
push    ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax

loc_3D43D:
les     bx, [bp+arg_0]
mov     al, es:[bx+3]
les     bx, [bp+var_4]
mov     es:[bx+3], al
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx

loc_3D450:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_3D300 endp



; Attributes: bp-based frame

sub_3D458 proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 39h ; '9'
jnz     short loc_3D4CA
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_3D70B
mov     si, ax
cmp     di, 1
jz      short loc_3D489
les     bx, [bp+arg_2]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_3D764

loc_3D489:
les     bx, [bp+arg_2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    di
call    sub_3D458
add     si, ax
cmp     di, 1
jnz     short loc_3D4AD
les     bx, [bp+arg_2]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_3D764

loc_3D4AD:
les     bx, [bp+arg_2]
mov     word ptr es:[bx+0Ch], 0
mov     word ptr es:[bx+0Ah], 0
mov     word ptr es:[bx+8], 0
mov     word ptr es:[bx+6], 0
jmp     short loc_3D4DE

loc_3D4CA:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_3D70B
mov     si, ax
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_3D764

loc_3D4DE:
test    si, 1
jz      short loc_3D4E5
inc     si

loc_3D4E5:
mov     ax, si
pop     di
pop     si
pop     bp
retn    6
sub_3D458 endp



; Attributes: bp-based frame

sub_3D4ED proc near

var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     si, [bp+arg_2]
les     bx, [bp+arg_4]
mov     al, es:[bx+3]
cbw
mov     di, ax
test    di, 8
jz      short loc_3D50F
mov     [bp+var_2], 1
jmp     short loc_3D514

loc_3D50F:
mov     [bp+var_2], 0

loc_3D514:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_3D520
jmp     loc_3D617

loc_3D520:
mov     ax, di
and     ax, 7
cmp     ax, 3
jnz     short loc_3D533
mov     ax, 47h ; 'G'
push    ax
call    sub_3CF03

loc_3D533:
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_4+2], es
mov     word ptr [bp+arg_4], bx
push    word ptr [bp+arg_4+2]
push    bx
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_3D550
mov     ax, 8108h
jmp     short loc_3D553

loc_3D550:
mov     ax, 8013h

loc_3D553:
push    ax
call    sub_39D63
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    dx
push    ax
call    sub_2F677
cmp     [bp+var_2], 0
jz      short loc_3D583
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Bh
jz      short loc_3D583
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Ch
push    ax
call    sub_3CF1E

loc_3D583:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_3D606
cmp     byte ptr es:[bx], 4
jnz     short loc_3D606
mov     ax, ds:0C083h
mov     [bp+var_4], ax
call    sub_29B97
mov     [bp+var_8], dx
mov     [bp+var_A], ax
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Ch
push    ax
call    sub_3CF1E
mov     ax, 4
push    ax
push    [bp+var_8]
push    [bp+var_A]
call    dword ptr ds:0C050h
mov     ax, 2Ch ; ','
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CFFF
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CFE0
mov     ax, 3Dh ; '='
push    ax
call    sub_3CF03
push    [bp+var_8]
push    [bp+var_A]
call    sub_2DDC9
mov     ax, [bp+var_4]
mov     ds:0C083h, ax
jmp     short loc_3D639

loc_3D606:
mov     ax, 44h ; 'D'
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CF3D
jmp     short loc_3D639

loc_3D617:
mov     ax, di
and     ax, 7
cmp     ax, 3
jnz     short loc_3D62A
mov     ax, 47h ; 'G'
push    ax
call    sub_3CF03

loc_3D62A:
mov     ax, 23h ; '#'
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CF3D

loc_3D639:
add     ds:0C083h, si
mov     ax, di
and     ax, 7
cmp     ax, 1
jnz     short loc_3D64A
jmp     loc_3D703

loc_3D64A:
mov     ax, ds:0C083h
mov     [bp+var_6], ax
or      ax, ax
jnz     short loc_3D691
cmp     word ptr ds:0BF0Dh, 0
jnz     short loc_3D662
cmp     word ptr ds:0BF15h, 0
jz      short loc_3D691

loc_3D662:
cmp     byte ptr ds:22C2h, 0
jnz     short loc_3D674
cmp     si, 2
jg      short loc_3D674
cmp     [bp+arg_0], 0Dh
jnz     short loc_3D688

loc_3D674:
mov     ax, 24h ; '$'
push    ax
mov     ax, 19h
push    ax
mov     ax, 18h
push    ax
call    sub_3CF5C
jmp     loc_3D6FD

loc_3D688:
or      si, si
jnz     short loc_3D68F
jmp     loc_3D6FD

loc_3D68F:
jmp     short loc_3D6F0

loc_3D691:
cmp     byte ptr ds:22C2h, 0
jnz     short loc_3D69E
cmp     [bp+arg_0], 0Dh
jnz     short loc_3D6C3

loc_3D69E:
cmp     si, 2
jg      short loc_3D6C8
or      si, si
jle     short loc_3D6FD
mov     ax, 2Eh ; '.'
push    ax
mov     ax, 19h
push    ax
call    sub_3CF1E
mov     ax, 2Eh ; '.'
push    ax
mov     ax, 19h
push    ax
call    sub_3CF1E
jmp     short loc_3D6FD

loc_3D6C3:
cmp     si, 4
jle     short loc_3D6D8

loc_3D6C8:
mov     ax, 2Fh ; '/'
push    ax
mov     ax, 19h
push    ax
push    si
call    sub_3D081
jmp     short loc_3D6FD

loc_3D6D8:
cmp     si, 2
jle     short loc_3D6EC
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E
jmp     short loc_3D6F0

loc_3D6EC:
or      si, si
jle     short loc_3D6FD

loc_3D6F0:
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 4
push    ax
call    sub_3CF1E

loc_3D6FD:
mov     ax, [bp+var_6]
mov     ds:0C083h, ax

loc_3D703:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_3D4ED endp



; Attributes: bp-based frame

sub_3D70B proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 12h
jnz     short loc_3D727
les     bx, es:[bx+2]
les     bx, es:[bx+8]
mov     ax, es:[bx+10h]
jmp     short loc_3D741

loc_3D727:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
shl     bx, 1
mov     si, [bx+7BE1h]
cmp     si, 1
jnz     short loc_3D73F
mov     si, 2

loc_3D73F:
mov     ax, si

loc_3D741:
pop     si
pop     bp
retn    4
sub_3D70B endp



; Attributes: bp-based frame

sub_3D746 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3D757
mov     byte ptr es:[bx+1], 8

loc_3D757:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3D764
pop     bp
retf    4
sub_3D746 endp



; Attributes: bp-based frame

sub_3D764 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
push    si

loc_3D768:
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 18 cases
cmp     ax, 11h
jbe     short loc_3D779
jmp     def_3D77D       ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D779:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3D77D[bx] ; switch jump
jpt_3D77D dw offset loc_3D8F7 ; jump table for switch statement
dw offset loc_3D8F7
dw offset loc_3D8C5
dw offset loc_3D8C5
dw offset def_3D77D
dw offset def_3D77D
dw offset loc_3D8C5
dw offset loc_3D7CC
dw offset loc_3D7CC
dw offset loc_3D8C5
dw offset loc_3D7A6
dw offset loc_3D96C
dw offset loc_3D9D9
dw offset loc_3D9B9
dw offset def_3D77D
dw offset def_3D77D
dw offset def_3D77D
dw offset loc_3DA10

loc_3D7A6:              ; jumptable 0003D77D case 11
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_3D7CC ; jumptable 0003D77D cases 8,9
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 36h ; '6'
jz      short loc_3D7CC ; jumptable 0003D77D cases 8,9
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_3A527
jmp     def_3D77D       ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D7CC:              ; jumptable 0003D77D cases 8,9
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3D83A
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_3D83A
call    sub_3C1F8
mov     si, ax
or      si, si
jnz     short loc_3D823
cmp     byte ptr ds:22B2h, 0
jz      short loc_3D7F4
jmp     loc_3D874

loc_3D7F4:
mov     ax, 8002h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_0]
mov     si, es:[bx+0Ah]
mov     ax, 24h ; '$'
push    ax
push    si
xor     ax, ax
push    ax
call    sub_3D081

loc_3D823:
mov     ax, 2Ch ; ','
push    ax
push    si
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
push    si
call    sub_3CF1E
jmp     def_3D77D       ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D83A:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 35h ; '5'
jnz     short loc_3D874
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 7
jnz     short loc_3D874
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
mov     al, es:[bx+3]
cbw
push    ax
call    sub_3A433
mov     si, ax
mov     ax, 2Ch ; ','
push    ax
push    si
call    sub_3CF1E
jmp     short loc_3D8C5 ; jumptable 0003D77D cases 3,4,7,10

loc_3D874:
cmp     byte ptr ds:22B2h, 0
jz      short loc_3D884
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_3D899

loc_3D884:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8008h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_3D899:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CFFF
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CFE0
jmp     def_3D77D       ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D8C5:              ; jumptable 0003D77D cases 3,4,7,10
cmp     byte ptr ds:22B2h, 0
jz      short loc_3D8D5
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_3D8EA

loc_3D8D5:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_3D8EA:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
jmp     short loc_3D95A

loc_3D8F7:              ; jumptable 0003D77D cases 1,2
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_3D922
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 0Bh
jnz     short loc_3D922
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8006h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
jmp     short loc_3D947

loc_3D922:
cmp     byte ptr ds:22B2h, 0
jz      short loc_3D932
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jz      short loc_3D947

loc_3D932:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8006h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax

loc_3D947:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+1], 3

loc_3D95A:
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CF3D
jmp     def_3D77D       ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D96C:              ; jumptable 0003D77D case 12
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8088h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    dx
push    ax
mov     ax, 8080h
push    ax
call    sub_2F14C
or      ax, ax
jz      short loc_3D9AE
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
mov     ax, 17h
push    ax
mov     ax, 0Ch
push    ax
mov     ax, 0FFFCh
push    ax
call    sub_3A5F0
jmp     short def_3D77D ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D9AE:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+1], 8
jmp     loc_3D899

loc_3D9B9:              ; jumptable 0003D77D case 14
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
xor     ax, ax
push    ax
call    sub_39132
jmp     short def_3D77D ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D9D9:              ; jumptable 0003D77D case 13
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jl      short loc_3D9F3
cmp     byte ptr es:[bx], 9
jg      short loc_3D9F3
push    word ptr [bp+arg_0+2]
push    bx
call    sub_3AD8C
jmp     short def_3D77D ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3D9F3:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
call    sub_39185
jmp     short def_3D77D ; jumptable 0003D77D default case, cases 5,6,15-17

loc_3DA10:              ; jumptable 0003D77D case 18
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3DEA0
or      ax, ax
jz      short def_3D77D ; jumptable 0003D77D default case, cases 5,6,15-17
jmp     loc_3D768

def_3D77D:              ; jumptable 0003D77D default case, cases 5,6,15-17
pop     si
pop     bp
retn    4
sub_3D764 endp

seg042 ends


; Segment type: Pure code
seg043 segment byte public 'CODE' use16
assume cs:seg043
;org 7
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_3DA27 proc far

var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     di, [bp+arg_0]
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_2]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+var_8]
les     bx, es:[bx+2]
les     bx, es:[bx+8]
mov     si, es:[bx+10h]
mov     ax, si
cmp     ax, 1
jz      short loc_3DA6E
cmp     ax, 2
jz      short loc_3DA6E
cmp     ax, 4
jz      short loc_3DA6E
jmp     short loc_3DA83

loc_3DA6E:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     bx, si
dec     bx
shl     bx, 1
push    word ptr [bx+7E48h]
call    sub_3DC1C
jmp     loc_3DC08

loc_3DA83:
call    sub_2F40A
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 801Bh
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
cmp     di, 0FFFFh
jz      short loc_3DADE
les     bx, [bp+var_8]
mov     al, es:[bx+4]
cbw
mov     [bp+var_A], ax
cmp     ax, 0Ah
jnz     short loc_3DABF
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Ah
push    ax
call    sub_3CF1E

loc_3DABF:
les     bx, [bp+var_8]
mov     byte ptr es:[bx+4], 0
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+var_8+2]
push    bx
call    sub_3CF3D
mov     al, byte ptr [bp+var_A]
les     bx, [bp+var_8]
mov     es:[bx+4], al

loc_3DADE:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+4], 0
jz      short loc_3DAF9
mov     ax, 2Ch ; ','
push    ax
mov     al, es:[bx+4]
cbw
push    ax
call    sub_3CF1E
jmp     short loc_3DB06

loc_3DAF9:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E

loc_3DB06:
les     bx, [bp+var_8]
mov     byte ptr es:[bx+4], 0
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+var_8+2]
push    bx
call    sub_3CF3D
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_2F677
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 801Bh
push    ax
call    sub_2CC7D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
cmp     word ptr es:[bx+0Ah], 16h
jnz     short loc_3DB61
mov     ax, 2Ch ; ','
push    ax
mov     ax, 2
push    ax
call    sub_3CF1E
mov     ax, 2Ch ; ','
push    ax
mov     ax, 1
push    ax
call    sub_3CF1E
jmp     short loc_3DB9E

loc_3DB61:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+4], 0
jz      short loc_3DB7C
mov     ax, 2Ch ; ','
push    ax
mov     al, es:[bx+4]
cbw
push    ax
call    sub_3CF1E
jmp     short loc_3DB89

loc_3DB7C:
mov     ax, 2Ch ; ','
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF1E

loc_3DB89:
les     bx, [bp+var_4]
mov     byte ptr es:[bx+4], 0
mov     ax, 2Ch ; ','
push    ax
push    word ptr [bp+var_4+2]
push    bx
call    sub_3CF3D

loc_3DB9E:
mov     ax, 24h ; '$'
push    ax
mov     ax, 4
push    ax
push    si
call    sub_3D081
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F677
push    ds
mov     ax, 7E50h
push    ax
call    dword ptr ds:0C02Ch
add     word ptr ds:0C083h, 8
cmp     di, 0FFFFh
jz      short loc_3DC10
push    di
mov     ax, 8011h
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+arg_2+2], dx
mov     word ptr [bp+arg_2], ax
mov     ax, 2Bh ; '+'
push    ax
push    dx
push    word ptr [bp+arg_2]
call    sub_3CF3D
cmp     [bp+var_A], 0Ah
jnz     short loc_3DBFE
mov     ax, 2Bh ; '+'
push    ax
mov     ax, 0Ah
push    ax
call    sub_3CF1E

loc_3DBFE:
mov     al, byte ptr [bp+var_A]
les     bx, [bp+arg_2]
mov     es:[bx+4], al

loc_3DC08:
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
jmp     short loc_3DC14

loc_3DC10:
xor     dx, dx
mov     ax, dx

loc_3DC14:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    6
sub_3DA27 endp



; Attributes: bp-based frame

sub_3DC1C proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_2]
or      ax, word ptr [bp+arg_2+2]
jz      short loc_3DC88
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx+1], 12h
jnz     short loc_3DC88
mov     al, byte ptr [bp+arg_0]
mov     es:[bx+1], al
mov     byte ptr es:[bx+2], 0
mov     byte ptr es:[bx+4], 0
mov     byte ptr es:[bx+3], 0
push    word ptr [bp+arg_2+2]
push    bx
call    sub_22692
or      ax, ax
jnz     short loc_3DC88
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 36h ; '6'
jz      short loc_3DC88
cmp     byte ptr es:[bx], 38h ; '8'
jz      short loc_3DC71
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    [bp+arg_0]
call    sub_3DC1C

loc_3DC71:
les     bx, [bp+arg_2]
cmp     byte ptr es:[bx], 37h ; '7'
jz      short loc_3DC88
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    [bp+arg_0]
call    sub_3DC1C

loc_3DC88:
pop     bp
retn    6
sub_3DC1C endp



; Attributes: bp-based frame

sub_3DC8C proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_0]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_3D300
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_2]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_2A8BF
mov     si, ax
cmp     si, 3
jz      short loc_3DCC7
cmp     si, 4
ja      short loc_3DCC7
jmp     loc_3DD71

loc_3DCC7:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F677
mov     ax, 24h ; '$'
push    ax
mov     ax, 3
push    ax
mov     ax, 1
push    ax
call    sub_3CF5C
les     bx, [bp+arg_2]
les     bx, es:[bx+6]
test    byte ptr es:[bx+3], 8
jz      short loc_3DD20
mov     ax, 7
push    ax
push    ax
mov     ax, 0Bh
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Ah
push    ax
mov     ax, 2
push    ax
call    sub_3CF5C
les     bx, [bp+arg_6]
mov     byte ptr es:[bx+4], 0Ah
jmp     short loc_3DD3C

loc_3DD20:
mov     ax, 3
push    ax
push    ax
mov     ax, 7
push    ax
call    sub_2F19D
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_6]
mov     byte ptr es:[bx+4], 0

loc_3DD3C:
or      di, di
jnz     short loc_3DD53
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_6]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     short loc_3DD68

loc_3DD53:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
les     bx, [bp+arg_6]
les     bx, es:[bx+6]
mov     es:[bx+8], dx
mov     es:[bx+6], ax

loc_3DD68:
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
jmp     loc_3DE98

loc_3DD71:
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 11 cases
cmp     ax, 0Ah
ja      short def_3DD83 ; jumptable 0003DD83 default case, cases 5,6,8-10
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3DD83[bx] ; switch jump
jpt_3DD83 dw offset loc_3DE28 ; jump table for switch statement
dw offset loc_3DE28
dw offset loc_3DDC2
dw offset loc_3DDC2
dw offset def_3DD83
dw offset def_3DD83
dw offset loc_3DDC2
dw offset def_3DD83
dw offset def_3DD83
dw offset def_3DD83
dw offset loc_3DD9E

loc_3DD9E:              ; jumptable 0003DD83 case 11
les     bx, [bp+arg_6]
mov     al, es:[bx+3]
les     bx, [bp+var_4]
mov     es:[bx+3], al

def_3DD83:              ; jumptable 0003DD83 default case, cases 5,6,8-10
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
les     bx, [bp+var_4]
mov     es:[bx+1], al
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
jmp     loc_3DE98

loc_3DDC2:              ; jumptable 0003DD83 cases 3,4,7
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F677
mov     ax, di
cmp     ax, 1
jz      short loc_3DDDB
cmp     ax, 2
jz      short loc_3DE13
jmp     short loc_3DDFD

loc_3DDDB:
mov     ax, 24h ; '$'
push    ax
mov     ax, 0Eh
push    ax
mov     ax, 12h
push    ax
call    sub_3CF5C
mov     ax, 24h ; '$'
push    ax
mov     ax, 12h
push    ax
mov     ax, 11h
push    ax
call    sub_3CF5C

loc_3DDFD:
mov     ax, 1
push    ax
push    ax
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     loc_3DE98

loc_3DE13:
mov     ax, 2
push    ax
push    ax
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     short loc_3DE98

loc_3DE28:              ; jumptable 0003DD83 cases 1,2
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F677
mov     ax, di
cmp     ax, 1
jz      short loc_3DE5B
cmp     ax, 2
jz      short loc_3DE70
cmp     ax, 3
jz      short loc_3DE85
jmp     short $+2

loc_3DE46:
mov     ax, 0Eh
push    ax
push    ax
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     short loc_3DE98

loc_3DE5B:
mov     ax, 12h
push    ax
push    ax
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     short loc_3DE98

loc_3DE70:
mov     ax, 11h
push    ax
push    ax
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D
jmp     short loc_3DE98

loc_3DE85:
mov     ax, 15h
push    ax
push    ax
les     bx, [bp+arg_6]
mov     al, es:[bx+1]
cbw
push    ax
call    sub_2F19D

loc_3DE98:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_3DC8C endp



; Attributes: bp-based frame

sub_3DEA0 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
les     bx, [bp+arg_0]
les     bx, es:[bx+2]
les     bx, es:[bx+8]
mov     si, es:[bx+10h]
mov     ax, si
cmp     ax, 1
jz      short loc_3DEC6
cmp     ax, 2
jz      short loc_3DEC6
cmp     ax, 4
jz      short loc_3DEC6
jmp     short loc_3DEDE

loc_3DEC6:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     bx, si
dec     bx
shl     bx, 1
push    word ptr [bx+7E48h]
call    sub_3DC1C
mov     ax, 1
jmp     loc_3DF6E

loc_3DEDE:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 801Bh
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+0Ah], 16h
jz      short loc_3DF4A
cmp     byte ptr es:[bx+4], 0
jz      short loc_3DF20
mov     ax, 24h ; '$'
push    ax
mov     ax, 2
push    ax
mov     al, es:[bx+4]
cbw
push    ax
call    sub_3CF5C
jmp     short loc_3DF31

loc_3DF20:
mov     ax, 24h ; '$'
push    ax
mov     ax, 2
push    ax
mov     ax, 0Bh
push    ax
call    sub_3CF5C

loc_3DF31:
les     bx, [bp+arg_0]
mov     byte ptr es:[bx+4], 0
mov     ax, 24h ; '$'
push    ax
mov     ax, 1
push    ax
push    word ptr [bp+arg_0+2]
push    bx
call    sub_3CF7D

loc_3DF4A:
test    si, 1
jz      short loc_3DF51
inc     si

loc_3DF51:
mov     ax, 24h ; '$'
push    ax
mov     ax, 4
push    ax
push    si
call    sub_3D081
push    ds
mov     ax, 7E57h
push    ax
call    dword ptr ds:0C02Ch
sub     ds:0C083h, si
xor     ax, ax

loc_3DF6E:
pop     si
pop     bp
retf    4
sub_3DEA0 endp



; Attributes: bp-based frame

sub_3DF73 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    [bp+arg_4]
push    [bp+arg_2]
mov     bx, [bp+arg_0]
dec     bx
shl     bx, 1
push    word ptr [bx+7E48h]
call    sub_3DC1C
pop     bp
retf    6
sub_3DF73 endp

seg043 ends


; Segment type: Pure code
seg044 segment byte public 'CODE' use16
assume cs:seg044
;org 0Dh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_3DF8D proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
mov     si, ax
mov     ax, si
sub     ax, 22h ; '"'   ; switch 6 cases
cmp     ax, 5
jbe     short loc_3DFAB
jmp     def_3DFAF       ; jumptable 0003DFAF default case

loc_3DFAB:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3DFAF[bx] ; switch jump
jpt_3DFAF dw offset loc_3DFC0 ; jump table for switch statement
dw offset loc_3DFC0
dw offset loc_3DFC0
dw offset loc_3DFC0
dw offset loc_3DFC0
dw offset loc_3DFC0

loc_3DFC0:              ; jumptable 0003DFAF cases 34-39
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_4]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 2
jz      short loc_3DFF6
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx+2], 0
jle     short loc_3E019
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 4
jz      short loc_3E019

loc_3DFF6:
les     bx, [bp+var_8]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, [bp+var_4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+var_C]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
push    si
call    sub_2EF7E
mov     si, ax

loc_3E019:
les     bx, [bp+var_8]
mov     al, es:[bx+1]
cbw
mov     di, ax
cmp     di, 8
jz      short loc_3E03F
cmp     di, 9
jz      short loc_3E03F
cmp     di, 0Bh
jnz     short loc_3E057
mov     al, es:[bx+3]
cbw
and     ax, 0Fh
cmp     ax, 6
jz      short loc_3E057

loc_3E03F:
push    si
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_3E4E8
jmp     short loc_3E097

loc_3E057:
push    si
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3E685
mov     si, ax
push    si
push    di
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch
jmp     short loc_3E097

def_3DFAF:              ; jumptable 0003DFAF default case
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3E10D
mov     ax, 23h ; '#'
push    ax
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch

loc_3E097:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_3DF8D endp



; Attributes: bp-based frame

sub_3E09F proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
sub     ax, 22h ; '"'   ; switch 6 cases
cmp     ax, 5
ja      short def_3E0B5 ; jumptable 0003E0B5 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3E0B5[bx] ; switch jump
jpt_3E0B5 dw offset loc_3E0C6 ; jump table for switch statement
dw offset loc_3E0C6
dw offset loc_3E0C6
dw offset loc_3E0C6
dw offset loc_3E0C6
dw offset loc_3E0C6

loc_3E0C6:              ; jumptable 0003E0B5 cases 34-39
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
push    ax
call    sub_2EF6B
les     bx, [bp+arg_4]
mov     es:[bx], al
push    word ptr [bp+arg_4+2]
push    bx
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_3DF8D
jmp     short loc_3E109

def_3E0B5:              ; jumptable 0003E0B5 default case
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3E10D
mov     ax, 22h ; '"'
push    ax
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch

loc_3E109:
pop     bp
retf    8
sub_3E09F endp



; Attributes: bp-based frame

sub_3E10D proc near

var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4

push    bp
mov     bp, sp
sub     sp, 10h
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 14 cases
cmp     ax, 0Dh
jbe     short loc_3E125
jmp     def_3E129       ; jumptable 0003E129 default case, cases 5,6,10

loc_3E125:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3E129[bx] ; switch jump
jpt_3E129 dw offset loc_3E316 ; jump table for switch statement
dw offset loc_3E316
dw offset loc_3E1E3
dw offset loc_3E1E3
dw offset def_3E129
dw offset def_3E129
dw offset loc_3E1E3
dw offset loc_3E14A
dw offset loc_3E14A
dw offset def_3E129
dw offset loc_3E14A
dw offset loc_3E47B
dw offset loc_3E47B
dw offset loc_3E47B

loc_3E14A:              ; jumptable 0003E129 cases 8,9,11
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8008h
push    ax
call    sub_39D63
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 4
jnz     short loc_3E182
mov     ax, 0DAh
push    ax
xor     dx, dx
mov     ax, 32h ; '2'
push    dx
push    ax
push    word ptr [bp+var_10+2]
push    bx
push    word ptr [bp+var_10+2]
push    bx
call    sub_3C214
jmp     short loc_3E1D5

loc_3E182:
mov     ax, 8012h
push    ax
push    ax
mov     ax, 3
push    ax
call    sub_2F19D
mov     [bp+var_A], dx
mov     [bp+var_C], ax
push    dx
push    ax
call    sub_2F677
mov     ax, 0CAh
push    ax
xor     dx, dx
mov     ax, 24h ; '$'
push    dx
push    ax
push    [bp+var_A]
push    [bp+var_C]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_3C214
mov     ax, 0CBh
push    ax
xor     dx, dx
mov     ax, 32h ; '2'
push    dx
push    ax
push    [bp+var_A]
push    [bp+var_C]
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_3C214

loc_3E1D5:
push    word ptr [bp+var_10+2]
push    word ptr [bp+var_10]
call    sub_2F677
jmp     def_3E129       ; jumptable 0003E129 default case, cases 5,6,10

loc_3E1E3:              ; jumptable 0003E129 cases 3,4,7
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
mov     si, ax
cmp     si, 14h
jz      short loc_3E1F4
jmp     loc_3E2CC

loc_3E1F4:
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+2], 0
jge     short loc_3E258
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 8013h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    ss
lea     ax, [bp+var_4]
push    ax
mov     ax, 8013h
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
mov     ax, 8013h
push    ax
call    sub_39BB1
jmp     short loc_3E2B4

loc_3E258:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8013h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    ss
lea     ax, [bp+var_8]
push    ax
mov     ax, 8013h
push    ax
push    ss
lea     ax, [bp+var_4]
push    ax
mov     ax, 8013h
push    ax
call    sub_39BB1
les     bx, [bp+var_8]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
les     bx, [bp+var_4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_3E2B4:
mov     ax, 3Ch ; '<'
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3D0C3
jmp     loc_3E3FC

loc_3E2CC:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3A46D
mov     si, ax
or      si, si
jz      short loc_3E2E0
jmp     loc_3E461

loc_3E2E0:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
mov     ax, 33h ; '3'
push    ax
push    dx
push    word ptr [bp+arg_0]
xor     ax, ax
push    ax
call    sub_3D0E4
jmp     loc_3E453

loc_3E308:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2CC3E
jmp     def_3E129       ; jumptable 0003E129 default case, cases 5,6,10

loc_3E316:              ; jumptable 0003E129 cases 1,2
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
mov     si, ax
cmp     si, 14h
jz      short loc_3E327
jmp     loc_3E415

loc_3E327:
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+2], 0
jge     short loc_3E38B
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 8002h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8002h
push    ax
call    sub_39D63
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    ss
lea     ax, [bp+var_4]
push    ax
mov     ax, 8002h
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
mov     ax, 8002h
push    ax
call    sub_39BB1
jmp     short loc_3E3E7

loc_3E38B:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
mov     ax, 8002h
push    ax
call    sub_39DEE
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 8002h
push    ax
call    sub_39D63
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    ss
lea     ax, [bp+var_8]
push    ax
mov     ax, 8002h
push    ax
push    ss
lea     ax, [bp+var_4]
push    ax
mov     ax, 8002h
push    ax
call    sub_39BB1
les     bx, [bp+var_8]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
les     bx, [bp+var_4]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_3E3E7:
mov     ax, 55h ; 'U'
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_3CFBF

loc_3E3FC:
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_2F677
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2F677
jmp     def_3E129       ; jumptable 0003E129 default case, cases 5,6,10

loc_3E415:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3A46D
mov     si, ax
or      si, si
jnz     short loc_3E461
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8002h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
mov     ax, 0D4h
push    ax
xor     dx, dx
mov     ax, 50h ; 'P'
push    dx
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    dx
push    dx
call    sub_3C214

loc_3E453:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
jmp     def_3E129       ; jumptable 0003E129 default case, cases 5,6,10

loc_3E461:
cmp     si, 1
jz      short loc_3E46E
cmp     si, 3
jz      short loc_3E46E
jmp     loc_3E308

loc_3E46E:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3B074
jmp     short def_3E129 ; jumptable 0003E129 default case, cases 5,6,10

loc_3E47B:              ; jumptable 0003E129 cases 12-14
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
mov     ax, 7
push    ax
call    sub_3CF03
call    sub_3B267
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
mov     ax, 12h
push    ax
push    dx
push    word ptr [bp+var_10]
call    sub_3CF3D
mov     ax, 13h
push    ax
call    sub_3CF03
les     bx, [bp+var_10]
mov     byte ptr es:[bx+1], 1
inc     word ptr es:[bx+0Ah]
mov     ax, 51h ; 'Q'
push    ax
mov     ax, 12h
push    ax
push    word ptr [bp+var_10+2]
push    bx
call    sub_3CF7D
mov     ax, 4Dh ; 'M'
push    ax
call    sub_3CF03

def_3E129:              ; jumptable 0003E129 default case, cases 5,6,10
pop     si
mov     sp, bp
pop     bp
retn    4
sub_3E10D endp



; Attributes: bp-based frame

sub_3E4E8 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_C]
les     bx, [bp+arg_8]
mov     al, es:[bx+1]
cbw
mov     si, ax
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 2
jnz     short loc_3E54C
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_3E535
cmp     di, 22h ; '"'
jz      short loc_3E51A
cmp     di, 23h ; '#'
jnz     short loc_3E535

loc_3E51A:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_3E10D
push    di
mov     ax, 9
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch
jmp     loc_3E67D

loc_3E535:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
mov     ax, 8008h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_8+2], dx
mov     word ptr [bp+arg_8], ax
jmp     short loc_3E58D

loc_3E54C:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
mov     ax, 8008h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_8+2], dx
mov     word ptr [bp+arg_8], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8008h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    ss
lea     ax, [bp+arg_8]
push    ax
mov     ax, 8008h
push    ax
push    ss
lea     ax, [bp+arg_4]
push    ax
mov     ax, 8008h
push    ax
call    sub_39BB1

loc_3E58D:
call    sub_29B97
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_2F677
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F677
mov     ax, 33h ; '3'
push    ax
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3D01E
mov     ax, di
sub     ax, 22h ; '"'   ; switch 6 cases
cmp     ax, 5
jbe     short loc_3E5D0
jmp     def_3E5D4       ; jumptable 0003E5D4 default case

loc_3E5D0:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3E5D4[bx] ; switch jump
jpt_3E5D4 dw offset loc_3E5F1 ; jump table for switch statement
dw offset loc_3E602
dw offset loc_3E5E5
dw offset loc_3E5E5
dw offset loc_3E630
dw offset loc_3E610

loc_3E5E5:              ; jumptable 0003E5D4 cases 36,37
push    di
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch

loc_3E5F1:              ; jumptable 0003E5D4 case 34
mov     ax, 23h ; '#'
push    ax
push    si
push    [bp+var_2]
push    [bp+var_4]
call    dword ptr ds:0C03Ch
jmp     short def_3E5D4 ; jumptable 0003E5D4 default case

loc_3E602:              ; jumptable 0003E5D4 case 35
push    di
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch
jmp     short def_3E5D4 ; jumptable 0003E5D4 default case

loc_3E610:              ; jumptable 0003E5D4 case 39
mov     ax, 25h ; '%'
push    ax
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch
mov     ax, 24h ; '$'
push    ax
push    si
push    [bp+var_2]
push    [bp+var_4]
call    dword ptr ds:0C03Ch
jmp     short def_3E5D4 ; jumptable 0003E5D4 default case

loc_3E630:              ; jumptable 0003E5D4 case 38
mov     ax, 24h ; '$'
push    ax
push    si
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch
mov     ax, 25h ; '%'
push    ax
push    si
push    [bp+var_2]
push    [bp+var_4]
call    dword ptr ds:0C03Ch

def_3E5D4:              ; jumptable 0003E5D4 default case
mov     ax, 33h ; '3'
push    ax
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3CFBF
push    di
mov     ax, 9
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    dword ptr ds:0C03Ch
push    [bp+var_2]
push    [bp+var_4]
call    sub_2DDC9

loc_3E67D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Eh
sub_3E4E8 endp



; Attributes: bp-based frame

sub_3E685 proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_8]
les     bx, [bp+arg_4]
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 14 cases
cmp     ax, 0Dh
jbe     short loc_3E6A0
jmp     def_3E6A4       ; jumptable 0003E6A4 default case, cases 5,6,8-10

loc_3E6A0:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3E6A4[bx] ; switch jump
jpt_3E6A4 dw offset loc_3E7A6 ; jump table for switch statement
dw offset loc_3E7A6
dw offset loc_3E6C5
dw offset loc_3E6C5
dw offset def_3E6A4
dw offset def_3E6A4
dw offset loc_3E6C5
dw offset def_3E6A4
dw offset def_3E6A4
dw offset def_3E6A4
dw offset loc_3E963
dw offset loc_3E85A
dw offset loc_3E85A
dw offset loc_3E8C2

loc_3E6C5:              ; jumptable 0003E6A4 cases 3,4,7
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_39F17
or      ax, ax
jz      short loc_3E737
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3E720
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_3E720
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 14h
jz      short loc_3E6F3
jmp     loc_3E7C8

loc_3E6F3:
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 4
jz      short loc_3E700
jmp     loc_3E7C8

loc_3E700:
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
cmp     word ptr es:[bx+0Ah], 1Ah
jz      short loc_3E711
jmp     loc_3E7C8

loc_3E711:
push    si
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3EA2F
mov     si, ax
jmp     def_3E6A4       ; jumptable 0003E6A4 default case, cases 5,6,8-10

loc_3E720:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_3E778

loc_3E737:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8013h
push    ax
call    sub_39E5C
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8013h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    ss
lea     ax, [bp+arg_4]
push    ax
mov     ax, 8013h
push    ax
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 8013h
push    ax
call    sub_39BB1

loc_3E778:
mov     ax, 33h ; '3'
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3D0C3
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F677
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
jmp     def_3E6A4       ; jumptable 0003E6A4 default case, cases 5,6,8-10

loc_3E7A6:              ; jumptable 0003E6A4 cases 1,2
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_39F17
or      ax, ax
jz      short loc_3E7EB
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_3E7D4
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_3E7D4

loc_3E7C8:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_3E10D
jmp     def_3E6A4       ; jumptable 0003E6A4 default case, cases 5,6,8-10

loc_3E7D4:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8002h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
jmp     short loc_3E82C

loc_3E7EB:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8002h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8002h
push    ax
call    sub_39D63
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    ss
lea     ax, [bp+arg_4]
push    ax
mov     ax, 8002h
push    ax
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 8002h
push    ax
call    sub_39BB1

loc_3E82C:
mov     ax, 50h ; 'P'
push    ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CFBF
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F677
jmp     def_3E6A4       ; jumptable 0003E6A4 default case, cases 5,6,8-10

loc_3E85A:              ; jumptable 0003E6A4 cases 12,13
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_22692
or      ax, ax
jz      short loc_3E8C2 ; jumptable 0003E6A4 case 14
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3961B
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 4
jz      short loc_3E8A6
call    sub_39197
jmp     short loc_3E8B1

loc_3E8A6:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F677

loc_3E8B1:
mov     ax, 1Ch
push    ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3CF3D
jmp     short loc_3E919

loc_3E8C2:              ; jumptable 0003E6A4 case 14
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 8080h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 8080h
push    ax
call    sub_2CC7D
push    dx
push    ax
call    sub_2F677
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4
jz      short loc_3E905
call    sub_39197
push    si
call    sub_2EF7E
mov     si, ax
jmp     short loc_3E910

loc_3E905:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677

loc_3E910:
mov     ax, 6
push    ax
call    sub_3CF03

loc_3E919:
call    sub_3B267
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, 12h
push    ax
push    dx
push    word ptr [bp+var_4]
call    sub_3CF3D
mov     ax, 4Eh ; 'N'
push    ax
call    sub_3CF03
les     bx, [bp+var_4]
mov     byte ptr es:[bx+1], 1
inc     word ptr es:[bx+0Ah]
mov     ax, 51h ; 'Q'
push    ax
mov     ax, 12h
push    ax
push    word ptr [bp+var_4+2]
push    bx
call    sub_3CF7D
mov     ax, 4Dh ; 'M'
push    ax
call    sub_3CF03
jmp     def_3E6A4       ; jumptable 0003E6A4 default case, cases 5,6,8-10

loc_3E963:              ; jumptable 0003E6A4 case 11
les     bx, [bp+arg_4]
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
les     bx, [bp+arg_0]
push    ax
mov     al, es:[bx+2]
cbw
cwd
xor     ax, dx
sub     ax, dx
pop     dx
cmp     dx, ax
jle     short loc_3E9C6
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    ss
lea     ax, [bp+arg_4]
push    ax
mov     ax, 16h
push    ax
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 17h
push    ax
call    sub_39BB1
jmp     short loc_3EA07

loc_3E9C6:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 17h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
mov     ax, 16h
push    ax
call    sub_2CC7D
mov     word ptr [bp+arg_4+2], dx
mov     word ptr [bp+arg_4], ax
push    ss
lea     ax, [bp+arg_0]
push    ax
mov     ax, 17h
push    ax
push    ss
lea     ax, [bp+arg_4]
push    ax
mov     ax, 16h
push    ax
call    sub_39BB1

loc_3EA07:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
call    sub_2F677
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_2F677
push    ds
mov     ax, 7E5Eh
push    ax
call    dword ptr ds:0C02Ch

def_3E6A4:              ; jumptable 0003E6A4 default case, cases 5,6,8-10
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retn    0Ah
sub_3E685 endp



; Attributes: bp-based frame

sub_3EA2F proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, [bp+arg_4]
cmp     si, 22h ; '"'
jz      short loc_3EA47
cmp     si, 23h ; '#'
jz      short loc_3EA47
jmp     def_3EA81       ; jumptable 0003EA81 default case, cases 1,3-5,8-10

loc_3EA47:
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     [bp+var_2], es
mov     [bp+var_4], bx
cmp     byte ptr es:[bx], 2
jz      short loc_3EA5D
jmp     def_3EA81       ; jumptable 0003EA81 default case, cases 1,3-5,8-10

loc_3EA5D:
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_249E8
mov     di, ax
or      di, di
jge     short loc_3EA73
jmp     def_3EA81       ; jumptable 0003EA81 default case, cases 1,3-5,8-10

loc_3EA73:
mov     ax, di
cmp     ax, 0Bh         ; switch 12 cases
jbe     short loc_3EA7D
jmp     def_3EA81       ; jumptable 0003EA81 default case, cases 1,3-5,8-10

loc_3EA7D:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_3EA81[bx] ; switch jump
jpt_3EA81 dw offset loc_3EA9E ; jump table for switch statement
dw offset def_3EA81
dw offset loc_3EAAD
dw offset def_3EA81
dw offset def_3EA81
dw offset def_3EA81
dw offset loc_3EABC
dw offset loc_3EACB
dw offset def_3EA81
dw offset def_3EA81
dw offset def_3EA81
dw offset loc_3EADA

loc_3EA9E:              ; jumptable 0003EA81 case 0
cmp     si, 22h ; '"'
jnz     short loc_3EAA8
mov     ax, 26h ; '&'
jmp     short loc_3EAAB

loc_3EAA8:
mov     ax, 25h ; '%'

loc_3EAAB:
jmp     short loc_3EAF4

loc_3EAAD:              ; jumptable 0003EA81 case 2
cmp     si, 22h ; '"'
jnz     short loc_3EAB7
mov     ax, 2Dh ; '-'
jmp     short loc_3EABA

loc_3EAB7:
mov     ax, 2Ch ; ','

loc_3EABA:
jmp     short loc_3EAF4

loc_3EABC:              ; jumptable 0003EA81 case 6
cmp     si, 22h ; '"'
jnz     short loc_3EAC6
mov     ax, 23h ; '#'
jmp     short loc_3EAC9

loc_3EAC6:
mov     ax, 22h ; '"'

loc_3EAC9:
jmp     short loc_3EAF4

loc_3EACB:              ; jumptable 0003EA81 case 7
cmp     si, 22h ; '"'
jnz     short loc_3EAD5
mov     ax, 2Bh ; '+'
jmp     short loc_3EAD8

loc_3EAD5:
mov     ax, 2Ah ; '*'

loc_3EAD8:
jmp     short loc_3EAF4

loc_3EADA:              ; jumptable 0003EA81 case 11
cmp     si, 22h ; '"'
jnz     short loc_3EAE4
mov     ax, 29h ; ')'
jmp     short loc_3EAE7

loc_3EAE4:
mov     ax, 28h ; '('

loc_3EAE7:
jmp     short loc_3EAF4

def_3EA81:              ; jumptable 0003EA81 default case, cases 1,3-5,8-10
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_3E10D
mov     ax, si

loc_3EAF4:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3EA2F endp

seg044 ends


; Segment type: Pure code
seg045 segment byte public 'CODE' use16
assume cs:seg045
;org 0Ch
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_3EAFC proc far

var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= dword ptr -40h
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= dword ptr -38h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_12= word ptr -12h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4Ch
push    si
push    di
mov     [bp+var_4], 0FFFFh
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_46A81
mov     di, ax
or      di, di
jge     short loc_3EB25
mov     [bp+var_2], 0FFFEh
jmp     loc_3F0E0

loc_3EB25:
push    di
push    ss
lea     ax, [bp+var_34]
push    ax
mov     ax, 22h ; '"'
push    ax
call    sub_46BC5
mov     si, ax
cmp     si, 22h ; '"'
jnz     short loc_3EB42
cmp     [bp+var_34], 5A4Dh
jz      short loc_3EB4A

loc_3EB42:
mov     [bp+var_2], 0FFFDh
jmp     loc_3EBF5

loc_3EB4A:
mov     ax, [bp+var_30]
dec     ax
xor     dx, dx
mov     cl, 9
call    sub_1EDF6
mov     bx, [bp+var_32]
xor     cx, cx
add     ax, bx
adc     dx, cx
mov     [bp+var_4A], dx
mov     [bp+var_4C], ax
or      bx, bx
jnz     short loc_3EB73
add     [bp+var_4C], 200h
adc     [bp+var_4A], 0

loc_3EB73:
push    di
push    [bp+var_4A]
push    [bp+var_4C]
xor     ax, ax
push    ax
call    sub_469F5
push    di
push    ds
mov     ax, 0C0FBh
push    ax
mov     ax, 30h ; '0'
push    ax
call    sub_46BC5
mov     si, ax
cmp     si, 30h ; '0'
jnz     short loc_3EBA0
cmp     word ptr ds:0C0FBh, 52FBh
jz      short loc_3EBA7

loc_3EBA0:
mov     [bp+var_2], 0FFFFh
jmp     short loc_3EBE4

loc_3EBA7:
push    di
xor     ax, ax
push    ax
push    ax
mov     ax, 1
push    ax
call    sub_469F5
mov     [bp+var_4A], dx
mov     [bp+var_4C], ax
push    di
xor     ax, ax
push    ax
push    ax
mov     ax, 2
push    ax
call    sub_469F5
mov     [bp+var_46], dx
mov     [bp+var_48], ax
sub     ax, [bp+var_4C]
sbb     dx, [bp+var_4A]
mov     [bp+var_42], dx
mov     [bp+var_44], ax
or      ax, dx
jnz     short loc_3EBFE
mov     [bp+var_2], 0FFFBh

loc_3EBE4:
push    ds
mov     ax, 0C0FBh
push    ax
mov     ax, 30h ; '0'
push    ax
mov     al, 0
push    ax
call    sub_46C10

loc_3EBF5:
push    di
call    sub_467C8
jmp     loc_3F0E0

loc_3EBFE:
push    di
push    [bp+var_4A]
push    [bp+var_4C]
xor     ax, ax
push    ax
call    sub_469F5
les     bx, ds:0Ah
mov     word ptr ds:0C0E9h, es
mov     ds:0C0E7h, bx
push    [bp+var_42]
push    [bp+var_44]
call    sub_3F0EE
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
xor     cx, cx
mov     bx, cx
call    sub_46B7E
jnz     short loc_3EC53
mov     [bp+var_2], 0FFFCh
push    ds
mov     ax, 0C0FBh
push    ax
mov     ax, 30h ; '0'
push    ax
mov     al, 0
push    ax
call    sub_46C10
push    di
call    sub_467C8
jmp     loc_3EFA8

loc_3EC53:
push    di
push    word ptr ds:0C0D5h
push    word ptr ds:0C0D3h
push    [bp+var_42]
push    [bp+var_44]
call    sub_3F1A1
mov     si, ax
push    di
call    sub_467C8
or      si, si
jnz     short loc_3EC79
mov     [bp+var_2], 0FFFBh
jmp     loc_3EF97

loc_3EC79:
les     bx, ds:0C0D3h
mov     word ptr ds:0C16Fh, es
mov     ds:0C16Dh, bx
mov     ax, ds:0C109h
xor     dx, dx
xor     cx, cx
mov     bx, 9
call    sub_46A18
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C16Fh
mov     ax, ds:0C16Dh
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C173h, es
mov     ds:0C171h, bx
mov     ax, ds:0C10Dh
xor     dx, dx
mov     cl, 4
call    sub_1EDF6
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C173h
mov     ax, ds:0C171h
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C17Bh, es
mov     ds:0C179h, bx
mov     ax, ds:0C115h
xor     dx, dx
xor     cx, cx
mov     bx, 6
call    sub_46A18
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C17Bh
mov     ax, ds:0C179h
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C14Fh, es
mov     ds:0C14Dh, bx
mov     ax, ds:0C113h
xor     dx, dx
mov     cl, 2
call    sub_1EDF6
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C14Fh
mov     ax, ds:0C14Dh
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C167h, es
mov     ds:0C165h, bx
mov     ax, ds:0C111h
xor     dx, dx
xor     cx, cx
mov     bx, 0Ch
call    sub_46A18
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C167h
mov     ax, ds:0C165h
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C0B8h, es
mov     ds:0C0B6h, bx
mov     ax, ds:0C117h
xor     dx, dx
mov     cl, 4
call    sub_1EDF6
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C0B8h
mov     ax, ds:0C0B6h
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C0BDh, es
mov     ds:0C0BBh, bx
mov     ax, ds:0C119h
xor     dx, dx
mov     cl, 3
call    sub_1EDF6
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C0BDh
mov     ax, ds:0C0BBh
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C153h, es
mov     ds:0C151h, bx
mov     ax, ds:0C105h
xor     dx, dx
mov     cl, 3
call    sub_1EDF6
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C153h
mov     ax, ds:0C151h
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     word ptr ds:0C177h, es
mov     ds:0C175h, bx
mov     ax, ds:0C107h
xor     dx, dx
xor     cx, cx
mov     bx, 5
call    sub_46A18
mov     bx, ax
mov     cx, dx
mov     dx, ds:0C177h
mov     ax, ds:0C175h
call    sub_46B23
mov     ds:0C0D5h, dx
mov     ds:0C0D3h, ax
les     bx, ds:0C0D3h
mov     [bp+var_6], es
mov     [bp+var_8], bx
mov     ax, ds:0C103h
shl     ax, 1
shl     ax, 1
push    ax
call    sub_3193F
mov     ds:0C0F5h, dx
mov     ds:0C0F3h, ax
mov     ax, ds:0C115h
shl     ax, 1
shl     ax, 1
push    ax
call    sub_3193F
mov     ds:0C149h, dx
mov     ds:0C147h, ax
mov     ax, ds:0C0F3h
or      ax, ds:0C0F5h
jnz     short loc_3EE6A
jmp     loc_3EF92

loc_3EE6A:
mov     ax, ds:0C147h
or      ax, dx
jnz     short loc_3EE74
jmp     loc_3EF92

loc_3EE74:
les     bx, ds:0C0F3h
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
xor     si, si
jmp     short loc_3EEB4

loc_3EE82:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
les     bx, [bp+var_10]
mov     es:[bx+2], dx
mov     es:[bx], ax
push    dx
push    ax
call    sub_46E60
mov     bx, ax
inc     bx
xor     cx, cx
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
call    sub_46B23
mov     [bp+var_6], dx
mov     [bp+var_8], ax
add     word ptr [bp+var_10], 4
inc     si

loc_3EEB4:
cmp     si, ds:0C103h
jl      short loc_3EE82
les     bx, ds:0C179h
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
les     bx, ds:0Ah
mov     word ptr ds:0C149h, es
mov     ds:0C147h, bx
mov     [bp+var_6], es
mov     [bp+var_8], bx
xor     si, si
jmp     short loc_3EF4A

loc_3EEDA:
push    ds
mov     ax, 9A78h
push    ax
les     bx, [bp+var_C]
mov     ax, es:[bx]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D76
push    ds
mov     ax, 9A78h
push    ax
call    sub_25E94
mov     ax, 9A78h
push    ax
mov     ax, 9A78h
push    ax
call    sub_19C57
mov     ax, [bp+var_8]
xor     dx, dx
sub     ax, ds:0C147h
sbb     dx, 0
inc     ax
les     bx, [bp+var_C]
mov     es:[bx], ax
push    [bp+var_6]
push    [bp+var_8]
push    ds
mov     ax, 9A78h
push    ax
call    sub_46D76
push    [bp+var_6]
push    [bp+var_8]
call    sub_46E60
inc     ax
add     [bp+var_8], ax
inc     si
add     word ptr [bp+var_C], 6

loc_3EF4A:
cmp     si, ds:0C115h
jl      short loc_3EEDA
mov     ax, [bp+var_8]
xor     dx, dx
sub     ax, ds:0C147h
sbb     dx, 0
mov     si, ax
inc     si
and     si, 0FFFEh
mov     ax, si
cwd
mov     bx, ax
mov     cx, dx
mov     ax, 0Ah
mov     dx, ds
call    sub_46AA0
les     bx, ds:6
mov     word ptr ds:0C0F9h, es
mov     ds:0C0F7h, bx
call    sub_317D1
mov     ax, 1388h
push    ax
call    sub_3193F
or      dx, ax
jnz     short loc_3EFB7

loc_3EF92:
mov     [bp+var_2], 0FFFCh

loc_3EF97:
push    ds
mov     ax, 0C0FBh
push    ax
mov     ax, 30h ; '0'
push    ax
mov     al, 0
push    ax
call    sub_46C10

loc_3EFA8:
les     bx, ds:0C0E7h
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx
jmp     loc_3F0E0

loc_3EFB7:
call    sub_31744
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_1EEB8
mov     si, ax
or      si, si
jz      short loc_3F001
mov     [bp+var_2], si
push    ds
mov     ax, 0C0FBh
push    ax
mov     ax, 30h ; '0'
push    ax
mov     al, 0
push    ax
call    sub_46C10
les     bx, ds:0C0E7h
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx
les     bx, ds:0C0F7h
mov     word ptr ds:8, es
mov     ds:6, bx
call    sub_31795
jmp     loc_3F0E0

loc_3F001:
call    sub_1EF94
mov     [bp+var_12], ax
les     bx, ds:16h
mov     word ptr ds:8, es
mov     ds:6, bx
call    sub_317DE
les     bx, ds:0C16Dh
mov     word ptr [bp+var_38+2], es
mov     word ptr [bp+var_38], bx
xor     si, si
jmp     short loc_3F04A

loc_3F028:
les     bx, [bp+var_38]
test    word ptr es:[bx+8], 7
jnz     short loc_3F03A
mov     ax, [bp+var_12]
add     es:[bx+6], ax

loc_3F03A:
inc     si
xor     cx, cx
mov     bx, 9
mov     dx, ss
lea     ax, [bp+var_38]
call    sub_46AA0

loc_3F04A:
cmp     si, ds:0C109h
jl      short loc_3F028
les     bx, ds:0C0B6h
mov     word ptr [bp+var_40+2], es
mov     word ptr [bp+var_40], bx
xor     si, si
jmp     short loc_3F06D

loc_3F05E:
mov     ax, [bp+var_12]
les     bx, [bp+var_40]
add     es:[bx+2], ax
inc     si
add     word ptr [bp+var_40], 10h

loc_3F06D:
cmp     si, ds:0C117h
jl      short loc_3F05E
push    ds
mov     ax, 7EFFh
push    ax
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_3F815
mov     word ptr [bp+var_38+2], dx
mov     word ptr [bp+var_38], ax
mov     [bp+var_4], 0
mov     [bp+var_2], 0
les     bx, [bp+var_38]
test    word ptr es:[bx+8], 7
jnz     short loc_3F0E0
mov     bx, ax
cmp     word ptr es:[bx+2], 0
jz      short loc_3F0C3
mov     bx, ax
mov     ax, es:[bx+2]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     [bp+var_3A], es
mov     [bp+var_3C], bx
cmp     byte ptr es:[bx], 23h ; '#'
jnz     short loc_3F0E0

loc_3F0C3:
les     bx, [bp+var_38]
mov     ax, es:[bx+4]
mov     dx, es:[bx+6]
push    dx
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
call    sub_3F3F4
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_3F0E0:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     di
pop     si
mov     sp, bp
pop     bp
retf    4
sub_3EAFC endp



; Attributes: bp-based frame

sub_3F0EE proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     [bp+var_2], 0
mov     [bp+var_4], 0

loc_3F0FF:
cmp     [bp+arg_2], 0
jl      short loc_3F113
jg      short loc_3F10E
cmp     [bp+arg_0], 3E80h
jbe     short loc_3F113

loc_3F10E:
mov     si, 3E80h
jmp     short loc_3F116

loc_3F113:
mov     si, [bp+arg_0]

loc_3F116:
mov     ax, [bp+var_4]
or      ax, [bp+var_2]
jnz     short loc_3F130
push    si
call    sub_3193F
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_3F140
jmp     short loc_3F13A

loc_3F130:
push    si
call    sub_3193F
or      dx, ax
jnz     short loc_3F140

loc_3F13A:
xor     dx, dx
mov     ax, dx
jmp     short loc_3F158

loc_3F140:
mov     ax, si
xor     dx, dx
sub     [bp+arg_0], ax
sbb     [bp+arg_2], dx
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jnz     short loc_3F0FF
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]

loc_3F158:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_3F0EE endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]



sub_3F160 proc far
call    sub_1F00F
cmp     word ptr ds:0C0EFh, 3
jnz     short locret_3F1A0
mov     word ptr ds:0C0EFh, 0
push    ds
mov     ax, 0C0FBh
push    ax
mov     ax, 30h ; '0'
push    ax
mov     al, 0
push    ax
call    sub_46C10
les     bx, ds:0C0F7h
mov     word ptr ds:8, es
mov     ds:6, bx
les     bx, ds:0C0E7h
mov     word ptr ds:0Ch, es
mov     ds:0Ah, bx
call    sub_31795

locret_3F1A0:
retf
sub_3F160 endp



; Attributes: bp-based frame

sub_3F1A1 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch

push    bp
mov     bp, sp
push    si
push    di
jmp     short loc_3F1F0

loc_3F1A8:
cmp     [bp+arg_2], 0
jl      short loc_3F1BC
jg      short loc_3F1B7
cmp     [bp+arg_0], 8000h
jbe     short loc_3F1BC

loc_3F1B7:
mov     si, 8000h
jmp     short loc_3F1BF

loc_3F1BC:
mov     si, [bp+arg_0]

loc_3F1BF:
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
push    si
call    sub_46BC5
mov     di, ax
cmp     di, si
jz      short loc_3F1D8
xor     ax, ax
jmp     short loc_3F1FB

loc_3F1D8:
mov     ax, di
xor     dx, dx
sub     [bp+arg_0], ax
sbb     [bp+arg_2], dx
mov     bx, di
xor     cx, cx
mov     dx, ss
lea     ax, [bp+arg_4]
call    sub_46AA0

loc_3F1F0:
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jnz     short loc_3F1A8
mov     ax, 1

loc_3F1FB:
pop     di
pop     si
pop     bp
retn    0Ah
sub_3F1A1 endp



; Attributes: bp-based frame

sub_3F201 proc far

var_16= dword ptr -16h
var_12= dword ptr -12h
var_E= dword ptr -0Eh
var_A= dword ptr -0Ah
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= word ptr  0Eh
arg_A= word ptr  10h

push    bp
mov     bp, sp
sub     sp, 16h
push    si
push    di
les     bx, ds:0C171h
mov     word ptr [bp+var_16+2], es
mov     word ptr [bp+var_16], bx
xor     si, si
jmp     short loc_3F235

loc_3F217:
les     bx, [bp+var_16]
mov     ax, es:[bx+8]
cmp     ax, [bp+arg_8]
ja      short loc_3F230
mov     ax, es:[bx+8]
add     ax, es:[bx+0Ah]
cmp     ax, [bp+arg_8]
ja      short loc_3F23B

loc_3F230:
inc     si
add     word ptr [bp+var_16], 10h

loc_3F235:
cmp     si, ds:0C10Dh
jb      short loc_3F217

loc_3F23B:
cmp     si, ds:0C10Dh
jb      short loc_3F244
jmp     loc_3F393

loc_3F244:
les     bx, [bp+var_16]
mov     ax, es:[bx+0Ch]
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0BBh
add     bx, ax
add     bx, 0FFF8h
mov     word ptr [bp+var_A+2], es
mov     word ptr [bp+var_A], bx
les     bx, [bp+var_16]
mov     ax, es:[bx+0Eh]
mov     [bp+var_6], ax
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
add     word ptr [bp+var_A], ax
mov     [bp+var_2], 0
jmp     loc_3F38A

loc_3F27C:
les     bx, [bp+var_A]
mov     ax, es:[bx+4]
shl     ax, 1
shl     ax, 1
les     bx, ds:0C14Dh
add     bx, ax
add     bx, 0FFFCh
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx
mov     si, es:[bx+2]
les     bx, [bp+var_A]
mov     ax, es:[bx+2]
cmp     ax, [bp+arg_8]
jz      short loc_3F2A9
jmp     loc_3F377

loc_3F2A9:
mov     di, es:[bx+6]
jmp     loc_3F370

loc_3F2B0:
les     bx, [bp+var_12]
mov     ax, es:[bx]
cmp     ax, [bp+arg_A]
jbe     short loc_3F2BE
jmp     loc_3F36B

loc_3F2BE:
mov     ax, es:[bx+6]
cmp     ax, es:[bx+2]
jnz     short loc_3F2DB
cmp     di, 1
jbe     short loc_3F2DB
mov     ax, es:[bx+4]
cmp     ax, [bp+arg_A]
jnb     short loc_3F2D9
jmp     loc_3F36B

loc_3F2D9:
jmp     short loc_3F2E9

loc_3F2DB:
les     bx, [bp+var_12]
mov     ax, es:[bx]
cmp     ax, [bp+arg_A]
jnb     short loc_3F2E9
jmp     loc_3F36B

loc_3F2E9:
les     bx, [bp+var_A]
mov     ax, es:[bx]
mov     cl, 4
shl     ax, cl
les     bx, ds:0C0B6h
add     bx, ax
add     bx, 0FFF0h
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
les     bx, [bp+var_A]
mov     ax, es:[bx]
cmp     ax, [bp+var_2]
jz      short loc_3F31B
les     bx, [bp+var_E]
mov     ax, es:[bx+4]
add     ax, es:[bx+6]
mov     [bp+var_4], ax

loc_3F31B:
les     bx, [bp+var_12]
mov     ax, es:[bx+2]
les     bx, [bp+var_E]
mov     dx, es:[bx+2]
les     bx, [bp+arg_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
cmp     di, 1
jbe     short loc_3F352
les     bx, [bp+var_12]
mov     si, es:[bx+6]
mov     ax, es:[bx+2]
cmp     ax, si
jnz     short loc_3F355
cmp     di, 2
jbe     short loc_3F352
mov     si, es:[bx+0Ah]
jmp     short loc_3F355

loc_3F352:
mov     si, [bp+var_4]

loc_3F355:
les     bx, [bp+var_12]
mov     ax, es:[bx+2]
mov     dx, si
sub     dx, ax
les     bx, [bp+arg_0]
mov     es:[bx], dx
mov     ax, 1
jmp     short loc_3F395

loc_3F36B:
add     word ptr [bp+var_12], 4
dec     di

loc_3F370:
or      di, di
jbe     short loc_3F377
jmp     loc_3F2B0

loc_3F377:
mov     [bp+var_4], si
les     bx, [bp+var_A]
mov     ax, es:[bx]
mov     [bp+var_2], ax
sub     word ptr [bp+var_A], 8
dec     [bp+var_6]

loc_3F38A:
cmp     [bp+var_6], 0
jbe     short loc_3F393
jmp     loc_3F27C

loc_3F393:
xor     ax, ax

loc_3F395:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ch
sub_3F201 endp



; Attributes: bp-based frame

sub_3F39D proc far

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= byte ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
xor     ax, ax
push    ax
call    sub_3F815
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
mov     [bp+var_8], 0
mov     [bp+var_6], 0
or      ax, dx
jz      short loc_3F3E8
les     bx, [bp+var_C]
mov     ax, es:[bx+4]
mov     dx, es:[bx+6]
push    dx
push    ax
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_3F3F4
mov     [bp+var_6], dx
mov     [bp+var_8], ax

loc_3F3E8:
mov     dx, [bp+var_6]
mov     ax, [bp+var_8]
mov     sp, bp
pop     bp
retf    4
sub_3F39D endp



; Attributes: bp-based frame

sub_3F3F4 proc far

var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 14h
push    si
push    di
mov     word ptr ds:0C0B2h, 0
mov     word ptr ds:0C0B4h, 0
mov     ax, [bp+arg_6]
push    ax
push    [bp+arg_4]
call    sub_3F586
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
or      ax, dx
jnz     short loc_3F41F
jmp     loc_3F532

loc_3F41F:
les     bx, [bp+var_8]
mov     ax, es:[bx+0Ch]
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0BBh
add     bx, ax
add     bx, 0FFF8h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     ax, es:[bx+2]
mov     dx, 6
mul     dx
les     bx, ds:0C179h
add     bx, ax
add     bx, 0FFFAh
mov     [bp+var_A], es
mov     [bp+var_C], bx
cmp     word ptr es:[bx], 0
jnz     short loc_3F45C
jmp     loc_3F532

loc_3F45C:
les     bx, [bp+var_8]
mov     di, es:[bx+0Eh]
mov     ax, di
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
add     word ptr [bp+var_4], ax
jmp     loc_3F52B

loc_3F472:
mov     word ptr [bp+var_10+2], 0
mov     word ptr [bp+var_10], 0
les     bx, [bp+var_4]
mov     ax, es:[bx+4]
shl     ax, 1
shl     ax, 1
les     bx, ds:0C14Dh
add     bx, ax
add     bx, 0FFFCh
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
les     bx, [bp+var_4]
mov     si, es:[bx+6]
jmp     loc_3F51F

loc_3F4A0:
les     bx, [bp+var_14]
mov     ax, es:[bx+2]
cmp     ax, [bp+arg_4]
jnb     short loc_3F4B4
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
jmp     short loc_3F51A

loc_3F4B4:
les     bx, [bp+var_14]
mov     ax, es:[bx+2]
cmp     ax, [bp+arg_4]
jnz     short loc_3F4E5
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
mov     ds:0C0B2h, ax
les     bx, [bp+var_14]
mov     ax, es:[bx]
mov     ds:0C0B4h, ax
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
les     bx, [bp+arg_0]
mov     es:[bx+2], dx
mov     es:[bx], ax
jmp     short loc_3F532

loc_3F4E5:
mov     ax, word ptr [bp+var_10]
or      ax, word ptr [bp+var_10+2]
jz      short loc_3F526
les     bx, [bp+var_14]
mov     ax, es:[bx+2]
les     bx, [bp+var_8]
mov     dx, es:[bx+2]
les     bx, [bp+arg_0]
mov     es:[bx+2], dx
mov     es:[bx], ax
les     bx, [bp+var_10]
mov     ax, es:[bx]
mov     ds:0C0B4h, ax
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
mov     ds:0C0B2h, ax
jmp     short loc_3F532

loc_3F51A:
add     word ptr [bp+var_14], 4
dec     si

loc_3F51F:
or      si, si
jbe     short loc_3F526
jmp     loc_3F4A0

loc_3F526:
sub     word ptr [bp+var_4], 8
dec     di

loc_3F52B:
or      di, di
jbe     short loc_3F532
jmp     loc_3F472

loc_3F532:
mov     dx, ds:0C0B4h
mov     ax, ds:0C0B2h
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_3F3F4 endp



; Attributes: bp-based frame

sub_3F541 proc far

var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_0]
les     bx, ds:0C0B6h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
xor     si, si
jmp     short loc_3F576

loc_3F55A:
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
cmp     ax, di
jnz     short loc_3F571
cmp     word ptr es:[bx+0Eh], 0
jz      short loc_3F571
mov     ax, 1
jmp     short loc_3F57E

loc_3F571:
inc     si
add     word ptr [bp+var_4], 10h

loc_3F576:
cmp     si, ds:0C117h
jb      short loc_3F55A
xor     ax, ax

loc_3F57E:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_3F541 endp



; Attributes: bp-based frame

sub_3F586 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     si, [bp+arg_0]
les     bx, ds:0C0B6h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
xor     di, di
jmp     short loc_3F5D3

loc_3F59F:
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
cmp     ax, [bp+arg_2]
jnz     short loc_3F5CE
mov     ax, es:[bx+4]
cmp     ax, si
ja      short loc_3F5D9
mov     ax, es:[bx+4]
cmp     ax, si
ja      short loc_3F5CE
mov     ax, es:[bx+4]
add     ax, es:[bx+6]
cmp     ax, si
jbe     short loc_3F5CE
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
jmp     short loc_3F5DD

loc_3F5CE:
inc     di
add     word ptr [bp+var_4], 10h

loc_3F5D3:
cmp     di, ds:0C117h
jb      short loc_3F59F

loc_3F5D9:
xor     dx, dx
mov     ax, dx

loc_3F5DD:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    4
sub_3F586 endp



; Attributes: bp-based frame

sub_3F5E5 proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch
arg_A= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
mov     di, [bp+arg_4]
mov     ax, [bp+arg_A]
mov     dx, 9
mul     dx
les     bx, ds:0C16Dh
add     bx, ax
add     bx, 0FFF7h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
xor     si, si
jmp     short loc_3F654

loc_3F60B:
les     bx, [bp+var_4]
mov     ax, es:[bx+6]
cmp     ax, [bp+arg_6]
jnz     short loc_3F64F
mov     ax, es:[bx+4]
cmp     ax, di
ja      short loc_3F64F
mov     ax, es:[bx+4]
cmp     ax, di
jnz     short loc_3F62E
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
jmp     short loc_3F65F

loc_3F62E:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_3F646
les     bx, [bp+arg_0]
mov     ax, es:[bx+4]
les     bx, [bp+var_4]
cmp     ax, es:[bx+4]
jnb     short loc_3F64F

loc_3F646:
les     bx, [bp+var_4]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_3F64F:
inc     si
add     word ptr [bp+var_4], 9

loc_3F654:
cmp     si, [bp+arg_8]
jb      short loc_3F60B
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]

loc_3F65F:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_3F5E5 endp



; Attributes: bp-based frame

sub_3F667 proc near

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
mov     di, [bp+arg_2]
mov     si, [bp+arg_4]
push    si
push    di
call    sub_3F586
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
or      ax, dx
jz      short loc_3F6F6
les     bx, [bp+var_C]
mov     ax, es:[bx]
mov     cl, 4
shl     ax, cl
les     bx, ds:0C171h
add     bx, ax
add     bx, 0FFF0h
mov     [bp+var_6], es
mov     [bp+var_8], bx
push    word ptr es:[bx+4]
push    word ptr es:[bx+6]
push    si
push    di
xor     ax, ax
push    ax
push    ax
call    sub_3F5E5
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
mov     ax, 1
push    ax
push    word ptr ds:0C10Bh
push    si
push    di
push    dx
push    word ptr [bp+var_4]
call    sub_3F5E5
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_3F6F6
cmp     [bp+arg_0], 0
jz      short loc_3F6FC
les     bx, [bp+var_4]
cmp     word ptr es:[bx+2], 0
jz      short loc_3F6F6
mov     ax, es:[bx+2]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
cmp     byte ptr es:[bx], 23h ; '#'
jz      short loc_3F6FC

loc_3F6F6:
xor     dx, dx
mov     ax, dx
jmp     short loc_3F702

loc_3F6FC:
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]

loc_3F702:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3F667 endp



; Attributes: bp-based frame

sub_3F70A proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     si, [bp+arg_0]
mov     [bp+var_2], 0
mov     [bp+var_4], 0
les     bx, [bp+arg_2]
mov     di, es:[bx+0Ah]
mov     ax, es:[bx+8]
mov     dx, 0Ch
mul     dx
les     bx, ds:0C165h
add     bx, ax
add     bx, 0FFF4h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_3F76F

loc_3F740:
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
cmp     ax, si
ja      short loc_3F75F
mov     ax, es:[bx+0Ah]
add     ax, es:[bx+8]
cmp     ax, si
jbe     short loc_3F75F
mov     [bp+var_2], es
mov     [bp+var_4], bx
jmp     short loc_3F76A

loc_3F75F:
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
cmp     ax, si
ja      short loc_3F773

loc_3F76A:
dec     di
add     word ptr [bp+var_8], 0Ch

loc_3F76F:
or      di, di
jg      short loc_3F740

loc_3F773:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3F70A endp



; Attributes: bp-based frame

sub_3F781 proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     di, [bp+arg_4]
mov     ax, [bp+arg_6]
mov     dx, 9
mul     dx
les     bx, ds:0C16Dh
add     bx, ax
add     bx, 0FFF7h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
jmp     short loc_3F805

loc_3F7A5:
les     bx, [bp+var_8]
mov     ax, es:[bx]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
les     bx, es:[bx]
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     ax, [bp+var_2]
mov     es, ax
mov     si, [bp+arg_2]

loc_3F7C7:
lodsb
cmp     al, es:[bx]
jnz     short loc_3F800
inc     bx
or      al, al
jnz     short loc_3F7C7
cmp     [bp+arg_0], 0
jz      short loc_3F7E9
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 7
jnz     short loc_3F800
jmp     short loc_3F7F8

loc_3F7E9:
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 7
jz      short loc_3F800

loc_3F7F8:
mov     dx, word ptr [bp+var_8+2]
mov     ax, word ptr [bp+var_8]
jmp     short loc_3F80D

loc_3F800:
dec     di
add     word ptr [bp+var_8], 9

loc_3F805:
or      di, di
ja      short loc_3F7A5
xor     dx, dx
mov     ax, dx

loc_3F80D:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_3F781 endp



; Attributes: bp-based frame

sub_3F815 proc near

var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 10h
push    si
mov     si, [bp+arg_0]
push    ds
mov     ax, 9A78h
push    ax
push    [bp+arg_8]
push    [bp+arg_6]
call    sub_46D76
test    byte ptr ds:0C123h, 1
jnz     short loc_3F840
push    ds
mov     ax, 9A78h
push    ax
call    sub_25E94

loc_3F840:
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_3F586
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
or      ax, dx
jnz     short loc_3F856
jmp     loc_3F8E4

loc_3F856:
push    dx
push    word ptr [bp+var_C]
push    [bp+arg_2]
call    sub_3F70A
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_3F8A9

loc_3F868:
les     bx, [bp+var_8]
push    word ptr es:[bx]
push    word ptr es:[bx+2]
mov     ax, 9A78h
push    ax
push    si
call    sub_3F781
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jz      short loc_3F887
jmp     loc_3F944

loc_3F887:
les     bx, [bp+var_8]
cmp     word ptr es:[bx+4], 0
jz      short loc_3F8B1
mov     ax, es:[bx+4]
mov     dx, 0Ch
mul     dx
les     bx, ds:0C165h
add     bx, ax
add     bx, 0FFF4h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx

loc_3F8A9:
mov     ax, word ptr [bp+var_8]
or      ax, word ptr [bp+var_8+2]
jnz     short loc_3F868

loc_3F8B1:
les     bx, [bp+var_C]
mov     ax, es:[bx]
mov     cl, 4
shl     ax, cl
les     bx, ds:0C171h
add     bx, ax
add     bx, 0FFF0h
mov     [bp+var_E], es
mov     [bp+var_10], bx
push    word ptr es:[bx+4]
push    word ptr es:[bx+6]
mov     ax, 9A78h
push    ax
push    si
call    sub_3F781
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_3F944

loc_3F8E4:
mov     byte ptr ds:9AAAh, 5Fh ; '_'
push    ds
mov     ax, 9AABh
push    ax
push    [bp+arg_8]
push    [bp+arg_6]
call    sub_46D76
test    byte ptr ds:0C123h, 1
jnz     short loc_3F90A
push    ds
mov     ax, 9AABh
push    ax
call    sub_25E94

loc_3F90A:
mov     ax, 1
push    ax
push    word ptr ds:0C10Bh
mov     ax, 9AAAh
push    ax
push    si
call    sub_3F781
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_3F944
push    ds
mov     ax, 9A78h
push    ax
call    sub_25E94
mov     ax, 1
push    ax
push    word ptr ds:0C10Bh
mov     ax, 9A78h
push    ax
push    si
call    sub_3F781
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_3F944:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     si
mov     sp, bp
pop     bp
retn    0Ah
sub_3F815 endp




sub_3F951 proc near
mov     ax, ds:0C13Fh
mov     ds:0C0CFh, ax
mov     ax, ds:0C13Dh
mov     ds:0C0C3h, ax
les     bx, ds:5AAh
mov     ax, es:[bx+8]
mov     ds:0C0C5h, ax
mov     ax, ds:0C143h
mov     ds:0C0C7h, ax
mov     word ptr ds:0C157h, ds
mov     word ptr ds:0C155h, 0C135h
mov     word ptr ds:0C15Bh, ds
mov     word ptr ds:0C159h, 0C137h
retn
sub_3F951 endp



; Attributes: bp-based frame

sub_3F983 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0C8h
jnz     short loc_3F9A3
sub     word ptr [bp+arg_4], 2
inc     word ptr [bp+arg_0]
mov     bx, word ptr [bp+arg_0]
mov     ax, es:[bx]
sub     word ptr [bp+arg_4], ax
add     word ptr [bp+arg_0], 3

loc_3F9A3:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 55h ; 'U'
jnz     short loc_3F9B3
sub     word ptr [bp+arg_4], 2
inc     word ptr [bp+arg_0]

loc_3F9B3:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 8Bh
jnz     short loc_3F9C7
cmp     byte ptr es:[bx+1], 0ECh
jnz     short loc_3F9C7
add     word ptr [bp+arg_0], 2

loc_3F9C7:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 83h
jnz     short loc_3F9E6
cmp     byte ptr es:[bx+1], 0ECh
jnz     short loc_3F9E6
mov     al, es:[bx+2]
mov     ah, 0
sub     word ptr [bp+arg_4], ax
add     word ptr [bp+arg_0], 3
jmp     short loc_3FA21

loc_3F9E6:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 81h
jnz     short loc_3FA03
cmp     byte ptr es:[bx+1], 0ECh
jnz     short loc_3FA03
mov     ax, es:[bx+2]
sub     word ptr [bp+arg_4], ax
add     word ptr [bp+arg_0], 4
jmp     short loc_3FA21

loc_3FA03:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 4Ch ; 'L'
jnz     short loc_3FA21
dec     word ptr [bp+arg_4]
inc     word ptr [bp+arg_0]
mov     bx, word ptr [bp+arg_0]
cmp     byte ptr es:[bx], 4Ch ; 'L'
jnz     short loc_3FA21
dec     word ptr [bp+arg_4]
inc     word ptr [bp+arg_0]

loc_3FA21:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 56h ; 'V'
jnz     short loc_3FA3C
sub     word ptr [bp+arg_4], 2
les     bx, [bp+arg_4]
mov     word ptr ds:0C157h, es
mov     ds:0C155h, bx
inc     word ptr [bp+arg_0]

loc_3FA3C:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 57h ; 'W'
jnz     short loc_3FA54
sub     word ptr [bp+arg_4], 2
les     bx, [bp+arg_4]
mov     word ptr ds:0C15Bh, es
mov     ds:0C159h, bx

loc_3FA54:
pop     bp
retn    8
sub_3F983 endp



; Attributes: bp-based frame

sub_3FA58 proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
push    word ptr ds:0C0CFh
push    word ptr ds:0C0C3h
mov     ax, 1
push    ax
call    sub_3F667
mov     ds:0C0DDh, dx
mov     ds:0C0DBh, ax
or      ax, dx
jnz     short loc_3FA7F
xor     ax, ax
jmp     loc_3FBA7

loc_3FA7F:
les     bx, ds:0C0DBh
mov     ax, es:[bx+2]
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
add     bx, 0FFF8h
mov     [bp+var_2], es
mov     [bp+var_4], bx
mov     di, es:[bx+5]
and     di, 7Fh
mov     si, di
and     si, 4
sar     si, 1
inc     si
inc     si
mov     ax, ds:0C0C5h
mov     ds:0C0C9h, ax
mov     ax, ds:0C0C7h
mov     ds:0C0CBh, ax
mov     ax, ds:0C0CFh
mov     ds:0C0D1h, ax
mov     ax, ds:0C0C3h
mov     ds:0C0CDh, ax
les     bx, ds:0C155h
mov     word ptr ds:0C15Fh, es
mov     ds:0C15Dh, bx
les     bx, ds:0C159h
mov     word ptr ds:0C163h, es
mov     ds:0C161h, bx
les     bx, ds:0C0DBh
mov     ax, es:[bx+8]
shr     ax, 1
shr     ax, 1
shr     ax, 1
test    ax, 1
jnz     short loc_3FB06
mov     ax, ds:0C0CBh
mov     ds:0C0C9h, ax
mov     word ptr ds:0C0CFh, 0
mov     word ptr ds:0C0C3h, 0
jmp     loc_3FBA4

loc_3FB06:
les     bx, ds:0C0DBh
mov     ax, es:[bx+4]
cmp     ax, ds:0C0C3h
jnz     short loc_3FB44
mov     ax, es:[bx+6]
cmp     ax, ds:0C0CFh
jnz     short loc_3FB44
mov     ax, es:[bx+8]
mov     cl, 4
shr     ax, cl
and     ax, 7
shl     ax, 1
mov     dx, ds:0C0CBh
sub     dx, ax
mov     ds:0C0C9h, dx
mov     dx, ds:0C145h
mov     ax, ds:0C0CBh
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_3FB82

loc_3FB44:
mov     bx, ds:0C145h
mov     es, bx
mov     bx, ds:0C0C9h
mov     ax, es:[bx]
mov     ds:0C0C5h, ax
les     bx, ds:0C0DBh
mov     ax, es:[bx+8]
mov     cl, 4
shr     ax, cl
and     ax, 7
shl     ax, 1
add     ax, ds:0C0C9h
mov     dx, ds:0C145h
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
push    dx
push    ax
mov     ax, es:[bx+4]
mov     dx, es:[bx+6]
push    dx
push    ax
call    sub_3F983

loc_3FB82:
les     bx, [bp+var_8]
mov     ax, es:[bx]
dec     ax
mov     ds:0C0C3h, ax
mov     ax, bx
inc     ax
inc     ax
mov     ds:0C0C7h, ax
cmp     si, 2
jbe     short loc_3FBA4
mov     ax, es:[bx+2]
mov     ds:0C0CFh, ax
add     word ptr ds:0C0C7h, 2

loc_3FBA4:
mov     ax, 1

loc_3FBA7:
pop     di
pop     si
mov     sp, bp
pop     bp
retn
sub_3FA58 endp




sub_3FBAD proc far
push    si
call    sub_3F951
xor     si, si
jmp     short loc_3FBB6

loc_3FBB5:
inc     si

loc_3FBB6:
call    sub_3FA58
or      ax, ax
jnz     short loc_3FBB5
or      si, si
jnz     short loc_3FBC6
mov     ax, 1
jmp     short loc_3FBC8

loc_3FBC6:
mov     ax, si

loc_3FBC8:
pop     si
retf
sub_3FBAD endp



; Attributes: bp-based frame

sub_3FBCA proc near

var_12= word ptr -12h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
les     bx, [bp+arg_2]
mov     ax, es:[bx+4]
sub     [bp+arg_0], ax
xor     dx, dx
mov     ax, 9
push    dx
push    ax
mov     dx, word ptr [bp+arg_2+2]
mov     ax, bx
add     ax, 9
xor     dx, dx
sub     ax, ds:0C16Dh
sbb     dx, 0
push    dx
push    ax
call    sub_1ED51
mov     di, ax
les     bx, [bp+arg_2]
mov     ax, es:[bx]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
les     bx, es:[bx]
mov     word ptr [bp+var_10+2], es
mov     word ptr [bp+var_10], bx
les     bx, [bp+arg_2]
mov     ax, es:[bx+2]
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
add     bx, 0FFF8h
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
cmp     [bp+arg_0], 0
jz      short loc_3FC95
les     bx, [bp+arg_2]
cmp     word ptr es:[bx+2], 0
jz      short loc_3FC4F
les     bx, [bp+var_8]
mov     ax, es:[bx+3]
cmp     ax, [bp+arg_0]
ja      short loc_3FC54

loc_3FC4F:
xor     ax, ax
jmp     loc_3FDD9

loc_3FC54:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 1Ah
jnz     short loc_3FC8D
mov     ax, es:[bx+6]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     si, es:[bx+3]
or      si, si
jz      short loc_3FC8D
mov     ax, [bp+arg_0]
xor     dx, dx
div     si
or      dx, dx
jnz     short loc_3FC8D
mov     ax, [bp+arg_0]
xor     dx, dx
div     si
mov     [bp+arg_0], ax
jmp     short loc_3FC95

loc_3FC8D:
push    ds
mov     ax, 7F04h
push    ax
call    sub_42616

loc_3FC95:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 1Ah
jz      short loc_3FCAA
cmp     byte ptr es:[bx], 23h ; '#'
jz      short loc_3FCAA
mov     al, 26h ; '&'
push    ax
call    sub_42635

loc_3FCAA:
cmp     di, ds:0C10Bh
ja      short loc_3FCB3
jmp     loc_3FD32

loc_3FCB3:
les     bx, ds:0C171h
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
mov     si, ds:0C10Dh
jmp     short loc_3FCDF

loc_3FCC3:
les     bx, [bp+var_4]
mov     ax, es:[bx+4]
cmp     ax, di
ja      short loc_3FCDA
mov     ax, es:[bx+4]
add     ax, es:[bx+6]
cmp     ax, di
ja      short loc_3FCE3

loc_3FCDA:
dec     si
add     word ptr [bp+var_4], 10h

loc_3FCDF:
or      si, si
ja      short loc_3FCC3

loc_3FCE3:
or      si, si
jnz     short loc_3FCEA
jmp     loc_3FDB7

loc_3FCEA:
mov     al, 2Eh ; '.'
push    ax
call    sub_42635
les     bx, [bp+var_4]
mov     ax, es:[bx]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
les     bx, es:[bx]
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_3FD20

loc_3FD0C:
les     bx, [bp+var_C]
inc     word ptr [bp+var_C]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F01
push    ax
call    sub_42635

loc_3FD20:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 0
jnz     short loc_3FD0C
mov     al, 2Eh ; '.'
push    ax
call    sub_42635
jmp     loc_3FDB7

loc_3FD32:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 23h ; '#'
jnz     short loc_3FD58
mov     ax, es:[bx+5]
and     ax, 7Fh
mov     [bp+var_12], ax
test    ax, 3
jz      short loc_3FD4D
jmp     loc_3FDB7

loc_3FD4D:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 5Fh ; '_'
jnz     short loc_3FDB7
jmp     short loc_3FDB4

loc_3FD58:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 5Fh ; '_'
jnz     short loc_3FDB7
inc     bx
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
jmp     short loc_3FD7C

loc_3FD6A:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 61h ; 'a'
jl      short loc_3FD79
cmp     byte ptr es:[bx], 7Ah ; 'z'
jle     short loc_3FD85

loc_3FD79:
inc     word ptr [bp+var_C]

loc_3FD7C:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 0
jnz     short loc_3FD6A

loc_3FD85:
les     bx, [bp+var_C]
cmp     byte ptr es:[bx], 0
jz      short loc_3FDB7
jmp     short loc_3FDB4

loc_3FD90:
test    byte ptr ds:0C123h, 1
jz      short loc_3FDA3
les     bx, [bp+var_10]
mov     al, es:[bx]
push    ax
call    sub_42635
jmp     short loc_3FDB4

loc_3FDA3:
les     bx, [bp+var_10]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F01
push    ax
call    sub_42635

loc_3FDB4:
inc     word ptr [bp+var_10]

loc_3FDB7:
les     bx, [bp+var_10]
cmp     byte ptr es:[bx], 0
jnz     short loc_3FD90
cmp     [bp+arg_0], 0
jz      short loc_3FDD6
mov     al, 2Bh ; '+'
push    ax
call    sub_42635
mov     ax, [bp+arg_0]
xor     dx, dx
push    dx
push    ax
call    sub_425D8

loc_3FDD6:
mov     ax, 1

loc_3FDD9:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_3FBCA endp



; Attributes: bp-based frame

sub_3FDE1 proc far

var_12= word ptr -12h
var_10= word ptr -10h
var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 12h
push    si
push    di
call    sub_3F951
mov     [bp+var_2], 0
mov     word ptr ds:0C0E1h, ds
mov     word ptr ds:0C0DFh, 9C78h
mov     word ptr ds:0C0C1h, ds
mov     word ptr ds:0C0BFh, 9D77h
push    ds
mov     ax, 0BE91h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_3FE5D
jmp     loc_3FFC0

loc_3FE16:
call    sub_3FA58
or      ax, ax
jnz     short loc_3FE57
cmp     [bp+var_2], 0
jnz     short loc_3FE4F
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
xor     ax, ax
push    ax
call    sub_3F667
mov     ds:0C0DDh, dx
mov     ds:0C0DBh, ax
or      ax, dx
jz      short loc_3FE4F
push    dx
push    word ptr ds:0C0DBh
les     bx, ds:0C0DBh
push    word ptr es:[bx+4]
call    sub_3FBCA
jmp     loc_3FFC0

loc_3FE4F:
mov     ax, 7F0Ch
mov     dx, ds
jmp     loc_3FFC5

loc_3FE57:
dec     [bp+arg_0]
inc     [bp+var_2]

loc_3FE5D:
cmp     [bp+arg_0], 0
ja      short loc_3FE16
push    word ptr ds:0C0DDh
push    word ptr ds:0C0DBh
les     bx, ds:0C0DBh
push    word ptr es:[bx+4]
call    sub_3FBCA
mov     al, 28h ; '('
push    ax
call    sub_42635
push    word ptr ds:0C0D1h
push    word ptr ds:0C0CDh
call    sub_3F586
mov     [bp+var_10], dx
mov     [bp+var_12], ax
or      ax, dx
jnz     short loc_3FE94
jmp     loc_3FFBA

loc_3FE94:
push    dx
push    [bp+var_12]
les     bx, ds:0C0DBh
push    word ptr es:[bx+4]
call    sub_3F70A
mov     word ptr [bp+var_E+2], dx
mov     word ptr [bp+var_E], ax
les     bx, [bp+var_E]
mov     si, es:[bx+2]
or      si, si
jnz     short loc_3FEB7
jmp     loc_3FFBA

loc_3FEB7:
les     bx, ds:0C0DBh
mov     ax, es:[bx+4]
cmp     ax, ds:0C0CDh
jz      short loc_3FEC9
add     word ptr [bp+var_E], 0Ch

loc_3FEC9:
les     bx, [bp+var_E]
mov     ax, es:[bx+2]
mov     dx, 9
mul     dx
les     bx, ds:0C16Dh
add     bx, ax
push    es
push    bx
les     bx, [bp+var_E]
mov     ax, es:[bx]
mov     dx, 9
mul     dx
pop     bx
pop     es
add     bx, ax
add     bx, 0FFEEh
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
les     bx, [bp+var_E]
mov     di, es:[bx+2]
sub     di, si
jmp     short loc_3FF05

loc_3FF00:
dec     di
sub     word ptr [bp+var_6], 9

loc_3FF05:
or      di, di
jz      short loc_3FF24
les     bx, [bp+var_6]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 2
jz      short loc_3FF24
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 4
jnz     short loc_3FF00

loc_3FF24:
call    sub_3181D
jmp     loc_3FFB3

loc_3FF2C:
les     bx, [bp+var_6]
push    word ptr es:[bx+2]
call    sub_407B3
mov     [bp+var_8], dx
mov     [bp+var_A], ax
mov     byte ptr ds:0C0EDh, 0
les     bx, [bp+var_6]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 2
jnz     short loc_3FF6B
push    dx
push    [bp+var_A]
mov     ax, es:[bx+4]
add     ax, ds:0C0C9h
mov     dx, ds:0C145h
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_41BF1
jmp     short loc_3FFA1

loc_3FF6B:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx+4], 6
jnz     short loc_3FF8C
push    [bp+var_8]
push    [bp+var_A]
push    word ptr ds:0C15Fh
push    word ptr ds:0C15Dh
mov     ax, 2
push    ax
call    sub_41BF1
jmp     short loc_3FFA1

loc_3FF8C:
push    [bp+var_8]
push    [bp+var_A]
push    word ptr ds:0C163h
push    word ptr ds:0C161h
mov     ax, 2
push    ax
call    sub_41BF1

loc_3FFA1:
cmp     si, 1
jle     short loc_3FFAE
push    ds
mov     ax, 7F11h
push    ax
call    sub_42616

loc_3FFAE:
dec     si
sub     word ptr [bp+var_6], 9

loc_3FFB3:
or      si, si
jz      short loc_3FFBA
jmp     loc_3FF2C

loc_3FFBA:
mov     al, 29h ; ')'
push    ax
call    sub_42635

loc_3FFC0:
mov     ax, 9C78h
mov     dx, ds

loc_3FFC5:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    2
sub_3FDE1 endp



; Attributes: bp-based frame

sub_3FFCD proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= byte ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
mov     si, [bp+arg_0]
cmp     si, 1
jnz     short loc_3FFF0
mov     dx, ds:0C13Fh
mov     ax, ds:0C13Dh
push    dx
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
push    cs
call    near ptr sub_3F3F4
jmp     short loc_4002C

loc_3FFF0:
dec     si
call    sub_3F951
jmp     short loc_40010

loc_3FFF6:
call    sub_3FA58
or      ax, ax
jnz     short loc_4000F
mov     [bp+var_4], 0
mov     [bp+var_2], 0
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
jmp     short loc_4002C

loc_4000F:
dec     si

loc_40010:
or      si, si
ja      short loc_3FFF6
mov     dx, ds:0C0CFh
mov     ax, ds:0C0C3h
mov     [bp+var_A], dx
mov     [bp+var_C], ax
push    dx
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
push    cs
call    near ptr sub_3F3F4

loc_4002C:
pop     si
mov     sp, bp
pop     bp
retf    2
sub_3FFCD endp




sub_40033 proc far
mov     ax, ds:0C115h
retf
sub_40033 endp



; Attributes: bp-based frame

sub_40037 proc far

var_16= word ptr -16h
var_14= word ptr -14h
var_12= dword ptr -12h
var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 16h
push    si
push    di
mov     ax, [bp+arg_4]
cmp     ax, ds:0C115h
jbe     short loc_4004B
jmp     loc_401CC

loc_4004B:
or      ax, ax
jnz     short loc_40052
jmp     loc_401CC

loc_40052:
mov     dx, 6
mul     dx
les     bx, ds:0C179h
add     bx, ax
add     bx, 0FFFAh
mov     word ptr [bp+var_E+2], es
mov     word ptr [bp+var_E], bx
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jz      short loc_4007D
push    word ptr [bp+arg_0+2]
push    bx
call    sub_46E60
mov     si, ax
inc     si
jmp     short loc_4007F

loc_4007D:
xor     si, si

loc_4007F:
les     bx, [bp+var_E]
cmp     word ptr es:[bx], 0
jnz     short loc_4008B
jmp     loc_40175

loc_4008B:
mov     ax, es:[bx]
les     bx, ds:0C147h
add     bx, ax
dec     bx
mov     [bp+var_14], es
mov     [bp+var_16], bx
push    [bp+var_14]
push    bx
call    sub_46E60
inc     ax
mov     [bp+var_A], ax
cmp     si, ax
jnz     short loc_400C0
push    [bp+var_14]
push    [bp+var_16]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_46D76
jmp     loc_401CC

loc_400C0:
les     bx, [bp+var_E]
mov     ax, es:[bx]
mov     [bp+var_2], ax
mov     ax, si
sub     ax, [bp+var_A]
mov     [bp+var_6], ax
mov     [bp+var_8], ax
mov     cx, [bp+var_14]
mov     bx, [bp+var_16]
add     bx, [bp+var_A]
mov     dx, ds:0Ch
mov     ax, ds:0Ah
call    sub_46BA0
mov     [bp+var_4], ax
inc     [bp+var_6]
and     [bp+var_6], 0FFFEh
cmp     [bp+var_6], 0
jle     short loc_4010B
push    [bp+var_6]
call    sub_3193F
or      dx, ax
jnz     short loc_40109
jmp     loc_401CC

loc_40109:
jmp     short loc_4011D

loc_4010B:
mov     ax, [bp+var_6]
cwd
mov     bx, ax
mov     cx, dx
mov     ax, 0Ah
mov     dx, ds
call    sub_46AA0

loc_4011D:
mov     dx, [bp+var_14]
mov     ax, [bp+var_16]
add     ax, [bp+var_A]
push    dx
push    ax
mov     ax, [bp+var_16]
add     ax, si
push    dx
push    ax
push    [bp+var_4]
call    sub_46A2C
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    [bp+var_14]
push    [bp+var_16]
push    si
call    sub_46A2C
les     bx, ds:0C179h
mov     word ptr [bp+var_12+2], es
mov     word ptr [bp+var_12], bx
xor     di, di
jmp     short loc_4016D

loc_40157:
les     bx, [bp+var_12]
mov     ax, es:[bx]
cmp     ax, [bp+var_2]
jle     short loc_40168
mov     ax, [bp+var_8]
add     es:[bx], ax

loc_40168:
inc     di
add     word ptr [bp+var_12], 6

loc_4016D:
cmp     di, ds:0C115h
jl      short loc_40157
jmp     short loc_401C0

loc_40175:
or      si, si
jz      short loc_401C0
mov     dx, ds:0Ch
mov     ax, ds:0Ah
mov     cx, ds:0C149h
mov     bx, ds:0C147h
call    sub_46BA0
inc     ax
mov     [bp+var_2], ax
les     bx, ds:0Ah
mov     [bp+var_14], es
mov     [bp+var_16], bx
push    si
call    sub_3193F
or      dx, ax
jz      short loc_401CC
mov     ax, [bp+var_2]
les     bx, [bp+var_E]
mov     es:[bx], ax
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    [bp+var_14]
push    [bp+var_16]
push    si
call    sub_46A2C

loc_401C0:
or      si, si
jnz     short loc_401CC
les     bx, [bp+var_E]
mov     word ptr es:[bx], 0

loc_401CC:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    6
sub_40037 endp



; Attributes: bp-based frame

sub_401D4 proc far

var_4= dword ptr -4
arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
mov     si, [bp+arg_0]
cmp     si, ds:0C115h
ja      short loc_40204
or      si, si
jz      short loc_40204
mov     ax, si
mov     dx, 6
mul     dx
les     bx, ds:0C179h
add     bx, ax
add     bx, 0FFFAh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
cmp     word ptr es:[bx], 0
jnz     short loc_4020A

loc_40204:
xor     dx, dx
mov     ax, dx
jmp     short loc_4021C

loc_4020A:
les     bx, [bp+var_4]
mov     ax, es:[bx]
push    ax
mov     dx, ds:0C149h
mov     ax, ds:0C147h
pop     bx
add     ax, bx
dec     ax

loc_4021C:
pop     si
mov     sp, bp
pop     bp
retf    2
sub_401D4 endp



; Attributes: bp-based frame

sub_40223 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
inc     byte ptr ds:0C0F1h
cmp     byte ptr ds:0C0F1h, 1
jbe     short loc_40237
jmp     loc_402AF

loc_40237:
call    sub_317D1
call    sub_25E8B
call    sub_32250
mov     bx, 0C12Bh
push    ds
push    bx
les     bx, ds:5AAh
push    es
push    bx
mov     cx, 1Ch
call    sub_46BE5
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
mov     ax, 1
push    ax
call    sub_3F667
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_402AF
les     bx, [bp+var_4]
mov     ax, es:[bx+4]
cmp     ax, ds:0C13Dh
jnz     short loc_402AF
mov     ax, es:[bx+6]
cmp     ax, ds:0C13Fh
jnz     short loc_402AF
mov     ax, es:[bx+8]
shr     ax, 1
shr     ax, 1
shr     ax, 1
test    ax, 1
jz      short loc_402AF
mov     ax, es:[bx+8]
mov     cl, 4
shr     ax, cl
and     ax, 7
shl     ax, 1
mov     dx, ds:0C143h
sub     dx, ax
mov     ds:0C133h, dx

loc_402AF:
mov     sp, bp
pop     bp
retf
sub_40223 endp




sub_402B3 proc far
dec     byte ptr ds:0C0F1h
cmp     byte ptr ds:0C0F1h, 0
ja      short locret_402C3
call    sub_317DE

locret_402C3:
retf
sub_402B3 endp



; Attributes: bp-based frame

sub_402C4 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 1
jz      short loc_4030D
cmp     byte ptr es:[bx], 7
jz      short loc_4030D
cmp     byte ptr es:[bx], 8
jz      short loc_4030D
cmp     byte ptr es:[bx], 2Bh ; '+'
jz      short loc_4030D
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_40315
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 10h
jnz     short loc_40315
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_4030D
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx

loc_4030D:
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
jmp     short loc_40319

loc_40315:
xor     dx, dx
mov     ax, dx

loc_40319:
pop     bp
retf    4
sub_402C4 endp



; Attributes: bp-based frame

sub_4031D proc far

var_A= dword ptr -0Ah
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch
arg_A= word ptr  10h
arg_C= word ptr  12h

push    bp
mov     bp, sp
sub     sp, 0Ah
mov     word ptr ds:0C0EBh, 0FFFFh
push    ds
mov     ax, 0BE91h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_40383
mov     byte ptr ds:9A63h, 0
cmp     word ptr ds:0C0EBh, 0FFFFh
jnz     short loc_40346
jmp     loc_4061F

loc_40346:
mov     ax, ds:0BF6Eh
cmp     ax, [bp+arg_A]
jb      short loc_40375
push    [bp+arg_C]
push    [bp+arg_A]
call    sub_46E60
mov     cx, [bp+arg_C]
mov     bx, [bp+arg_A]
add     bx, ax
cmp     bx, ds:0BF6Eh
jb      short loc_40375
mov     ax, ds:0BF6Eh
xor     dx, dx
sub     ax, [bp+arg_A]
sbb     dx, 0
jmp     loc_40621

loc_40375:
push    [bp+arg_C]
push    [bp+arg_A]
call    sub_46E60
jmp     loc_40621

loc_40383:
les     bx, [bp+arg_2]
mov     word ptr es:[bx], 0
call    sub_3181D
les     bx, [bp+arg_6]
mov     word ptr ds:0C0D9h, es
mov     ds:0C0D7h, bx
mov     word ptr ds:0BEE4h, 0
push    [bp+arg_C]
push    [bp+arg_A]
mov     ax, 2
push    ax
call    sub_2AEE2
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
push    dx
push    ax
call    sub_21BF9
les     bx, [bp+arg_2]
mov     es:[bx], ax
cmp     [bp+arg_0], 0
jnz     short loc_403E3
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_2D2F3
or      ax, ax
jz      short loc_403E3
mov     ax, 87h
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_403E3:
mov     byte ptr ds:0C0EDh, 0
cmp     byte ptr ds:0BED2h, 8
jz      short loc_403F2
jmp     loc_405A0

loc_403F2:
les     bx, ds:0BF6Eh
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_40401

loc_403FE:
inc     word ptr [bp+var_4]

loc_40401:
les     bx, [bp+var_4]
mov     al, es:[bx]
cbw
mov     bx, ax
test    byte ptr [bx-7EDFh], 1
jnz     short loc_403FE
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_46483
mov     ds:0C14Bh, ax
or      ax, ax
jz      short loc_4045A
les     bx, [bp+arg_2]
mov     word ptr es:[bx], 0
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    cs
call    near ptr sub_402C4
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
or      ax, dx
jnz     short loc_4045A
les     bx, [bp+var_4]
mov     word ptr ds:0BF70h, es
mov     ds:0BF6Eh, bx
mov     ax, 37h ; '7'
push    ax
call    sub_312DE
inc     sp
inc     sp
jmp     short loc_4045A

loc_40457:
inc     word ptr [bp+var_4]

loc_4045A:
les     bx, [bp+var_4]
mov     al, es:[bx]
cbw
mov     bx, ax
test    byte ptr [bx-7EDFh], 2
jnz     short loc_40457
mov     byte ptr ds:0C0EEh, 0
jmp     loc_40592

loc_40472:
les     bx, [bp+var_4]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F01
sub     ax, 63h ; 'c'   ; switch 22 cases
cmp     ax, 15h
jbe     short loc_4048A
jmp     def_4048E       ; jumptable 0004048E default case, cases 101,103,105-108,110,111,113,116-119

loc_4048A:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_4048E[bx] ; switch jump
jpt_4048E dw offset loc_404BF ; jump table for switch statement
dw offset loc_404C6
dw offset def_4048E
dw offset loc_404CD
dw offset def_4048E
dw offset loc_40517
dw offset def_4048E
dw offset def_4048E
dw offset def_4048E
dw offset def_4048E
dw offset loc_404FB
dw offset def_4048E
dw offset def_4048E
dw offset loc_40502
dw offset def_4048E
dw offset loc_40509
dw offset loc_40510
dw offset def_4048E
dw offset def_4048E
dw offset def_4048E
dw offset def_4048E
dw offset loc_40517

loc_404BF:              ; jumptable 0004048E case 99
mov     [bp+var_6], 1
jmp     short loc_40534

loc_404C6:              ; jumptable 0004048E case 100
mov     [bp+var_6], 2
jmp     short loc_40534

loc_404CD:              ; jumptable 0004048E case 102
mov     [bp+var_6], 0
mov     dx, word ptr [bp+var_4+2]
mov     ax, word ptr [bp+var_4]
inc     ax
push    dx
push    ax
call    sub_46483
mov     ds:0C0EEh, al
jmp     short loc_404E8

loc_404E5:
inc     word ptr [bp+var_4]

loc_404E8:
les     bx, [bp+var_4]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx-7EDFh], 2
jnz     short loc_404E5
jmp     short loc_40534

loc_404FB:              ; jumptable 0004048E case 109
mov     [bp+var_6], 4
jmp     short loc_40534

loc_40502:              ; jumptable 0004048E case 112
mov     [bp+var_6], 8
jmp     short loc_40534

loc_40509:              ; jumptable 0004048E case 114
mov     [bp+var_6], 10h
jmp     short loc_40534

loc_40510:              ; jumptable 0004048E case 115
mov     [bp+var_6], 20h ; ' '
jmp     short loc_40534

loc_40517:              ; jumptable 0004048E cases 104,120
mov     [bp+var_6], 40h ; '@'
jmp     short loc_40534

def_4048E:              ; jumptable 0004048E default case, cases 101,103,105-108,110,111,113,116-119
les     bx, [bp+var_4]
mov     word ptr ds:0BF70h, es
mov     ds:0BF6Eh, bx
mov     ax, 58h ; 'X'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_40534:
mov     ax, [bp+var_6]
push    ax
mov     al, ds:0C0EDh
cbw
pop     dx
test    ax, dx
jz      short loc_40557
les     bx, [bp+var_4]
mov     word ptr ds:0BF70h, es
mov     ds:0BF6Eh, bx
mov     ax, 58h ; 'X'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_40557:
mov     al, byte ptr [bp+var_6]
or      ds:0C0EDh, al
test    byte ptr ds:0C0EDh, 4
jz      short loc_4058F
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    cs
call    near ptr sub_402C4
mov     word ptr [bp+var_A+2], dx
mov     word ptr [bp+var_A], ax
or      ax, dx
jnz     short loc_4058F
les     bx, [bp+var_4]
mov     word ptr ds:0BF70h, es
mov     ds:0BF6Eh, bx
mov     ax, 4Ah ; 'J'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_4058F:
inc     word ptr [bp+var_4]

loc_40592:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jz      short loc_4059E
jmp     loc_40472

loc_4059E:
jmp     short loc_405A6

loc_405A0:
mov     word ptr ds:0C14Bh, 0

loc_405A6:
les     bx, [bp+arg_2]
cmp     word ptr es:[bx], 0
jz      short loc_40605
les     bx, [bp+var_A]
les     bx, es:[bx+2]
mov     word ptr ds:0C0E5h, es
mov     ds:0C0E3h, bx
les     bx, [bp+var_A]
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_405EE
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_410A3
mov     ds:0C16Bh, dx
mov     ds:0C169h, ax
les     bx, [bp+var_A]
mov     al, es:[bx+0Ah]
mov     ds:0C0F2h, al
mov     al, es:[bx+0Bh]
mov     ds:0C0BAh, al
jmp     short loc_40605

loc_405EE:
mov     byte ptr ds:0C0F2h, 0
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
call    sub_410A3
mov     ds:0C16Bh, dx
mov     ds:0C169h, ax

loc_40605:
push    word ptr [bp+var_A+2]
push    word ptr [bp+var_A]
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_41944
mov     byte ptr ds:9A63h, 0

loc_4061F:
xor     ax, ax

loc_40621:
mov     sp, bp
pop     bp
retf    0Eh
sub_4031D endp



; Attributes: bp-based frame

sub_40627 proc far

var_A= word ptr -0Ah
var_8= word ptr -8
var_6= dword ptr -6
var_2= byte ptr -2
arg_0= dword ptr  6
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     word ptr ds:0C0EBh, 0FFFFh
push    ds
mov     ax, 0BE91h
push    ax
call    sub_469C1
or      ax, ax
jz      short loc_4068F
mov     byte ptr ds:9A63h, 0
cmp     word ptr ds:0C0EBh, 0FFFFh
jnz     short loc_40652
jmp     loc_4073F

loc_40652:
mov     ax, ds:0BF6Eh
cmp     ax, [bp+arg_4]
jb      short loc_40681
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46E60
mov     cx, [bp+arg_6]
mov     bx, [bp+arg_4]
add     bx, ax
cmp     bx, ds:0BF6Eh
jb      short loc_40681
mov     ax, ds:0BF6Eh
xor     dx, dx
sub     ax, [bp+arg_4]
sbb     dx, 0
jmp     loc_40741

loc_40681:
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46E60
jmp     loc_40741

loc_4068F:
call    sub_3181D
les     bx, [bp+arg_0]
mov     word ptr ds:0C0D9h, es
mov     ds:0C0D7h, bx
mov     word ptr ds:0BEE4h, 0
push    [bp+arg_6]
push    [bp+arg_4]
xor     ax, ax
push    ax
call    sub_2AEE2
push    dx
push    ax
push    word ptr ds:0C0E5h
push    word ptr ds:0C0E3h
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
push    dx
push    ax
call    sub_413A9
mov     word ptr [bp+var_6+2], dx
mov     word ptr [bp+var_6], ax
cmp     byte ptr ds:0C0F2h, 0
jz      short loc_40715
mov     si, 1
mov     cl, ds:0C0F2h
shl     si, cl
dec     si
les     bx, [bp+var_6]
mov     di, es:[bx+6]
and     di, si
les     bx, ds:0C169h
mov     [bp+var_8], es
mov     [bp+var_A], bx
mov     ax, si
mov     cl, ds:0C0BAh
shl     ax, cl
not     ax
and     es:[bx], ax
mov     ax, di
mov     cl, ds:0C0BAh
shl     ax, cl
or      es:[bx], ax
jmp     short loc_40726

loc_40715:
push    word ptr ds:0C16Bh
push    word ptr ds:0C169h
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
call    sub_41287

loc_40726:
push    word ptr [bp+var_6+2]
push    word ptr [bp+var_6]
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ss
lea     ax, [bp+var_2]
push    ax
call    sub_41944
mov     byte ptr ds:9A63h, 0

loc_4073F:
xor     ax, ax

loc_40741:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_40627 endp



; Attributes: bp-based frame

sub_40749 proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= byte ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah
arg_8= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 1Ah
push    ax
call    sub_318B7
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
mov     ax, 1Ah
push    ax
mov     al, 0
push    ax
call    sub_46C10
mov     dx, ds:0BD9Eh
mov     ax, ds:0BD9Ch
les     bx, [bp+var_4]
mov     es:[bx+2], dx
mov     es:[bx], ax
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
mov     es:[bx+0Eh], dx
mov     es:[bx+0Ch], ax
mov     word ptr ds:0BD9Eh, es
mov     ds:0BD9Ch, bx
mov     al, [bp+arg_2]
mov     es:[bx+19h], al
mov     ax, [bp+arg_8]
mov     es:[bx+12h], ax
mov     ax, [bp+arg_0]
mov     es:[bx+10h], ax
mov     dx, word ptr [bp+var_4+2]
mov     ax, bx
mov     sp, bp
pop     bp
retn    0Ah
sub_40749 endp



; Attributes: bp-based frame

sub_407B3 proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    di
mov     di, [bp+arg_0]
or      di, di
jnz     short loc_407CD
mov     ax, 0A0h
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_407CD:
mov     ax, di
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     si, 2
mov     al, es:[bx]
mov     ah, 0
sub     ax, 15h         ; switch 15 cases
cmp     ax, 0Eh
ja      short def_407F6 ; jumptable 000407F6 default case, cases 23-25,27-29,32,33
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_407F6[bx] ; switch jump
jpt_407F6 dw offset loc_40845 ; jump table for switch statement
dw offset loc_4086A
dw offset def_407F6
dw offset def_407F6
dw offset def_407F6
dw offset loc_40891
dw offset def_407F6
dw offset def_407F6
dw offset def_407F6
dw offset loc_408CA
dw offset loc_408CD
dw offset def_407F6
dw offset def_407F6
dw offset loc_408ED
dw offset loc_4090D

def_407F6:              ; jumptable 000407F6 default case, cases 23-25,27-29,32,33
les     bx, [bp+var_8]
mov     al, es:[bx]
mov     ah, 0
mov     bx, ax
mov     al, [bx+7E66h]
cbw
mov     si, ax
or      si, si
jnz     short loc_40839
mov     ax, 40h ; '@'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_40839:
push    si
xor     ax, ax
push    ax
call    sub_2A52D
jmp     loc_4091F

loc_40845:              ; jumptable 000407F6 case 21
les     bx, [bp+var_8]
push    word ptr es:[bx+6]
call    sub_407B3
push    dx
push    ax
les     bx, [bp+var_8]
mov     al, es:[bx+5]
mov     ah, 0
mov     bx, ax
mov     al, [bx+7E95h]
cbw
push    ax
call    sub_2A771
jmp     loc_4091F

loc_4086A:              ; jumptable 000407F6 case 22
les     bx, [bp+var_8]
push    word ptr es:[bx+6]
call    sub_407B3
push    dx
push    ax
les     bx, [bp+var_8]
cmp     byte ptr es:[bx+5], 0
jz      short loc_40885
mov     ax, 6
jmp     short loc_40888

loc_40885:
mov     ax, 5

loc_40888:
push    ax
call    sub_2A771
jmp     loc_4091F

loc_40891:              ; jumptable 000407F6 case 26
les     bx, [bp+var_8]
push    word ptr es:[bx+6]
call    sub_407B3
mov     [bp+var_2], dx
mov     [bp+var_4], ax
les     bx, [bp+var_8]
mov     ax, es:[bx+3]
push    ax
push    dx
push    [bp+var_4]
call    sub_2A8BF
mov     bx, ax
pop     ax
xor     dx, dx
div     bx
push    ax
push    [bp+var_2]
push    [bp+var_4]
xor     ax, ax
push    ax
call    sub_2A549
jmp     short loc_4091F

loc_408CA:              ; jumptable 000407F6 case 30
mov     si, 1

loc_408CD:              ; jumptable 000407F6 case 31
mov     ax, 12h
push    ax
push    di
xor     ax, ax
push    ax
push    ax
push    si
les     bx, [bp+var_8]
push    word ptr es:[bx+3]
call    sub_40749
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_2A7EC
jmp     short loc_4091F

loc_408ED:              ; jumptable 000407F6 case 34
mov     ax, 13h
push    ax
push    di
xor     ax, ax
push    ax
push    ax
mov     ax, 3
push    ax
mov     ax, 2
push    ax
call    sub_40749
push    dx
push    ax
xor     ax, ax
push    ax
call    sub_2A7EC
jmp     short loc_4091F

loc_4090D:              ; jumptable 000407F6 case 35
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
push    ax
call    sub_2A5CF

loc_4091F:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    2
sub_407B3 endp



; Attributes: bp-based frame

sub_40927 proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
les     bx, ds:0C171h
mov     word ptr [bp+var_C+2], es
mov     word ptr [bp+var_C], bx
mov     si, ds:0C10Dh
jmp     short loc_4096A

loc_4093E:
les     bx, [bp+var_C]
mov     ax, es:[bx]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46DF5
or      ax, ax
jz      short loc_4096E
dec     si
add     word ptr [bp+var_C], 10h

loc_4096A:
or      si, si
jnz     short loc_4093E

loc_4096E:
cmp     si, ds:0C10Dh
jb      short loc_40986
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40986:
push    ds
mov     ax, 9A78h
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46D76
les     bx, [bp+var_C]
push    word ptr es:[bx+4]
push    word ptr es:[bx+6]
mov     ax, 9A78h
push    ax
xor     ax, ax
push    ax
call    sub_3F781
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
or      ax, dx
jnz     short loc_409C7
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_409C7:
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 6
jnz     short loc_409E1
mov     ax, 49h ; 'I'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_409E1:
les     bx, [bp+var_8]
push    word ptr es:[bx+2]
call    sub_407B3
push    dx
push    ax
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_299B0
mov     [bp+var_2], dx
mov     [bp+var_4], ax
push    dx
push    ax
call    sub_1FE60
pop     si
mov     sp, bp
pop     bp
retf    8
sub_40927 endp



; Attributes: bp-based frame

sub_40A0C proc near

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
push    si
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_3F815
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
or      ax, dx
jnz     short loc_40A41
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40A41:
les     bx, [bp+var_8]
push    word ptr es:[bx+2]
call    sub_407B3
mov     [bp+var_2], dx
mov     [bp+var_4], ax
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 6           ; switch 7 cases
ja      short def_40A64 ; jumptable 00040A64 default case, cases 3,5
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_40A64[bx] ; switch jump
jpt_40A64 dw offset loc_40AA4 ; jump table for switch statement
dw offset loc_40AA4
dw offset loc_40AA4
dw offset def_40A64
dw offset loc_40A77
dw offset def_40A64
dw offset loc_40AB7

loc_40A77:              ; jumptable 00040A64 case 4
les     bx, [bp+var_8]
mov     al, es:[bx+4]
mov     ah, 0
mov     bx, ax
mov     al, [bx+7E9Ch]
cbw
mov     si, ax
mov     al, 4
push    ax
push    [bp+var_2]
push    [bp+var_4]
mov     dx, ds:5ACh
mov     ax, ds:5AAh
add     ax, si
push    dx
push    ax
call    sub_29943
jmp     short def_40A64 ; jumptable 00040A64 default case, cases 3,5

loc_40AA4:              ; jumptable 00040A64 cases 0-2
push    [bp+var_2]
push    [bp+var_4]
push    word ptr [bp+var_8+2]
push    word ptr [bp+var_8]
call    sub_299B0
jmp     short def_40A64 ; jumptable 00040A64 default case, cases 3,5

loc_40AB7:              ; jumptable 00040A64 case 6
mov     ax, 49h ; 'I'
push    ax
call    sub_312DE
inc     sp
inc     sp

def_40A64:              ; jumptable 00040A64 default case, cases 3,5
pop     si
mov     sp, bp
pop     bp
retn    8
sub_40A0C endp



; Attributes: bp-based frame

sub_40AC9 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 5Fh ; '_'
jnz     short loc_40B42
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx-7EDFh], 4
jz      short loc_40B42
mov     bx, word ptr [bp+arg_0]
mov     al, es:[bx+2]
cbw
mov     bx, ax
test    byte ptr [bx-7EDFh], 4
jz      short loc_40B42
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    ss
lea     ax, [bp+var_4]
push    ax
call    sub_32285
mov     si, ax
or      si, si
jl      short loc_40B42
cmp     word ptr ds:0C0EFh, 2
jz      short loc_40B27
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40B27:
mov     al, 4
push    ax
push    [bp+var_2]
push    [bp+var_4]
mov     dx, ds:5ACh
mov     ax, ds:5AAh
add     ax, si
push    dx
push    ax
call    sub_29943
jmp     short loc_40B53

loc_40B42:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
call    sub_40A0C

loc_40B53:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_40AC9 endp



; Attributes: bp-based frame

sub_40B5A proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    word ptr ds:0BEDAh
push    word ptr ds:0BED8h
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
xor     ax, ax
push    ax
call    sub_3F815
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_40BA1
les     bx, [bp+var_4]
cmp     word ptr es:[bx+2], 0
jnz     short loc_40BA1
test    word ptr es:[bx+8], 7
jnz     short loc_40BA1
push    [bp+arg_2]
push    [bp+arg_0]
push    dx
push    bx
call    sub_299B0
jmp     short loc_40BA5

loc_40BA1:
xor     dx, dx
mov     ax, dx

loc_40BA5:
mov     sp, bp
pop     bp
retf    4
sub_40B5A endp



; Attributes: bp-based frame

sub_40BAB proc far

var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
xor     ax, ax
push    ax
call    sub_3F815
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
or      ax, dx
jz      short loc_40BDE
les     bx, [bp+var_4]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 6
jz      short loc_40BE4

loc_40BDE:
xor     dx, dx
mov     ax, dx
jmp     short loc_40BEE

loc_40BE4:
les     bx, [bp+var_4]
push    word ptr es:[bx+2]
call    sub_407B3

loc_40BEE:
mov     sp, bp
pop     bp
retf    4
sub_40BAB endp



; Attributes: bp-based frame

sub_40BF4 proc far

var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr ds:0C13Fh
push    word ptr ds:0C13Dh
mov     ax, 1
push    ax
call    sub_3F815
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
or      ax, dx
jnz     short loc_40C2B
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 0B8h
push    ax
call    sub_312DE
add     sp, 6

loc_40C2B:
les     bx, [bp+var_C]
mov     ax, es:[bx+2]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+var_C]
push    word ptr es:[bx+2]
push    [bp+arg_2]
push    [bp+arg_0]
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 1Eh
jnz     short loc_40C60
mov     ax, 1
jmp     short loc_40C63

loc_40C60:
mov     ax, 2

loc_40C63:
push    ax
les     bx, [bp+var_4]
push    word ptr es:[bx+3]
call    sub_40749
mov     [bp+var_6], dx
mov     [bp+var_8], ax
mov     sp, bp
pop     bp
retf    4
sub_40BF4 endp



; Attributes: bp-based frame

sub_40C7A proc far

var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 20h
push    si
les     bx, [bp+arg_4]
les     bx, es:[bx+6]
mov     word ptr [bp+var_14+2], es
mov     word ptr [bp+var_14], bx
call    sub_3F951
jmp     loc_40DEA

loc_40C94:
mov     dx, ds:0C0DDh
mov     ax, ds:0C0DBh
cmp     dx, word ptr [bp+var_14+2]
jz      short loc_40CA3
jmp     loc_40DEA

loc_40CA3:
cmp     ax, word ptr [bp+var_14]
jz      short loc_40CAB
jmp     loc_40DEA

loc_40CAB:
push    [bp+arg_2]
push    [bp+arg_0]
push    word ptr ds:0C0D1h
push    word ptr ds:0C0CDh
xor     ax, ax
push    ax
call    sub_3F815
mov     word ptr [bp+var_14+2], dx
mov     word ptr [bp+var_14], ax
or      ax, dx
jnz     short loc_40CDB
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40CDB:
les     bx, [bp+var_14]
push    word ptr es:[bx+2]
call    sub_407B3
mov     [bp+var_1E], dx
mov     [bp+var_20], ax
les     bx, [bp+var_14]
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 6           ; switch 7 cases
jbe     short loc_40CFD
jmp     def_40D01       ; jumptable 00040D01 default case, cases 3,5

loc_40CFD:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_40D01[bx] ; switch jump
jpt_40D01 dw offset loc_40D6E ; jump table for switch statement
dw offset loc_40D6E
dw offset loc_40D87
dw offset def_40D01
dw offset loc_40D14
dw offset def_40D01
dw offset loc_40DD1

loc_40D14:              ; jumptable 00040D01 case 4
les     bx, [bp+var_14]
cmp     byte ptr es:[bx+4], 6
jnz     short loc_40D2A
les     bx, ds:0C15Dh
mov     [bp+var_16], es
mov     [bp+var_18], bx
jmp     short loc_40D52

loc_40D2A:
les     bx, [bp+var_14]
cmp     byte ptr es:[bx+4], 7
jnz     short loc_40D40
les     bx, ds:0C161h
mov     [bp+var_16], es
mov     [bp+var_18], bx
jmp     short loc_40D52

loc_40D40:
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40D52:
mov     al, 4
push    ax
push    [bp+var_1E]
push    [bp+var_20]
push    [bp+var_16]
push    [bp+var_18]
call    sub_29943
mov     [bp+var_1A], dx
mov     [bp+var_1C], ax
jmp     short def_40D01 ; jumptable 00040D01 default case, cases 3,5

loc_40D6E:              ; jumptable 00040D01 cases 0,1
push    [bp+var_1E]
push    [bp+var_20]
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14]
call    sub_299B0
mov     [bp+var_1A], dx
mov     [bp+var_1C], ax
jmp     short def_40D01 ; jumptable 00040D01 default case, cases 3,5

loc_40D87:              ; jumptable 00040D01 case 2
push    [bp+var_1E]
push    [bp+var_20]
xor     ax, ax
push    ax
call    sub_2A980
push    dx
push    ax
les     bx, [bp+var_14]
mov     ax, es:[bx+4]
add     ax, ds:0C0C9h
mov     dx, ds:0C145h
push    dx
push    ax
call    sub_29A88
mov     [bp+var_1A], dx
mov     [bp+var_1C], ax
mov     al, 2Bh ; '+'
push    ax
push    [bp+var_1E]
push    [bp+var_20]
push    dx
push    [bp+var_1C]
xor     ax, ax
push    ax
push    ax
call    sub_29862
mov     [bp+var_1A], dx
mov     [bp+var_1C], ax
jmp     short def_40D01 ; jumptable 00040D01 default case, cases 3,5

loc_40DD1:              ; jumptable 00040D01 case 6
mov     ax, 49h ; 'I'
push    ax
call    sub_312DE
inc     sp
inc     sp

def_40D01:              ; jumptable 00040D01 default case, cases 3,5
push    [bp+var_1A]
push    [bp+var_1C]
call    sub_1FE60
jmp     loc_40F20

loc_40DEA:
call    sub_3FA58
or      ax, ax
jz      short loc_40DF4
jmp     loc_40C94

loc_40DF4:
les     bx, [bp+var_14]
push    word ptr es:[bx+6]
push    word ptr es:[bx+4]
call    sub_3F586
mov     word ptr [bp+var_C+2], dx
mov     word ptr [bp+var_C], ax
or      ax, dx
jnz     short loc_40E1E
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40E1E:
push    word ptr [bp+var_C+2]
push    word ptr [bp+var_C]
les     bx, [bp+var_14]
push    word ptr es:[bx+4]
call    sub_3F70A
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
or      ax, dx
jnz     short loc_40E4A
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40E4A:
les     bx, [bp+var_C]
mov     ax, es:[bx+8]
mov     dx, 0Ch
mul     dx
les     bx, ds:0C165h
add     bx, ax
push    es
push    bx
les     bx, [bp+var_C]
mov     ax, es:[bx+0Ah]
mov     dx, 0Ch
mul     dx
pop     bx
pop     es
add     bx, ax
add     bx, 0FFF4h
mov     [bp+var_2], es
mov     [bp+var_4], bx
les     bx, [bp+var_8]
mov     si, es:[bx+8]
add     si, es:[bx+0Ah]
jmp     short loc_40EF8

loc_40E84:
push    ds
mov     ax, 9A78h
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46D76
les     bx, [bp+var_8]
push    word ptr es:[bx]
push    word ptr es:[bx+2]
mov     ax, 9A78h
push    ax
xor     ax, ax
push    ax
call    sub_3F781
mov     word ptr [bp+var_10+2], dx
mov     word ptr [bp+var_10], ax
or      ax, dx
jz      short loc_40EF4
les     bx, [bp+var_10]
test    word ptr es:[bx+8], 7
jz      short loc_40EDB
mov     ax, es:[bx+8]
and     ax, 7
cmp     ax, 1
jz      short loc_40EDB
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40EDB:
push    [bp+arg_2]
push    [bp+arg_0]
les     bx, [bp+var_C]
push    word ptr es:[bx+2]
les     bx, [bp+var_8]
push    word ptr es:[bx+8]
call    sub_40A0C
jmp     short loc_40F20

loc_40EF4:
add     word ptr [bp+var_8], 0Ch

loc_40EF8:
mov     ax, word ptr [bp+var_8]
cmp     ax, [bp+var_4]
jnb     short loc_40F0E
les     bx, [bp+var_8]
mov     ax, es:[bx+8]
cmp     ax, si
jnb     short loc_40F0E
jmp     loc_40E84

loc_40F0E:
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_40F20:
pop     si
mov     sp, bp
pop     bp
retf    8
sub_40C7A endp



; Attributes: bp-based frame

sub_40F27 proc far

var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= dword ptr -6
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Eh
push    si
push    di
les     bx, [bp+arg_4]
les     bx, es:[bx+2]
les     bx, es:[bx]
les     bx, es:[bx+8]
mov     ax, es:[bx+12h]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     [bp+var_C], es
mov     [bp+var_E], bx
mov     al, es:[bx]
mov     ah, 0
mov     di, ax
mov     ax, es:[bx+6]
dec     ax
mov     dx, 5
mul     dx
les     bx, ds:0C175h
add     bx, ax
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
xor     si, si
mov     [bp+var_2], si
test    byte ptr ds:0C123h, 1
jnz     short loc_40F9F
push    ds
mov     ax, 9A78h
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46D76
push    ds
mov     ax, 9A78h
push    ax
call    sub_25E94
mov     [bp+arg_2], ds
mov     [bp+arg_0], 9A78h

loc_40F9F:
les     bx, [bp+var_6]
mov     ax, es:[bx]
mov     cl, 6
shr     ax, cl
test    ax, 1
jz      short loc_40FBA
mov     [bp+var_2], 0
mov     si, es:[bx+1]
jmp     loc_41073

loc_40FBA:
push    [bp+arg_2]
push    [bp+arg_0]
les     bx, [bp+var_6]
mov     ax, es:[bx+1]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_46D55
or      ax, ax
jnz     short loc_4102C
les     bx, [bp+var_6]
push    word ptr es:[bx+3]
call    sub_407B3
mov     [bp+var_8], dx
mov     [bp+var_A], ax
les     bx, [bp+var_6]
test    word ptr es:[bx], 3Fh
jz      short loc_41018
mov     ax, es:[bx]
and     ax, 3Fh
push    ax
push    [bp+var_2]
push    dx
push    [bp+var_A]
xor     ax, ax
push    ax
call    sub_2A7A3
mov     [bp+var_8], dx
mov     [bp+var_A], ax

loc_41018:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    [bp+var_8]
push    [bp+var_A]
push    si
call    sub_21F9A
jmp     short loc_4109B

loc_4102C:
cmp     di, 1Eh
jnz     short loc_41073
les     bx, [bp+var_6]
test    word ptr es:[bx], 3Fh
jz      short loc_41053
mov     ax, es:[bx]
and     ax, 3Fh
add     [bp+var_2], ax
jmp     short loc_4104B

loc_41046:
sub     [bp+var_2], 8
inc     si

loc_4104B:
cmp     [bp+var_2], 8
jge     short loc_41046
jmp     short loc_41073

loc_41053:
les     bx, [bp+var_6]
mov     ax, es:[bx+3]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     [bp+var_C], es
mov     [bp+var_E], bx
mov     ax, es:[bx+3]
add     si, ax

loc_41073:
les     bx, [bp+var_6]
mov     ax, es:[bx]
mov     cl, 7
shr     ax, cl
test    ax, 1
jnz     short loc_41089
add     word ptr [bp+var_6], 5
jmp     loc_40F9F

loc_41089:
push    [bp+arg_2]
push    [bp+arg_0]
mov     ax, 48h ; 'H'
push    ax
call    sub_312DE
add     sp, 6

loc_4109B:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_40F27 endp



; Attributes: bp-based frame

sub_410A3 proc far

var_8= dword ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 2Bh ; '+'
jnz     short loc_410B9
jmp     loc_4117E

loc_410B9:
jg      short loc_410CB
cmp     ax, 1
jz      short loc_41128
cmp     ax, 4
jnz     short loc_410C8
jmp     loc_4120A

loc_410C8:
jmp     loc_41217

loc_410CB:
cmp     ax, 37h ; '7'
jz      short loc_410FA
cmp     ax, 38h ; '8'
jz      short loc_410D8
jmp     loc_41217

loc_410D8:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_413A9
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_410A3
jmp     loc_41221

loc_410FA:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_410A3
mov     [bp+var_2], dx
mov     [bp+var_4], ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_413A9
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
jmp     loc_41221

loc_41128:
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+var_8+2], es
mov     word ptr [bp+var_8], bx
mov     ax, es:[bx+8]
and     ax, 7
or      ax, ax
jz      short loc_4114D
cmp     ax, 1
jz      short loc_4114D
cmp     ax, 2
jz      short loc_41165
jmp     loc_41217

loc_4114D:
les     bx, [bp+var_8]
mov     ax, es:[bx+4]
les     bx, [bp+arg_0]
add     ax, es:[bx+0Ah]
les     bx, [bp+var_8]
mov     dx, es:[bx+6]
jmp     loc_41221

loc_41165:
les     bx, [bp+var_8]
mov     ax, es:[bx+4]
add     ax, ds:0C133h
les     bx, [bp+arg_0]
add     ax, es:[bx+0Ah]
mov     dx, ds:0C145h
jmp     loc_41221

loc_4117E:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
call    sub_413A9
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
mov     word ptr [bp+arg_0+2], dx
mov     word ptr [bp+arg_0], ax
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2
jnz     short loc_41217
mov     bx, ax
cmp     byte ptr es:[bx+1], 7
jnz     short loc_411F8
mov     bx, ax
les     bx, es:[bx+2]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
dec     ax              ; switch 4 cases
cmp     ax, 3
ja      short def_411CA ; jumptable 000411CA default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_411CA[bx] ; switch jump
jpt_411CA dw offset loc_411DD ; jump table for switch statement
dw offset loc_411D7
dw offset loc_411E3
dw offset loc_411E9

loc_411D7:              ; jumptable 000411CA case 2
mov     si, ds:0C13Fh
jmp     short def_411CA ; jumptable 000411CA default case

loc_411DD:              ; jumptable 000411CA case 1
mov     si, ds:0C13Bh
jmp     short def_411CA ; jumptable 000411CA default case

loc_411E3:              ; jumptable 000411CA case 3
mov     si, ds:0C145h
jmp     short def_411CA ; jumptable 000411CA default case

loc_411E9:              ; jumptable 000411CA case 4
mov     si, ds:0C139h

def_411CA:              ; jumptable 000411CA default case
les     bx, [bp+arg_0]
mov     ax, es:[bx+6]
mov     dx, si
jmp     short loc_41221

loc_411F8:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx+1], 0Ah
jnz     short loc_4120A
mov     dx, es:[bx+6]
xor     ax, ax
jmp     short loc_41221

loc_4120A:
les     bx, [bp+arg_0]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
jmp     short loc_41221

loc_41217:
xor     ax, ax
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_41221:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_410A3 endp



; Attributes: bp-based frame

sub_41228 proc near

var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    di
les     bx, [bp+arg_4]
mov     cl, es:[bx+0Ah]
mov     si, 1
shl     si, cl
dec     si
les     bx, [bp+arg_0]
mov     di, es:[bx+6]
and     di, si
les     bx, [bp+arg_4]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_410A3
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_4]
mov     cl, es:[bx+0Bh]
mov     ax, si
shl     ax, cl
not     ax
les     bx, [bp+var_4]
and     es:[bx], ax
les     bx, [bp+arg_4]
mov     cl, es:[bx+0Bh]
mov     ax, di
shl     ax, cl
les     bx, [bp+var_4]
or      es:[bx], ax
pop     di
pop     si
mov     sp, bp
pop     bp
retn    8
sub_41228 endp



; Attributes: bp-based frame

sub_41287 proc near

var_C= byte ptr -0Ch
var_8= byte ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  4
arg_4= word ptr  8
arg_6= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ch
les     bx, [bp+arg_0]
mov     dx, es:[bx+8]
mov     ax, es:[bx+6]
mov     [bp+var_2], dx
mov     [bp+var_4], ax
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 19 cases
cmp     ax, 12h
jbe     short loc_412AC
jmp     def_412B0       ; jumptable 000412B0 default case, cases 15-17

loc_412AC:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_412B0[bx] ; switch jump
jpt_412B0 dw offset loc_41383 ; jump table for switch statement
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41383
dw offset loc_41311
dw offset loc_4133C
dw offset loc_41367
dw offset def_412B0
dw offset def_412B0
dw offset def_412B0
dw offset loc_412DB
dw offset loc_41383

loc_412DB:              ; jumptable 000412B0 case 18
push    [bp+var_2]
push    [bp+var_4]
push    [bp+arg_6]
push    [bp+arg_4]
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_2A8BF
push    ax
call    sub_46A2C
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
jmp     def_412B0       ; jumptable 000412B0 default case, cases 15-17

loc_41311:              ; jumptable 000412B0 case 12
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_8]
push    ax
call    sub_42DC8
push    ss
lea     ax, [bp+var_8]
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 4
push    ax
call    sub_46A2C
jmp     short def_412B0 ; jumptable 000412B0 default case, cases 15-17

loc_4133C:              ; jumptable 000412B0 case 13
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_C]
push    ax
call    sub_42E93
push    ss
lea     ax, [bp+var_C]
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 8
push    ax
call    sub_46A2C
jmp     short def_412B0 ; jumptable 000412B0 default case, cases 15-17

loc_41367:              ; jumptable 000412B0 case 14
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
add     ax, 6
push    dx
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
mov     ax, 0Ah
push    ax
call    sub_46A2C
jmp     short def_412B0 ; jumptable 000412B0 default case, cases 15-17

loc_41383:              ; jumptable 000412B0 cases 1-11,19
push    ss
lea     ax, [bp+var_4]
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
shl     bx, 1
push    word ptr [bx+7BE1h]
call    sub_46A2C

def_412B0:              ; jumptable 000412B0 default case, cases 15-17
mov     sp, bp
pop     bp
retn    8
sub_41287 endp



; Attributes: bp-based frame

sub_413A9 proc far

var_1E= dword ptr -1Eh
var_1A= dword ptr -1Ah
var_16= byte ptr -16h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 1Eh
push    si
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
cmp     ax, 2Dh ; '-'
jnz     short loc_413BF
jmp     loc_41655

loc_413BF:
jg      short loc_41405
cmp     ax, 17h
jnz     short loc_413C9
jmp     loc_415FE

loc_413C9:
jg      short loc_413E2
dec     ax              ; switch 4 cases
cmp     ax, 3
ja      short def_413D5 ; jumptable 000413D5 default case
                        ; jumptable 00041411 default case, cases 49,52,54
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_413D5[bx] ; switch jump
jpt_413D5 dw offset loc_414A0 ; jump table for switch statement
dw offset loc_41497
dw offset loc_41497
dw offset loc_414A0

loc_413E2:
cmp     ax, 2Bh ; '+'
jnz     short loc_413EA
jmp     loc_414A0       ; jumptable 000413D5 cases 1,4

loc_413EA:
jg      short loc_413FE
cmp     ax, 18h
jnz     short loc_413F4
jmp     loc_41720

loc_413F4:
cmp     ax, 19h
jnz     short loc_413FC
jmp     loc_41720

loc_413FC:              ; jumptable 000413D5 default case
jmp     short def_413D5 ; jumptable 00041411 default case, cases 49,52,54

loc_413FE:
cmp     ax, 2Ch ; ','
jz      short loc_41476
jmp     short def_413D5 ; jumptable 000413D5 default case
                        ; jumptable 00041411 default case, cases 49,52,54

loc_41405:              ; switch 11 cases
sub     ax, 2Eh ; '.'
cmp     ax, 0Ah
ja      short def_413D5 ; jumptable 000413D5 default case
                        ; jumptable 00041411 default case, cases 49,52,54
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_41411[bx] ; switch jump
jpt_41411 dw offset loc_416E2 ; jump table for switch statement
dw offset loc_416E2
dw offset loc_41746
dw offset def_413D5
dw offset loc_41799
dw offset loc_417C1
dw offset def_413D5
dw offset loc_417E5
dw offset def_413D5
dw offset loc_41816
dw offset loc_41842

def_413D5:              ; jumptable 000413D5 default case
les     bx, [bp+arg_0]  ; jumptable 00041411 default case, cases 49,52,54
mov     ax, es:[bx+0Ah]
or      ax, es:[bx+0Ch]
jz      short loc_41450
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_413A9
les     bx, [bp+arg_0]
mov     es:[bx+0Ch], dx
mov     es:[bx+0Ah], ax

loc_41450:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
les     bx, [bp+arg_0]
mov     es:[bx+8], dx
mov     es:[bx+6], ax
push    word ptr [bp+arg_0+2]
push    bx
call    sub_23EE7
jmp     loc_41860

loc_41476:
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_410A3
push    dx
push    ax
call    sub_29A88
jmp     loc_41860

loc_41497:              ; jumptable 000413D5 cases 2,3
mov     dx, word ptr [bp+arg_0+2]
mov     ax, word ptr [bp+arg_0]
jmp     loc_41860

loc_414A0:              ; jumptable 000413D5 cases 1,4
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 2Bh ; '+'
jnz     short loc_414C6
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 7
jnz     short loc_414C6
cmp     word ptr ds:0C0EFh, 2
jz      short loc_414C6
mov     ax, 4Eh ; 'N'
push    ax
call    sub_312DE
inc     sp
inc     sp

loc_414C6:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    cs
call    near ptr sub_410A3
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
dec     ax              ; switch 19 cases
cmp     ax, 12h
ja      short def_414E8 ; jumptable 000414E8 default case, cases 15-17
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_414E8[bx] ; switch jump
jpt_414E8 dw offset loc_415C5 ; jump table for switch statement
dw offset loc_415B3
dw offset loc_41594
dw offset loc_415A3
dw offset loc_41594
dw offset loc_415A3
dw offset loc_415A3
dw offset loc_415D5
dw offset loc_415D5
dw offset loc_415A3
dw offset loc_415D5
dw offset loc_41540
dw offset loc_41561
dw offset loc_41582
dw offset def_414E8
dw offset def_414E8
dw offset def_414E8
dw offset loc_41527
dw offset loc_41594

def_414E8:              ; jumptable 000414E8 default case, cases 15-17
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
xor     ax, ax
push    ax
push    ax
call    sub_29A88
jmp     loc_41860

loc_41527:              ; jumptable 000414E8 case 18
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_29A88
jmp     loc_41860

loc_41540:              ; jumptable 000414E8 case 12
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    ss
lea     ax, [bp+var_16]
push    ax
call    sub_42F3E
push    ss
lea     ax, [bp+var_16]
push    ax
mov     ax, 0Ch
push    ax
call    sub_29AEA
jmp     loc_41860

loc_41561:              ; jumptable 000414E8 case 13
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    ss
lea     ax, [bp+var_16]
push    ax
call    sub_42FAB
push    ss
lea     ax, [bp+var_16]
push    ax
mov     ax, 0Dh
push    ax
call    sub_29AEA
jmp     loc_41860

loc_41582:              ; jumptable 000414E8 case 14
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
mov     ax, 0Eh
push    ax
call    sub_29AEA
jmp     loc_41860

loc_41594:              ; jumptable 000414E8 cases 3,5,19
les     bx, [bp+var_4]
mov     ax, es:[bx]
cwd
mov     [bp+var_A], dx
mov     [bp+var_C], ax
jmp     short loc_415E5

loc_415A3:              ; jumptable 000414E8 cases 4,6,7,10
les     bx, [bp+var_4]
mov     ax, es:[bx]
xor     dx, dx
mov     [bp+var_A], dx
mov     [bp+var_C], ax
jmp     short loc_415E5

loc_415B3:              ; jumptable 000414E8 case 2
les     bx, [bp+var_4]
mov     al, es:[bx]
xor     ah, ah
xor     dx, dx
mov     [bp+var_A], dx
mov     [bp+var_C], ax
jmp     short loc_415E5

loc_415C5:              ; jumptable 000414E8 case 1
les     bx, [bp+var_4]
mov     al, es:[bx]
cbw
cwd
mov     [bp+var_A], dx
mov     [bp+var_C], ax
jmp     short loc_415E5

loc_415D5:              ; jumptable 000414E8 cases 8,9,11
les     bx, [bp+var_4]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
mov     [bp+var_A], dx
mov     [bp+var_C], ax

loc_415E5:
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_A]
push    [bp+var_C]
call    sub_29A88
jmp     loc_41860

loc_415FE:
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1A+2], dx
mov     word ptr [bp+var_1A], ax
les     bx, [bp+arg_0]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_0+2], es
mov     word ptr [bp+arg_0], bx
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_41631
push    word ptr [bp+arg_0+2]
push    bx
push    dx
push    ax
call    sub_41228
jmp     short loc_4164C

loc_41631:
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    cs
call    near ptr sub_410A3
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
push    dx
push    ax
push    word ptr [bp+var_1A+2]
push    word ptr [bp+var_1A]
call    sub_41287

loc_4164C:
mov     dx, word ptr [bp+var_1A+2]
mov     ax, word ptr [bp+var_1A]
jmp     loc_41860

loc_41655:
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_410A3
mov     word ptr [bp+var_4+2], dx
mov     word ptr [bp+var_4], ax
les     bx, [bp+var_4]
mov     si, es:[bx]
les     bx, [bp+arg_0]
mov     al, es:[bx+1]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_416A5
mov     bx, word ptr [bp+arg_0]
mov     cl, es:[bx+0Bh]
sar     si, cl
mov     bx, word ptr [bp+arg_0]
mov     cl, es:[bx+0Ah]
mov     ax, 1
shl     ax, cl
dec     ax
and     si, ax
mov     ax, si
xor     dx, dx
mov     [bp+var_6], dx
mov     [bp+var_8], ax
jmp     short loc_416C9

loc_416A5:
les     bx, [bp+arg_0]
mov     al, es:[bx+0Bh]
add     al, es:[bx+0Ah]
mov     cl, 10h
sub     cl, al
shl     si, cl
mov     al, es:[bx+0Ah]
mov     cl, 10h
sub     cl, al
sar     si, cl
mov     ax, si
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax

loc_416C9:
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
push    [bp+var_6]
push    [bp+var_8]
call    sub_29A88
jmp     loc_41860

loc_416E2:              ; jumptable 00041411 cases 46,47
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
add     ax, 0FFEAh
push    ax
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_1FF72
push    dx
push    ax
push    cs
call    near ptr sub_413A9
jmp     loc_4183A

loc_41720:
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
push    ax
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
call    sub_1FF72
push    dx
push    ax
push    cs
call    near ptr sub_413A9
jmp     loc_41860

loc_41746:              ; jumptable 00041411 case 48
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
les     bx, [bp+arg_0]
les     bx, es:[bx+0Ah]
mov     word ptr [bp+var_1A+2], es
mov     word ptr [bp+var_1A], bx
les     bx, [bp+var_1E]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jz      short loc_41787
les     bx, [bp+var_1A]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
jmp     loc_41860

loc_41787:
les     bx, [bp+var_1A]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_413A9
jmp     loc_41860

loc_41799:              ; jumptable 00041411 case 50
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
les     bx, [bp+var_1E]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_417BE
jmp     loc_4183A

loc_417BE:
jmp     loc_41851

loc_417C1:              ; jumptable 00041411 case 51
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
les     bx, [bp+var_1E]
mov     ax, es:[bx+6]
or      ax, es:[bx+8]
jnz     short loc_4183A
jmp     short loc_41851

loc_417E5:              ; jumptable 00041411 case 53
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
push    dx
push    ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
mov     ax, 1
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_21215
jmp     short loc_41860

loc_41816:              ; jumptable 00041411 case 55
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+var_1E+2], dx
mov     word ptr [bp+var_1E], ax
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_413A9

loc_4183A:
mov     dx, word ptr [bp+var_1E+2]
mov     ax, word ptr [bp+var_1E]
jmp     short loc_41860

loc_41842:              ; jumptable 00041411 case 56
les     bx, [bp+arg_0]
push    word ptr es:[bx+8]
push    word ptr es:[bx+6]
push    cs
call    near ptr sub_413A9

loc_41851:
les     bx, [bp+arg_0]
push    word ptr es:[bx+0Ch]
push    word ptr es:[bx+0Ah]
push    cs
call    near ptr sub_413A9

loc_41860:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_413A9 endp



; Attributes: bp-based frame

sub_41867 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
les     bx, ds:0C0D7h
mov     word ptr ds:0C0E1h, es
mov     ds:0C0DFh, bx
mov     byte ptr es:[bx], 0
add     bx, 0FFh
mov     word ptr ds:0C0C1h, es
mov     ds:0C0BFh, bx
mov     word ptr ds:0C0EBh, 1
mov     bx, [bp+arg_0]
shl     bx, 1
mov     si, [bx+4DDAh]
jmp     loc_41927

loc_4189C:
cmp     byte ptr [si], 25h ; '%'
jz      short loc_418AC
mov     bx, si
inc     si
push    word ptr [bx]
call    sub_42635
jmp     loc_41927

loc_418AC:
inc     si
mov     al, [si]
cbw
cmp     ax, 73h ; 's'
jz      short loc_4190F
jg      short loc_418C3
cmp     ax, 63h ; 'c'
jz      short loc_418FF
cmp     ax, 64h ; 'd'
jz      short loc_418CA
jmp     short loc_41926

loc_418C3:
cmp     ax, 78h ; 'x'
jz      short loc_418E2
jmp     short loc_41926

loc_418CA:
les     bx, [bp+arg_2]
mov     ax, es:[bx]
cwd
mov     [bp+var_6], dx
mov     [bp+var_8], ax
add     word ptr [bp+arg_2], 2
push    dx
push    ax
call    sub_425F7
jmp     short loc_41926

loc_418E2:
les     bx, [bp+arg_2]
mov     ax, es:[bx]
xor     dx, dx
mov     [bp+var_A], dx
mov     [bp+var_C], ax
add     word ptr [bp+arg_2], 2
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_42562
jmp     short loc_41926

loc_418FF:
les     bx, [bp+arg_2]
add     word ptr [bp+arg_2], 2
mov     al, es:[bx]
push    ax
call    sub_42635
jmp     short loc_41926

loc_4190F:
les     bx, [bp+arg_2]
les     bx, es:[bx]
mov     [bp+var_2], es
mov     [bp+var_4], bx
add     word ptr [bp+arg_2], 4
push    [bp+var_2]
push    bx
call    sub_42616

loc_41926:
inc     si

loc_41927:
cmp     byte ptr [si], 0
jz      short loc_4192F
jmp     loc_4189C

loc_4192F:
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 1
push    ax
call    sub_4698B
pop     si
mov     sp, bp
pop     bp
retf    6
sub_41867 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_41944 proc near

var_14= word ptr -14h
var_12= word ptr -12h
var_10= byte ptr -10h
var_C= byte ptr -0Ch
var_4= dword ptr -4
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 14h
push    si
push    di
les     bx, [bp+arg_4]
mov     word ptr ds:0C0E1h, es
mov     ds:0C0DFh, bx
add     bx, 0FFh
mov     word ptr ds:0C0C1h, es
mov     ds:0C0BFh, bx
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
call    sub_234E1
mov     word ptr [bp+arg_8+2], dx
mov     word ptr [bp+arg_8], ax
les     bx, [bp+arg_8]
les     bx, es:[bx+2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx], 2Ch ; ','
jnz     short loc_419AE
mov     bx, ax
les     bx, es:[bx+6]
cmp     byte ptr es:[bx+1], 10h
jnz     short loc_419AE
les     bx, [bp+arg_8]
les     bx, es:[bx+6]
mov     word ptr [bp+arg_8+2], es
mov     word ptr [bp+arg_8], bx
les     bx, es:[bx+2]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx

loc_419AE:
cmp     word ptr ds:0C14Bh, 0
jbe     short loc_419C9
mov     di, ds:0C14Bh
test    byte ptr ds:0C0EDh, 4
jz      short loc_419DD
mov     di, 1
mov     si, ds:0C14Bh
jmp     short loc_419EA

loc_419C9:
test    byte ptr ds:0C0EDh, 4
jnz     short loc_419DA
les     bx, [bp+var_4]
cmp     byte ptr es:[bx+4], 10h
jnz     short loc_419FD

loc_419DA:
mov     di, 1

loc_419DD:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2A8BF
mov     si, ax

loc_419EA:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    cs
call    near ptr sub_410A3
mov     [bp+var_12], dx
mov     [bp+var_14], ax
jmp     loc_41ADD

loc_419FD:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    cs
call    near ptr sub_413A9
mov     word ptr [bp+arg_8+2], dx
mov     word ptr [bp+arg_8], ax
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx+1], 0
jnz     short loc_41A2A
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    ds
mov     ax, 7F14h
push    ax
call    sub_46D76
jmp     loc_41B0B

loc_41A2A:
les     bx, [bp+arg_8]
mov     al, es:[bx]
cbw
cmp     ax, 2
jz      short loc_41A3E
cmp     ax, 3
jz      short loc_41A65
jmp     loc_41ACD

loc_41A3E:
les     bx, [bp+arg_8]
add     bx, 6
mov     [bp+var_12], es
mov     [bp+var_14], bx
mov     bx, word ptr [bp+arg_8]
cmp     byte ptr es:[bx+1], 12h
jz      short loc_41A57
jmp     loc_41ACD

loc_41A57:
mov     bx, [bp+var_14]
les     bx, es:[bx]
mov     [bp+var_12], es
mov     [bp+var_14], bx
jmp     short loc_41ACD

loc_41A65:
les     bx, [bp+arg_8]
mov     al, es:[bx+1]
cbw
cmp     ax, 0Ch
jz      short loc_41A79
cmp     ax, 0Dh
jz      short loc_41A9D
jmp     short loc_41AC1

loc_41A79:
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_10]
push    ax
call    sub_42DC8
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_10]
mov     [bp+var_12], es
mov     [bp+var_14], bx
jmp     short loc_41ACD

loc_41A9D:
mov     dx, word ptr [bp+arg_8+2]
mov     ax, word ptr [bp+arg_8]
add     ax, 6
push    dx
push    ax
push    ss
lea     ax, [bp+var_C]
push    ax
call    sub_42E93
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_C]
mov     [bp+var_12], es
mov     [bp+var_14], bx
jmp     short loc_41ACD

loc_41AC1:
les     bx, [bp+arg_8]
add     bx, 6
mov     [bp+var_12], es
mov     [bp+var_14], bx

loc_41ACD:
mov     di, 1
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
call    sub_2A8BF
mov     si, ax

loc_41ADD:
push    word ptr [bp+var_4+2]
push    word ptr [bp+var_4]
push    [bp+var_12]
push    [bp+var_14]
push    si
call    sub_41BF1
or      ax, ax
jnz     short loc_41AF9
les     bx, [bp+arg_0]
mov     word ptr es:[bx], 0

loc_41AF9:
add     [bp+var_14], si
dec     di
or      di, di
jz      short loc_41B0B
push    ds
mov     ax, 7F11h
push    ax
call    sub_42616
jmp     short loc_41ADD

loc_41B0B:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ch
sub_41944 endp



; Attributes: bp-based frame

sub_41B13 proc near

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
mov     ax, 1
push    ax
push    word ptr ds:0C109h
mov     ax, [bp+arg_4]
push    ax
push    [bp+arg_2]
xor     ax, ax
push    ax
push    ax
call    sub_3F5E5
mov     [bp+var_2], dx
mov     [bp+var_4], ax
or      ax, dx
jnz     short loc_41B3D
xor     ax, ax
jmp     short loc_41B55

loc_41B3D:
cmp     byte ptr [bp+arg_0], 0
jz      short loc_41B49
push    [bp+arg_0]
call    sub_42635

loc_41B49:
push    [bp+var_2]
push    [bp+var_4]
push    [bp+arg_2]
call    sub_3FBCA

loc_41B55:
mov     sp, bp
pop     bp
retn    6
sub_41B13 endp



; Attributes: bp-based frame

sub_41B5B proc near

var_4= dword ptr -4
arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
test    byte ptr ds:0C0EDh, 8
jnz     short loc_41B6C
jmp     loc_41BEA

loc_41B6C:
mov     si, [bp+arg_2]
mov     ax, [bp+arg_0]
mov     cl, 4
shr     ax, cl
add     si, ax
mov     ax, ds:1Eh
mov     ds:7EC2h, ax
cmp     word ptr ds:0C0EFh, 0
jz      short loc_41B93
mov     ax, ds:0C50h
mov     ds:7EC8h, ax
add     ax, 10h
mov     ds:7ECEh, ax
jmp     short loc_41B9F

loc_41B93:
mov     word ptr ds:7EC8h, 0A000h
mov     word ptr ds:7ECEh, 0A000h

loc_41B9F:
mov     word ptr [bp+var_4+2], ds
mov     word ptr [bp+var_4], 7EB0h
jmp     short loc_41BB7

loc_41BA9:
les     bx, [bp+var_4]
mov     ax, es:[bx]
cmp     ax, si
ja      short loc_41BC0
add     word ptr [bp+var_4], 6

loc_41BB7:
les     bx, [bp+var_4]
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_41BA9

loc_41BC0:
sub     word ptr [bp+var_4], 6
les     bx, [bp+var_4]
mov     ax, es:[bx+2]
or      ax, es:[bx+4]
jz      short loc_41BDE
push    word ptr es:[bx+4]
push    word ptr es:[bx+2]
call    sub_42616
jmp     short loc_41BEA

loc_41BDE:
push    [bp+arg_2]
push    [bp+arg_0]
mov     al, 20h ; ' '
push    ax
call    sub_41B13

loc_41BEA:
pop     si
mov     sp, bp
pop     bp
retn    4
sub_41B5B endp



; Attributes: bp-based frame

sub_41BF1 proc near

var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= dword ptr -20h
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= byte ptr -16h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 34h
push    si
push    di
test    byte ptr ds:0C0EDh, 4
jz      short loc_41C56
test    byte ptr ds:0C0EDh, 21h
jz      short loc_41C16
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+arg_0]
call    sub_42453
jmp     loc_422E7

loc_41C16:
test    byte ptr ds:0C0EDh, 2
jz      short loc_41C2D
les     bx, [bp+arg_2]
mov     al, es:[bx]
mov     ah, 0
cwd
push    dx
push    ax
call    sub_425F7
jmp     short loc_41C3F

loc_41C2D:
les     bx, [bp+arg_2]
mov     al, es:[bx]
mov     ah, 0
cwd
push    dx
push    ax
mov     ax, 2
push    ax
call    sub_42562

loc_41C3F:
inc     word ptr [bp+arg_2]
dec     [bp+arg_0]
cmp     [bp+arg_0], 0
jnz     short loc_41C4E
jmp     loc_422E7

loc_41C4E:
mov     al, 20h ; ' '
push    ax
call    sub_42635
jmp     short loc_41C16

loc_41C56:
les     bx, [bp+arg_6]
mov     al, es:[bx+4]
cbw
mov     si, ax
mov     bx, si
dec     bx
test    byte ptr [bx+6811h], 0Fh
jz      short loc_41C82
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    ss
lea     ax, [bp+var_A]
push    ax
mov     bx, si
shl     bx, 1
push    word ptr [bx+7BE1h]
call    sub_46A2C

loc_41C82:
mov     bx, si
dec     bx
test    byte ptr [bx+6811h], 1
jz      short loc_41C9E
push    [bp+var_8]
push    [bp+var_A]
push    si
call    sub_21DC9
mov     [bp+var_1A], dx
mov     [bp+var_1C], ax

loc_41C9E:
mov     ax, si
dec     ax              ; switch 19 cases
cmp     ax, 12h
jbe     short loc_41CA9
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41CA9:
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_41CAD[bx] ; switch jump
jpt_41CAD dw offset loc_41CD8 ; jump table for switch statement
dw offset loc_41CD8
dw offset loc_41D02
dw offset loc_41D42
dw offset loc_41D02
dw offset loc_41D42
dw offset loc_41D7B
dw offset loc_41D02
dw offset loc_41D42
dw offset def_41CAD
dw offset loc_41EA5
dw offset loc_42043
dw offset loc_42061
dw offset loc_4207F
dw offset def_41CAD
dw offset loc_4208E
dw offset def_41CAD
dw offset loc_4210C
dw offset loc_41FA5

loc_41CD8:              ; jumptable 00041CAD cases 1,2
test    byte ptr ds:0C0EDh, 21h
jz      short loc_41CE2
jmp     loc_41D72

loc_41CE2:
test    byte ptr ds:0C0EDh, 40h
jz      short loc_41CF6

loc_41CE9:
push    [bp+var_1A]
push    [bp+var_1C]
push    si
call    sub_42512
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41CF6:
test    byte ptr ds:0C0EDh, 2
jnz     short loc_41D00
jmp     loc_41D72

loc_41D00:
jmp     short loc_41D10

loc_41D02:              ; jumptable 00041CAD cases 3,5,8
test    byte ptr ds:0C0EDh, 40h
jnz     short loc_41CE9
test    byte ptr ds:0C0EDh, 2
jz      short loc_41D1C

loc_41D10:
push    [bp+var_1A]
push    [bp+var_1C]
call    sub_425F7
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41D1C:
test    byte ptr ds:0C0EDh, 21h
jz      short loc_41D10
cmp     [bp+var_1A], 0FFFFh
jl      short loc_41D10
jnz     short loc_41D31
cmp     [bp+var_1C], 0FF80h
jb      short loc_41D10

loc_41D31:
cmp     [bp+var_1A], 0
jg      short loc_41D10
jnz     short loc_41D40
cmp     [bp+var_1C], 0FFh
ja      short loc_41D10

loc_41D40:
jmp     short loc_41D72

loc_41D42:              ; jumptable 00041CAD cases 4,6,9
test    byte ptr ds:0C0EDh, 40h
jnz     short loc_41CE9
test    byte ptr ds:0C0EDh, 2
jz      short loc_41D5C

loc_41D50:
push    [bp+var_1A]
push    [bp+var_1C]
call    sub_425D8
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41D5C:
test    byte ptr ds:0C0EDh, 21h
jz      short loc_41D50
cmp     [bp+var_1A], 0
ja      short loc_41D50
jnz     short loc_41D72
cmp     [bp+var_1C], 0FFh
ja      short loc_41D50

loc_41D72:
push    [bp+var_1C]
call    sub_42482
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41D7B:              ; jumptable 00041CAD case 7
mov     ax, [bp+var_A]
mov     [bp+var_18], ax
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
dec     ax              ; switch 4 cases
cmp     ax, 3
ja      short def_41D97 ; jumptable 00041D97 default case
mov     bx, ax
shl     bx, 1
jmp     cs:jpt_41D97[bx] ; switch jump
jpt_41D97 dw offset loc_41DAF ; jump table for switch statement
dw offset loc_41DC5
dw offset loc_41DBA
dw offset loc_41DA4

loc_41DA4:              ; jumptable 00041D97 case 4
mov     [bp+var_C], 7FC8h
mov     si, ds:0C139h
jmp     short def_41D97 ; jumptable 00041D97 default case

loc_41DAF:              ; jumptable 00041D97 case 1
mov     [bp+var_C], 7FCCh
mov     si, ds:0C13Bh
jmp     short def_41D97 ; jumptable 00041D97 default case

loc_41DBA:              ; jumptable 00041D97 case 3
mov     [bp+var_C], 7FD0h
mov     si, ds:0C145h
jmp     short def_41D97 ; jumptable 00041D97 default case

loc_41DC5:              ; jumptable 00041D97 case 2
mov     [bp+var_C], 7FD4h
mov     si, ds:0C13Fh

def_41D97:              ; jumptable 00041D97 default case
les     bx, [bp+arg_6]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_41DEE
test    byte ptr ds:0C0EDh, 21h
jz      short loc_41DEE
cmp     word ptr ds:0C0EFh, 2
jz      short loc_41DEC
jmp     loc_41EC0

loc_41DEC:
jmp     short loc_41E58

loc_41DEE:
mov     al, ds:0C0EDh
cbw
and     ax, 48h
cmp     ax, 40h ; '@'
jnz     short loc_41E0B
mov     ax, [bp+var_18]
xor     dx, dx
push    dx
push    ax
mov     ax, 5
push    ax
call    sub_42512
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41E0B:
les     bx, [bp+arg_6]
mov     al, es:[bx+5]
mov     ah, 0
and     ax, 0Fh
cmp     ax, 4
jnz     short loc_41E25
cmp     [bp+var_18], 0
jnz     short loc_41E25
jmp     loc_41EEF

loc_41E25:
cmp     word ptr ds:0C0EFh, 2
jz      short loc_41E44
push    ds
push    [bp+var_C]
call    sub_42616
mov     ax, [bp+var_18]
xor     dx, dx
push    dx
push    ax
mov     ax, 4
push    ax
call    sub_42562
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41E44:
test    byte ptr ds:0C0EDh, 8
jnz     short loc_41E83
les     bx, [bp+arg_6]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_41E6F

loc_41E58:
mov     dx, si
mov     ax, [bp+var_18]
push    dx
push    ax
mov     dx, si
push    dx
push    ax
call    sub_46E60
push    ax
call    sub_42453
jmp     loc_422E7

loc_41E6F:
mov     dx, si
mov     ax, [bp+var_18]
push    dx
push    ax
mov     al, 0
push    ax
call    sub_41B13
or      ax, ax
jz      short loc_41E83
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41E83:
push    ds
push    [bp+var_C]
call    sub_42616
mov     ax, [bp+var_18]
xor     dx, dx
push    dx
push    ax
mov     ax, 4
push    ax
call    sub_42562
mov     dx, si
mov     ax, [bp+var_18]
push    dx
push    ax
call    sub_41B5B
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41EA5:              ; jumptable 00041CAD case 11
les     bx, [bp+arg_6]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_41ECB
test    byte ptr ds:0C0EDh, 21h
jz      short loc_41ECB
cmp     word ptr ds:0C0EFh, 2
jz      short loc_41F0E

loc_41EC0:
push    ds
mov     ax, 7F14h
push    ax
call    sub_42616
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41ECB:
mov     al, ds:0C0EDh
cbw
and     ax, 48h
cmp     ax, 40h ; '@'
jnz     short loc_41EE7
push    [bp+var_8]
push    [bp+var_A]
mov     ax, 8
push    ax
call    sub_42512
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41EE7:
mov     ax, [bp+var_A]
or      ax, [bp+var_8]
jnz     short loc_41EFA

loc_41EEF:
push    ds
mov     ax, 7FD8h
push    ax
call    sub_42616
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41EFA:
test    byte ptr ds:0C0EDh, 8
jnz     short loc_41F39
les     bx, [bp+arg_6]
les     bx, es:[bx]
cmp     byte ptr es:[bx+4], 2
jg      short loc_41F26

loc_41F0E:
push    [bp+var_8]
push    [bp+var_A]
push    [bp+var_8]
push    [bp+var_A]
call    sub_46E60
push    ax
call    sub_42453
jmp     loc_422E7

loc_41F26:
push    [bp+var_8]
push    [bp+var_A]
mov     al, 0
push    ax
call    sub_41B13
or      ax, ax
jz      short loc_41F39
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41F39:
mov     si, [bp+var_8]
mov     ax, si
xor     dx, dx
push    dx
push    ax
mov     ax, 4
push    ax
call    sub_42562
test    byte ptr ds:0C0EDh, 8
jz      short loc_41F85
cmp     word ptr ds:0C0EFh, 2
jnz     short loc_41F85
cmp     si, ds:0C139h
jnz     short loc_41F67
push    ds
mov     ax, 7FDDh
push    ax
call    sub_42616
jmp     short loc_41F85

loc_41F67:
cmp     si, ds:0C145h
jnz     short loc_41F77
push    ds
mov     ax, 7FE2h
push    ax
call    sub_42616
jmp     short loc_41F85

loc_41F77:
cmp     si, ds:0C13Fh
jnz     short loc_41F85
push    ds
mov     ax, 7FE7h
push    ax
call    sub_42616

loc_41F85:
mov     al, 3Ah ; ':'
push    ax
call    sub_42635
mov     ax, [bp+var_A]
xor     dx, dx
push    dx
push    ax
mov     ax, 4
push    ax
call    sub_42562
push    [bp+var_8]
push    [bp+var_A]
call    sub_41B5B
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_41FA5:              ; jumptable 00041CAD case 19
push    word ptr ds:0BD80h
push    word ptr ds:0BD7Eh
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
mov     ax, 2
push    ax
call    sub_41BF1
mov     si, [bp+var_A]
les     bx, [bp+arg_6]
les     bx, es:[bx+8]
mov     ax, es:[bx+12h]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     [bp+var_22], es
mov     [bp+var_24], bx
mov     ax, es:[bx+0Ch]
dec     ax
mov     dx, 5
mul     dx
les     bx, ds:0C175h
add     bx, ax
mov     word ptr [bp+var_20+2], es
mov     word ptr [bp+var_20], bx

loc_41FF1:
les     bx, [bp+var_20]
mov     ax, es:[bx+3]
cmp     ax, si
jnz     short loc_4202B
push    ds
mov     ax, 7FECh
push    ax
call    sub_42616
les     bx, [bp+var_20]
mov     ax, es:[bx+1]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
push    word ptr es:[bx+2]
push    word ptr es:[bx]
call    sub_42616
push    ds
mov     ax, 7FF1h
push    ax
call    sub_42616
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_4202B:
les     bx, [bp+var_20]
mov     ax, es:[bx]
mov     cl, 7
shr     ax, cl
test    ax, 1
jz      short loc_4203D
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_4203D:
add     word ptr [bp+var_20], 5
jmp     short loc_41FF1

loc_42043:              ; jumptable 00041CAD case 12
push    ss
lea     ax, [bp+var_A]
push    ax
push    ss
lea     ax, [bp+var_16]
push    ax
call    sub_42F3E
push    ss
lea     ax, [bp+var_16]
push    ax
mov     ax, 7
push    ax
call    sub_422F6
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_42061:              ; jumptable 00041CAD case 13
push    ss
lea     ax, [bp+var_A]
push    ax
push    ss
lea     ax, [bp+var_16]
push    ax
call    sub_42FAB
push    ss
lea     ax, [bp+var_16]
push    ax
mov     ax, 0Fh
push    ax
call    sub_422F6
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_4207F:              ; jumptable 00041CAD case 14
push    ss
lea     ax, [bp+var_A]
push    ax
mov     ax, 12h
push    ax
call    sub_422F6
jmp     def_41CAD       ; jumptable 00041CAD default case, cases 10,15,17

loc_4208E:              ; jumptable 00041CAD case 16
les     bx, [bp+arg_6]
mov     si, es:[bx+0Ch]
les     bx, es:[bx]
mov     word ptr [bp+arg_6+2], es
mov     word ptr [bp+arg_6], bx
push    word ptr [bp+arg_6+2]
push    bx
call    sub_2A8BF
mov     [bp+var_18], ax
les     bx, [bp+arg_6]
cmp     byte ptr es:[bx+4], 2
jg      short loc_420DA
test    byte ptr ds:0C0EDh, 42h
jz      short loc_420C2
test    byte ptr ds:0C0EDh, 21h
jz      short loc_420DA

loc_420C2:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
call    sub_46E60
push    ax
call    sub_42453
jmp     loc_422E7

loc_420DA:
push    ds
mov     ax, 7FF5h
push    ax
call    sub_42616

loc_420E2:
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+var_18]
call    sub_41BF1
mov     ax, [bp+var_18]
add     word ptr [bp+arg_2], ax
dec     si
or      si, si
ja      short loc_42102
jmp     loc_422DF

loc_42102:
push    ds
mov     ax, 7F11h
push    ax
call    sub_42616
jmp     short loc_420E2

loc_4210C:              ; jumptable 00041CAD case 18
les     bx, [bp+arg_6]
les     bx, es:[bx+8]
mov     ax, es:[bx+12h]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     [bp+var_2E], es
mov     [bp+var_30], bx
mov     al, es:[bx]
mov     ah, 0
mov     word ptr [bp+var_20], ax
mov     ax, es:[bx+6]
dec     ax
mov     dx, 5
mul     dx
les     bx, ds:0C175h
add     bx, ax
mov     word ptr [bp+var_28+2], es
mov     word ptr [bp+var_28], bx
xor     di, di
mov     word ptr [bp+var_20+2], di
push    ds
mov     ax, 7FF5h
push    ax
call    sub_42616

loc_42155:
les     bx, [bp+var_28]
mov     ax, es:[bx]
mov     cl, 6
shr     ax, cl
test    ax, 1
jz      short loc_4217F
mov     word ptr [bp+var_20+2], 0
mov     di, es:[bx+1]
mov     ax, es:[bx]
mov     cl, 7
shr     ax, cl
test    ax, 1
jz      short loc_4217C
jmp     loc_422DF

loc_4217C:
jmp     loc_422D8

loc_4217F:
test    byte ptr ds:0C0EDh, 10h
jz      short loc_421B5
les     bx, [bp+var_28]
cmp     word ptr es:[bx+1], 0
jz      short loc_421B5
mov     ax, es:[bx+1]
dec     ax
shl     ax, 1
shl     ax, 1
les     bx, ds:0C0F3h
add     bx, ax
les     bx, es:[bx]
mov     [bp+var_22], es
mov     [bp+var_24], bx
push    [bp+var_22]
push    bx
call    sub_42616
mov     al, 3Ah ; ':'
push    ax
call    sub_42635

loc_421B5:
les     bx, [bp+var_28]
cmp     word ptr es:[bx+3], 0
jnz     short loc_421C2
jmp     loc_42272

loc_421C2:
push    word ptr es:[bx+3]
call    sub_407B3
mov     word ptr [bp+var_2C+2], dx
mov     word ptr [bp+var_2C], ax
les     bx, [bp+var_28]
test    word ptr es:[bx], 3Fh
jnz     short loc_421DC
jmp     loc_4225B

loc_421DC:
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
add     ax, di
push    dx
push    ax
push    ss
lea     ax, [bp+var_34]
push    ax
mov     ax, 2
push    ax
call    sub_46A2C
les     bx, [bp+var_2C]
mov     al, es:[bx+4]
cbw
mov     bx, ax
test    byte ptr [bx+6810h], 20h
jz      short loc_42221
mov     cl, byte ptr [bp+var_20+2]
sar     [bp+var_34], cl
les     bx, [bp+var_28]
mov     ax, es:[bx]
and     ax, 3Fh
mov     cl, al
mov     ax, 1
shl     ax, cl
dec     ax
and     [bp+var_34], ax
jmp     short loc_42241

loc_42221:
les     bx, [bp+var_28]
mov     ax, es:[bx]
and     ax, 3Fh
add     al, byte ptr [bp+var_20+2]
mov     cl, 10h
sub     cl, al
shl     [bp+var_34], cl
mov     ax, es:[bx]
and     ax, 3Fh
mov     cl, 10h
sub     cl, al
sar     [bp+var_34], cl

loc_42241:
mov     ax, [bp+var_34]
mov     [bp+var_32], ax
push    word ptr [bp+var_2C+2]
push    word ptr [bp+var_2C]
push    ss
lea     ax, [bp+var_32]
push    ax
mov     ax, 1
push    ax
call    sub_41BF1
jmp     short loc_42272

loc_4225B:
push    word ptr [bp+var_2C+2]
push    word ptr [bp+var_2C]
mov     dx, word ptr [bp+arg_2+2]
mov     ax, word ptr [bp+arg_2]
add     ax, di
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_41BF1

loc_42272:
cmp     word ptr [bp+var_20], 1Eh
jnz     short loc_422BA
les     bx, [bp+var_28]
test    word ptr es:[bx], 3Fh
jz      short loc_4229A
mov     ax, es:[bx]
and     ax, 3Fh
add     word ptr [bp+var_20+2], ax
jmp     short loc_42292

loc_4228D:
sub     word ptr [bp+var_20+2], 8
inc     di

loc_42292:
cmp     word ptr [bp+var_20+2], 8
jge     short loc_4228D
jmp     short loc_422BA

loc_4229A:
les     bx, [bp+var_28]
mov     ax, es:[bx+3]
dec     ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
les     bx, ds:0C151h
add     bx, ax
mov     [bp+var_2E], es
mov     [bp+var_30], bx
mov     ax, es:[bx+3]
add     di, ax

loc_422BA:
les     bx, [bp+var_28]
mov     ax, es:[bx]
mov     cl, 7
shr     ax, cl
test    ax, 1
jnz     short loc_422DF
cmp     word ptr es:[bx+3], 0
jz      short loc_422D8
push    ds
mov     ax, 7F11h
push    ax
call    sub_42616

loc_422D8:
add     word ptr [bp+var_28], 5
jmp     loc_42155

loc_422DF:
push    ds
mov     ax, 7FF8h
push    ax
call    sub_42616

loc_422E7:
xor     ax, ax
jmp     short loc_422EE

def_41CAD:              ; jumptable 00041CAD default case, cases 10,15,17
mov     ax, 1

loc_422EE:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    0Ah
sub_41BF1 endp



; Attributes: bp-based frame

sub_422F6 proc near

var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 6
push    si
push    di
cmp     byte ptr ds:0C0EEh, 2
jl      short loc_42315
cmp     byte ptr ds:0C0EEh, 12h
jg      short loc_42315
mov     al, ds:0C0EEh
cbw
mov     [bp+var_4], ax
jmp     short loc_4231B

loc_42315:
mov     ax, [bp+arg_0]
mov     [bp+var_4], ax

loc_4231B:
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+var_4]
push    ss
lea     ax, [bp+var_2]
push    ax
push    ds
mov     ax, 9A78h
push    ax
call    sub_433D6
mov     di, ax
cmp     [bp+var_2], 0
jz      short loc_42341
mov     al, 2Dh ; '-'
push    ax
call    sub_42635

loc_42341:
cmp     di, 7FFFh
jnz     short loc_42388
cmp     [bp+var_2], 0
jnz     short loc_42353
mov     al, 2Bh ; '+'
push    ax
call    sub_42635

loc_42353:
les     bx, [bp+arg_2]
cmp     word ptr es:[bx], 0
jnz     short loc_4237D
cmp     word ptr es:[bx+2], 0
jnz     short loc_4237D
cmp     word ptr es:[bx+4], 0
jnz     short loc_4237D
cmp     word ptr es:[bx+6], 8000h
jnz     short loc_4237D
push    ds
mov     ax, 7FFBh
push    ax
call    sub_42616
jmp     loc_4244B

loc_4237D:
push    ds
mov     ax, 7FFFh
push    ax
call    sub_42616
jmp     loc_4244B

loc_42388:
push    ds
mov     ax, 9A78h
push    ax
call    sub_46E60
mov     si, ax
add     si, 9A77h
jmp     short loc_4239B

loc_4239A:
dec     si

loc_4239B:
mov     ax, si
mov     dx, ds
mov     bx, 9A78h
mov     cx, ds
cmp     ax, bx
jbe     short loc_423AD
cmp     byte ptr [si], 30h ; '0'
jz      short loc_4239A

loc_423AD:
mov     byte ptr [si+1], 0
cmp     di, 0FFFCh
jl      short loc_423BB
cmp     di, [bp+var_4]
jl      short loc_423E1

loc_423BB:
push    word ptr ds:9A78h
call    sub_42635
mov     al, 2Eh ; '.'
push    ax
call    sub_42635
push    ds
mov     ax, 9A79h
push    ax
call    sub_42616
mov     al, 65h ; 'e'
push    ax
call    sub_42635
mov     ax, di
dec     ax
cwd
push    dx
push    ax
call    sub_425F7
jmp     short loc_4244B

loc_423E1:
or      di, di
jg      short loc_42400
mov     al, 30h ; '0'
push    ax
call    sub_42635
mov     al, 2Eh ; '.'
push    ax
call    sub_42635
jmp     short loc_423FA

loc_423F3:
inc     di
mov     al, 30h ; '0'
push    ax
call    sub_42635

loc_423FA:
or      di, di
jl      short loc_423F3
jmp     short loc_42432

loc_42400:
mov     si, 9A78h
mov     [bp+var_6], di
jmp     short loc_42426

loc_42408:
cmp     byte ptr [si], 0
jz      short loc_42417
mov     bx, si
inc     si
push    word ptr [bx]
call    sub_42635
jmp     short loc_42423

loc_42417:
mov     di, si
sub     di, 9A78h
mov     al, 30h ; '0'
push    ax
call    sub_42635

loc_42423:
dec     [bp+var_6]

loc_42426:
cmp     [bp+var_6], 0
jnz     short loc_42408
mov     al, 2Eh ; '.'
push    ax
call    sub_42635

loc_42432:
cmp     byte ptr [di-6588h], 0
jz      short loc_42445
push    ds
mov     ax, di
add     ax, 9A78h
push    ax
call    sub_42616
jmp     short loc_4244B

loc_42445:
mov     al, 30h ; '0'
push    ax
call    sub_42635

loc_4244B:
pop     di
pop     si
mov     sp, bp
pop     bp
retn    6
sub_422F6 endp



; Attributes: bp-based frame

sub_42453 proc near

arg_0= word ptr  4
arg_2= dword ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     al, 22h ; '"'
push    ax
call    sub_42635
jmp     short loc_42473

loc_42462:
les     bx, [bp+arg_2]
mov     al, es:[bx]
push    ax
mov     al, 22h ; '"'
push    ax
call    sub_4249E
inc     word ptr [bp+arg_2]
dec     si

loc_42473:
or      si, si
jnz     short loc_42462
mov     al, 22h ; '"'
push    ax
call    sub_42635
pop     si
pop     bp
retn    6
sub_42453 endp



; Attributes: bp-based frame

sub_42482 proc near

arg_0= word ptr  4

push    bp
mov     bp, sp
mov     al, 27h ; '''
push    ax
call    sub_42635
push    [bp+arg_0]
mov     al, 27h ; '''
push    ax
call    sub_4249E
mov     al, 27h ; '''
push    ax
call    sub_42635
pop     bp
retn    2
sub_42482 endp



; Attributes: bp-based frame

sub_4249E proc near

arg_0= byte ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
test    byte ptr ds:0C0EDh, 1
jz      short loc_424B4
cmp     byte ptr [bp+arg_2], 0
jnz     short loc_42508
mov     byte ptr [bp+arg_2], 20h ; ' '
jmp     short loc_42508

loc_424B4:
cmp     byte ptr [bp+arg_2], 20h ; ' '
jnb     short loc_424F4
mov     al, 5Ch ; '\'
push    ax
call    sub_42635
mov     al, byte ptr [bp+arg_2]
mov     ah, 0
add     ax, 0FFF9h
cmp     ax, 7
jnb     short loc_424DD
mov     al, byte ptr [bp+arg_2]
mov     ah, 0
mov     bx, ax
push    word ptr [bx+7EF1h]
call    sub_42635
jmp     short loc_4250E

loc_424DD:
mov     al, 78h ; 'x'
push    ax
call    sub_42635
mov     al, byte ptr [bp+arg_2]
mov     ah, 0
cwd
push    dx
push    ax
mov     ax, 1
push    ax
call    sub_42562
jmp     short loc_4250E

loc_424F4:
mov     al, byte ptr [bp+arg_2]
cmp     al, [bp+arg_0]
jz      short loc_42502
cmp     byte ptr [bp+arg_2], 5Ch ; '\'
jnz     short loc_42508

loc_42502:
mov     al, 5Ch ; '\'
push    ax
call    sub_42635

loc_42508:
push    [bp+arg_2]
call    sub_42635

loc_4250E:
pop     bp
retn    4
sub_4249E endp



; Attributes: bp-based frame

sub_42512 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    ds
mov     ax, 8003h
push    ax
call    sub_42616
cmp     [bp+arg_0], 2
jg      short loc_42538
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, 0FFh
and     dx, 0
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
jmp     short loc_42551

loc_42538:
cmp     [bp+arg_0], 6
jg      short loc_42551
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, 0FFFFh
and     dx, 0
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax

loc_42551:
push    [bp+arg_4]
push    [bp+arg_2]
mov     ax, 1
push    ax
call    sub_42562
pop     bp
retn    6
sub_42512 endp



; Attributes: bp-based frame

sub_42562 proc near

arg_0= word ptr  4
arg_2= word ptr  6
arg_4= word ptr  8

push    bp
mov     bp, sp
push    si
push    di
mov     si, 8
jmp     short loc_42580

loc_4256C:
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     cl, 4
call    sub_1EDF6
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax
dec     si

loc_42580:
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
and     ax, 0
and     dx, 0F000h
or      dx, ax
jnz     short loc_425CE
cmp     si, [bp+arg_0]
ja      short loc_4256C
jmp     short loc_425CE

loc_42598:
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     cl, 1Ch
call    sub_1EE33
mov     di, ax
cmp     di, 0Ah
jnb     short loc_425B2
mov     ax, di
add     al, 30h ; '0'
jmp     short loc_425B6

loc_425B2:
mov     ax, di
add     al, 37h ; '7'

loc_425B6:
push    ax
call    sub_42635
dec     si
mov     dx, [bp+arg_4]
mov     ax, [bp+arg_2]
mov     cl, 4
call    sub_1EDF6
mov     [bp+arg_4], dx
mov     [bp+arg_2], ax

loc_425CE:
or      si, si
jnz     short loc_42598
pop     di
pop     si
pop     bp
retn    6
sub_42562 endp



; Attributes: bp-based frame

sub_425D8 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
push    ds
mov     ax, 9A78h
push    ax
call    sub_47298
push    ds
mov     ax, 9A78h
push    ax
call    sub_42616
pop     bp
retn    4
sub_425D8 endp



; Attributes: bp-based frame

sub_425F7 proc near

arg_0= word ptr  4
arg_2= word ptr  6

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
push    ds
mov     ax, 9A78h
push    ax
call    sub_472B0
push    ds
mov     ax, 9A78h
push    ax
call    sub_42616
pop     bp
retn    4
sub_425F7 endp



; Attributes: bp-based frame

sub_42616 proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
jmp     short loc_42628

loc_4261B:
les     bx, [bp+arg_0]
inc     word ptr [bp+arg_0]
mov     al, es:[bx]
push    ax
call    sub_42635

loc_42628:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_4261B
pop     bp
retn    4
sub_42616 endp



; Attributes: bp-based frame

sub_42635 proc near

arg_0= byte ptr  4

push    bp
mov     bp, sp
mov     ax, ds:0C0DFh
cmp     ax, ds:0C0BFh
jb      short loc_4264F
push    ds
mov     ax, 0BE91h
push    ax
mov     ax, 1
push    ax
call    sub_4698B

loc_4264F:
mov     al, [bp+arg_0]
mov     ah, 0
les     bx, ds:0C0DFh
mov     es:[bx], ax
inc     word ptr ds:0C0DFh
pop     bp
retn    2
sub_42635 endp ; sp-analysis failed

seg045 ends


; Segment type: Pure code
seg046 segment byte public 'CODE' use16
assume cs:seg046
;org 3
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_42663 proc far
push    si
push    di
push    ss
pop     es
sub     dx, dx
cld
mov     cx, 4
rep movsw
lodsw
shl     ax, 1
rcl     dx, 1
shr     ax, 1
stosw
xchg    ax, dx
stosw
pop     di
pop     si
retf
sub_42663 endp



; Attributes: bp-based frame

sub_4267C proc near

arg_0= dword ptr  4

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+8], 7FFFh
jnz     short loc_426B7
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+6], 8000h
jnz     short loc_426B2
les     bx, [bp+arg_0]
cmp     word ptr es:[bx], 0
jnz     short loc_426B2
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+2], 0
jnz     short loc_426B2
les     bx, [bp+arg_0]
cmp     word ptr es:[bx+4], 0
jz      short loc_426B7

loc_426B2:
mov     ax, 1
jmp     short loc_426B9

loc_426B7:
xor     ax, ax

loc_426B9:
jmp     short $+2

loc_426BB:
pop     bp
retn    4
sub_4267C endp



; Attributes: bp-based frame

sub_426BF proc far

var_1A= byte ptr -1Ah
var_19= byte ptr -19h
var_18= byte ptr -18h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= byte ptr -0Ch
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= byte ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 1Ah
push    si
push    di
push    ds
lds     si, [bp+arg_4]
lea     di, [bp+var_18]
call    sub_42663
lds     si, [bp+arg_0]
lea     di, [bp+var_C]
call    sub_42663
pop     ds
lea     si, [bp+var_18]
lea     di, [bp+var_C]
mov     al, [bp+arg_8]
xor     al, byte ptr [bp+var_2]
mov     byte ptr [bp+var_2], al
xor     al, byte ptr [bp+var_E]
mov     [bp+arg_8], al
mov     ax, [bp+var_10]
mov     bx, [bp+var_4]
cmp     ax, 7FFFh
jnb     short loc_42729
cmp     bx, 7FFFh
jnb     short loc_4271B
cmp     ax, bx
jnb     short loc_42715
mov     cl, byte ptr [bp+var_2]
mov     byte ptr [bp+var_E], cl
mov     [bp+var_10], bx
xchg    ax, bx
xchg    si, di

loc_42715:
or      bx, bx
ja      short loc_4275F
jmp     short loc_4274D

loc_4271B:
mov     si, di
mov     ax, [bp+var_4]
mov     [bp+var_10], ax
mov     ax, [bp+var_2]
mov     [bp+var_E], ax

loc_42729:
mov     ax, [bp+var_10]
cmp     ax, [bp+var_4]
jnz     short loc_4274D
mov     ax, [bp+var_E]
cmp     ax, [bp+var_2]
jz      short loc_4274D
mov     [bp+var_E], 0
mov     ax, 0
mov     bx, 0
mov     cx, 0
mov     dx, 0C000h
jmp     loc_42851

loc_4274D:
mov     ax, ss:[si]
mov     bx, ss:[si+2]
mov     cx, ss:[si+4]
mov     dx, ss:[si+6]
jmp     loc_42851

loc_4275F:
sub     ax, bx
cmp     ax, 40h ; '@'
jg      short loc_4274D
mov     [bp+var_1A], al
mov     ax, ss:[di]
mov     bx, ss:[di+2]
mov     cx, ss:[di+4]
mov     dx, ss:[di+6]
mov     [bp+var_19], 0
sub     [bp+var_1A], 8
jl      short loc_4279B

loc_42782:
mov     [bp+var_19], al
mov     al, ah
mov     ah, bl
mov     bl, bh
mov     bh, cl
mov     cl, ch
mov     ch, dl
mov     dl, dh
mov     dh, 0
sub     [bp+var_1A], 8
jge     short loc_42782

loc_4279B:
and     [bp+var_1A], 7
jz      short loc_427B1

loc_427A1:
shr     dx, 1
rcr     cx, 1
rcr     bx, 1
rcr     ax, 1
rcr     [bp+var_19], 1
dec     [bp+var_1A]
jnz     short loc_427A1

loc_427B1:
sub     di, di
cmp     [bp+arg_8], 0
jnz     short loc_427DA
add     ax, ss:[si]
adc     bx, ss:[si+2]
adc     cx, ss:[si+4]
adc     dx, ss:[si+6]
jnb     short loc_42832
rcr     dx, 1
rcr     cx, 1
rcr     bx, 1
rcr     ax, 1
rcr     [bp+var_19], 1
inc     [bp+var_10]
jmp     short loc_42832

loc_427DA:
xor     byte ptr [bp+var_E], 1
sub     ax, ss:[si]
sbb     bx, ss:[si+2]
sbb     cx, ss:[si+4]
sbb     dx, ss:[si+6]
jnb     short loc_42807
xor     byte ptr [bp+var_E], 1
not     dx
not     cx
not     bx
not     ax
neg     [bp+var_19]
cmc
adc     ax, di
adc     bx, di
adc     cx, di
adc     dx, di

loc_42807:
mov     si, 40h ; '@'
or      dh, dh
js      short loc_42832

loc_4280E:
dec     si
jz      short loc_42827
shl     [bp+var_19], 1
rcl     ax, 1
rcl     bx, 1
rcl     cx, 1
adc     dx, dx
jns     short loc_4280E
sub     si, 40h ; '@'
add     [bp+var_10], si
jmp     short loc_42832
db 90h

loc_42827:
mov     [bp+var_10], 0
mov     byte ptr [bp+var_E], 0
jmp     short loc_42851

loc_42832:
shl     [bp+var_19], 1
adc     ax, di
adc     bx, di
adc     cx, di
adc     dx, di
jnb     short loc_42844
rcr     dx, 1
inc     [bp+var_10]

loc_42844:
cmp     [bp+var_10], 7FFFh
jnb     short loc_42869
cmp     [bp+var_10], 0
jz      short loc_42870

loc_42851:
les     di, [bp+arg_4]
cld
stosw
xchg    ax, bx
stosw
xchg    ax, cx
stosw
xchg    ax, dx
stosw
mov     ax, [bp+var_10]
shl     ax, 1
or      al, byte ptr [bp+var_E]
ror     ax, 1
stosw
jmp     short loc_4287F

loc_42869:
mov     [bp+var_10], 7FFFh
jmp     short loc_42875

loc_42870:
mov     [bp+var_10], 0

loc_42875:
sub     ax, ax
mov     bx, ax
mov     cx, ax
mov     dx, ax
jmp     short loc_42851

loc_4287F:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Ah
sub_426BF endp



; Attributes: bp-based frame

sub_42887 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     al, 0
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_426BF
pop     bp
retf    8
sub_42887 endp



; Attributes: bp-based frame

sub_428A1 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     al, 1
push    ax
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_426BF
pop     bp
retf    8
sub_428A1 endp



; Attributes: bp-based frame

sub_428BB proc far

var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= byte ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 18h
push    si
push    di
push    ds
lds     si, [bp+arg_4]
lea     di, [bp+var_18]
call    sub_42663
lds     si, [bp+arg_0]
lea     di, [bp+var_C]
call    sub_42663
pop     ds
mov     cl, [bp+var_2]
xor     byte ptr [bp+var_E], cl
mov     bx, [bp+var_4]
mov     ax, [bp+var_10]
cmp     ax, 7FFFh
jnb     short loc_4291B
cmp     bx, 7FFFh
jnb     short loc_4294B
cmp     ax, bx
jb      short loc_428F7
xchg    ax, bx

loc_428F7:
or      ax, ax
jz      short loc_4290D
add     ax, bx
sub     ax, 3FFEh
jb      short loc_4290D
jmp     short loc_42979
db 90h

loc_42905:
mov     di, 7FFFh
mov     dx, 8000h
jmp     short loc_42912

loc_4290D:
sub     di, di
mov     dx, 0

loc_42912:
sub     ax, ax
mov     bx, ax
mov     cx, ax
jmp     loc_42A88

loc_4291B:
cmp     [bp+var_4], 0
jz      short loc_4292D
push    ss
lea     ax, [bp+var_18]
push    ax
call    sub_4267C
or      ax, ax
jz      short loc_4292F

loc_4292D:
jmp     short loc_42971

loc_4292F:
les     bx, [bp+arg_4]
and     word ptr es:[bx+8], 7FFFh
test    [bp+var_E], 0FFh
jz      short loc_42948
les     bx, [bp+arg_4]
xor     word ptr es:[bx+8], 8000h

loc_42948:
jmp     loc_42A9E

loc_4294B:
cmp     [bp+var_10], 0
jz      short loc_4295D
push    ss
lea     ax, [bp+var_C]
push    ax
call    sub_4267C
or      ax, ax
jz      short loc_4295F

loc_4295D:
jmp     short loc_42971

loc_4295F:
mov     di, 7FFFh
mov     ax, [bp+var_C]
mov     bx, [bp+var_A]
mov     cx, [bp+var_8]
mov     dx, [bp+var_6]
jmp     loc_42A88

loc_42971:
mov     dx, 0C000h
mov     di, 7FFFh
jmp     short loc_42912

loc_42979:
mov     [bp+var_10], ax
sub     di, di
mov     cx, di
mov     si, di
test    byte ptr [bp+var_A+1], 80h
jz      short loc_4298E
mov     cx, [bp+var_18]
mov     si, [bp+var_16]

loc_4298E:
test    byte ptr [bp+var_16+1], 80h
jz      short loc_429A3
add     cx, [bp+var_C]
adc     si, [bp+var_A]
adc     di, di
test    byte ptr [bp+var_A+1], 80h
jz      short loc_429A3
dec     di

loc_429A3:
sub     bx, bx
mov     ax, [bp+var_C]
mul     [bp+var_14]
add     cx, ax
adc     si, dx
adc     di, 0
mov     ax, [bp+var_8]
or      ax, ax
jz      short loc_429D0
mul     [bp+var_18]
add     cx, ax
adc     si, dx
adc     di, 0
mov     ax, [bp+var_8]
mul     [bp+var_16]
add     si, ax
adc     di, dx
adc     bx, 0

loc_429D0:
mov     ax, [bp+var_C]
mul     [bp+var_12]
add     si, ax
adc     di, dx
adc     bx, 0
mov     ax, [bp+var_A]
mul     [bp+var_14]
add     si, ax
adc     di, dx
adc     bx, 0
mov     ax, [bp+var_6]
or      ax, ax
jz      short loc_429FB
mul     [bp+var_18]
add     si, ax
adc     di, dx
adc     bx, 0

loc_429FB:
sub     cx, cx
push    si
mov     si, cx
mov     ax, [bp+var_A]
mul     [bp+var_12]
add     di, ax
adc     bx, dx
adc     cx, 0
mov     ax, [bp+var_8]
or      ax, ax
jz      short loc_42A2B
mul     [bp+var_14]
add     di, ax
adc     bx, dx
adc     cx, 0
mov     ax, [bp+var_8]
mul     [bp+var_12]
add     bx, ax
adc     cx, dx
adc     si, 0

loc_42A2B:
mov     ax, [bp+var_6]
or      ax, ax
jz      short loc_42A56
mul     [bp+var_16]
add     di, ax
adc     bx, dx
adc     cx, 0
adc     si, 0
mov     ax, [bp+var_6]
mul     [bp+var_14]
add     bx, ax
adc     cx, dx
adc     si, 0
mov     ax, [bp+var_6]
mul     [bp+var_12]
add     cx, ax
adc     si, dx

loc_42A56:
mov     dx, si
xchg    ax, di
pop     si
mov     di, [bp+var_10]
or      dx, dx
js      short loc_42A6C
dec     di
shl     si, 1
rcl     ax, 1
rcl     bx, 1
rcl     cx, 1
rcl     dx, 1

loc_42A6C:
shl     si, 1
adc     ax, 0
adc     bx, 0
adc     cx, 0
adc     dx, 0
jnb     short loc_42A7F
rcr     dx, 1
inc     di

loc_42A7F:
cmp     di, 7FFFh
jb      short loc_42A88
jmp     loc_42905

loc_42A88:
mov     si, di
les     di, [bp+arg_4]
cld
stosw
xchg    ax, bx
stosw
xchg    ax, cx
stosw
xchg    ax, dx
stosw
xchg    ax, si
shl     ax, 1
or      al, byte ptr [bp+var_E]
ror     ax, 1
stosw

loc_42A9E:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_428BB endp



; Attributes: bp-based frame

sub_42AA6 proc far

var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= byte ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= byte ptr -12h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_1= byte ptr -1
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 28h
push    si
push    di
mov     [bp+var_4], 0
push    ds
lds     si, [bp+arg_4]
lea     di, [bp+var_28]
call    sub_42663
lds     si, [bp+arg_0]
lea     di, [bp+var_1C]
call    sub_42663
pop     ds
mov     al, [bp+var_1E]
xor     al, [bp+var_12]
mov     byte ptr [bp+var_6], al
mov     si, [bp+var_14]
mov     ax, [bp+var_20]
cmp     si, 7FFFh
jnb     short loc_42B09
cmp     ax, 7FFFh
jnb     short loc_42B1B
or      si, si
jz      short loc_42AF7
or      ax, ax
jz      short loc_42B1B
add     ax, 3FFEh
sub     ax, si
jb      short loc_42B09
jmp     short loc_42B37
db 90h

loc_42AF7:
mov     dx, 7FFFh
mov     si, 8000h
or      ax, ax
jnz     short loc_42B12

loc_42B01:
mov     dx, 7FFFh
mov     si, 0C000h
jmp     short loc_42B12

loc_42B09:
sub     dx, dx
sub     si, si
cmp     ax, 7FFFh
jz      short loc_42B01

loc_42B12:
sub     ax, ax
mov     bx, ax
mov     cx, ax
jmp     loc_42CE0

loc_42B1B:
les     bx, [bp+arg_4]
and     word ptr es:[bx+8], 7FFFh
test    [bp+var_6], 0FFh
jz      short loc_42B34
les     bx, [bp+arg_4]
xor     word ptr es:[bx+8], 8000h

loc_42B34:
jmp     loc_42CF4

loc_42B37:
mov     [bp+var_8], ax
sub     cx, cx
mov     dx, [bp+var_22]
mov     si, [bp+var_16]
cmp     si, dx
ja      short loc_42B49
sub     dx, si
inc     cx

loc_42B49:
mov     ax, [bp+var_24]
div     si
adc     ax, 1
adc     cl, ch
mov     [bp+var_1], cl
mov     [bp+var_A], ax
push    ax
mov     ax, [bp+var_1C]
mov     bx, [bp+var_1A]
jcxz    short loc_42B73
mov     dx, [bp+var_18]

loc_42B65:
sub     [bp+var_28], ax
sbb     [bp+var_26], bx
sbb     [bp+var_24], dx
sbb     [bp+var_22], si
loop    loc_42B65

loc_42B73:
pop     si
mul     si
mov     [bp+var_4], ax
xchg    ax, dx
xchg    ax, bx
mul     si
add     bx, ax
adc     cx, dx
mov     ax, [bp+var_18]
mul     si
add     cx, ax
adc     dx, 0
xchg    ax, dx
xchg    ax, si
mul     [bp+var_16]
add     ax, si
adc     dx, 0
sub     bx, [bp+var_28]
sbb     cx, [bp+var_26]
sbb     ax, [bp+var_24]
sbb     dx, [bp+var_22]
mov     [bp+var_28], bx
mov     [bp+var_26], cx
mov     [bp+var_24], ax
mov     si, [bp+var_16]
div     si
xchg    ax, cx
div     si
sub     dx, dx
stc
adc     ax, dx
adc     cx, dx
sub     dx, ax
mov     [bp+var_C], dx
sbb     [bp+var_A], cx
sbb     [bp+var_1], 0
push    ax
mov     ax, [bp+var_1C]
mov     bx, [bp+var_1A]
jcxz    short loc_42BDF
mov     dx, [bp+var_18]

loc_42BD1:
sub     [bp+var_4], ax
sbb     [bp+var_28], bx
sbb     [bp+var_26], dx
sbb     [bp+var_24], si
loop    loc_42BD1

loc_42BDF:
pop     si
mul     si
xchg    ax, dx
xchg    ax, bx
mul     si
add     bx, ax
adc     cx, dx
mov     ax, [bp+var_18]
mul     si
add     cx, ax
adc     dx, 0
xchg    ax, dx
xchg    ax, si
mul     [bp+var_16]
add     ax, si
adc     dx, 0
sub     bx, [bp+var_4]
sbb     cx, [bp+var_28]
sbb     ax, [bp+var_26]
sbb     dx, [bp+var_24]
mov     [bp+var_4], bx
mov     [bp+var_28], cx
mov     [bp+var_26], ax
mov     si, [bp+var_16]
div     si
xchg    ax, cx
div     si
sub     dx, dx
stc
adc     ax, dx
adc     cx, dx
mov     [bp+var_E], ax
add     [bp+var_C], cx
adc     [bp+var_A], dx
adc     [bp+var_1], dl
xchg    ax, si
mov     dx, [bp+var_1A]
xchg    ax, dx
mov     bx, [bp+var_18]
jcxz    short loc_42C43

loc_42C38:
sub     [bp+var_4], ax
sbb     [bp+var_28], bx
sbb     [bp+var_26], dx
loop    loc_42C38

loc_42C43:
mul     si
xchg    ax, dx
xchg    ax, bx
mul     si
add     bx, ax
adc     cx, dx
mov     ax, [bp+var_16]
mul     si
add     ax, cx
adc     dx, 0
sub     bx, [bp+var_4]
sbb     ax, [bp+var_28]
sbb     dx, [bp+var_26]
mov     [bp+var_4], bx
mov     [bp+var_28], ax
mov     si, [bp+var_18]
add     si, si
mov     si, [bp+var_16]
adc     si, 0
jnb     short loc_42C77
xchg    bx, dx
jmp     short loc_42C88

loc_42C77:
shl     bx, 1
rcl     ax, 1
rcl     dx, 1
div     si
xchg    ax, bx
div     si
shr     bx, 1
rcr     ax, 1
rcr     dh, 1

loc_42C88:
mov     cx, 0FFFFh
mov     si, cx
mov     dl, cl
not     bx
not     ax
neg     dh
cmc
adc     ax, 0
adc     bx, [bp+var_E]
adc     cx, [bp+var_C]
adc     si, [bp+var_A]
adc     dl, [bp+var_1]
shr     dl, 1
jnb     short loc_42CB6
rcr     si, 1
rcr     cx, 1
rcr     bx, 1
rcr     ax, 1
rcr     dh, 1
inc     [bp+var_8]

loc_42CB6:
sub     di, di
add     dh, dh
adc     ax, di
adc     bx, di
adc     cx, di
adc     si, di
adc     dl, 0
mov     dx, [bp+var_8]
jz      short loc_42CCE
mov     si, 8000h
inc     dx

loc_42CCE:
cmp     dx, 7FFFh
jb      short loc_42CD7
jmp     loc_42AF7

loc_42CD7:
cmp     dx, 7FFFh
jb      short loc_42CE0
jmp     loc_42AF7

loc_42CE0:
les     di, [bp+arg_4]
cld
stosw
xchg    ax, bx
stosw
xchg    ax, cx
stosw
xchg    ax, si
stosw
xchg    ax, dx
shl     ax, 1
or      al, byte ptr [bp+var_6]
ror     ax, 1
stosw

loc_42CF4:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_42AA6 endp

seg046 ends


; Segment type: Pure code
seg047 segment byte public 'CODE' use16
assume cs:seg047
;org 0Ch
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_42CFC proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     si, [bp+arg_4]
les     di, [bp+arg_0]
mov     ax, [si+8]
mov     dx, es:[di+8]
sub     bx, bx
shl     ax, 1
rcr     bl, 1
shl     dx, 1
rcr     bh, 1
mov     cx, ax
or      cx, dx
jcxz    short loc_42D4D
cmp     bl, bh
jg      short loc_42D60
jl      short loc_42D57
cmp     ax, dx
jb      short loc_42D53
ja      short loc_42D5C
mov     ax, [si+6]
cmp     ax, es:[di+6]
jnz     short loc_42D51
mov     ax, [si+4]
cmp     ax, es:[di+4]
jnz     short loc_42D51
mov     ax, [si+2]
cmp     ax, es:[di+2]
jnz     short loc_42D51
mov     ax, [si]
cmp     ax, es:[di]
jnz     short loc_42D51

loc_42D4D:
sub     ax, ax
jmp     short loc_42D63

loc_42D51:
ja      short loc_42D5C

loc_42D53:
or      bl, bl
jnz     short loc_42D60

loc_42D57:
mov     ax, 0FFFFh
jmp     short loc_42D63

loc_42D5C:
or      bl, bl
jnz     short loc_42D57

loc_42D60:
mov     ax, 1

loc_42D63:
or      ax, ax
pop     ds
jmp     short $+2

loc_42D68:
pop     di
pop     si
pop     bp
retf    8
sub_42CFC endp

seg047 ends


; Segment type: Pure code
seg048 segment byte public 'CODE' use16
assume cs:seg048
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_42D6E proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    ds
lds     si, [bp+arg_0]
mov     ax, [si+4]
mov     dx, [si+6]
cmp     word ptr [si], 0
jnz     short loc_42D90
cmp     word ptr [si+2], 0
jnz     short loc_42D90
test    al, 7Fh
jnz     short loc_42D90
test    ah, 1
jz      short loc_42DAA

loc_42D90:
add     al, al
adc     ah, 0
adc     dx, 0
jnb     short loc_42DAA
rcr     dx, 1
rcr     ax, 1
inc     word ptr [si+8]
mov     bx, 7FFFh
and     bx, [si+8]
inc     bx
jo      short loc_42DBC

loc_42DAA:
mov     al, 0
sub     bx, bx
mov     [si], bx
mov     [si+2], bx
mov     [si+4], ax
mov     [si+6], dx
pop     ds
jmp     short loc_42DC3

loc_42DBC:
sub     ax, ax
mov     dx, 8000h
jmp     short loc_42DAA

loc_42DC3:
pop     si
pop     bp
retf    4
sub_42D6E endp



; Attributes: bp-based frame

sub_42DC8 proc far

var_A= byte ptr -0Ah
var_5= word ptr -5
var_3= byte ptr -3
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
push    ds
lds     si, [bp+arg_4]
lea     di, [bp+var_A]
push    ss
pop     es
mov     cx, 5
cld
rep movsw
pop     ds
push    ss
lea     ax, [bp+var_A]
push    ax
push    cs
call    near ptr sub_42D6E
mov     bx, [bp+var_2]
mov     cl, 0
shl     bx, 1
rcl     cl, 1
shr     bx, 1
cmp     bx, 7FFFh
jz      short loc_42E1D
add     bx, 0C080h
jle     short loc_42E2F
cmp     bx, 0FFh
jge     short loc_42E28
mov     bh, [bp+var_3]
mov     ax, [bp+var_5]
xchg    bh, bl
shl     bl, 1

loc_42E10:
shr     cl, 1
rcr     bx, 1
les     di, [bp+arg_0]
cld
stosw
xchg    ax, bx
stosw
jmp     short loc_42E35

loc_42E1D:
mov     bl, [bp+var_3]
shl     bl, 1
mov     bh, 0FFh
sub     ax, ax
jmp     short loc_42E10

loc_42E28:
mov     bx, 0FF00h
sub     ax, ax
jmp     short loc_42E10

loc_42E2F:
sub     bx, bx
sub     ax, ax
jmp     short loc_42E10

loc_42E35:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_42DC8 endp



; Attributes: bp-based frame

sub_42E3D proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     si, [bp+arg_0]
mov     ax, [si+1]
mov     dh, 3
and     dh, al
or      dh, [si]
jnz     short loc_42E55
test    al, 8
jz      short loc_42E73

loc_42E55:
add     ax, 4
jnb     short loc_42E73
sub     bx, bx
adc     [si+3], bx
adc     [si+5], bx
adc     [si+7], bl
jnb     short loc_42E73
inc     word ptr [si+8]
mov     di, 7FFFh
and     di, [si+8]
inc     di
jo      short loc_42E7E

loc_42E73:
and     al, 0F8h
mov     byte ptr [si], 0
mov     [si+1], ax

loc_42E7B:
pop     ds
jmp     short loc_42E8D

loc_42E7E:
mov     [si], bx
mov     [si+2], bx
mov     [si+4], bx
mov     word ptr [si+6], 8000h
jmp     short loc_42E7B

loc_42E8D:
pop     di
pop     si
pop     bp
retf    4
sub_42E3D endp



; Attributes: bp-based frame

sub_42E93 proc far

var_A= byte ptr -0Ah
var_9= word ptr -9
var_7= word ptr -7
var_5= word ptr -5
var_3= byte ptr -3
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
push    ds
lds     si, [bp+arg_4]
lea     di, [bp+var_A]
push    ss
pop     es
mov     cx, 5
cld
rep movsw
pop     ds
push    ss
lea     ax, [bp+var_A]
push    ax
push    cs
call    near ptr sub_42E3D
mov     ax, [bp+var_9]
mov     di, [bp+var_7]
mov     cx, [bp+var_5]
mov     dl, [bp+var_3]
mov     bx, [bp+var_2]
and     bx, 7FFFh
cmp     bx, 7FFFh
jz      short loc_42F1A
add     bx, 0C400h
jle     short loc_42F15
cmp     bx, 7FFh
jge     short loc_42F26
shl     dl, 1
shr     bx, 1
rcr     dl, 1
or      al, bh
mov     dh, bl
mov     bx, di
shr     di, 1
rcr     ax, 1
rcr     dx, 1
rcr     cx, 1
rcr     bx, 1
shr     di, 1
rcr     ax, 1
rcr     dx, 1
rcr     cx, 1
rcr     bx, 1
shl     [bp+var_2], 1
adc     al, 0
shr     di, 1
rcr     ax, 1
rcr     dx, 1
rcr     cx, 1
rcr     bx, 1

loc_42F08:
les     di, [bp+arg_0]
cld
stosw
xchg    ax, bx
stosw
xchg    ax, cx
stosw
xchg    ax, dx
stosw
jmp     short loc_42F36

loc_42F15:
mov     dx, 0
jmp     short loc_42F29

loc_42F1A:
and     dx, 7Fh
shr     dx, 1
shr     dx, 1
or      dx, 0FFE0h
jmp     short loc_42F29

loc_42F26:
mov     dx, 0FFE0h

loc_42F29:
shl     [bp+var_2], 1
rcr     dx, 1
sub     cx, cx
mov     bx, cx
mov     ax, cx
jmp     short loc_42F08

loc_42F36:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_42E93 endp

seg048 ends


; Segment type: Pure code
seg049 segment byte public 'CODE' use16
assume cs:seg049
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_42F3E proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
cld
les     si, [bp+arg_4]
mov     ax, es:[si]
mov     dx, es:[si+2]
sub     si, si
shl     dx, 1
rcr     si, 1
sub     bx, bx
add     bl, dh
jz      short loc_42F8C
cmp     dh, 0FFh
jz      short loc_42F81
sub     bx, 7Fh
stc

loc_42F63:
rcr     dl, 1

loc_42F65:
mov     dh, dl
mov     dl, ah
mov     ch, al
mov     cl, 0
les     di, [bp+arg_0]
sub     ax, ax
stosw
stosw
xchg    ax, cx
stosw
xchg    ax, dx
stosw
xchg    ax, bx
add     ax, 3FFFh
or      ax, si
stosw
jmp     short loc_42FA5

loc_42F81:
mov     bx, ax
or      bl, dl
neg     bx
mov     bx, 4000h
jmp     short loc_42F63

loc_42F8C:
mov     cx, dx
or      cx, ax
jz      short loc_42FA0
sub     bx, 7Fh
shr     dl, 1

loc_42F97:
add     ax, ax
adc     dl, dl
js      short loc_42F65
dec     bx
jmp     short loc_42F97

loc_42FA0:
mov     bx, 0C001h
jmp     short loc_42F65

loc_42FA5:
pop     di
pop     si
pop     bp
retf    8
sub_42F3E endp



; Attributes: bp-based frame

sub_42FAB proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     si, [bp+arg_4]
les     di, [bp+arg_0]
mov     dx, [si+6]
sub     ax, ax
shl     dx, 1
rcr     ax, 1
std
lea     di, [di+8]
mov     es:[di], ax
mov     cl, 5
shr     dx, cl
jz      short loc_4302E
cmp     dx, 7FFh
jz      short loc_43017
mov     bl, 10h
sub     dx, 3FFh

loc_42FD9:
xchg    ax, dx
add     ax, 3FFFh
or      ax, es:[di]
stosw
mov     dx, [si+5]
and     dh, 0Fh
or      dh, bl
mov     cx, [si+3]
mov     bx, [si+1]
mov     ah, [si]
mov     al, 0
shl     ax, 1
rcl     bx, 1
rcl     cx, 1
rcl     dx, 1
shl     ax, 1
rcl     bx, 1
rcl     cx, 1
rcl     dx, 1
shl     ax, 1
rcl     bx, 1
rcl     cx, 1
rcl     dx, 1

loc_4300B:
xchg    ax, dx
stosw
xchg    ax, cx
stosw
xchg    ax, bx
stosw
xchg    ax, dx
stosw
pop     ds
jmp     short loc_4306D
db 90h

loc_43017:
mov     bl, [si+6]
and     bx, 0Fh
or      bx, [si+4]
or      bx, [si+2]
or      bx, [si]
mov     dx, 4000h
jz      short loc_42FD9
mov     bl, 10h
jmp     short loc_42FD9

loc_4302E:
mov     bl, [si+6]
and     bx, 0Fh
or      bx, [si+4]
or      bx, [si+2]
or      bx, [si]
jnz     short loc_43043
mov     dx, 0C001h
jmp     short loc_42FD9

loc_43043:
mov     dx, [si+5]
and     dh, 0Fh
mov     cx, [si+3]
mov     bx, [si+1]
mov     ah, [si]
mov     al, 4

loc_43053:
dec     al
shl     ah, 1
rcl     bx, 1
rcl     cx, 1
adc     dx, dx
jns     short loc_43053
push    ax
cbw
add     ax, 3C00h
or      ax, es:[di]
stosw
pop     ax
mov     al, 0
jmp     short loc_4300B

loc_4306D:
pop     di
pop     si
pop     bp
retf    8
sub_42FAB endp

seg049 ends


; Segment type: Pure code
seg050 segment byte public 'CODE' use16
assume cs:seg050
;org 3
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_43073 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     si, [bp+arg_4]
mov     ax, [si]
mov     bx, [si+2]
mov     cx, [si+4]
mov     dx, [si+6]
pop     ds
mov     di, 0
or      dx, dx
jl      short loc_430A1
jg      short loc_430B6
or      cx, cx
jnz     short loc_430B6
or      bx, bx
jnz     short loc_430B6
or      ax, ax
jnz     short loc_430B6
sub     si, si
jmp     short loc_430DE

loc_430A1:
not     dx
not     cx
not     bx
neg     ax
cmc
adc     bx, 0
adc     cx, 0
adc     dx, 0
mov     di, 1

loc_430B6:
mov     si, 40h ; '@'

loc_430B9:
or      dx, dx
jnz     short loc_430C7
xchg    dx, cx
xchg    cx, bx
xchg    ax, bx
sub     si, 10h
jmp     short loc_430B9

loc_430C7:
js      short loc_430D4

loc_430C9:
dec     si
add     ax, ax
adc     bx, bx
adc     cx, cx
adc     dx, dx
jns     short loc_430C9

loc_430D4:
add     si, 3FFEh
shl     si, 1
or      si, di
ror     si, 1

loc_430DE:
les     di, [bp+arg_0]
cld
stosw
xchg    ax, bx
stosw
xchg    ax, cx
stosw
xchg    ax, dx
stosw
xchg    ax, si
stosw
pop     di
pop     si
pop     bp
retf    8
sub_43073 endp



; Attributes: bp-based frame

sub_430F1 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     si, [bp+arg_4]
mov     di, 7FFFh
and     di, [si+8]
sub     di, 3FFEh
cmp     di, 3Fh ; '?'
jg      short loc_43111
or      di, di
jge     short loc_4311C
sub     dx, dx
jmp     short loc_43114

loc_43111:
mov     dx, 8000h

loc_43114:
sub     ax, ax
mov     bx, ax
mov     cx, ax
jmp     short loc_43165

loc_4311C:
mov     dx, [si+6]
mov     cx, [si+4]
mov     bx, [si+2]
mov     ax, [si]
sub     di, 30h ; '0'
ja      short loc_4313C

loc_4312C:
mov     ax, bx
mov     bx, cx
mov     cx, dx
sub     dx, dx
add     di, 10h
jle     short loc_4312C
and     di, 0Fh

loc_4313C:
neg     di
jz      short loc_4314E
add     di, 10h

loc_43143:
shr     dx, 1
rcr     cx, 1
rcr     bx, 1
rcr     ax, 1
dec     di
jg      short loc_43143

loc_4314E:
test    byte ptr [si+9], 80h
jz      short loc_43165
sub     si, si
not     dx
not     cx
not     bx
neg     ax
cmc
adc     bx, si
adc     cx, si
adc     dx, si

loc_43165:
les     di, [bp+arg_0]
cld
stosw
xchg    ax, bx
stosw
xchg    ax, cx
stosw
xchg    ax, dx
stosw
sub     di, 8
pop     ds
pop     di
pop     si
pop     bp
retf    8
sub_430F1 endp



; Attributes: bp-based frame

sub_4317A proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    [bp+arg_2]
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_8]
push    ax
push    cs
call    near ptr sub_430F1
mov     ax, [bp+var_6]
cwd
cmp     dx, [bp+var_4]
jnz     short loc_431A3
cmp     dx, [bp+var_2]
jnz     short loc_431A3
xchg    ax, dx
mov     ax, [bp+var_8]
jmp     short loc_431A8

loc_431A3:
sub     ax, ax
mov     dx, 8000h

loc_431A8:
mov     sp, bp
pop     bp
retf    4
sub_4317A endp



; Attributes: bp-based frame

sub_431AE proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 8
push    [bp+arg_2]
push    [bp+arg_0]
push    ss
lea     ax, [bp+var_8]
push    ax
push    cs
call    near ptr sub_430F1
mov     ax, [bp+var_8]
mov     dx, [bp+var_6]
mov     cx, [bp+var_4]
or      cx, [bp+var_2]
jz      short loc_431D6
mov     ax, 0FFFFh
mov     dx, ax

loc_431D6:
mov     sp, bp
pop     bp
retf    4
sub_431AE endp



; Attributes: bp-based frame

sub_431DC proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 8
mov     ax, [bp+arg_4]
mov     [bp+var_8], ax
mov     ax, [bp+arg_6]
mov     [bp+var_6], ax
cwd
mov     [bp+var_4], dx
mov     [bp+var_2], dx
push    ss
lea     ax, [bp+var_8]
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_43073
mov     sp, bp
pop     bp
retf    8
sub_431DC endp



; Attributes: bp-based frame

sub_4320A proc far

var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 8
mov     ax, [bp+arg_4]
mov     [bp+var_8], ax
mov     ax, [bp+arg_6]
mov     [bp+var_6], ax
sub     ax, ax
mov     [bp+var_4], ax
mov     [bp+var_2], ax
push    ss
lea     ax, [bp+var_8]
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_43073
mov     sp, bp
pop     bp
retf    8
sub_4320A endp

seg050 ends


; Segment type: Pure code
seg051 segment byte public 'CODE' use16
assume cs:seg051
;org 9
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_43239 proc far

var_A= byte ptr -0Ah
arg_0= dword ptr  6
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ah
push    si
push    di
mov     si, [bp+arg_4]
or      si, si
jz      short loc_432AD
jns     short loc_4324C
neg     si

loc_4324C:
cmp     si, 1387h
jbe     short loc_43255
mov     si, 1387h

loc_43255:
mov     bx, 7
and     bx, si
shl     bx, 1
shl     bx, 1
add     bx, 8006h
push    word ptr [bx+2]
push    word ptr [bx]
lea     ax, [bp+var_A]
push    ss
push    ax
call    sub_4320A
mov     cl, 3
shr     si, cl
mov     di, 8026h

loc_43278:
or      si, si
jz      short loc_43291
shr     si, 1
jnb     short loc_4328C
lea     ax, [bp+var_A]
push    ss
push    ax
push    ds
push    di
call    sub_428BB

loc_4328C:
add     di, 0Ah
jmp     short loc_43278

loc_43291:
les     ax, [bp+arg_0]
push    es
push    ax
lea     ax, [bp+var_A]
push    ss
push    ax
cmp     [bp+arg_4], 0
jns     short loc_432A8
call    sub_42AA6
jmp     short loc_432AD

loc_432A8:
call    sub_428BB

loc_432AD:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    6
sub_43239 endp

seg051 ends


; Segment type: Pure code
seg052 segment byte public 'CODE' use16
assume cs:seg052
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_432B5 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 0Ch
push    si
push    di
push    ds
lds     si, [bp+arg_4]
cld
xor     di, di
mov     dx, di
mov     cx, di
mov     bx, di
mov     [bp+var_C], di
mov     [bp+var_A], di

loc_432D0:
lodsb
cmp     al, 30h ; '0'
jb      short loc_4333C
cmp     al, 39h ; '9'
ja      short loc_4333C
sub     al, 30h ; '0'
cbw
or      bx, bx
jnz     short loc_43301
or      cx, cx
jnz     short loc_43307
or      dx, dx
jnz     short loc_43307
xchg    ax, di
mov     dx, 0Ah
mul     dx

loc_432EE:
add     di, ax
adc     dx, 0
adc     cx, 0
adc     bx, 0
mov     ax, [bp+var_A]
add     [bp+var_C], ax
jmp     short loc_432D0

loc_43301:
cmp     bx, 0CCCh
jnb     short loc_43333

loc_43307:
push    ax
shl     di, 1
rcl     dx, 1
rcl     cx, 1
rcl     bx, 1
push    bx
push    cx
push    dx
push    di
shl     di, 1
rcl     dx, 1
rcl     cx, 1
rcl     bx, 1
shl     di, 1
rcl     dx, 1
rcl     cx, 1
rcl     bx, 1
pop     ax
add     di, ax
pop     ax
adc     dx, ax
pop     ax
adc     cx, ax
pop     ax
adc     bx, ax
pop     ax
jmp     short loc_432EE

loc_43333:
mov     ax, [bp+var_A]
inc     ax
add     [bp+var_C], ax
jmp     short loc_432D0

loc_4333C:
cmp     al, 2Eh ; '.'
jnz     short loc_4334B
cmp     [bp+var_A], 0
jnz     short loc_4334B
dec     [bp+var_A]
jmp     short loc_432D0

loc_4334B:
mov     [bp+var_8], di
mov     [bp+var_6], dx
mov     [bp+var_4], cx
mov     [bp+var_2], bx
mov     di, [bp+var_C]
cmp     al, 45h ; 'E'
jz      short loc_43362
cmp     al, 65h ; 'e'
jnz     short loc_43398

loc_43362:
xor     bx, bx
lodsb
mov     cl, al
cmp     al, 2Dh ; '-'
jz      short loc_4338C
cmp     al, 2Bh ; '+'
jz      short loc_4338C

loc_4336F:
cmp     al, 30h ; '0'
jb      short loc_4338F
cmp     al, 39h ; '9'
ja      short loc_4338F
cmp     bx, 3E8h
jnb     short loc_4338F
sub     al, 30h ; '0'
cbw
shl     bx, 1
mov     dx, bx
shl     bx, 1
shl     bx, 1
add     bx, dx
add     bx, ax

loc_4338C:
lodsb
jmp     short loc_4336F

loc_4338F:
cmp     cl, 2Dh ; '-'
jnz     short loc_43396
neg     bx

loc_43396:
add     di, bx

loc_43398:
pop     ds
lea     ax, [bp+var_8]
push    ss
push    ax
les     ax, [bp+arg_0]
push    es
push    ax
call    sub_43073
mov     ax, 0F000h
cmp     di, ax
jge     short loc_433BC
sub     di, ax
push    ax
les     ax, [bp+arg_0]
push    es
push    ax
call    sub_43239

loc_433BC:
push    di
les     ax, [bp+arg_0]
push    es
push    ax
call    sub_43239
xchg    ax, si
dec     ax
sub     ax, word ptr [bp+arg_4]
jmp     short $+2

loc_433CE:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    8
sub_432B5 endp

seg052 ends


; Segment type: Pure code
seg053 segment byte public 'CODE' use16
assume cs:seg053
;org 6
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_433D6 proc far

var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= dword ptr -0Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_3= byte ptr -3
var_2= word ptr -2
arg_2= dword ptr  6
arg_6= dword ptr  0Ah
arg_A= word ptr  0Eh
arg_C= dword ptr  10h

push    bp
mov     bp, sp
sub     sp, 14h
push    si
push    di
mov     ax, 8000h
cmp     [bp+arg_A], 0
jg      short loc_433ED
mov     ax, 12h
xchg    ax, [bp+arg_A]

loc_433ED:
mov     [bp+var_12], ax
les     di, [bp+arg_2]
mov     word ptr [bp+var_E], di
mov     word ptr [bp+var_E+2], es
push    ds
lds     si, [bp+arg_C]
lea     di, [bp+var_A]
push    ss
pop     es
cld
mov     cx, 5
rep movsw
pop     ds
mov     ax, [bp+var_2]
sub     cx, cx
shl     ax, 1
rcl     cx, 1
les     di, [bp+arg_6]
mov     es:[di], cx
shr     ax, 1
jz      short loc_43426
cmp     ax, 7FFFh
jb      short loc_43433
mov     dx, 7FFFh
jmp     short loc_43428

loc_43426:
sub     dx, dx

loc_43428:
les     di, [bp+arg_2]
sub     al, al
stosb
mov     ax, dx
jmp     loc_435A6

loc_43433:
sub     ax, 3FFFh
cmp     ax, 1Bh
jge     short loc_43447
or      ax, ax
jl      short loc_43447
mov     [bp+var_14], 8
jmp     short loc_4348C
db 90h

loc_43447:
mov     dx, 4D10h
imul    dx
xchg    ax, bx
mov     ah, 4Dh ; 'M'
mov     al, [bp+var_3]
shl     al, 1
mul     ah
add     ax, bx
adc     dx, 0
neg     ax
adc     dx, 0
mov     [bp+var_14], dx
cmp     dx, [bp+var_12]
jl      short loc_43426
mov     si, 8
sub     si, dx
mov     ax, 1000h
cmp     si, ax
jl      short loc_43481
sub     si, ax
push    ax
lea     ax, [bp+var_A]
push    ss
push    ax
call    sub_43239

loc_43481:
push    si
lea     ax, [bp+var_A]
push    ss
push    ax
call    sub_43239

loc_4348C:
mov     [bp+var_10], sp

loc_4348F:
mov     cx, 1Eh
sub     cl, byte ptr [bp+var_2]
sub     bx, bx
mov     si, [bp+var_A]
mov     di, [bp+var_8]
mov     ax, [bp+var_6]
mov     dx, [bp-4]
cmp     cx, 10h
jb      short loc_434B7
mov     bx, si
mov     si, di
mov     di, ax
mov     ax, dx
sub     dx, dx
sub     cx, 10h
jz      short loc_434CB

loc_434B7:
push    bp
sub     bp, bp

loc_434BA:
shr     dx, 1
rcr     ax, 1
rcr     di, 1
rcr     si, 1
rcr     bx, 1
rcr     bp, 1
loop    loc_434BA
mov     cx, bp
pop     bp

loc_434CB:
push    di
lea     di, [bp+var_A]
push    ss
pop     es
xchg    ax, cx
stosw
xchg    ax, bx
stosw
xchg    ax, si
stosw
pop     ax
stosw
mov     ax, 3FFEh
stosw
xchg    ax, cx

loc_434DE:
mov     bx, [bp+var_14]
les     di, [bp+var_E]
mov     si, word ptr [bp+arg_2]
mov     cx, 2710h
div     cx
mov     cx, 640Ah
xchg    ax, dx
div     ch
xchg    ax, dx
div     ch
cmp     al, ch
jb      short loc_43503
sub     al, ch
inc     bx
push    ax
mov     al, 31h ; '1'
call    near ptr sub_4355B
pop     ax

loc_43503:
call    sub_4353D
mov     [bp+var_14], bx
mov     word ptr [bp+var_E], di
lea     ax, [bp+var_A]
push    ss
push    ax
cmp     [bp+var_3], 0
js      short loc_43524
push    ss
push    ax
push    ss
push    ax
call    sub_43073
sub     [bp+var_2], 40h ; '@'

loc_43524:
lea     ax, ds:808Ah
push    ds
push    ax
call    sub_428BB
sub     ax, ax
mov     dx, ax
cmp     [bp+var_2], 3FFFh
jb      short loc_434DE
jmp     loc_4348F
sub_433D6 endp ; sp-analysis failed




sub_4353D proc near
call    sub_43541
xchg    ax, dx
sub_4353D endp




sub_43541 proc near
mov     ch, ah
call    sub_43548
mov     al, ch
sub_43541 endp




sub_43548 proc near
cbw
div     cl
add     ax, 3030h
call    sub_43553
mov     al, ah
sub_43548 endp




sub_43553 proc near
cmp     al, 30h ; '0'
jnz     short near ptr sub_4355B
cmp     di, si
jz      short loc_43561
sub_43553 endp




sub_4355B proc far
stosb
dec     word ptr [bp+0Eh]
jl      short loc_4356B

loc_43561:
cmp     bx, [bp-12h]
jle     short loc_4356B
dec     bx
retn

loc_43568:
jmp     loc_43426

loc_4356B:
mov     sp, [bp-10h]
cmp     di, si
jz      short loc_43568
dec     di
add     bx, di
sub     bx, si
cmp     byte ptr es:[di], 35h ; '5'
jnb     short loc_43594

loc_4357D:
cmp     di, si
jz      short loc_43568
dec     di
cmp     byte ptr es:[di], 30h ; '0'
jz      short loc_4357D
jmp     short loc_4359D

loc_4358A:
dec     di
inc     byte ptr es:[di]
cmp     byte ptr es:[di], 39h ; '9'
jbe     short loc_4359D

loc_43594:
cmp     di, si
jnz     short loc_4358A
mov     byte ptr es:[di], 31h ; '1'
inc     bx

loc_4359D:
mov     byte ptr es:[di+1], 0
mov     ax, bx
jmp     short $+2

loc_435A6:
pop     di
pop     si
mov     sp, bp
pop     bp
retf    0Eh
sub_4355B endp

seg053 ends


; Segment type: Pure code
seg054 segment byte public 'CODE' use16
assume cs:seg054
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_435AE proc near
mov     si, bx
mov     di, dx
push    ds
pop     es
cld
rep movsb
mov     bx, si
mov     dx, di
retn
sub_435AE endp




sub_435BC proc near
push    cx
push    si
push    di
push    es
mov     si, bx
mov     di, dx
push    ds
pop     es
std
rep movsb
cld
mov     bx, si
mov     dx, di
pop     es
pop     di
pop     si
pop     cx
retn
sub_435BC endp




sub_435D3 proc near
test    word ptr ds:2B7h, 1
retn
sub_435D3 endp




sub_435DA proc near
test    word ptr ds:2B7h, 2
retn
sub_435DA endp




sub_435E1 proc near
test    word ptr ds:2B7h, 8
retn
sub_435E1 endp




sub_435E8 proc near
test    word ptr ds:2B7h, 400h
jz      short locret_435F8
call    sub_435E1
jz      short locret_435F8
call    sub_435DA

locret_435F8:
retn
sub_435E8 endp




sub_435F9 proc near
test    word ptr ds:2B7h, 800h
retn
sub_435F9 endp




sub_43600 proc near
pushf
or      word ptr ds:2B7h, 10h
popf
retn
sub_43600 endp




sub_43609 proc near
pushf
test    word ptr ds:2E7h, 9
jnz     short loc_43617
mov     byte ptr ds:17h, 0

loc_43617:
or      word ptr ds:2E7h, 9
or      word ptr ds:19h, 100h
popf
retn
sub_43609 endp




sub_43625 proc near
call    sub_451B3
call    sub_43A46
retn
sub_43625 endp




sub_4362C proc near
mov     ax, ds:296h
mov     ds:93h, ax
mov     bx, ds:2B1h
mov     ds:296h, bx
mov     ax, ds:29Bh
mov     ds:95h, ax
mov     ax, ds:2B3h
mov     ds:29Bh, ax
sub     ax, bx
mov     cl, ds:2B5h
cmp     al, cl
jbe     short loc_43652
mov     al, cl

loc_43652:
mov     ds:193h, ax
mov     ax, ds:28Ch
mov     cl, bh
xor     dx, dx
mov     ch, dl
mov     bh, dl
mul     cx
add     ax, bx
add     ax, bx
mov     ds:28Ah, ax
retn
sub_4362C endp




sub_4366A proc near
xor     ax, ax
mov     ds:14h, al
mov     di, 0
mov     cx, 1Dh
push    ds
pop     es
cld
rep stosb
inc     ax
mov     di, 1Dh
mov     cx, 1
rep stosb
mov     ax, 0FFFFh
mov     di, 1Eh
mov     cx, 3
rep stosb
mov     ax, 97h
mov     di, 22h ; '"'
mov     cx, 6
rep stosw
mov     al, 0
mov     di, 2Eh ; '.'
mov     cx, 57h ; 'W'
rep stosb
mov     word ptr ds:323h, 1Eh
mov     word ptr ds:344h, 1Eh
mov     ds:315h, al
mov     byte ptr ds:316h, 0Ah
mov     byte ptr ds:2Eh, 3
mov     byte ptr ds:33h, 4Fh ; 'O'
mov     word ptr ds:191h, 0A0Dh

loc_436C7:
mov     al, 0
mov     cx, ds:2B5h
shl     cx, 1
mov     dx, 0B000h
cmp     byte ptr ds:298h, 7
jz      short loc_436DE
mov     al, ds:381h
mov     dh, 0B8h

loc_436DE:
mov     ds:28Eh, al
mov     ds:28Ch, cx
mov     ds:288h, dx
retn
sub_4366A endp




sub_436EA proc near
mov     ax, ds:2D5h
mov     ds:311h, ax
mov     ds:313h, ax
mov     ds:309h, ax
mov     ds:30Bh, ax
mov     ds:30Dh, ax
mov     ds:30Fh, ax
mov     ds:22h, ax
mov     ds:26h, ax
mov     ds:2Ah, ax
mov     ds:305h, ax
mov     word ptr ds:19h, 0
mov     byte ptr ds:304h, 0
mov     word ptr ds:24h, 97h
and     word ptr ds:2B7h, 0EFFFh
retn
sub_436EA endp

mov     ax, 0FFFFh



sub_43726 proc near
push    ax
mov     byte ptr ds:1Eh, 0FFh
call    sub_4398E
call    sub_43625
call    sub_45438
mov     ax, ds:93h
mov     ds:296h, ax
mov     ax, ds:95h
mov     ds:29Bh, ax
call    sub_45BD2
mov     bx, ds:2E3h
mov     byte ptr [bx], 1Ah
call    sub_447D8
mov     ds:2E5h, bx
pop     ax
mov     sp, ds:85h
retn
sub_43726 endp




sub_43758 proc near

; FUNCTION CHUNK AT 022E SIZE 0000004D BYTES

mov     ds:85h, sp
mov     bx, ds:2E5h
push    bx
mov     bx, ds:2E3h
mov     word ptr [bx], 0A0Dh
mov     word ptr ds:8Bh, 245Ch
test    word ptr ds:2B7h, 20h
jz      short loc_4377D
call    sub_4362C
pop     bx
jmp     short loc_437CE

loc_4377D:
mov     byte ptr ds:17h, 0FFh
test    word ptr ds:2B7h, 1000h
jnz     short loc_4378F
mov     byte ptr ds:17h, 0

loc_4378F:
or      word ptr ds:2B7h, 1000h
mov     byte ptr ds:1Dh, 1
call    sub_4362C
pop     bx
test    word ptr ds:2B7h, 200h
jnz     short loc_437C0
push    word ptr ds:24h
push    word ptr ds:304h
call    sub_454B6
pop     bx
mov     ds:304h, bl
pop     bx
mov     ds:24h, bx
call    sub_45520
jmp     short loc_437CE

loc_437C0:
call    sub_4474C
test    word ptr ds:2B7h, 100h
jz      short loc_437CE
call    sub_4471E
sub_43758 endp

; START OF FUNCTION CHUNK FOR sub_44673
;   ADDITIONAL PARENT FUNCTION sub_43758
;   ADDITIONAL PARENT FUNCTION sub_44410

loc_437CE:
mov     sp, ds:85h
mov     bx, ds:24h
cmp     byte ptr [bx], 0FFh
jnz     short loc_437E6
cmp     bx, 18Eh
jnb     short loc_437E6
call    sub_44E51
jmp     short loc_437CE

loc_437E6:
call    sub_4532C
call    sub_45198
and     word ptr ds:19h, 0FF6Fh
call    sub_4398E
call    sub_43A46
or      word ptr ds:2B7h, 20h
call    sub_438C2
jb      short loc_43808
call    sub_43824
jmp     short loc_437CE

loc_43808:
jz      short loc_437CE
mov     bx, 22Eh
push    bx
push    dx
mov     bx, 29h ; ')'
mov     dx, 2Dh ; '-'
mov     cx, 8
jmp     sub_435BC
; END OF FUNCTION CHUNK FOR sub_44673
call    sub_43943
call    sub_46352
call    sub_4532C



sub_43824 proc near

; FUNCTION CHUNK AT 2864 SIZE 00000006 BYTES

call    sub_43609
cmp     al, 20h ; ' '
jz      short loc_43834
cmp     al, 9
jz      short loc_43834
push    ax
call    sub_43865
pop     ax

loc_43834:
mov     bx, ds:24h
cmp     bx, 18Fh
jnb     short loc_43862
call    sub_435D3
jz      short loc_43848
push    ax
call    sub_448CF
pop     ax

loc_43848:
mov     [bx], al
inc     bx
cmp     al, 0Dh
jnz     short loc_43858
call    sub_45438
call    sub_45697
jmp     sub_4532C

loc_43858:
call    sub_4569D
mov     ds:24h, bx
jmp     sub_45520

loc_43862:
jmp     loc_45E04
sub_43824 endp ; sp-analysis failed




sub_43865 proc near
test    word ptr ds:19h, 100h
jz      short locret_438C1
and     word ptr ds:19h, 0FEFFh
call    sub_435E8
jz      short locret_438C1
call    sub_447B7
mov     ax, ds:24h
cmp     ax, bx
jb      short loc_43884
mov     bx, ax

loc_43884:
mov     dx, 97h
xchg    bx, dx

loc_43889:
cmp     bx, dx
jz      short loc_438A1
mov     al, [bx]
cmp     al, 20h ; ' '
jz      short loc_4389E
cmp     al, 9
jz      short loc_4389B
cmp     al, 0FFh
jnz     short loc_438A1

loc_4389B:
mov     byte ptr [bx], 20h ; ' '

loc_4389E:
inc     bx
jmp     short loc_43889

loc_438A1:
mov     dx, 97h
sub     bx, dx
xchg    bx, dx

loc_438A8:
mov     dh, ds:303h
cmp     dl, dh
jb      short locret_438C1
mov     byte ptr [bx], 9

loc_438B3:
inc     bx
dec     dl
jz      short locret_438C1
dec     dh
jz      short loc_438A8
mov     byte ptr [bx], 0FFh
jmp     short loc_438B3

locret_438C1:
retn
sub_43865 endp




sub_438C2 proc near
call    sub_46352
call    sub_4532C
cmp     al, 7Fh
jnb     short loc_438D0
cmp     al, 20h ; ' '
jnb     short locret_43919

loc_438D0:
mov     bx, 2Eh ; '.'
mov     byte ptr [bx], 1
inc     bx
mov     [bx], al

loc_438D9:
push    cs
pop     es
assume es:seg054
push    bx
mov     si, 2174h
mov     ch, 0
call    sub_439C3
pop     bx
or      al, al
jnz     short loc_4391A
push    bx
mov     si, 22A2h
mov     ch, 1
call    sub_439C3
pop     bx
or      al, al
jnz     short loc_4391A
les     si, ds:2DFh
assume es:nothing
push    bx
mov     ch, 0
call    sub_439C3
pop     bx
cmp     al, 1
jz      short loc_4391A
cmp     al, 0FFh
jnz     short loc_4390F
mov     ax, cx
jmp     sub_43726

loc_4390F:
mov     al, ds:2Fh
cmp     al, 20h ; ' '
jnb     short locret_43919
xor     al, al
stc

locret_43919:
retn

loc_4391A:
dec     al
jz      short loc_4392A
mov     bx, 23CEh
add     bx, cx
add     bx, cx
mov     dx, es:[bx]
stc
retn

loc_4392A:
call    sub_43943
pushf
call    sub_46352
call    sub_4532C
inc     byte ptr ds:2Eh
inc     bx
mov     [bx], al
popf
jnz     short loc_43941
call    sub_43943

loc_43941:
jmp     short loc_438D9
sub_438C2 endp




sub_43943 proc near
call    sub_46347
jnz     short locret_43919
push    bx
xor     bx, bx
mov     ds:16h, bl
call    sub_44790
mov     bx, 2Eh ; '.'
mov     al, [bx]
or      al, al
jz      short locret_4396D

loc_4395B:
push    ax
inc     bx
mov     al, [bx]
add     byte ptr ds:16h, 2
call    sub_4396E
pop     ax
dec     al
jnz     short loc_4395B
pop     bx

locret_4396D:
retn
sub_43943 endp ; sp-analysis failed




sub_4396E proc near
cmp     byte ptr ds:1Eh, 0
jz      short loc_43978
call    sub_45BD2

loc_43978:
cmp     al, 20h ; ' '
jb      short loc_4397F
jmp     sub_44786

loc_4397F:
push    ax
push    ax
mov     al, 5Eh ; '^'
call    sub_44786
pop     ax
add     al, 40h ; '@'
call    sub_44786
pop     ax
retn
sub_4396E endp




sub_4398E proc near
test    word ptr ds:19h, 1
jnz     short locret_439C2
xor     bx, bx
mov     ch, bl
mov     cl, ds:16h
jcxz    short locret_439C2
cmp     cl, 3
jbe     short loc_439AA
mov     byte ptr ds:17h, 0

loc_439AA:
call    sub_44790
cmp     byte ptr ds:1Eh, 0
jz      short loc_439B7
call    sub_45BE2

loc_439B7:
mov     al, 20h ; ' '

loc_439B9:
call    sub_44786
loop    loc_439B9
mov     ds:16h, cl

locret_439C2:
retn
sub_4398E endp




sub_439C3 proc near
mov     cl, 0FFh
push    cx
mov     bx, 2Eh ; '.'
push    bx

loc_439CA:
pop     bx
pop     cx
mov     al, es:[si]
inc     si
or      al, al
jz      short locret_43A37
mov     ch, al
and     ch, 0C0h
and     al, 3Fh
inc     cl
push    cx
push    bx
mov     cl, [bx]
inc     bx
sub     al, cl
jnb     short loc_439EA
add     cl, al
jmp     short loc_43A3D

loc_439EA:
lahf
push    ax

loc_439EC:
mov     al, [bx]
cmp     al, 0
nop
nop
jnz     short loc_439FA
or      ch, 20h
jmp     short loc_43A20
align 2

loc_439FA:
test    ch, 20h
jnz     short loc_43A1D
test    ch, 40h
jz      short loc_43A20
cmp     al, 61h ; 'a'
jb      short loc_43A0E
cmp     al, 7Dh ; '}'
ja      short loc_43A0E
sub     al, 20h ; ' '

loc_43A0E:
test    ch, 80h
jz      short loc_43A20
cmp     al, 41h ; 'A'
jb      short loc_43A1D
cmp     al, 5Fh ; '_'
ja      short loc_43A1D
sub     al, 40h ; '@'

loc_43A1D:
and     ch, 0DFh

loc_43A20:
cmp     al, es:[si]
jnz     short loc_43A38
inc     si
inc     bx
dec     cl
jnz     short loc_439EC
pop     ax
sahf
pop     bx
pop     cx
mov     ch, 0
mov     al, 0FFh
jz      short locret_43A37
mov     al, 1

locret_43A37:
retn

loc_43A38:
pop     ax
add     al, cl
mov     cl, al

loc_43A3D:
mov     ch, 0
add     si, cx
jmp     short loc_439CA
sub_439C3 endp

; START OF FUNCTION CHUNK FOR sub_43A46

loc_43A43:
jmp     loc_43B0D
; END OF FUNCTION CHUNK FOR sub_43A46



sub_43A46 proc near

; FUNCTION CHUNK AT 04A3 SIZE 00000003 BYTES

test    word ptr ds:19h, 1
jz      short loc_43A59
and     word ptr ds:19h, 0FFFEh

loc_43A54:
call    sub_46347
jz      short loc_43A54

loc_43A59:
test    word ptr ds:2B7h, 20h
jz      short loc_43A66
call    sub_46347
jnz     short locret_43A37

loc_43A66:
call    sub_45BE2
cmp     byte ptr ds:17h, 0FFh
jz      short loc_43A43
mov     byte ptr ds:17h, 0FFh
mov     bx, 0
mov     ds:0Ah, bx
mov     ds:18h, bl
call    sub_44790
call    sub_4490E
mov     bx, 3B00h
call    sub_44790
call    sub_446D1
test    word ptr ds:2E7h, 9
jz      short loc_43A9F
mov     bx, 3900h
call    sub_4476B
sub     al, [bx+si]

loc_43A9F:
mov     bx, 600h
call    sub_4476B
dec     sp
imul    bp, [bp+65h], 20h ; ' '
mov     bx, 1100h
call    sub_4476B
inc     bx
outsw
insb
and     [bx+si], al
call    sub_435D3
jz      short near ptr loc_43AC7+1
mov     bx, 1900h
call    sub_4476B
dec     cx
outsb
jnb     short near ptr loc_43B29+1
jb      short loc_43B3B

loc_43AC7:
add     al, ch
psubq   mm6, qword ptr [si+0Dh]
mov     bx, 2000h
call    sub_4476B
dec     cx
outsb
db      64h
outs    dx, byte ptr gs:[si]
jz      short $+2

loc_43ADA:
call    sub_435E1
jz      short loc_43AE9
mov     bx, 2700h
call    sub_4476B
push    sp
popa
bound   ax, [bx+si]

loc_43AE9:
call    sub_435E8
jz      short near ptr loc_43AF5+4
mov     bx, 2B00h
call    sub_4476B
inc     si

loc_43AF5:
imul    bp, [si+6Ch], 0E800h
std
cli
jz      short loc_43B0D
mov     bx, 3000h
call    sub_4476B
push    bp
outsb
imul    bp, [bp+64h], 6E65h
jz      short $+2

loc_43B0D:
test    word ptr ds:2B7h, 20h
jz      short loc_43B1A
call    sub_46347
jnz     short loc_43B90

loc_43B1A:
mov     al, ds:304h
add     al, ds:13h
inc     al
cmp     al, ds:18h
jz      short loc_43B3E

loc_43B29:
mov     ds:18h, al
mov     bx, 1500h
call    sub_44790
call    sub_45BE2
mov     bl, al
mov     bh, 0
mov     al, 3

loc_43B3B:
call    sub_43BAD

loc_43B3E:
mov     di, ds:0Ah
or      di, di
jz      short loc_43B4E
cmp     di, ds:22h
jz      short loc_43B90
jb      short loc_43B58

loc_43B4E:
mov     word ptr ds:0Ch, 1
mov     di, ds:2D5h

loc_43B58:
call    sub_44B55
mov     cx, ds:22h
xor     dx, dx
sub     cx, di
jz      short loc_43B72
push    ds
pop     es
mov     al, 0Ah
push    cx
push    di
call    sub_43B93
pop     di
pop     cx
jz      short loc_43B90

loc_43B72:
add     ds:0Ch, dx
mov     bx, 0B00h
call    sub_44790
call    sub_45BE2
mov     bx, ds:0Ch
mov     al, 5
call    sub_43BAD
mov     bx, ds:22h
mov     ds:0Ah, bx

loc_43B90:
jmp     sub_44B55
sub_43A46 endp ; sp-analysis failed




sub_43B93 proc near
cld

loc_43B94:
repne scasb
jnz     short locret_43BAC
inc     dx
or      dl, dl
jnz     short loc_43B94
test    word ptr ds:2B7h, 20h
jz      short loc_43B94
call    sub_46347
jz      short sub_43B93
cmp     ax, ax

locret_43BAC:
retn
sub_43B93 endp




sub_43BAD proc near
push    ax
mov     ch, 0
call    sub_43BC4
pop     ax
add     al, ch
jz      short locret_43BC3
mov     ch, al
mov     al, 20h ; ' '

loc_43BBC:
call    sub_44786
dec     ch
jnz     short loc_43BBC

locret_43BC3:
retn
sub_43BAD endp




sub_43BC4 proc near
cmp     bx, 0
mov     al, 30h ; '0'
jz      short loc_43BFC
mov     dx, 2710h
call    sub_43BE6
mov     dx, 3E8h
call    sub_43BE6
mov     dx, 64h ; 'd'
call    sub_43BE6
mov     dx, 0Ah
call    sub_43BE6
mov     dx, 1
sub_43BC4 endp




sub_43BE6 proc near
xor     al, al

loc_43BE8:
sub     bx, dx
jb      short loc_43BF0
inc     al
jmp     short loc_43BE8

loc_43BF0:
add     bx, dx
add     al, 30h ; '0'
cmp     al, 30h ; '0'
jnz     short loc_43BFC
or      ch, ch
jz      short locret_43BC3

loc_43BFC:
dec     ch
jmp     sub_44786
sub_43BE6 endp

db 0C6h, 6, 92h, 0, 0FFh, 0E8h, 65h, 0Bh
db 3Ah, 20h, 0, 8Bh, 0DAh, 8Bh, 0F2h, 43h
db 8Ah, 37h, 0C6h, 7, 0, 43h, 0B1h, 4, 0EBh
db 28h, 0C6h, 6, 1Eh, 2 dup(0), 52h, 53h
db 56h, 0E8h, 9Ch, 0FCh, 5Eh, 5Bh, 5Ah, 0C6h
db 6, 1Eh, 0, 0FFh, 73h, 7Bh, 75h, 8, 0A0h
db 2Fh, 0, 0E8h, 0FBh, 0Bh, 0EBh, 0E1h, 8Ah
db 26h, 92h, 0, 0C6h, 6, 92h, 2 dup(0), 8Ah
db 0C1h, 3Ch, 0, 75h, 4, 0C6h, 7, 0, 0C3h
db 3Ch, 2, 75h, 0Ch, 8Ah, 44h, 1, 3Ah, 0C6h
db 73h, 0C3h, 0FEh, 44h, 1, 0EBh, 72h, 3Ch
db 4, 75h, 12h, 8Ah, 44h, 1, 3Ah, 0C6h, 74h
db 0B3h, 8Ah, 7, 0E8h, 1, 0FDh, 43h, 0FEh
db 44h, 1, 0EBh, 0EEh, 3Ch, 3, 75h, 7, 0E8h
db 6Bh, 0, 75h, 0FBh, 0EBh, 9Dh, 3Ch, 3Eh
db 75h, 9, 88h, 26h, 92h, 0, 0E8h, 0C9h
db 26h, 0EBh, 20h, 3Ch, 22h, 74h, 0Ch, 3Ch
db 23h, 74h, 8, 3Ch, 1, 74h, 4, 3Ch, 2, 75h
db 6, 0E8h, 47h, 0, 0E9h, 7Ah, 0FFh, 80h
db 3Eh, 2Fh, 0, 12h, 74h, 0B9h, 0E9h, 70h
db 0FFh, 80h, 3Eh, 92h, 0, 0FFh, 75h, 0Ch
db 50h, 0E8h, 2Fh, 0, 75h, 0FBh, 0C6h, 6
db 92h, 2 dup(0), 58h, 8Ah, 0D0h, 8Ah, 44h
db 1, 3Ah, 4, 72h, 3, 0E9h, 51h, 0FFh, 0FEh
db 44h, 1, 88h, 17h, 8Ah, 7, 43h, 0E8h, 99h
db 0FCh, 8Ah, 44h, 1, 3Ah, 0C6h, 73h, 3
db 0E9h, 3Ch, 0FFh, 8Ah, 74h, 1, 0E9h, 36h
db 0FFh, 8Ah, 44h, 1, 0Ah, 0C0h, 74h, 17h
db 0FEh, 4Ch, 1, 4Bh, 80h, 3Fh, 20h, 73h
db 3, 0E8h, 2 dup(0), 0E8h, 73h, 0Ah, 8
db 20h, 8, 0, 0B0h, 0FFh, 0Ah, 0C0h, 0C3h
db 0E8h, 0Ah, 0, 0E8h, 31h, 0, 0C6h, 6, 15h
db 3, 0, 0EBh, 5Ah, 0E8h, 2, 0Bh, 0E8h, 57h
db 0Ah, 46h, 69h, 6Eh, 64h, 0, 0BAh, 23h
db 3, 0E9h, 0DFh, 0FEh, 0E8h, 0F4h, 0Ah
db 0E8h, 46h, 0Ah, 52h, 65h, 70h, 6Ch, 61h
db 63h, 65h, 20h, 77h, 69h, 74h, 68h, 0
db 0BAh, 44h, 3, 0E9h, 0C6h, 0FEh, 0E8h
db 0DBh, 0Ah, 0E8h, 2Dh, 0Ah, 4Fh, 70h, 74h
db 69h, 6Fh, 6Eh, 73h, 0, 0BAh, 16h, 3, 0E8h
db 0B2h, 0FEh, 8Ah, 3Eh, 93h, 1, 0B3h, 0
db 0E9h, 38h, 0Ah, 0E8h, 0B6h, 0FFh, 0E8h
db 0C4h, 0FFh, 0E8h, 0DAh, 0FFh, 0C6h, 6
db 15h, 3, 80h, 0EBh, 3, 0E8h, 0D8h, 0FBh
db 0E8h, 0CAh, 16h, 0E8h, 67h, 0Ah, 89h
db 1Eh, 10h, 0, 0C7h, 6, 1Bh, 3 dup(0), 8Bh
db 0Eh, 0E3h, 2, 89h, 0Eh, 2 dup(0), 8Bh
db 0Eh, 0D5h, 2, 89h, 0Eh, 2, 0, 0BBh, 17h
db 3, 8Ah, 2Fh, 0Ah, 0EDh, 75h, 3, 0EBh
db 7Eh, 90h, 43h, 8Ah, 7, 3Ch, 39h, 77h
db 14h, 2Ch, 30h, 72h, 10h, 98h, 50h, 0B0h
db 0Ah, 0F7h, 2Eh, 1Bh, 0, 5Ah, 3, 0C2h
db 0A3h, 1Bh, 0, 0EBh, 5Eh, 0E8h, 0C8h, 1Ch
db 3Ch, 57h, 75h, 5, 80h, 0Eh, 15h, 3, 1
db 3Ch, 55h, 75h, 5, 80h, 0Eh, 15h, 3, 4
db 3Ch, 4Eh, 75h, 5, 80h, 0Eh, 15h, 3, 2
db 3Ch, 47h, 75h, 0Ah, 80h, 0Eh, 15h, 3
db 8, 80h, 26h, 15h, 3, 0DFh, 3Ch, 42h, 75h
db 5, 80h, 0Eh, 15h, 3, 10h, 3Ch, 4Ch, 75h
db 1Ch, 80h, 0Eh, 15h, 3, 20h, 80h, 26h
db 15h, 3, 0F7h, 51h, 8Bh, 0Eh, 13h, 3, 89h
db 0Eh, 2 dup(0), 8Bh, 0Eh, 11h, 3, 89h
db 0Eh, 2, 0, 59h, 3Ch, 53h
db 75h, 5, 80h, 0Eh, 15h, 3, 40h, 0FEh, 0CDh
db 75h, 2 dup(83h), 3Eh, 1Bh, 0, 1, 77h
db 6, 0C7h, 6, 1Bh, 0, 1, 0, 8Bh, 1Eh, 2
db 0, 0A0h, 15h, 3, 0A8h, 10h, 74h, 4, 8Bh
db 1Eh, 2 dup(0), 0A8h, 80h, 74h, 0Ch, 0A8h
db 28h, 75h, 4, 8Bh, 1Eh, 10h, 0, 89h, 1Eh
db 10h, 0, 0E8h, 0DCh, 21h, 72h, 2Ah, 0F6h
db 6, 15h, 3, 80h, 74h, 0Ch, 0E8h, 63h, 0
db 0F6h, 6, 15h, 3, 28h, 74h, 2, 0EBh, 0E4h
db 0FFh, 0Eh, 1Bh, 0, 74h, 2, 0EBh, 0DCh
db 53h, 8Bh, 1Eh, 10h, 0, 0E8h, 4Eh, 16h
db 5Bh, 0E8h, 4Ah, 16h, 0E9h, 5Fh, 0F9h
db 0E8h, 32h, 0, 0E8h, 41h, 16h, 0F6h, 6
db 15h, 3, 80h, 74h, 7, 0F6h, 6, 15h, 3
db 28h, 75h, 0E9h, 0E8h, 90h, 9, 0E8h, 0EBh
aSearchStringNo db 8,'Search string not found',0
jmp     sub_4477A
mov     dx, ds:2D5h
call    sub_44858
mov     bx, ds:2E3h
jmp     sub_44858
db 53h, 0E8h, 91h, 24h, 74h, 0Ah, 0F6h, 6
db 15h, 3, 2, 74h, 3, 0EBh, 6Fh, 90h, 53h
db 8Bh, 1Eh, 10h, 0, 0E8h, 0ECh, 15h, 5Bh
db 2 dup(0E8h), 15h, 0E8h, 0C7h, 12h, 0F6h
db 6, 15h, 3, 2, 75h, 58h, 0E8h, 3Eh, 9
db 0E8h, 11h, 1Ch, 52h, 65h, 70h, 6Ch, 61h
db 63h, 65h, 20h, 28h, 0D9h, 2Fh, 0CEh, 29h
db 3Ah, 20h, 0, 0E8h, 64h, 0Ch, 0B9h, 4
db 0, 0E8h, 50h, 24h, 75h, 24h, 0BBh, 64h
db 0, 51h, 0E8h, 0F0h, 1Dh, 59h, 0E2h, 0F1h
db 0BBh, 0, 0Fh, 0E8h, 87h, 8, 0B9h, 4, 0
db 0E8h, 38h, 24h, 75h, 0Ch, 0BBh, 64h, 0
db 51h, 0E8h, 0D8h, 1Dh, 59h, 0E2h, 0F1h
db 0EBh, 0D1h, 0E8h, 32h, 24h, 0E8h, 10h
db 9, 0E8h, 57h, 1Bh, 3Ch, 59h, 74h, 6, 3Ch
db 4Eh, 74h, 5Bh, 0EBh, 0BEh, 0E8h, 5, 15h
db 0E8h, 0D3h, 0F6h, 8Ah, 0Eh, 45h, 3, 0B5h
db 0, 5Bh, 53h, 51h, 0A0h, 24h, 3, 2Ah, 0C1h
db 8Ah, 0C8h, 9Fh, 50h, 73h, 2, 0FEh, 0CDh
db 0F6h, 6, 15h, 3, 10h, 75h, 4, 8Bh, 1Eh
db 10h, 0, 58h, 9Eh, 53h, 74h, 3, 0E8h, 0BAh
db 6, 5Ah, 59h, 8Ah, 0C5h, 0Ah, 0C1h, 74h
db 6, 0BBh, 46h, 3, 0E8h, 41h, 0F6h, 0E8h
db 27h, 17h, 0E8h, 0D4h, 23h, 75h, 9, 0E8h
db 0B4h, 13h, 81h, 26h, 19h, 0, 0FDh, 0FFh
db 0F6h, 6, 15h, 3, 10h, 75h, 4, 5Bh, 87h
db 0DAh, 0C3h, 5Bh, 0C3h


; Attributes: bp-based frame

sub_43F8B proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    bp
mov     bp, sp
push    cx
push    si
push    di
push    ds
push    es
les     di, [bp+arg_0]
lds     si, [bp+arg_4]
cld
repe cmpsb
pop     es
pop     ds
pop     di
pop     si
pop     cx
pop     bp
retn    8
sub_43F8B endp

mov     dl, 1
jmp     short loc_43FAB
mov     dl, 0FFh

loc_43FAB:
push    dx
call    sub_45438
call    sub_447D8
mov     di, bx
pop     dx
les     si, ds:365h
mov     ax, es
or      ax, si
jz      short loc_43FFC

loc_43FBF:
mov     cx, es:[si]
jcxz    short loc_43FFC
inc     si
inc     si
mov     ds:32h, ch
mov     ch, 0
call    sub_44059
jnz     short loc_43FE7
mov     al, 1
push    si
add     si, 4

loc_43FD7:
pop     bx
call    sub_44066
mov     bx, es:[bx]
les     si, es:[si]
jz      short loc_43FFF
mov     dl, al
jmp     short loc_43FFF

loc_43FE7:
add     si, 4
call    sub_44059
jnz     short loc_43FF7
mov     al, 0FFh
push    si
sub     si, 4
jmp     short loc_43FD7

loc_43FF7:
add     si, 4
jmp     short loc_43FBF

loc_43FFC:
jmp     loc_437CE

loc_43FFF:
call    sub_44078
jb      short loc_43FFC

loc_44004:
add     di, bp
jcxz    short loc_43FFC
mov     al, [di]
dec     cx
cmp     al, es:[si]
jz      short loc_44044
cmp     byte ptr ds:32h, 0
jz      short loc_44004
cmp     al, es:[bx]
jnz     short loc_44004
cmp     dl, 1
jz      short loc_4402A
xchg    bx, si
call    sub_440A2
xchg    si, bx
jnz     short loc_44004

loc_4402A:
inc     ah

loc_4402C:
or      bp, bp
js      short loc_4403A
add     di, dx
dec     di
sub     cx, dx
jb      short loc_43FFC
inc     cx
jmp     short loc_44004

loc_4403A:
sub     cx, dx
jb      short loc_43FFC
inc     cx
sub     di, dx
inc     di
jmp     short loc_44004

loc_44044:
cmp     dl, 1
jz      short loc_4404E
call    sub_440A2
jnz     short loc_44004

loc_4404E:
dec     ah
jnz     short loc_4402C
mov     bx, di
call    sub_454B6
jmp     short loc_43FFC



sub_44059 proc near
push    word ptr es:[si+2]
push    word ptr es:[si]
push    ds
push    di
call    sub_43F8B
retn
sub_44059 endp




sub_44066 proc near
push    word ptr es:[bx+2]
push    word ptr es:[bx]
push    word ptr es:[si+2]
push    word ptr es:[si]
call    sub_43F8B
retn
sub_44066 endp




sub_44078 proc near
mov     al, dl
cbw
mov     bp, ax
mov     ah, 1
mov     dx, cx
cmp     al, 0
jg      short loc_44094
sub     di, dx
inc     di
mov     cx, di
sub     cx, ds:2D5h
jb      short locret_440A1
std
clc
jmp     short locret_440A1

loc_44094:
add     di, dx
mov     cx, ds:2E3h
sub     cx, di
jb      short locret_440A1
inc     cx
dec     di
clc

locret_440A1:
retn
sub_44078 endp




sub_440A2 proc near
push    ds
push    di
push    es
push    si
xchg    dx, cx
call    sub_43F8B
xchg    cx, dx
retn
sub_440A2 endp

mov     si, 309h



sub_440B1 proc near
call    sub_447B7
inc     bx
mov     ax, ds:24h
cmp     ax, bx
jbe     short loc_440BE
mov     ax, bx

loc_440BE:
mov     [si], ax
retn
sub_440B1 endp

mov     si, 30Bh
jmp     short sub_440B1
mov     si, 30Dh
jmp     short sub_440B1
mov     si, 30Fh
jmp     short sub_440B1



sub_440D0 proc near
mov     bx, ds:22h
call    sub_44866
jnb     short loc_440DD
mov     bx, ds:2E3h

loc_440DD:
mov     ds:313h, bx
mov     si, 6

loc_440E4:
call    sub_440B1
call    sub_43600
jmp     sub_44AF5
sub_440D0 endp


loc_440ED:
mov     ax, ds:22h
mov     ds:311h, ax
mov     si, 4
jmp     short loc_440E4
call    sub_45438
mov     bx, ds:22h
mov     ds:311h, bx
call    sub_44866
jnb     short loc_4410C
mov     bx, ds:2E3h

loc_4410C:
mov     ds:313h, bx
call    sub_43600
call    sub_4532C
jmp     sub_45697
xor     word ptr ds:2B7h, 10h
jmp     sub_44AF5
call    sub_45438
mov     bx, ds:309h
jmp     sub_454B6
call    sub_45438
mov     bx, ds:30Bh
jmp     sub_454B6
call    sub_45438
mov     bx, ds:30Dh
jmp     sub_454B6
call    sub_45438
mov     bx, ds:30Fh
jmp     sub_454B6



sub_4414A proc near
call    sub_45438
mov     bx, ds:311h
jmp     sub_454B6
sub_4414A endp

call    sub_45438
mov     bx, ds:313h
jmp     sub_454B6



sub_4415E proc near
test    word ptr ds:2B7h, 10h
jz      short loc_44180
call    sub_447B7
inc     bx
mov     dx, bx
mov     bx, ds:4
call    sub_44184
push    bx
mov     bx, ds:6
call    sub_44184
pop     ax
cmp     ax, bx
jb      short loc_44182

loc_44180:
stc
retn

loc_44182:
clc
retn
sub_4415E endp




sub_44184 proc near
cmp     bx, 18Fh
ja      short locret_44195
cmp     bx, dx
jbe     short loc_44190
mov     bx, dx

loc_44190:
push    dx
call    sub_447E3
pop     dx

locret_44195:
retn
sub_44184 endp

db 0E8h, 0C5h, 0FFh, 72h, 0FAh, 0E8h, 0FBh
db 2, 0C6h, 6, 17h, 2 dup(0), 0E8h, 0FEh
db 21h, 3Dh, 2 dup(0FFh), 8Bh, 0D8h, 74h
db 3, 0EBh, 2, 90h, 0C3h, 50h, 6, 0E8h, 63h
db 6, 7, 5Bh, 8Bh, 3Eh, 11h, 3, 8Bh, 36h
db 13h, 3, 8Ah, 4, 50h, 56h, 0C6h, 4, 1Ah
db 8Bh, 0CEh, 2Bh, 0CFh, 83h, 0FBh, 4, 76h
db 1, 41h, 87h, 0FAh, 0E8h, 2Bh, 1Dh, 87h
db 0FAh, 72h, 0Eh, 2Bh, 0C8h, 74h, 3, 49h
db 75h, 7, 5Eh, 58h, 88h, 4, 0E9h, 0E6h
db 0F5h, 1Eh, 6, 1Fh, 0E8h, 2Ah, 1Dh, 1Fh
db 3Dh, 63h, 0, 7Dh, 0EDh, 0E8h, 7Dh, 5
db 44h, 69h, 73h, 6Bh, 20h, 66h, 75h, 2 dup(6Ch)
db 0, 0E8h, 76h, 5, 0EBh, 0DBh, 0BAh, 33h
db 0, 0E8h, 0F5h, 0F9h, 0BBh, 35h, 0, 80h
db 3Fh, 0, 0C3h, 0C6h, 6, 17h, 2 dup(0)
db 0E8h, 7Bh, 21h, 3Dh, 2 dup(0FFh), 8Bh
db 0D8h, 75h, 1, 0C3h, 53h, 0E8h, 0E2h, 0F3h
db 0E8h, 6Fh, 2, 8Bh, 0Eh, 0E3h, 2, 81h
db 0C1h, 0F5h, 1, 2Bh, 0Eh, 0D9h, 2, 51h
db 8Bh, 1Eh, 87h, 0, 0F9h, 0E8h, 0DAh, 3
db 58h, 5Bh, 8Bh, 16h, 87h, 0, 8Bh, 0CAh
db 2Bh, 0C8h, 89h, 0Eh, 90h, 0, 2Bh, 0CAh
db 0E8h, 0A7h, 1Ch, 9Ch, 0E8h, 0BBh, 1Ch
db 9Dh, 73h, 22h, 0E8h, 55h, 0, 0E8h, 0BAh
db 5, 0E8h, 12h, 5
aErrorReadingFi db 'Error reading file',0
call    sub_4477A
jmp     loc_437CE
cmp     ax, cx
jz      short loc_442C3
xchg    ax, cx
mov     di, dx
push    ds
pop     es
mov     al, 1Ah
cld
jcxz    short loc_4428E
repne scasb
jnz     short loc_4428E
dec     di

loc_4428E:
dec     di
mov     bx, di
inc     bx
mov     ds:313h, bx
xchg    bx, dx
mov     bx, ds:87h
mov     ds:311h, bx
mov     bx, ds:90h
sub     bx, dx
mov     cx, bx
call    sub_43600
call    sub_4436C
jmp     loc_437CE



sub_442B1 proc near
mov     dx, ds:87h
mov     bx, ds:90h
sub     bx, dx
mov     cx, bx
xchg    dx, bx
clc
jmp     sub_44619
sub_442B1 endp


loc_442C3:
call    sub_442B1
jmp     loc_446BE
call    sub_45438
call    sub_44816
call    loc_4476E
push    ax
jb      short loc_4433E
outsb
jz      short loc_44341
outsb
db      67h
add     bh, dh
push    es
mov     bh, 2
adc     [bx+si], al
jz      short loc_442EF
mov     cx, ds:313h
mov     bx, ds:311h
cmp     bx, cx
jb      short loc_442F7

loc_442EF:
mov     bx, ds:2D5h
mov     cx, ds:2E3h

loc_442F7:
xor     dl, dl

loc_442F9:
cmp     bx, cx
jnb     short locret_44339
mov     al, [bx]
inc     bx
inc     dl
cmp     al, 20h ; ' '
jnb     short loc_4432C
dec     dl
cmp     al, 0Dh
jz      short loc_4432A
cmp     al, 9
jnz     short loc_4432C

loc_44310:
mov     al, 20h ; ' '
call    sub_45DF9
inc     dl
push    dx
mov     al, dl
mov     ah, 0
mov     dl, ds:303h
div     dl
cmp     ah, 0
pop     dx
jnz     short loc_44310
jmp     short loc_442F9

loc_4432A:
xor     dl, dl

loc_4432C:
call    sub_45DF9
jb      short locret_44339
call    sub_46347
jz      short loc_442F9
call    sub_46352

locret_44339:
retn
db 0A1h, 5, 3, 3Bh

loc_4433E:
push    es
adc     [bp+di], ax

loc_44341:
jb      short loc_4434F
mov     bx, ds:313h
cmp     ax, bx
jnb     short loc_4434F
mov     ds:305h, bx

loc_4434F:
call    near ptr byte_4448F
jnb     short locret_4437C
call    sub_43609
call    sub_444D6
mov     bx, ds:87h
mov     dx, ds:311h
mov     ds:311h, bx
add     bx, cx
mov     ds:313h, bx



sub_4436C proc near
xchg    dx, bx
clc
call    sub_44619
mov     bx, ds:311h
call    sub_454B6
jmp     sub_44AF5
sub_4436C endp


locret_4437C:
retn
call    near ptr byte_4448F
jnb     short locret_4437C
call    sub_43609
call    sub_444D6
mov     bx, ds:87h
mov     ds:311h, bx
add     bx, cx
mov     ds:313h, bx
call    sub_4555E
call    sub_4532C
jmp     sub_44AF5
; START OF FUNCTION CHUNK FOR sub_44410

loc_4439F:
call    sub_45438
call    sub_4532C
mov     bx, ds:24h
call    sub_447E3
cmp     bx, ds:311h
jb      short loc_4440E
cmp     bx, ds:313h
ja      short loc_4440E
call    sub_43609
mov     byte ptr ds:1Eh, 0
mov     bx, ds:311h

loc_443C4:
call    loc_4445C
mov     ax, ds:313h
cmp     ds:22h, ax
jnb     short loc_443FA
pop     ax
push    ax
or      al, al
jz      short loc_443DE
call    sub_448CF
mov     byte ptr [bx], 20h ; ' '
jmp     short loc_443E8

loc_443DE:
cmp     bx, 97h
jz      short loc_443E8
dec     bx
call    sub_448ED

loc_443E8:
or      word ptr ds:19h, 100h
call    sub_45438
mov     bx, ds:22h
call    sub_44866
jnb     short loc_443C4

loc_443FA:
pop     ax
call    sub_45438
mov     byte ptr ds:1Eh, 0FFh
mov     byte ptr ds:1Dh, 1
call    sub_4414A
jmp     sub_45697

loc_4440E:
pop     ax
retn
; END OF FUNCTION CHUNK FOR sub_44410



sub_44410 proc near

; FUNCTION CHUNK AT 022E SIZE 0000004D BYTES
; FUNCTION CHUNK AT 0DFF SIZE 00000071 BYTES

call    sub_44816
call    sub_44774
inc     bp
push    dx
push    dx
dec     di
push    dx
cmp     ah, [bx+si]
dec     di
jnz     short loc_44494
and     [bx+66h], ch
and     [bp+di+70h], dh
popa
arpl    [di+0], sp
jmp     sub_4477A

loc_4442D:
mov     byte ptr ds:1Eh, 0FFh
call    sub_44410
and     word ptr ds:19h, 0FFFDh
call    sub_45353
mov     byte ptr ds:1Dh, 1
mov     bx, ds:22h
call    sub_454B6
call    sub_45697
jmp     loc_437CE
mov     al, 20h ; ' '
push    ax
jmp     loc_4439F
mov     al, 0
push    ax
jmp     loc_4439F

loc_4445C:
push    dx

loc_4445D:
cmp     bx, ds:2D5h
jz      short loc_4446D
mov     al, [bx-1]
cmp     al, 0Ah
jz      short loc_4446D
dec     bx
jmp     short loc_4445D

loc_4446D:
mov     ds:22h, bx
call    sub_45353
mov     bx, 97h

loc_44477:
call    sub_4504D
jnz     short loc_44489
mov     byte ptr [bx], 20h ; ' '
inc     bx
cmp     bx, 18Fh
jb      short loc_44477
mov     bx, 97h

loc_44489:
mov     ds:24h, bx
pop     dx
retn
byte_4448F db 0F7h, 6, 0B7h, 2, 10h

loc_44494:
add     [di+2], dh
clc
retn
sub_44410 endp ; sp-analysis failed




sub_44499 proc near
call    sub_447B7
inc     bx
mov     dx, ds:24h
call    sub_4485F
call    loc_45448
mov     bx, ds:24h
call    sub_447E3
mov     ds:87h, bx
push    bx
mov     dx, ds:311h
inc     dx
cmp     bx, dx
mov     dx, ds:313h
jb      short loc_444C8
cmp     bx, dx
jnb     short loc_444C8
or      al, al
jmp     short loc_444D4

loc_444C8:
mov     bx, ds:311h
sub     bx, dx
mov     ds:89h, bx
mov     cx, bx

loc_444D4:
pop     bx

locret_444D5:
retn
sub_44499 endp




sub_444D6 proc near
call    sub_44619
mov     cx, ds:89h
neg     cx
mov     dx, ds:87h
mov     bx, ds:311h
push    cx
call    sub_435AE
pop     cx
retn
sub_444D6 endp

call    sub_45438
test    word ptr ds:2B7h, 10h
jz      short locret_444D5
call    sub_43609
mov     bx, ds:311h
call    sub_447A0
mov     ds:22h, bx
mov     bx, ds:26h
mov     dx, ds:311h
inc     dx
cmp     bx, dx
jb      short loc_44523
mov     dx, ds:313h
cmp     bx, dx
jnb     short loc_44523
mov     bx, ds:22h
mov     ds:26h, bx

loc_44523:
mov     bx, ds:313h
mov     dx, ds:311h
sub     bx, dx
jnb     short loc_44530
retn

loc_44530:
mov     cx, bx
xchg    dx, bx
push    bx
push    cx
pushf
call    sub_4555E
popf
pop     cx
pop     bx
call    sub_44619
mov     bx, ds:22h
mov     ds:311h, bx
mov     ds:313h, bx
call    sub_4532C
jmp     sub_44AF5
db 5, 3, 22h, 0, 26h, 0, 2Ah, 3 dup(0), 2
db 0, 11h, 3, 13h, 3, 4, 0, 6, 0, 9, 3, 0Bh
db 3, 0Dh, 3, 0Fh, 3



sub_4456E proc near
push    ax
push    bx
push    cx
push    si
mov     ax, cx
mov     bx, 0FC2h
mov     cx, 6

loc_4457A:
mov     si, cs:[bx]
cmp     word ptr [si], 18Fh
ja      short loc_44589
cmp     [si], dx
jb      short loc_44589
add     [si], ax

loc_44589:
inc     bx
inc     bx
loop    loc_4457A
pop     si
pop     cx
pop     bx
pop     ax
retn
sub_4456E endp

; START OF FUNCTION CHUNK FOR sub_44619

loc_44592:
pop     dx
pop     ax
mov     bx, 0FB2h
mov     cx, 0Eh

loc_4459A:
mov     si, cs:[bx]
cmp     [si], ax
jbe     short loc_445A9
sub     [si], dx
cmp     [si], ax
jnb     short loc_445A9
mov     [si], ax

loc_445A9:
add     bx, 2
loop    loc_4459A
les     bx, ds:2C9h
cmp     bx, 0FFFFh
jz      short loc_445DE
sub     ax, ds:2D5h
mov     cx, ds:2E3h
sub     cx, ds:2D5h

loc_445C3:
cmp     word ptr es:[bx], 0FFFFh
jz      short loc_445DE
cmp     es:[bx], ax
jbe     short loc_445D9
sub     es:[bx], dx
cmp     es:[bx], ax
jnb     short loc_445D9
mov     es:[bx], ax

loc_445D9:
add     bx, 4
jmp     short loc_445C3

loc_445DE:
push    es
les     si, ds:2FDh
mov     cx, es
or      cx, si
jz      short loc_44617
add     ax, ds:2D5h

loc_445ED:
mov     cx, es:[si]
cmp     cx, 0FFFFh
jz      short loc_44617
cmp     cx, 0FFFEh
jz      short loc_4460F
or      dx, dx
js      short loc_44602
cmp     cx, ax
jz      short loc_4460F

loc_44602:
cmp     cx, ax
jb      short loc_4460F
sub     cx, dx
cmp     cx, ax
jnb     short loc_4460F
mov     cx, 0FFFEh

loc_4460F:
mov     es:[si], cx
add     si, 3
jmp     short loc_445ED

loc_44617:
pop     es
retn
; END OF FUNCTION CHUNK FOR sub_44619



sub_44619 proc near

; FUNCTION CHUNK AT 0FF2 SIZE 00000087 BYTES

push    bx
push    cx
jb      short loc_44620
jmp     short loc_44650
align 2

loc_44620:
mov     dx, ds:2E3h
inc     dx
push    dx
push    dx
xchg    bx, dx
sub     bx, dx
mov     ax, bx
pop     bx
push    ax
sub     bx, cx
jb      short loc_44636
jmp     loc_446BE

loc_44636:
mov     dx, bx
push    dx
call    sub_44673
pop     dx
pop     cx
pop     bx
inc     cx
dec     dx
mov     ds:2E3h, dx
inc     dx
or      cx, cx
jz      short loc_4464D
call    sub_435BC

loc_4464D:
jmp     loc_44592

loc_44650:
push    bx
add     bx, cx
push    bx
mov     dx, ds:2E3h
inc     dx
inc     dx
xchg    bx, dx
sub     bx, dx
mov     cx, bx
pop     bx
pop     dx
or      cx, cx
jz      short loc_4466A
call    sub_435AE
dec     dx

loc_4466A:
dec     dx
mov     ds:2E3h, dx
inc     dx
jmp     loc_44592
sub_44619 endp




sub_44673 proc near

; FUNCTION CHUNK AT 022E SIZE 0000004D BYTES
; FUNCTION CHUNK AT 1170 SIZE 0000000E BYTES

mov     bx, ds:2D9h
dec     bx
sub     bx, dx
jb      short loc_446BE
mov     cx, 1F3h
sub     bx, cx
jnb     short locret_446BD
add     bx, cx
cmp     byte ptr ds:1Eh, 0
jz      short locret_446BD
push    bx
call    sub_44819
pop     bx
mov     ch, 0
call    sub_44774
push    di
inc     cx
push    dx
dec     si
dec     cx
dec     si
inc     di
cmp     ah, [bx+si]
add     al, ch
and     bp, si
call    sub_44774
and     [bp+si+79h], ah
jz      short loc_44710
sub     [bp+di+29h], dh
and     [si+65h], ch
db      66h
jz      short $+3

loc_446B4:
call    sub_44B55
or      word ptr ds:19h, 1

locret_446BD:
retn

loc_446BE:
call    sub_446C4
jmp     loc_437CE
sub_44673 endp ; sp-analysis failed




sub_446C4 proc near
cmp     byte ptr ds:1Eh, 0FFh
jz      short loc_446CE
jmp     loc_4442D

loc_446CE:
jmp     sub_44410
sub_446C4 endp




sub_446D1 proc near

; FUNCTION CHUNK AT 257B SIZE 00000007 BYTES
; FUNCTION CHUNK AT 2587 SIZE 00000011 BYTES

les     si, ds:2B9h
cld
lods    byte ptr es:[si]
or      al, al
jnz     short loc_446DD
retn

loc_446DD:
call    sub_45A7D
call    sub_45AC1
lods    byte ptr es:[si]
call    sub_45AC1
mov     di, si
xor     al, al
mov     cx, 0FFFFh
cld
repne scasb
dec     di

loc_446F3:
mov     al, es:[di]
dec     di
cmp     al, 5Ch ; '\'
jz      short loc_44703
cmp     al, 2Fh ; '/'
jz      short loc_44703
cmp     di, si
jnb     short loc_446F3

loc_44703:
mov     si, di
inc     si
inc     si
jmp     loc_45B1B
sub_446D1 endp

push    ds
pop     es
jmp     loc_45B1B
byte_4470F db 0E8h
; START OF FUNCTION CHUNK FOR sub_44673

loc_44710:
db      26h
or      ax, 0C3E8h
add     [bp+di], ch
push    ds
aad     2
les     si, ds:2C9h
retn
; END OF FUNCTION CHUNK FOR sub_44673



sub_4471E proc near
call    near ptr byte_4470F
mov     ax, ds:301h
shl     ax, 1
shl     ax, 1
add     si, ax
mov     bx, es:[si]
add     bx, ds:2D5h
push    word ptr es:[si+2]
call    sub_4474C
call    sub_44816
pop     ax
call    sub_46382
call    sub_45BF1
call    sub_45B22
or      word ptr ds:19h, 1
retn
sub_4471E endp




sub_4474C proc near
push    bx
call    sub_447A0
mov     al, ds:194h
shr     al, 1
jz      short loc_44760

loc_44757:
push    ax
call    sub_4488E
pop     ax
dec     al
jnz     short loc_44757

loc_44760:
mov     ds:305h, bx
call    sub_45697
pop     bx
jmp     sub_454B6
sub_4474C endp




sub_4476B proc near
call    sub_44790

loc_4476E:
call    sub_45BE2
jmp     sub_45AD3
sub_4476B endp




sub_44774 proc near
call    sub_45BF1
jmp     sub_45AD3
sub_44774 endp




sub_4477A proc near
call    sub_45D55
call    sub_45A88
call    sub_44AF5
jmp     sub_451B3
sub_4477A endp




sub_44786 proc near
cmp     byte ptr ds:1Eh, 0FFh
jnz     short locret_4479F
jmp     sub_45AC1
sub_44786 endp




sub_44790 proc near
cmp     byte ptr ds:1Eh, 0
jz      short locret_4479F
xchg    ax, bx
mov     ds:28Fh, al
call    sub_45DE2
xchg    ax, bx

locret_4479F:
retn
sub_44790 endp




sub_447A0 proc near
dec     bx
cmp     bx, ds:2D5h
jb      short loc_447B1
mov     al, [bx]
cmp     al, 0Dh
jnz     short sub_447A0
call    sub_44866

locret_447B0:
retn

loc_447B1:
mov     bx, ds:2D5h
jmp     short locret_447B0
sub_447A0 endp




sub_447B7 proc near
push    ax
push    cx
push    si
mov     si, 18Fh
mov     cx, 0F9h
std

loc_447C1:
lodsb
cmp     al, 20h ; ' '
jz      short loc_447CC
cmp     al, 0FFh
jz      short loc_447CC
cmp     al, 9

loc_447CC:
loope   loc_447C1
cld
jz      short loc_447D2
inc     si

loc_447D2:
mov     bx, si
pop     si
pop     cx
pop     ax
retn
sub_447B7 endp




sub_447D8 proc near
call    sub_447B7
inc     bx
mov     dx, ds:24h
call    sub_44858
sub_447D8 endp




sub_447E3 proc near
mov     di, 97h
mov     dx, bx
sub     dx, di
mov     cx, dx
jcxz    short loc_447FA
mov     al, 0FFh
cld

loc_447F1:
push    ds
pop     es
repne scasb
jnz     short loc_447FA
dec     dx
jmp     short loc_447F1

loc_447FA:
mov     bx, ds:22h
add     bx, dx
retn
sub_447E3 endp




sub_44801 proc near
cmp     bx, ds:2E3h
jnb     short loc_44813
cmp     al, 0Dh
jnz     short locret_44815
inc     bx
mov     al, [bx]
cmp     al, 0Ah
jnz     short loc_44813
inc     bx

loc_44813:
cmp     al, al

locret_44815:
retn
sub_44801 endp




sub_44816 proc near
call    sub_451B3
sub_44816 endp




sub_44819 proc near
mov     byte ptr ds:17h, 0
mov     bx, 0
call    sub_44790
call    sub_45BD2
call    sub_4490E
mov     bx, 0
call    sub_44790
jmp     sub_45BE2
sub_44819 endp

db 3Ch, 15h, 74h, 5, 3Ch, 1Bh, 74h, 1Ah
db 0C3h, 0E8h, 0D7h, 0FFh, 0E8h, 32h, 0FFh
db 3 dup(2Ah), 20h, 49h, 4Eh, 54h, 45h, 2 dup(52h)
db 55h, 50h, 54h, 45h, 44h, 0, 0E8h, 25h
db 0FFh, 0E9h, 76h, 0EFh



sub_44858 proc near
cmp     bx, dx
jb      short locret_4485E
xchg    dx, bx

locret_4485E:
retn
sub_44858 endp




sub_4485F proc near
cmp     bx, dx
jnb     short locret_44865
xchg    dx, bx

locret_44865:
retn
sub_4485F endp




sub_44866 proc near
push    cx
push    di
mov     cx, ds:2E3h
mov     di, bx
sub     cx, di
jbe     short loc_4488A
mov     ax, ds
mov     es, ax
cld
mov     al, 0Dh
repne scasb
jnz     short loc_4488A
mov     al, [di]
cmp     al, 0Ah
jnz     short loc_44884
inc     di

loc_44884:
mov     bx, di
clc
pop     di
pop     cx
retn

loc_4488A:
stc
pop     di
pop     cx
retn
sub_44866 endp




sub_4488E proc near
cmp     bx, ds:2D5h
jbe     short loc_448CD
mov     al, [bx-1]
cmp     al, 0Ah
jnz     short loc_4489C
dec     bx

loc_4489C:
mov     al, [bx-1]
cmp     al, 0Dh
jnz     short loc_448AA
dec     bx
cmp     bx, ds:2D5h
jbe     short loc_448C1

loc_448AA:
mov     al, 0Dh

loc_448AC:
cmp     [bx-1], al
jz      short loc_448BA
dec     bx
cmp     bx, ds:2D5h
ja      short loc_448AC
jmp     short loc_448C1

loc_448BA:
mov     al, [bx]
cmp     al, 0Ah
jnz     short loc_448C1
inc     bx

loc_448C1:
cmp     bx, ds:2D5h
jnb     short loc_448CB
mov     bx, ds:2D5h

loc_448CB:
clc
retn

loc_448CD:
stc
retn
sub_4488E endp




sub_448CF proc near
push    bx
mov     cx, 18Fh
dec     cx
mov     di, cx
mov     si, cx
dec     si
sub     cx, bx
jbe     short loc_448EB
push    ds
pop     es
std
rep movsb
mov     cx, 1
mov     dx, bx
inc     dx
call    sub_4456E

loc_448EB:
pop     bx
retn
sub_448CF endp




sub_448ED proc near
push    bx
mov     cx, 0FFFFh
mov     dx, bx
mov     bx, 18Fh
sub     bx, dx
jz      short loc_44907
inc     dx
call    sub_4456E
dec     dx
mov     cx, bx
mov     bx, dx
inc     bx
call    sub_435AE

loc_44907:
mov     byte ptr ds:18Fh, 20h ; ' '
pop     bx
retn
sub_448ED endp




sub_4490E proc near

; FUNCTION CHUNK AT 1D67 SIZE 00000019 BYTES

mov     ch, ds:193h
jmp     loc_45307
sub_4490E endp




sub_44915 proc near
push    ds
pop     es
mov     di, 1E6h
cld
xor     ah, ah
mov     cx, ax
mov     si, ax
mov     al, ds:193h
inc     al
add     al, al
mov     bp, ax
sub     bp, si
sub     bp, si
push    dx
push    cx
mov     ax, ds:28Ch
mov     cl, ds:28Fh
xor     dx, dx
mov     ch, dl
mul     cx
pop     cx
pop     dx
add     bp, ax
add     bp, ds:28Ah

locret_44945:
retn
sub_44915 endp




sub_44946 proc near
push    bp
inc     al
call    sub_44915
dec     cx
js      short loc_44954
call    sub_449B5
jmp     short loc_44957

loc_44954:
call    sub_44A46

loc_44957:
pop     bp
retn
sub_44946 endp




sub_44959 proc near
cmp     byte ptr ds:1Eh, 0FFh
jnz     short locret_44945
push    bp
call    sub_44966
pop     bp
retn
sub_44959 endp




sub_44966 proc near
mov     al, ds:193h
inc     al
call    sub_44915
dec     cx
js      short loc_449DC
xor     dl, dl
cmp     byte ptr ds:304h, 0
jz      short sub_449B5

loc_4497A:
call    sub_45293
mov     al, [bx]
cmp     al, 0Dh
jz      short loc_449DC
inc     bx
cmp     bx, ds:2E3h
jnb     short loc_449DC
inc     dl
test    word ptr ds:19h, 4
jnz     short loc_449AC
cmp     al, 9
jnz     short loc_449AC
push    ax
mov     ah, 0
mov     al, dl
mov     dl, ds:303h
add     al, dl
dec     al
div     dl
mul     dl
mov     dl, al
pop     ax

loc_449AC:
cmp     dl, ds:304h
jb      short loc_4497A
jz      short sub_449B5
dec     bx
sub_44966 endp




sub_449B5 proc near

; FUNCTION CHUNK AT 14B6 SIZE 00000002 BYTES
; FUNCTION CHUNK AT 14F6 SIZE 00000045 BYTES

test    word ptr ds:19h, 4
jz      short loc_449DE
push    bx
call    sub_447B7
mov     ax, ds:24h
cmp     ax, bx
jbe     short loc_449CA
mov     bx, ax

loc_449CA:
inc     bx
mov     ds:0Eh, bx
pop     bx
call    sub_45293
cmp     bx, ds:0Eh
jnb     short loc_44A54
jmp     loc_44A96

loc_449DC:
jmp     short sub_44A46

loc_449DE:
mov     dl, ds:304h

loc_449E2:
call    sub_45293
mov     al, [bx]
cmp     bx, ds:2E3h
jnb     short sub_44A46
cmp     al, 0Dh
jz      short sub_44A46
inc     bx
cmp     al, 20h ; ' '
jnb     short loc_44A39
cmp     al, 9
jnz     short loc_44A1A
mov     al, 20h ; ' '
mov     ah, ds:29Ah

loc_44A00:
stosw
inc     dl
push    ax
push    dx
mov     al, dl
mov     ah, 0
mov     dl, ds:303h
div     dl
cmp     ah, 0
pop     dx
pop     ax
loopne  loc_44A00
jcxz    short sub_44A46
jmp     short loc_449E2

loc_44A1A:
add     al, 40h ; '@'
cmp     byte ptr ds:2A4h, 1
jz      short loc_44A2F
cmp     byte ptr ds:1Eh, 0
jz      short loc_44A2D
call    sub_45BE2

loc_44A2D:
jmp     short loc_44A39

loc_44A2F:
cmp     byte ptr ds:1Eh, 0
jz      short loc_44A39
call    sub_45BD2

loc_44A39:
cmp     al, 80h
jnb     short loc_44A56

loc_44A3D:
mov     ah, ds:29Ah
stosw
inc     dl
loop    loc_449E2
sub_449B5 endp




sub_44A46 proc near
mov     al, [bx]
call    sub_44801
jz      short sub_44A58
inc     bx
cmp     bx, ds:2E3h
jbe     short sub_44A46

loc_44A54:
jmp     short sub_44A58
sub_44A46 endp

; START OF FUNCTION CHUNK FOR sub_449B5

loc_44A56:
jmp     short loc_44A3D
; END OF FUNCTION CHUNK FOR sub_449B5



sub_44A58 proc near
inc     cx
js      short loc_44A63
mov     al, 20h ; ' '
mov     ah, ds:29Ah
rep stosw

loc_44A63:
cmp     byte ptr ds:1Eh, 0
jz      short locret_44A95
mov     cx, si
mov     si, 1E6h
mov     di, bp
mov     es, word ptr ds:288h
cmp     byte ptr ds:28Eh, 0FFh
jz      short loc_44A7F
rep movsw
retn

loc_44A7F:
mov     dx, 3DAh

loc_44A82:
lodsw
mov     bp, ax

loc_44A85:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
rcr     al, 1
jb      short loc_44A85
cli

loc_44A8B:              ; Video status bits:
in      al, dx          ; 0: retrace.  1=display is in vert or horiz retrace.
                        ; 1: 1=light pen is triggered; 0=armed
                        ; 2: 1=light pen switch is open; 0=closed
                        ; 3: 1=vertical sync pulse is occurring.
rcr     al, 1
jnb     short loc_44A8B
xchg    ax, bp
stosw
sti
loop    loc_44A82

locret_44A95:
retn
sub_44A58 endp

; START OF FUNCTION CHUNK FOR sub_449B5

loc_44A96:
call    sub_45293
cmp     bx, ds:0Eh
jz      short sub_44A58
mov     al, [bx]
inc     bx
cmp     al, 0FFh
jz      short loc_44ACF
cmp     al, 20h ; ' '
jnb     short loc_44AD1
cmp     al, 9
jz      short loc_44ACF
add     al, 40h ; '@'
cmp     byte ptr ds:2A4h, 1
jz      short loc_44AC3
cmp     byte ptr ds:1Eh, 0
jz      short loc_44AC1
call    sub_45BE2

loc_44AC1:
jmp     short loc_44ACD

loc_44AC3:
cmp     byte ptr ds:1Eh, 0
jz      short loc_44ACD
call    sub_45BD2

loc_44ACD:
jmp     short loc_44AD1

loc_44ACF:
mov     al, 20h ; ' '

loc_44AD1:
mov     ah, ds:29Ah
stosw
loop    loc_44A96
jmp     sub_44A58
; END OF FUNCTION CHUNK FOR sub_449B5
jmp     short loc_44AD1



sub_44ADD proc near
mov     bh, 0
call    sub_44B59
mov     bx, 97h
or      word ptr ds:19h, 4
call    sub_44959
and     word ptr ds:19h, 0FFFBh
retn
sub_44ADD endp




sub_44AF5 proc near
call    sub_44ADD
jmp     sub_45697
sub_44AF5 endp

call    sub_45438
mov     bx, ds:2E3h
jmp     sub_454B6



sub_44B05 proc near
mov     bx, 97h
mov     ds:24h, bx
jmp     sub_45520
sub_44B05 endp




sub_44B0F proc near
call    sub_447B7
inc     bx
cmp     bx, 18Fh
jb      short loc_44B1C
mov     bx, 18Eh

loc_44B1C:
mov     ds:24h, bx
jmp     sub_45520
sub_44B0F endp

mov     byte ptr ds:17h, 0
xor     word ptr ds:2B7h, 1
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS CTRL-NUMPAD+ TO EXPAND]
mov     byte ptr ds:17h, 0
xor     word ptr ds:2B7h, 2
retn
mov     byte ptr ds:17h, 0
xor     word ptr ds:2B7h, 8
retn
xor     word ptr ds:2B7h, 400h
retn
xor     word ptr ds:2B7h, 800h
retn



sub_44B55 proc near
mov     bh, ds:13h
sub_44B55 endp




sub_44B59 proc near
mov     bl, ds:12h
jmp     sub_44790
sub_44B59 endp




sub_44B60 proc near
mov     bx, ds:22h
call    sub_44866
jb      short nullsub_2
call    sub_45438
mov     bx, ds:22h
call    sub_44866

loc_44B73:
call    sub_44B7B
call    sub_4532C
clc
retn
sub_44B60 endp




sub_44B7B proc near
push    bx
mov     ds:22h, bx
mov     byte ptr ds:1Fh, 0
mov     byte ptr ds:15h, 0FFh
call    sub_4555E
mov     byte ptr ds:15h, 0
pop     bx
retn
sub_44B7B endp




sub_44B94 proc near
mov     bx, ds:22h
call    sub_4488E
jb      short nullsub_2
push    bx
call    sub_45438
pop     bx
jmp     short loc_44B73
sub_44B94 endp

mov     ax, ds:305h
cmp     ax, ds:2D5h
jz      short locret_44C0E
call    sub_45438
xor     cx, cx
mov     bx, ds:22h

loc_44BB6:
cmp     bx, ds:305h
jz      short loc_44BC2
call    sub_4488E
inc     cx
jmp     short loc_44BB6

loc_44BC2:
xchg    bx, ds:22h
mov     al, ds:194h
sub     al, 2
cmp     cl, al
jnz     short loc_44BD2
call    sub_4488E

loc_44BD2:
push    bx
mov     bx, ds:22h
call    sub_4488E
call    sub_44B7B
call    sub_44959
pop     bx

loc_44BE1:
jmp     short loc_44B73
call    sub_45438
push    word ptr ds:22h
mov     bx, ds:305h
xor     cx, cx
mov     cl, ds:194h
dec     cl

loc_44BF6:
call    sub_44866
loop    loc_44BF6
pushf
call    sub_44B7B
popf
pop     bx
jb      short loc_44BE1
cmp     bx, ds:305h
jnb     short loc_44BE1
call    sub_44866
jmp     short loc_44BE1

locret_44C0E:
retn
mov     bx, ds:305h
cmp     bx, ds:22h
jz      short locret_44C0E
push    bx
call    sub_45438
pop     bx
jmp     short loc_44BE1
call    sub_45438
mov     bx, ds:305h
xor     cx, cx
mov     cl, ds:194h
sub     cl, 2

loc_44C30:
call    sub_44866
loop    loc_44C30
jmp     short loc_44BE1
call    sub_45438
mov     al, ds:194h
dec     al
mov     ch, al
mov     cl, al
mov     bx, ds:305h

loc_44C47:
call    sub_44866
dec     ch
jnz     short loc_44C47
mov     ds:305h, bx
mov     bx, ds:22h

loc_44C56:
call    sub_44866
loop    loc_44C56

loc_44C5B:
mov     ds:22h, bx
call    sub_4555E
call    sub_45697
retn
call    sub_45438
mov     al, ds:194h
dec     al
mov     ch, al
mov     cl, al
mov     bx, ds:305h

loc_44C76:
call    sub_4488E
dec     ch
jnz     short loc_44C76
mov     ds:305h, bx
mov     bx, ds:22h

loc_44C85:
call    sub_4488E
loop    loc_44C85
jmp     short loc_44C5B
mov     bx, ds:305h
mov     dx, ds:2D5h
cmp     bx, dx
jz      short loc_44C9B
call    sub_45697

loc_44C9B:
call    sub_45438
mov     bx, ds:2D5h
mov     ds:22h, bx
mov     ds:305h, bx
call    sub_4555E
call    sub_4532C
mov     bx, 97h
mov     ds:24h, bx
jmp     sub_45520



sub_44CBA proc near
mov     dx, bx
dec     dx
dec     dx
call    sub_4488E
jb      short locret_44CC8
cmp     bx, dx
jnb     short sub_44CBA
clc

locret_44CC8:
retn
sub_44CBA endp




sub_44CC9 proc near
mov     ax, 97h
mov     ds:24h, ax
call    sub_44CBA
jb      short locret_44CF8
mov     ds:22h, bx
call    sub_45353
mov     bx, 97h
mov     si, 2471h
call    sub_45685
jnb     short locret_44CF8
push    word ptr ds:8Bh
mov     word ptr ds:8Bh, 2471h
call    sub_44EE0
pop     word ptr ds:8Bh
clc

locret_44CF8:
retn
sub_44CC9 endp

call    sub_435D3
jnz     short loc_44D4F
call    sub_44B60
jb      short loc_44D4C

loc_44D03:
mov     bx, 97h
call    sub_435DA
jz      short loc_44D18
dec     bx

loc_44D0C:
inc     bx
cmp     bx, 18Fh
jnb     short loc_44D8E
call    sub_4504D
jz      short loc_44D0C

loc_44D18:
mov     ds:24h, bx
jmp     sub_45520



sub_44D1F proc near
call    sub_43609
mov     bx, ds:12h
inc     bl
call    sub_44E16
call    sub_4532C
call    sub_45438
mov     bx, ds:22h
call    sub_44866
mov     ds:22h, bx
mov     bx, 97h
call    sub_44DE3
call    sub_44B55
or      word ptr ds:19h, 100h
retn
sub_44D1F endp


loc_44D4C:
call    sub_44B0F

loc_44D4F:
call    sub_435DA
jz      short loc_44D6E
mov     bx, 97h
dec     bx

loc_44D58:
inc     bx
cmp     bx, ds:24h
jz      short loc_44D66
call    sub_4504D
jz      short loc_44D58
jmp     short loc_44D6E

loc_44D66:
call    sub_44B05
call    sub_44D1F
jmp     short loc_44D03

loc_44D6E:
call    sub_44D1F
call    sub_435DA
jz      short locret_44D8D
mov     bx, ds:22h
call    sub_44CBA
mov     si, 2471h
call    sub_45685
jnb     short locret_44D8D
call    sub_435E1
jnz     short loc_44D8E
jmp     loc_44F63

locret_44D8D:
retn

loc_44D8E:
mov     al, ds:12h
push    ax
mov     bx, ds:24h
mov     ds:8, bx
mov     byte ptr ds:1Eh, 0
call    sub_45438
mov     bx, ds:22h
push    bx
call    sub_44CC9
pop     word ptr ds:22h
pop     ax
mov     ds:12h, al
call    sub_45353
mov     byte ptr ds:1Eh, 0FFh
mov     bx, ds:24h
mov     dx, ds:8
sub     bx, dx
jbe     short locret_44D8D
xchg    dx, bx

loc_44DC8:
push    dx
call    sub_448CF
mov     byte ptr [bx], 20h ; ' '
pop     dx
dec     dl
jnz     short loc_44DC8
call    sub_45438
call    sub_45353
or      word ptr ds:19h, 100h
jmp     sub_44ADD



sub_44DE3 proc near
mov     ds:24h, bx
call    sub_45520
call    sub_4555E
jmp     sub_4532C
sub_44DE3 endp

call    sub_43609
mov     bx, ds:12h
call    sub_44E16
mov     bl, ds:12h
inc     bl
xor     bh, bh
call    sub_44790
mov     bx, ds:22h
call    sub_44866
call    sub_44959
or      word ptr ds:19h, 100h
retn



sub_44E16 proc near
push    bx
call    sub_45438
call    sub_447D8
call    sub_44E2B
pop     bx
call    sub_44790
call    sub_45BD2
call    sub_45D31
retn
sub_44E16 endp




sub_44E2B proc near
push    bx
stc
mov     cx, 0FFFEh
call    sub_44619
pop     bx
mov     word ptr [bx], 0A0Dh
inc     bx

locret_44E39:
retn
sub_44E2B endp

mov     bx, ds:24h

loc_44E3E:
dec     bx
cmp     bx, 97h
jb      short locret_44E39
cmp     byte ptr [bx], 0FFh
jz      short loc_44E3E
; START OF FUNCTION CHUNK FOR sub_44E51

loc_44E4A:
mov     ds:24h, bx
jmp     sub_45520
; END OF FUNCTION CHUNK FOR sub_44E51



sub_44E51 proc near

; FUNCTION CHUNK AT 18AA SIZE 00000007 BYTES

mov     bx, ds:24h
inc     bx
cmp     bx, 18Fh
jb      short loc_44E4A
retn
sub_44E51 endp

call    sub_45438
mov     bx, ds:2Ah
call    sub_447A0
mov     ds:22h, bx
mov     bx, ds:2Ch
jmp     sub_44DE3
call    sub_44EE0
call    sub_44EB7
mov     bx, ds:24h

loc_44E7C:
call    sub_45681
jb      short loc_44E88
inc     bx
cmp     bx, 18Fh
jb      short loc_44E7C

loc_44E88:
mov     ds:24h, bx
call    sub_440D0
call    sub_44EB7
jmp     loc_440ED
; START OF FUNCTION CHUNK FOR sub_44EB7

loc_44E95:
mov     bx, ds:22h
call    sub_4488E
jb      short loc_44EDB
push    bx
call    sub_45438
pop     bx
mov     ds:22h, bx
mov     byte ptr ds:1Fh, 0
call    sub_4555E
call    sub_4532C
call    sub_447B7
jmp     short loc_44ED3
; END OF FUNCTION CHUNK FOR sub_44EB7



sub_44EB7 proc near

; FUNCTION CHUNK AT 18F5 SIZE 00000022 BYTES
; FUNCTION CHUNK AT 1934 SIZE 00000007 BYTES
; FUNCTION CHUNK AT 193B SIZE 00000005 BYTES

mov     bx, ds:24h

loc_44EBB:
dec     bx
cmp     bx, 97h
jb      short loc_44E95
call    sub_45681
jb      short loc_44EBB

loc_44EC7:
dec     bx
cmp     bx, 97h
jb      short loc_44ED3
call    sub_45681
jnb     short loc_44EC7

loc_44ED3:
inc     bx
sub_44EB7 endp

; START OF FUNCTION CHUNK FOR sub_44EE0
;   ADDITIONAL PARENT FUNCTION sub_44EB7

loc_44ED4:
mov     ds:24h, bx
jmp     sub_45520
; END OF FUNCTION CHUNK FOR sub_44EE0
; START OF FUNCTION CHUNK FOR sub_44EB7

loc_44EDB:
mov     bx, 97h
jmp     short loc_44ED4
; END OF FUNCTION CHUNK FOR sub_44EB7



sub_44EE0 proc near

; FUNCTION CHUNK AT 1934 SIZE 00000007 BYTES

call    sub_447B7
mov     ax, bx
mov     bx, ds:24h
cmp     ax, bx
mov     al, 0
jnb     short loc_44EF1
inc     al

loc_44EF1:
mov     ds:8Dh, al

loc_44EF4:
dec     bx

loc_44EF5:
inc     bx
cmp     bx, 18Fh
jb      short loc_44F2D

loc_44EFC:
mov     bx, ds:22h
call    sub_44866
jb      short locret_44F54
call    sub_45438
mov     bx, ds:22h
call    sub_44866
mov     ds:22h, bx
mov     byte ptr ds:1Fh, 0
call    sub_4555E
call    sub_4532C
mov     bx, 97h
mov     ds:24h, bx
call    sub_45681
jb      short loc_44EF4
jmp     sub_45520

loc_44F2D:
call    sub_45681
jnb     short loc_44EF5

loc_44F32:
inc     bx
cmp     bx, 18Fh
jb      short loc_44F46
cmp     byte ptr ds:8Dh, 0
jnz     short loc_44EFC
call    sub_447B7
inc     bx
jmp     short loc_44ED4

loc_44F46:
call    sub_45681
jb      short loc_44F32
jmp     short loc_44ED4

loc_44F4D:
mov     bx, ds:22h
call    sub_4488E

locret_44F54:
retn
sub_44EE0 endp

call    sub_43609
call    sub_435E1
jz      short loc_44F63
mov     al, 9
call    sub_43824
retn

loc_44F63:
call    loc_44F4D
jb      short locret_44F54
mov     al, ds:12h
push    ax
mov     bx, ds:24h
mov     ds:8, bx
mov     byte ptr ds:1Eh, 0
call    sub_45438
mov     bx, ds:22h
push    bx
call    sub_44CBA
mov     ds:22h, bx
call    sub_45353
push    word ptr ds:8Bh
mov     word ptr ds:8Bh, 2471h
call    sub_44EE0
pop     word ptr ds:8Bh
pop     word ptr ds:22h
pop     ax
mov     ds:12h, al
call    sub_45353
mov     byte ptr ds:1Eh, 0FFh
call    sub_435D3
jnz     short loc_44FB4
jmp     sub_44ADD

loc_44FB4:
mov     bx, ds:24h
mov     dx, ds:8
sub     bx, dx
jbe     short locret_44F54
xchg    dx, bx

loc_44FC2:
push    dx
call    sub_448CF
mov     byte ptr [bx], 20h ; ' '
pop     dx
dec     dl
jnz     short loc_44FC2
call    sub_45438
call    sub_45353
jmp     sub_44ADD



sub_44FD7 proc near
call    sub_447B7
inc     bx
mov     cx, bx
mov     bx, ds:24h
sub     cx, bx
jbe     short locret_44FF2
call    sub_43609

loc_44FE8:
push    cx
call    sub_448ED
pop     cx
loop    loc_44FE8
call    sub_4569D

locret_44FF2:
retn
sub_44FD7 endp

call    sub_43609
mov     bx, 97h
mov     ds:24h, bx
call    sub_45520
call    sub_44FD7
call    sub_45438
mov     bx, ds:22h
push    bx
push    bx
call    sub_44866
pop     dx
jb      short loc_4501A
sub     bx, dx
mov     cx, bx
pop     bx
jnz     short loc_4503B
retn

loc_4501A:
pop     bx
jmp     sub_4532C

loc_4501E:
call    loc_45448
mov     bx, ds:22h
call    sub_44866
jnb     short loc_4502D
jmp     sub_4532C

loc_4502D:
dec     bx
mov     cx, 1
mov     al, [bx]
cmp     al, 0Ah
jnz     short loc_45039
dec     bx
inc     cx

loc_45039:
or      al, al

loc_4503B:
call    sub_44619
call    sub_45BD2
call    sub_45D0B
mov     al, ds:194h
call    sub_45216
jmp     sub_4532C



sub_4504D proc near
mov     al, [bx]
cmp     al, 20h ; ' '
jz      short locret_45059
cmp     al, 9
jz      short locret_45059
cmp     al, 0FFh

locret_45059:
retn
sub_4504D endp


loc_4505A:
call    sub_43609
call    sub_447B7
mov     dx, ds:24h
cmp     bx, dx
xchg    dx, bx
jb      short loc_4501E
call    sub_4504D
jz      short loc_4507F
call    sub_45681
jnb     short loc_45077
jmp     loc_45174

loc_45077:
call    sub_448ED
call    sub_45681
jnb     short loc_45077

loc_4507F:
jmp     loc_45177

loc_45082:
mov     bx, ds:22h
call    sub_4488E
jnb     short loc_4508E
jmp     locret_45173

loc_4508E:
call    sub_44B94
call    sub_44B0F
jmp     short loc_4505A
call    sub_43609
call    sub_447B7
mov     ax, bx
mov     bx, ds:24h
cmp     bx, ax
jnb     short loc_4505A
jmp     loc_4516A
call    sub_43609
mov     bx, ds:24h
call    sub_435F9
jnz     short loc_450B8
jmp     loc_45152

loc_450B8:
cmp     bx, 97h
jnz     short loc_450C1
jmp     loc_45152

loc_450C1:
push    bx
call    sub_4504D
jnz     short loc_450D2
call    sub_447B7
mov     ax, bx
pop     bx
push    bx
cmp     bx, ax
jb      short loc_450DE

loc_450D2:
dec     bx
cmp     bx, 97h
jb      short loc_450E1
call    sub_4504D
jz      short loc_450D2

loc_450DE:
pop     bx
jmp     short loc_45152

loc_450E1:
pop     bx
mov     ds:8, bx
mov     byte ptr ds:1Eh, 0
call    sub_45438
mov     al, ds:12h
push    ax
push    word ptr ds:22h

loc_450F6:
mov     bx, ds:22h
call    sub_44CC9
jb      short loc_4510C
mov     bx, ds:24h
mov     dx, ds:8
cmp     bx, dx
jnb     short loc_450F6
clc

loc_4510C:
pop     word ptr ds:22h
pop     ax
mov     ds:12h, al
push    bx
pushf
call    sub_45353
mov     byte ptr ds:1Eh, 0FFh
mov     bx, ds:8
popf
pop     ax
jb      short loc_45152
push    ax

loc_45127:
dec     bx
cmp     bx, 97h
jb      short loc_45133
call    sub_448ED
jmp     short loc_45127

loc_45133:
pop     cx
sub     cx, 97h
jcxz    short loc_45145

loc_4513A:
inc     bx
push    cx
call    sub_448CF
pop     cx
mov     byte ptr [bx], 20h ; ' '
loop    loc_4513A

loc_45145:
inc     bx
mov     ds:24h, bx
or      word ptr ds:19h, 100h
jmp     short loc_4516D

loc_45152:
dec     bx
cmp     bx, 97h
jnb     short loc_4515C
jmp     loc_45082

loc_4515C:
cmp     byte ptr [bx], 0FFh
jnz     short loc_45166
call    sub_448ED
jmp     short loc_45152

loc_45166:
mov     ds:24h, bx

loc_4516A:
call    sub_448ED

loc_4516D:
call    sub_45520
call    sub_4569D

locret_45173:
retn

loc_45174:
call    sub_448ED

loc_45177:
push    bx
call    sub_447B7
mov     ax, bx
pop     bx
cmp     bx, ax
jnb     short loc_4516D

loc_45182:
call    sub_4504D
jnz     short loc_4516D
call    sub_448ED
jmp     short loc_45182
mov     ax, 2
jmp     sub_43726
mov     ax, 1
jmp     sub_43726



sub_45198 proc near
call    sub_44B55
call    sub_451C1

loc_4519E:
test    word ptr ds:2B7h, 20h
jz      short loc_451AB
call    sub_46347
jnz     short loc_451B0

loc_451AB:
call    sub_451E4
jnb     short loc_4519E

loc_451B0:
jmp     sub_44B55
sub_45198 endp




sub_451B3 proc near
call    sub_44B55
call    sub_451C1

loc_451B9:
call    sub_451E4
jnb     short loc_451B9
jmp     sub_44B55
sub_451B3 endp




sub_451C1 proc near
mov     cl, ds:1Dh
sub_451C1 endp




sub_451C5 proc near
xor     ch, ch
mov     bx, ds:305h
dec     cx
jz      short locret_451D5

loc_451CE:
call    sub_44866
jb      short loc_451D6
loop    loc_451CE

locret_451D5:
retn

loc_451D6:
mov     bx, ds:2E3h
retn
sub_451C5 endp

; START OF FUNCTION CHUNK FOR sub_451E4

loc_451DB:
call    sub_44866
jnb     short sub_451E4
mov     bx, ds:2E3h
; END OF FUNCTION CHUNK FOR sub_451E4



sub_451E4 proc near

; FUNCTION CHUNK AT 1C3B SIZE 00000009 BYTES

mov     al, ds:1Dh
cmp     al, ds:194h
ja      short loc_45214
inc     byte ptr ds:1Dh
cmp     al, ds:12h
jz      short loc_451DB

loc_451F7:
mov     ds:28Fh, al
cmp     bx, ds:2E3h
jnb     short loc_45205
call    sub_44959
clc
retn

loc_45205:
cmp     byte ptr ds:1Eh, 0
jz      short loc_4520F
call    sub_45BD2

loc_4520F:
call    sub_4490E
clc
retn

loc_45214:
stc
retn
sub_451E4 endp




sub_45216 proc near
push    ax
mov     cl, al
call    sub_451C5
pop     ax
jmp     short loc_451F7
sub_45216 endp




sub_4521F proc near
push    ax
push    bx
push    cx
push    si
push    di
push    es
les     si, ds:2FDh
mov     ax, es
or      ax, si
jz      short loc_4527A
push    es
push    ds
pop     es
mov     al, 0Ah
test    word ptr ds:19h, 4
jz      short loc_45240
mov     bx, ds:22h

loc_45240:
std
mov     di, bx
mov     cx, bx
sub     cx, ds:2D5h
inc     cx
dec     di
repne scasb
inc     di
inc     di
cld
push    di
mov     di, bx
mov     cx, ds:2E3h
sub     cx, bx
jcxz    short loc_4525E
repne scasb
dec     di

loc_4525E:
pop     cx
pop     es

loc_45260:
mov     ax, es:[si]
cmp     ax, 0FFFFh
jz      short loc_4527A
cmp     ax, 0FFFEh
jz      short loc_45275
cmp     ax, cx
jb      short loc_45275
cmp     ax, di
jb      short loc_4527D

loc_45275:
add     si, 3
jmp     short loc_45260

loc_4527A:
clc
jmp     short loc_4528C

loc_4527D:
mov     al, es:[si+2]
mov     ds:2A4h, al
mov     bx, 290h
xlat
mov     ds:29Ah, al
stc

loc_4528C:
pop     es
pop     di
pop     si
pop     cx
pop     bx
pop     ax
retn
sub_4521F endp




sub_45293 proc near
call    sub_4521F
jnb     short loc_45299
retn

loc_45299:
test    word ptr ds:2B7h, 10h
jnz     short loc_452AC
cmp     byte ptr ds:1Eh, 0
jz      short locret_452AB
call    sub_45BD2

locret_452AB:
retn

loc_452AC:
push    ax
test    word ptr ds:19h, 4
jnz     short loc_452CD
cmp     bx, ds:311h
jb      short loc_452FB
cmp     bx, ds:313h
jnb     short loc_452FB

loc_452C1:
cmp     byte ptr ds:1Eh, 0
jz      short loc_452CB
call    sub_45C06

loc_452CB:
jmp     short loc_45305

loc_452CD:
mov     ax, ds:4
cmp     ax, 18Fh
jbe     short loc_452F1
mov     ax, ds:22h
cmp     ax, ds:311h
jb      short loc_452FB

loc_452DE:
mov     ax, ds:6
cmp     ax, 18Fh
jbe     short loc_452F7
mov     ax, ds:22h
cmp     ax, ds:313h
ja      short loc_452FB
jmp     short loc_452C1

loc_452F1:
cmp     bx, ax
jb      short loc_452FB
jmp     short loc_452DE

loc_452F7:
cmp     bx, ax
jb      short loc_452C1

loc_452FB:
cmp     byte ptr ds:1Eh, 0
jz      short loc_45305
call    sub_45BD2

loc_45305:
pop     ax
retn
sub_45293 endp

; START OF FUNCTION CHUNK FOR sub_4490E

loc_45307:
cmp     byte ptr ds:1Eh, 0
jz      short locret_4531F
push    ax
push    dx
push    bp
mov     al, ch
inc     al
call    sub_44915
dec     cx
call    sub_44A58
pop     bp
pop     dx
pop     ax

locret_4531F:
retn
; END OF FUNCTION CHUNK FOR sub_4490E



sub_45320 proc near
mov     bx, 1
call    sub_44790
call    sub_45BD2
jmp     sub_45D0B
sub_45320 endp




sub_4532C proc near
pushf
test    word ptr ds:19h, 2
jnz     short loc_45345
push    ax
push    bx
push    cx
push    dx
call    sub_45353
jnb     short loc_45341
call    sub_44ADD

loc_45341:
pop     dx
pop     cx
pop     bx
pop     ax

loc_45345:
popf
retn
sub_4532C endp

call    sub_43609
call    sub_45353
jnb     short locret_45352
call    sub_44ADD

locret_45352:
retn



sub_45353 proc near
push    bp
and     word ptr ds:19h, 0FEFFh
or      word ptr ds:19h, 2
mov     word ptr ds:8Eh, 0
mov     ax, ds:311h
mov     ds:4, ax
mov     ax, ds:313h
mov     ds:6, ax
mov     si, ds:22h
xor     dl, dl
mov     dh, 0FAh
mov     di, 97h
push    ds
pop     es
cld

loc_45380:
mov     bp, 0FC0h
mov     cx, 6

loc_45386:
inc     bp
inc     bp
mov     bx, cs:[bp+0]
cmp     si, [bx]
loopne  loc_45386
jnz     short loc_45398
mov     [bx], di
jcxz    short loc_45398
jmp     short loc_45386

loc_45398:
lodsb
cmp     al, 0Dh
jz      short loc_453D6
cmp     al, 0FFh
jnz     short loc_453A6
mov     al, 7Fh
call    sub_43609

loc_453A6:
stosb
inc     dl
inc     word ptr ds:8Eh
dec     dh
jz      short loc_45402
cmp     al, 9
jnz     short loc_45380
mov     al, dl
mov     cl, ds:303h
add     al, cl
dec     al
mov     ah, 0
div     cl
dec     cl
sub     cl, ah
jz      short loc_45380
mov     al, 0FFh

loc_453CB:
stosb
inc     dl
dec     dh
jz      short loc_45402
loop    loc_453CB
jmp     short loc_45380

loc_453D6:
mov     al, 20h ; ' '
xor     cx, cx
mov     cl, dh
rep stosb
mov     bx, ds:24h
call    sub_45520
cmp     byte ptr ds:1Fh, 0
mov     byte ptr ds:1Fh, 0FFh
jnz     short loc_453FF
mov     al, ds:1Dh
dec     al
cmp     al, ds:12h
jb      short loc_453FF
clc

loc_453FD:
pop     bp
retn

loc_453FF:
stc
jmp     short loc_453FD

loc_45402:
call    sub_44816
call    sub_44774
dec     sp
imul    bp, [bp+65h], 7420h
outsw
outsw
and     [si+6Fh], ch
outsb
and     ds:20524320h, ch
imul    bp, [bp+73h], 7265h
jz      short near ptr loc_45486+1
db      64h
add     al, ch
push    bx
rep mov bx, 18Fh
call    sub_447E3
call    sub_44E2B
call    sub_45353
call    sub_45697
jmp     short loc_453FF
sub_45353 endp ; sp-analysis failed




sub_45438 proc near
call    sub_43865
call    sub_447B7
inc     bx
test    word ptr ds:19h, 2
jnz     short loc_45448
retn

loc_45448:
call    sub_447E3
push    dx
mov     cx, ds:8Eh
sub     cx, dx
mov     bx, ds:22h
jcxz    short loc_4545B
call    sub_44619

loc_4545B:
and     word ptr ds:19h, 0FFFDh
pop     cx
jcxz    short loc_4547C
mov     di, ds:22h
mov     si, 97h
push    ds
pop     es
cld

loc_4546E:
lodsb
cmp     al, 0FFh
jz      short loc_4546E
cmp     al, 1Ah
jnz     short loc_45479
mov     al, 20h ; ' '

loc_45479:
stosb
loop    loc_4546E

loc_4547C:
call    sub_447B7
inc     bx
mov     dx, bx
push    bp
mov     bp, 0FC2h

loc_45486:
mov     cx, 6

loc_45489:
mov     si, cs:[bp+0]
mov     bx, [si]
cmp     bx, 18Fh
ja      short loc_454A4
cmp     bx, dx
jbe     short loc_4549B
mov     bx, dx

loc_4549B:
push    cx
push    dx
call    sub_447E3
pop     dx
pop     cx
mov     [si], bx

loc_454A4:
inc     bp
inc     bp
loop    loc_45489
pop     bp
mov     ax, ds:4
mov     ds:311h, ax
mov     ax, ds:6
mov     ds:313h, ax
retn
sub_45438 endp




sub_454B6 proc near
push    bx
call    sub_45438
mov     bx, ds:2E3h
call    sub_447A0
mov     dx, 0F9h
add     dx, bx
jnb     short loc_454CC
mov     dx, ds:2D9h

loc_454CC:
pop     bx
call    sub_44858
mov     dx, ds:2D5h
call    sub_4485F
push    bx
call    sub_447A0
mov     ds:22h, bx
pop     cx
sub     cx, bx
push    cx
call    sub_4555E
call    sub_4532C
pop     cx
mov     bx, 97h
jcxz    short loc_454F8

loc_454EF:
mov     al, [bx]
inc     bx
cmp     al, 0FFh
jz      short loc_454EF
loop    loc_454EF

loc_454F8:
mov     ds:24h, bx
jmp     short sub_45520
sub_454B6 endp

db 90h
xor     ah, ah
push    ax
push    bx
call    sub_45438
pop     bx
call    sub_447A0
mov     ds:22h, bx
pop     bx
add     bx, 97h
mov     ds:24h, bx
call    sub_45520
call    sub_4555E
jmp     sub_4532C



sub_45520 proc near
mov     dx, 97h
mov     cl, ds:193h
sub     bx, dx
mov     al, bl
sub     al, ds:304h
jb      short loc_4554F
cmp     al, cl
jb      short loc_4554B
sub     al, cl
inc     al
add     al, ds:304h
mov     ds:304h, al
mov     al, ds:193h
dec     al
mov     ds:13h, al
jmp     sub_44AF5

loc_4554B:
mov     ds:13h, al

locret_4554E:
retn

loc_4554F:
add     al, ds:304h
mov     ds:304h, al
mov     byte ptr ds:13h, 0
jmp     sub_44AF5
sub_45520 endp




sub_4555E proc near

; FUNCTION CHUNK AT 2087 SIZE 0000005A BYTES

cmp     byte ptr ds:1Eh, 0
jz      short locret_4554E
mov     bx, ds:305h
mov     ax, ds:2D5h
cmp     ax, bx
jbe     short loc_45575
mov     ds:305h, ax
mov     bx, ax

loc_45575:
mov     cx, 1
cmp     ds:22h, bx
jnz     short loc_45581
jmp     loc_45627

loc_45581:
ja      short loc_455C5

loc_45583:
cmp     bx, ds:22h
jbe     short loc_4558F
call    sub_4488E
inc     cx
jmp     short loc_45583

loc_4558F:
mov     ds:305h, bx
mov     byte ptr ds:12h, 1
mov     byte ptr ds:1Fh, 0FFh
xor     ax, ax
mov     al, ds:194h
cmp     ax, cx
jb      short loc_455C2
dec     cx
cmp     cx, 2
ja      short loc_455C2
mov     bx, 1
call    sub_44790
push    cx

loc_455B3:
call    sub_45BD2
call    sub_45D31
loop    loc_455B3
pop     cx
cmp     cx, 1
ja      short loc_455C2
retn

loc_455C2:
jmp     sub_45697

loc_455C5:
cmp     bx, ds:22h
jnb     short loc_455D3
call    sub_44866
jb      short locret_4562B
inc     cx
jmp     short loc_455C5

loc_455D3:
or      ch, ch
jnz     short loc_4562C
mov     dl, ds:194h
mov     al, cl
sub     al, dl
mov     dh, al
inc     dh
jb      short loc_45627
dec     dh
jnz     short loc_455F3
cmp     byte ptr ds:15h, 0FFh
jnz     short loc_455F3
jmp     short loc_45656
db 90h

loc_455F3:
inc     dh
cmp     dh, 2
ja      short loc_4562C
sub     al, dl
jnb     short loc_4562C
mov     al, ds:1Dh
sub     al, dh
jbe     short loc_4562C
mov     ds:1Dh, al
mov     bx, ds:305h
mov     ch, dh
push    dx

loc_4560F:
call    sub_44866
push    bx
call    sub_45320
pop     bx
dec     ch
jnz     short loc_4560F
mov     ds:305h, bx
pop     dx
sub_4555E endp




sub_45620 proc near
dec     dl
mov     ds:12h, dl
retn
sub_45620 endp

; START OF FUNCTION CHUNK FOR sub_4555E

loc_45627:
mov     ds:12h, cl

locret_4562B:
retn

loc_4562C:
mov     bx, ds:305h
dec     cx
mov     al, ds:194h
sub     al, 2
mov     dl, al
mov     al, cl
sub     al, dl
mov     cl, al
jnb     short loc_45642
dec     ch

loc_45642:
call    sub_44866
loop    loc_45642
mov     ds:305h, bx
call    sub_45697
mov     byte ptr ds:1Fh, 0FFh
jmp     sub_4555E

loc_45656:
call    sub_45620
mov     al, ds:1Dh
dec     al
jz      short loc_4566D
cmp     al, ds:194h
jz      short loc_4566D
dec     al
jz      short loc_4566D
mov     ds:1Dh, al

loc_4566D:
mov     bx, ds:305h
call    sub_44866
mov     ds:305h, bx
call    sub_45320
mov     al, ds:194h
jmp     sub_45216
; END OF FUNCTION CHUNK FOR sub_4555E



sub_45681 proc near
mov     si, ds:8Bh
sub_45681 endp




sub_45685 proc near
mov     ah, [bx]

loc_45687:
mov     al, cs:[si]
cmp     al, 41h ; 'A'
jz      short locret_45696
cmp     al, ah
jz      short loc_45695
inc     si
jmp     short loc_45687

loc_45695:
stc

locret_45696:
retn
sub_45685 endp




sub_45697 proc near
mov     byte ptr ds:1Dh, 1
retn
sub_45697 endp




sub_4569D proc near
push    bx
mov     bx, 97h

loc_456A1:
cmp     bx, 18Fh
jz      short loc_456B3
cmp     byte ptr [bx], 0FFh
jnz     short loc_456B0
call    sub_448ED
dec     bx

loc_456B0:
inc     bx
jmp     short loc_456A1

loc_456B3:
mov     bx, 97h
mov     cl, 1

loc_456B8:
cmp     byte ptr [bx], 9
jnz     short loc_456EB
mov     al, cl
mov     dl, ds:303h
add     al, dl
dec     al
mov     ah, 0
div     dl
mov     al, dl
dec     al
sub     al, ah
or      al, al
jz      short loc_456EB

loc_456D5:
push    ax
push    cx
call    sub_448CF
pop     cx
pop     ax
inc     bx
mov     byte ptr [bx], 0FFh
inc     cl
cmp     cl, 0FAh
jnb     short loc_456F3
dec     al
jnz     short loc_456D5

loc_456EB:
inc     cl
inc     bx
cmp     cl, 0FAh
jb      short loc_456B8

loc_456F3:
call    sub_44B55
mov     al, ds:193h
sub     al, ds:13h
mov     bx, ds:24h
or      word ptr ds:19h, 4
call    sub_44946
and     word ptr ds:19h, 0FFFBh
pop     bx
retn
sub_4569D endp

byte_45712 db 2Ch, 2 dup(1), 0Dh, 2, 0, 4Bh, 2, 0, 4Dh
db 2, 0, 73h, 2, 0, 74h, 2, 0, 48h, 2, 0
db 50h, 1, 0FFh, 1, 0FFh, 2, 0, 49h, 2, 0
db 51h, 2, 0, 47h, 2, 0, 4Fh, 2, 0, 77h
db 2, 0, 75h, 2, 0, 84h, 2, 0, 76h, 1, 0FFh
db 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1
db 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh
db 1, 0FFh, 2, 0, 52h, 1, 0FFh, 1, 0FFh
db 1, 0FFh, 1, 0FFh, 2, 0, 53h, 1, 8, 1
db 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh
db 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1
db 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh
db 1, 0FFh, 0C2h, 0Bh, 11h, 1, 0FFh, 0C2h
db 11h, 9, 0C2h, 11h, 14h, 1, 0FFh, 1, 0FFh
db 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1
db 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh
db 1, 0FFh, 1, 0FFh, 1, 0FFh, 1, 0FFh, 1
db 0FFh, 1, 0FFh, 8Bh dup(0), 2Ch, 1, 0C1h
db 0Dh, 0C1h, 13h, 0C1h, 4, 0C1h, 1, 0C1h
db 6, 0C1h, 5, 0C1h, 18h, 0C1h, 17h, 0C1h
db 1Ah, 0C1h, 12h, 0C1h, 3, 0C2h, 11h, 13h
db 0C2h, 11h, 4, 0C2h, 11h, 5, 0C2h, 11h
db 18h, 0C2h, 11h, 12h, 0C2h, 11h, 3, 0C1h
db 0FFh, 0C1h, 0FFh, 0C1h, 0FFh, 0C1h, 0FFh
db 0C2h, 11h, 2, 0C2h, 11h, 0Bh, 0C2h, 11h
db 10h, 0C2h, 11h, 30h, 0C2h, 11h, 31h, 0C2h
db 11h, 32h, 0C2h, 11h, 33h, 0C1h, 16h, 0C1h
db 0Eh, 0C1h, 19h, 0C2h, 11h, 19h, 0C1h
db 14h, 0C1h, 7, 0C1h, 7Fh, 0C2h, 0Bh, 2
db 0C2h, 2 dup(0Bh), 0C2h, 0Bh, 14h, 0C2h
db 0Bh, 8, 0C2h, 0Bh, 30h, 0C2h, 0Bh, 31h
db 0C2h, 0Bh, 32h, 0C2h, 0Bh, 33h, 0C2h
db 0Bh, 3, 0C2h, 0Bh, 16h, 0C2h, 0Bh, 19h
db 0C2h, 0Bh, 12h, 0C2h, 0Bh, 17h, 0C1h
db 0FFh, 0C2h, 0Bh, 10h, 0C2h, 0Bh, 4, 0C1h
db 9, 0C2h, 0Fh, 9, 0C2h, 0Fh, 14h, 0C1h
db 0FFh, 0C1h, 0FFh, 0C1h, 0FFh, 0C1h, 0FFh
db 0C2h, 11h, 0Ch, 0C2h, 11h, 6, 0C2h, 11h
db 1, 0C1h, 0Ch, 0C1h, 10h, 0C2h, 0Bh, 13h
db 0C2h, 11h, 1Bh, 0C2h, 11h, 1Dh, 0C2h
db 0, 5Eh, 0C2h, 0Fh, 6, 0C2h, 0Fh, 15h
db 0C2h, 0Bh, 9, 0C2h, 0Bh, 15h, 74h dup(0)
db 59h, 17h, 9Ah, 18h, 0B1h, 18h, 17h, 19h
db 40h, 19h, 0F4h, 15h, 0C0h, 15h, 4, 16h
db 43h, 16h, 0C6h, 16h, 97h, 16h, 65h, 15h
db 6Fh, 15h, 6Fh, 16h, 80h, 16h, 0ECh, 16h
db 5Bh, 15h, 97h, 4, 97h, 4, 97h, 4, 97h
db 4, 0AAh, 0Bh, 0B4h, 0Bh, 0BDh, 18h, 82h
db 0Bh, 8Ch, 0Bh, 96h, 0Bh, 0A0h, 0Bh, 83h
db 15h, 50h, 18h, 53h, 1Ah, 37h, 1Ah, 0BAh
db 1Ah, 0F6h, 1Ah, 9, 1Bh, 4Dh, 0Bh, 30h
db 0Bh, 0D2h, 18h, 79h, 0Bh, 0Eh, 0Bh, 21h
db 0Bh, 26h, 0Bh, 2Bh, 0Bh, 0DDh, 0Dh, 9Ah
db 0Dh, 4Dh, 0Fh, 73h, 0Ch, 0F6h, 0Bh, 97h
db 4, 29h, 0Dh, 83h, 1, 0B5h, 19h, 8Fh, 15h
db 9Bh, 15h, 97h, 4, 97h, 4, 97h, 4, 97h
db 4, 0A7h, 1Dh, 64h, 7, 0B8h, 7, 0C8h, 7
db 7Bh, 2, 0ECh, 1Bh, 5, 0Ah, 9, 0Ah, 0F2h
db 1Bh, 0A7h, 15h, 0AEh, 15h, 0B0h, 0Eh
db 0B6h, 0Eh, 3Ch, 3Eh, 2Ch, 5Bh, 5Dh, 2Eh
db 2Ah, 2Bh, 2Dh, 2Fh, 3Ah, 3Dh, 28h, 29h
db 7Bh, 7Dh, 5Eh, 23h, 5Ch, 27h, 3Bh
db 20h, 0FFh, 9, 8 dup(41h), 4Ch, 69h, 63h
db 65h, 6Eh, 73h, 65h, 64h, 20h, 4Dh, 61h
db 74h, 65h, 72h, 69h, 61h, 6Ch, 2Eh, 20h
db 50h, 72h, 6Fh, 67h, 72h, 61h, 6Dh, 20h
db 50h, 72h, 6Fh, 70h, 65h, 72h, 74h, 79h
db 20h, 6Fh, 66h, 20h, 42h, 4Fh, 52h, 4Ch
db 41h, 4Eh, 44h, 2Eh



sub_45A4B proc near
mov     word ptr ds:29Dh, 267Bh
mov     word ptr ds:29Fh, 26A0h
mov     word ptr ds:2A1h, 26D3h
mov     byte ptr ds:2A3h, 0FFh
mov     al, ds:37Eh
mov     ah, ds:37Fh
sub     ax, 101h
mov     ds:29Bh, ax
mov     al, ds:37Ch
mov     ah, ds:37Dh
mov     ds:296h, ax
call    sub_45D70
retn
sub_45A4B endp




sub_45A7D proc near
cmp     al, 61h ; 'a'
jb      short locret_45A87
cmp     al, 7Ah ; 'z'
ja      short locret_45A87
sub     al, 20h ; ' '

locret_45A87:
retn
sub_45A7D endp




sub_45A88 proc near
call    sub_45AD3
and     cs:[bx+si+72h], dl
db      65h
jnb     short near ptr loc_45B03+2
and     [si], bh
inc     bp
push    bx
inc     bx
db      3Eh
add     al, ch
push    ss
add     [si], bh
sbb     si, [di-7]
retn
sub_45A88 endp ; sp-analysis failed




sub_45AA1 proc near
push    ax
push    bx
push    cx
push    dx
push    di
push    si
call    word ptr ds:29Dh
pop     si
pop     di
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_45AA1 endp




sub_45AB2 proc near
push    bx
push    cx
push    dx
push    di
push    si
call    word ptr ds:29Fh
pop     si
pop     di
pop     dx
pop     cx
pop     bx
retn
sub_45AB2 endp




sub_45AC1 proc near
push    ax
push    bx
push    cx
push    dx
push    di
push    si
push    ax
call    word ptr ds:2A1h
pop     si
pop     di
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_45AC1 endp



; Attributes: bp-based frame

sub_45AD3 proc near
push    bp
mov     bp, sp
xchg    bx, [bp+2]
pushf
push    ax

loc_45ADB:
mov     al, cs:[bx]
inc     bx
or      al, al
jz      short loc_45AE8
call    sub_45AC1
jmp     short loc_45ADB

loc_45AE8:
xchg    bx, [bp+2]
pop     ax
popf
pop     bp
retn
sub_45AD3 endp



; Attributes: bp-based frame

sub_45AEF proc near
push    bp
mov     bp, sp
xchg    bx, [bp+2]
push    ax
pushf

loc_45AF7:
mov     al, cs:[bx]
inc     bx
or      al, al
jz      short loc_45B14
cmp     al, 80h
jnb     short loc_45B08

loc_45B03:
call    sub_45BE2
jmp     short loc_45B0F

loc_45B08:
call    sub_45BD2
and     al, 7Fh
jz      short loc_45AF7

loc_45B0F:
call    sub_45AC1
jmp     short loc_45AF7

loc_45B14:
popf
pop     ax
xchg    bx, [bp+2]
pop     bp
retn
sub_45AEF endp

; START OF FUNCTION CHUNK FOR sub_446D1

loc_45B1B:
push    ax
push    bx
mov     bx, 24DDh
jmp     short loc_45B27
; END OF FUNCTION CHUNK FOR sub_446D1



sub_45B22 proc near
push    ax
push    bx
mov     bx, 2597h
sub_45B22 endp ; sp-analysis failed

; START OF FUNCTION CHUNK FOR sub_446D1

loc_45B27:
cld
lods    byte ptr es:[si]
or      al, al
jz      short loc_45B35
call    bx ; sub_45A7D
call    sub_45AC1
jmp     short loc_45B27

loc_45B35:
pop     bx
pop     ax
retn
; END OF FUNCTION CHUNK FOR sub_446D1
push    si
push    di
push    es
mov     di, 2A5h
push    ds
pop     es
call    sub_45B54
mov     si, di
call    sub_45B22
pop     es
pop     di
pop     si
retn
push    dx
xor     dx, dx
call    sub_45B54
pop     dx
retn



sub_45B54 proc near
push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    ds
push    es
push    cs
pop     ds
assume ds:seg054
mov     bx, ax
push    cx
cld
xor     cx, cx
mov     si, 2616h
mov     ah, 7

loc_45B69:
xor     al, al

loc_45B6B:
inc     al
sub     bx, [si]
sbb     dx, [si+2]
jnb     short loc_45B6B
add     bx, [si]
adc     dx, [si+2]
add     si, 4
dec     al
jnz     short loc_45B84
or      cx, cx
jz      short loc_45B88

loc_45B84:
add     al, 30h ; '0'
stosb
inc     cx

loc_45B88:
dec     ah
jnz     short loc_45B69
or      cx, cx
jnz     short loc_45B94
mov     al, 30h ; '0'
stosb
inc     cx

loc_45B94:
xor     ax, ax
stosb
pop     ax
push    es
pop     ds
assume ds:nothing
sub     ax, cx
jbe     short loc_45BAD
inc     cx
dec     di
mov     si, di
add     di, ax
std
rep movsb
mov     cx, ax
mov     al, 20h ; ' '
rep stosb

loc_45BAD:
pop     es
pop     ds
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_45B54 endp

db 40h, 42h, 0Fh, 0, 0A0h, 86h, 1, 0, 10h
db 27h, 2 dup(0), 0E8h, 3, 2 dup(0), 64h
db 3 dup(0), 0Ah, 3 dup(0), 1, 3 dup(0)



sub_45BD2 proc near

; FUNCTION CHUNK AT 27A5 SIZE 00000009 BYTES

cmp     byte ptr ds:2A4h, 0
jz      short locret_45BE1
mov     byte ptr ds:2A4h, 0
jmp     loc_45D45

locret_45BE1:
retn
sub_45BD2 endp




sub_45BE2 proc near

; FUNCTION CHUNK AT 279C SIZE 00000009 BYTES

cmp     byte ptr ds:2A4h, 1
jz      short locret_45BE1
mov     byte ptr ds:2A4h, 1
jmp     loc_45D3C
sub_45BE2 endp




sub_45BF1 proc near
cmp     byte ptr ds:2A4h, 3
jz      short locret_45BE1
mov     byte ptr ds:2A4h, 3
push    ax
mov     al, ds:293h
mov     ds:29Ah, al
pop     ax
retn
sub_45BF1 endp




sub_45C06 proc near
cmp     byte ptr ds:2A4h, 2
jz      short locret_45BE1
mov     byte ptr ds:2A4h, 2
push    ax
mov     al, ds:292h
mov     ds:29Ah, al
pop     ax
retn
sub_45C06 endp

cmp     byte ptr ds:2A3h, 0FFh
mov     al, 0FFh
jnz     short loc_45C3C
push    ds
push    es
push    ds
pop     es
mov     ds, word ptr ds:394h
call    dword ptr es:2C1h
pop     es
pop     ds
cmp     ax, 0FFFFh
mov     al, 0
jz      short loc_45C3C
dec     al

loc_45C3C:
and     ax, 1
retn

loc_45C40:
call    sub_45AA1
jz      short loc_45C40
mov     al, ds:2A3h
mov     byte ptr ds:2A3h, 0FFh
cmp     al, 0FFh
jnz     short loc_45C70
push    ds
push    es
push    ds
pop     es
mov     ds, word ptr ds:394h
call    dword ptr es:2C5h
pop     es
pop     ds
or      al, al
jnz     short loc_45C70
mov     ds:2A3h, ah
mov     al, 0
or      ah, ah
jnz     short loc_45C70
mov     al, 3

loc_45C70:
xor     ah, ah
retn
pop     ax
pop     dx
push    ax
push    bp
push    dx
call    sub_45D4E
pop     ax
cmp     al, 0Dh
jnz     short loc_45C86
mov     dl, ds:296h
jmp     short loc_45CE6

loc_45C86:
cmp     al, 0Ah
jnz     short loc_45C94
inc     dh
cmp     dh, ds:29Ch
jbe     short loc_45CE6
jmp     short loc_45CD1

loc_45C94:
cmp     al, 8
jnz     short loc_45CA2
cmp     dl, ds:296h
jz      short loc_45CE6
dec     dl
jmp     short loc_45CE6

loc_45CA2:
cmp     al, 7
jnz     short loc_45CAE
mov     ah, 0Eh
xor     bh, bh
int     10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
                        ; AL = character, BH = display page (alpha modes)
                        ; BL = foreground color (graphics modes)
jmp     short loc_45CEC

loc_45CAE:
push    dx
mov     ah, 9
xor     bh, bh
mov     cx, 1
mov     bl, ds:29Ah
int     10h             ; - VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
                        ; AL = character, BH = display page
                        ; BL = attributes of character (alpha modes) or color (graphics modes)
                        ; CX = number of times to write character
pop     dx
inc     dl
cmp     dl, ds:29Bh
jbe     short loc_45CE6
mov     dl, ds:296h
inc     dh
cmp     dh, ds:29Ch
jbe     short loc_45CE6

loc_45CD1:
dec     dh
push    dx
mov     ax, 601h
mov     bh, ds:29Ah
mov     cx, ds:296h
mov     dx, ds:29Bh
int     10h             ; - VIDEO - SCROLL PAGE UP
                        ; AL = number of lines to scroll window (0 = blank whole window)
                        ; BH = attributes to be used on blanked lines
                        ; CH,CL = row,column of upper left corner of window to scroll
                        ; DH,DL = row,column of lower right corner of window
pop     dx

loc_45CE6:
mov     ah, 2
xor     bh, bh
int     10h             ; - VIDEO - SET CURSOR POSITION
                        ; DH,DL = row, column (0,0 = upper left)
                        ; BH = page number

loc_45CEC:
pop     bp
retn
mov     bx, ax
inc     bx

loc_45CF1:
dec     bx
jnz     short loc_45CF5
retn

loc_45CF5:
mov     al, ds:36Eh
xor     ah, ah
add     ax, ax
add     ax, ax
add     ax, ax

loc_45D00:
push    ax
xor     al, al
aam
pop     ax
dec     ax
jnz     short loc_45D00
jmp     short loc_45CF1



sub_45D0B proc near
push    bx
push    cx
push    dx
push    bp
call    sub_45D4E
mov     ah, 6

loc_45D14:
mov     al, 1
mov     bh, ds:29Ah
mov     ch, dh
mov     cl, ds:296h
mov     dx, ds:29Bh
cmp     ch, dh
jnz     short loc_45D2A
xor     al, al

loc_45D2A:              ; - VIDEO - SCROLL PAGE UP
int     10h             ; AL = number of lines to scroll window (0 = blank whole window)
                        ; BH = attributes to be used on blanked lines
                        ; CH,CL = row,column of upper left corner of window to scroll
                        ; DH,DL = row,column of lower right corner of window
pop     bp
pop     dx
pop     cx
pop     bx
retn
sub_45D0B endp




sub_45D31 proc near
push    bx
push    cx
push    dx
push    bp
call    sub_45D4E
mov     ah, 7
jmp     short loc_45D14
sub_45D31 endp

; START OF FUNCTION CHUNK FOR sub_45BE2

loc_45D3C:
push    ax
mov     al, ds:291h
mov     ds:29Ah, al
pop     ax
retn
; END OF FUNCTION CHUNK FOR sub_45BE2
; START OF FUNCTION CHUNK FOR sub_45BD2
;   ADDITIONAL PARENT FUNCTION sub_45D70

loc_45D45:
push    ax
mov     al, ds:290h
mov     ds:29Ah, al
pop     ax
retn
; END OF FUNCTION CHUNK FOR sub_45BD2



sub_45D4E proc near
mov     ah, 3
xor     bh, bh
int     10h             ; - VIDEO - READ CURSOR POSITION
                        ; BH = page number
                        ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
retn
sub_45D4E endp




sub_45D55 proc near
push    bx
push    cx
push    dx
push    bp
call    sub_45D4E
mov     ax, 600h
mov     bh, ds:29Ah
mov     cx, dx
mov     dl, ds:29Bh
int     10h             ; - VIDEO - SCROLL PAGE UP
                        ; AL = number of lines to scroll window (0 = blank whole window)
                        ; BH = attributes to be used on blanked lines
                        ; CH,CL = row,column of upper left corner of window to scroll
                        ; DH,DL = row,column of lower right corner of window
pop     bp
pop     dx
pop     cx
pop     bx
retn
sub_45D55 endp




sub_45D70 proc near

; FUNCTION CHUNK AT 27A5 SIZE 00000009 BYTES

push    bp
mov     al, ds:380h
cmp     al, 0FFh
jnz     short loc_45D7C
mov     ah, 0Fh
int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
                        ; Return: AH = number of columns on screen
                        ; AL = current video mode
                        ; BH = current active display page

loc_45D7C:
mov     byte ptr ds:296h, 0
mov     byte ptr ds:297h, 0
cmp     al, 7
mov     bh, 4Fh ; 'O'
mov     bl, 0
mov     si, 382h
jz      short loc_45DB1
mov     si, 38Eh
cmp     al, 2
jz      short loc_45DAE
cmp     al, 4
jb      short loc_45D9E
mov     al, 3

loc_45D9E:
mov     bl, 0FFh
cmp     al, 3
jz      short loc_45DB1
mov     bh, 27h ; '''
cmp     al, 1
jz      short loc_45DB1
xor     al, al
mov     bl, 0

loc_45DAE:
mov     si, 388h

loc_45DB1:
mov     ds:298h, al
mov     ds:299h, bl
mov     ds:29Bh, bh
mov     ax, [si]
mov     ds:290h, ax
mov     ax, [si+2]
mov     ds:292h, ax
mov     ax, [si+4]
mov     ds:294h, ax
mov     ah, 0Fh
int     10h             ; - VIDEO - GET CURRENT VIDEO MODE
                        ; Return: AH = number of columns on screen
                        ; AL = current video mode
                        ; BH = current active display page
cmp     al, ds:298h
jz      short loc_45DDE
mov     al, ds:298h
xor     ah, ah
int     10h             ; - VIDEO - SET VIDEO MODE
                        ; AL = mode

loc_45DDE:
pop     bp
jmp     loc_45D45
sub_45D70 endp




sub_45DE2 proc near
push    ax
push    bx
push    dx
push    bp
mov     dl, ah
xchg    dh, al
add     dx, ds:296h
mov     ah, 2
xor     bh, bh
int     10h             ; - VIDEO - SET CURSOR POSITION
                        ; DH,DL = row, column (0,0 = upper left)
                        ; BH = page number
pop     bp
pop     dx
pop     bx
pop     ax
retn
sub_45DE2 endp




sub_45DF9 proc near
push    ax
push    dx
mov     dl, al
mov     ah, 5
int     21h             ; DOS - PRINTER OUTPUT
                        ; DL = character to print
pop     dx
pop     ax
retn
sub_45DF9 endp

; START OF FUNCTION CHUNK FOR sub_43824

loc_45E04:
call    sub_45AD3
pop     es
add     bl, al
; END OF FUNCTION CHUNK FOR sub_43824



sub_45E0A proc near
push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    es
mov     cx, 0Fh
mov     ax, [bx]
call    sub_45A7D
cmp     ah, 3Ah ; ':'
jnz     short loc_45E22
inc     bx
inc     bx
jmp     short loc_45E2A

loc_45E22:
mov     ah, 19h
int     21h             ; DOS - GET DEFAULT DISK NUMBER
add     al, 41h ; 'A'
mov     ah, 3Ah ; ':'

loc_45E2A:
mov     es:[di], ax
inc     di
inc     di
or      ch, ch
jnz     short loc_45E67
cmp     byte ptr [bx], 5Ch ; '\'
jz      short loc_45E67
cmp     byte ptr [bx], 2Fh ; '/'
jz      short loc_45E67
mov     byte ptr es:[di], 5Ch ; '\'
inc     di
mov     ah, 47h ; 'G'
mov     dl, al
sub     dl, 40h ; '@'
mov     si, di
push    ds
push    es
pop     ds
int     21h             ; DOS - 2+ - GET CURRENT DIRECTORY
                        ; DL = drive (0=default, 1=A, etc.)
                        ; DS:SI points to 64-byte buffer area
pop     ds
jb      short loc_45E67
cmp     byte ptr es:[di], 0
jz      short loc_45E67

loc_45E59:
cmp     byte ptr es:[di], 0
jz      short loc_45E62
inc     di
jmp     short loc_45E59

loc_45E62:
mov     byte ptr es:[di], 5Ch ; '\'
inc     di

loc_45E67:
mov     al, [bx]
call    sub_45A7D
cmp     al, 20h ; ' '
jb      short loc_45E88
mov     cx, 0Ah
push    di
mov     di, 28F4h
push    es
push    cs
pop     es
assume es:seg054
cld
repne scasb
pop     es
assume es:nothing
pop     di
jz      short loc_45E88
inc     bx
mov     es:[di], al
inc     di
jmp     short loc_45E67

loc_45E88:
mov     byte ptr es:[di], 0
pop     es
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_45E0A endp

db 22h, 2Bh, 2Ch, 3Bh, 3Ch, 3Dh, 3Eh, 5Bh
db 5Dh, 7Ch



sub_45E9E proc near
push    ds
mov     ds, dx
call    sub_45E0A
pop     ds
jnz     short loc_45EA8
retn

loc_45EA8:
push    ds
push    es
push    es
les     si, ds:377h
pop     ds
pushf
call    sub_45EB8
popf
pop     es
pop     ds
retn
sub_45E9E endp




sub_45EB8 proc near
mov     dl, 1
jmp     short loc_45EC2
mov     dl, 2
jmp     short loc_45EC2
xor     dl, dl

loc_45EC2:
xor     cx, cx

loc_45EC4:
mov     al, [di]
or      al, al
jz      short loc_45EE2
inc     di
cmp     dl, 2
jz      short loc_45EC4
cmp     al, 2Eh ; '.'
jnz     short loc_45ED6
mov     cx, di

loc_45ED6:
cmp     al, 5Ch ; '\'
jz      short loc_45EDE
cmp     al, 2Fh ; '/'
jnz     short loc_45EC4

loc_45EDE:
xor     cx, cx
jmp     short loc_45EC4

loc_45EE2:
or      cx, cx
jz      short loc_45EED
or      dl, dl
jnz     short locret_45EF8
mov     di, cx
dec     di

loc_45EED:
mov     al, es:[si]
mov     [di], al
inc     si
inc     di
or      al, al
jnz     short loc_45EED

locret_45EF8:
retn
sub_45EB8 endp

mov     ah, 3Fh ; '?'
call    sub_1F059
retn



sub_45F01 proc near
mov     ah, 40h ; '@'
call    sub_1F059
jb      short loc_45F0C
jmp     short sub_45F11

loc_45F0C:
call    sub_45F11
stc
retn
sub_45F01 endp




sub_45F11 proc near
push    ax
mov     ah, 3Eh
int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                        ; BX = file handle
pop     ax
retn
sub_45F11 endp




sub_45F18 proc near
push    ax
mov     ah, 41h
int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
pop     ax
retn
sub_45F18 endp

or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
mov     [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
inc     di
inc     di
inc     di
inc     di
inc     di
inc     di
inc     di
inc     di
inc     di
inc     di
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], dh
xor     [bp+si], si
xor     si, [bx+si]
xor     [bp+si], si
xor     [bx+si], dh
xor     dh, [bp+si]
xor     al, 35h
xor     ax, 3130h
xor     ds:3332h, dh
xor     [bx+di], dh
xor     [bp+si], dh
xor     [bp+si], dh
or      [bx+si], cl
or      [bx+si], cl
or      [bx+si], cl
adc     [bx+di], dl
adc     dl, [bp+di]
adc     [bx+di], dl
adc     dl, [bx+si]
adc     [bp+si], dl
adc     dl, [si]
adc     ax, 1015h
adc     [bx+si], dx
push    ss
adc     dl, [bp+di]
adc     [bx+di], dl
adc     [bp+si], dl
adc     [bp+si], dl
or      [bx+si], cl
or      [bx+si], cl
or      [bx+di], cl
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      [bx+di], cx
or      ds:5150h, ax
push    dx
push    si
push    di
push    bp
push    ds
pop     es
mov     si, 324h
mov     di, ds:10h
test    byte ptr ds:315h, 10h
jz      short loc_46045
mov     dx, ds:2
dec     dx
mov     bp, 0FFFFh
dec     di
cmp     di, dx
ja      short loc_46050
jmp     short loc_46096

loc_46045:
mov     dx, ds:0
mov     bp, 1
cmp     di, dx
jnb     short loc_46096

loc_46050:
cld
lodsb
sub     ah, ah
mov     cx, ax
jcxz    short loc_4609D
add     cx, si
mov     ah, [si]

loc_4605C:
cmp     ah, 1
jz      short loc_46071

loc_46061:
mov     al, [di]
xor     al, ah
test    al, 0DFh
jz      short loc_46071
add     di, bp
cmp     di, dx
jnz     short loc_46061
jmp     short loc_46096

loc_46071:
push    di
test    byte ptr ds:315h, 40h
jnz     short loc_46085
test    byte ptr ds:315h, 4
jnz     short loc_4608A
call    sub_460FE
jmp     short loc_4608D

loc_46085:
call    sub_46158
jmp     short loc_4608D

loc_4608A:
call    sub_4612D

loc_4608D:
jz      short loc_460B6

loc_4608F:
pop     di
add     di, bp
cmp     di, dx
jnz     short loc_4605C

loc_46096:
stc
mov     bx, ds:10h
jmp     short loc_460F6

loc_4609D:
test    byte ptr ds:315h, 80h
jz      short loc_460AB
cmp     byte ptr ds:345h, 0
jnz     short loc_460AF

loc_460AB:
add     ds:10h, bp

loc_460AF:
mov     bx, ds:10h
clc
jmp     short loc_460F6

loc_460B6:
test    byte ptr ds:315h, 41h
jz      short loc_460E4
cmp     di, ds:0
jnb     short loc_460E4
mov     bl, [di]
sub     bh, bh
test    byte ptr cs:[bx+297Fh], 50h
jnz     short loc_4608F
pop     bx
push    bx
dec     bx
cmp     bx, ds:2
jb      short loc_460E4
mov     bl, [bx]
sub     bh, bh
test    byte ptr cs:[bx+297Fh], 50h
jnz     short loc_4608F

loc_460E4:
pop     word ptr ds:10h
mov     bx, di
test    byte ptr ds:315h, 10h
jz      short loc_460F5
mov     bx, ds:10h

loc_460F5:
clc

loc_460F6:
pop     bp
pop     di
pop     si
pop     dx
pop     cx
pop     ax
pop     es
retn



sub_460FE proc near
push    ax
push    cx
push    dx
push    si
sub     cx, si
jz      short loc_46117
sub     dx, di
cmp     cx, dx
ja      short loc_46117
cld

loc_4610D:
repe cmpsb
jz      short loc_46117
cmp     byte ptr [si-1], 1
jz      short loc_4610D

loc_46117:
pop     si
pop     dx
pop     cx
pop     ax
retn
sub_460FE endp




sub_4611C proc near
mov     bl, [di-1]
test    byte ptr cs:[bx+297Fh], 10h
jz      short loc_4612A
cmp     al, al
retn

loc_4612A:
or      al, 1
retn
sub_4611C endp




sub_4612D proc near
push    ax
push    bx
push    si
cld
sub     bh, bh

loc_46133:
cmp     si, cx
jz      short loc_46154
cmp     di, dx
jz      short loc_46152
lodsb
inc     di
cmp     al, 1
jz      short loc_46133
xor     al, [di-1]
jz      short loc_46133
test    al, 0DFh
jnz     short loc_46154
mov     bl, [di-1]
call    sub_4611C
jz      short loc_46133

loc_46152:
or      al, 1

loc_46154:
pop     si
pop     bx
pop     ax
retn
sub_4612D endp




sub_46158 proc near
push    ax
push    bx
push    si
push    bp
sub     bh, bh
cmp     si, cx
jz      short loc_461C2
cmp     di, dx
jz      short loc_461C0
cld
lodsb
inc     di
cmp     al, 1
jz      short loc_4617B
xor     al, [di-1]
jz      short loc_4617B
test    al, 0DFh
jnz     short loc_461C2
call    sub_4611C
jnz     short loc_461C0

loc_4617B:
mov     bx, 297Fh
mov     bp, dx
mov     dh, 0

loc_46182:
lodsb
cmp     si, cx
ja      short loc_46193
xlat    byte ptr cs:[bx]
and     al, 0Fh
jz      short loc_46182
cmp     al, dh
jz      short loc_46182
mov     dl, al

loc_46193:
cmp     di, bp
jz      short loc_461B6
mov     al, [di]
inc     di
xlat    byte ptr cs:[bx]
and     al, 0Fh
jz      short loc_46193
cmp     al, dh
jz      short loc_46193
cmp     si, cx
ja      short loc_461BB
cmp     byte ptr [si-1], 1
jz      short loc_461B2
cmp     al, dl
jnz     short loc_461C2

loc_461B2:
mov     dh, al
jmp     short loc_46182

loc_461B6:
cmp     si, cx
jbe     short loc_461C0
inc     di

loc_461BB:
dec     di
cmp     ax, ax
jmp     short loc_461C2

loc_461C0:
or      al, 1

loc_461C2:
mov     dx, bp
pop     bp
pop     si
pop     bx
pop     ax
retn
sub_46158 endp

db 24h, 2Ah, 24h, 2Ah, 24h, 2Ah, 2, 0Bh
db 5, 1, 45h, 44h, 49h, 54h, 4Fh, 52h, 0
word_461DA dw 0


; Attributes: bp-based frame

sub_461DC proc far

arg_0= dword ptr  6
arg_4= word ptr  0Ah

mov     dx, 2CACh

loc_461DF:
push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     ax, ds
lds     si, [bp+arg_0]
mov     es, word ptr [si]
mov     cs:word_461DA, es
mov     di, 2ADh
call    sub_462F2
push    es
pop     ds
mov     ds:394h, ax
mov     ax, ds:307h
add     ax, 97h
mov     ds:24h, ax
mov     ax, ds:2D5h
call    sub_462FF
mov     ax, [bp+arg_4]
push    bp
call    dx
pop     bp
push    ax
mov     ax, ds:2D5h
neg     ax
call    sub_462FF
mov     ax, ds:24h
sub     ax, 97h
mov     ds:307h, ax
les     di, [bp+arg_0]
mov     si, 2ADh
call    sub_462F2
pop     ax
pop     ds
pop     di
pop     si
pop     bp
retf
sub_461DC endp




sub_46233 proc far
mov     dx, 2CF4h
jmp     short loc_461DF
sub_46233 endp




sub_46238 proc far
mov     dx, 2CFEh
jmp     short loc_461DF
sub_46238 endp




sub_4623D proc far
mov     dx, 2D02h
jmp     short loc_461DF
sub_4623D endp




sub_46242 proc far
mov     dx, 2D19h
jmp     short loc_461DF
sub_46242 endp




sub_46247 proc far
mov     dx, 2D3Bh
jmp     short loc_461DF
sub_46247 endp

push    ds
pop     es
lds     si, ds:2DBh
mov     word ptr [si+8], offset byte_45712
mov     word ptr [si+0Ah], cs
mov     di, 36Bh
mov     cx, 10h
cld
rep movsb
lds     si, es:36Fh
mov     di, 37Bh
mov     cx, 19h
rep movsb
push    es
pop     ds
mov     word ptr ds:2D5h, 396h
mov     word ptr ds:2D7h, ds
mov     word ptr ds:2E9h, 2Eh ; '.'
mov     word ptr ds:2EBh, ds
mov     ax, ds:2AFh
dec     ax
mov     ds:2D9h, ax
call    sub_45A4B
call    sub_4366A
retn
mov     word ptr ds:2E7h, 0
call    sub_436EA
retn
call    sub_43758
retn
push    ds
pop     es
lds     si, ds:36Fh
mov     di, 37Bh
mov     cx, 19h
cld
rep movsb
push    es
pop     ds
call    sub_45D70
jmp     loc_436C7
mov     dx, ax
push    ds
pop     es
mov     di, ds:2D5h
add     di, [bp+0Ch]
mov     cx, ds:2E3h
sub     cx, di
mov     al, 0Ah
cld

loc_462CD:
dec     dx
jz      short loc_462D4
repne scasb
jz      short loc_462CD

loc_462D4:
mov     ax, di
sub     ax, ds:2D5h
retn
mov     di, ax
add     di, ds:2D5h
push    ds
pop     es
mov     cx, ax
mov     al, 0Ah
xor     dx, dx
std

loc_462EA:
inc     dx
repne scasb
jz      short loc_462EA
mov     ax, dx
retn



sub_462F2 proc near
push    cx
push    si
push    di
mov     cx, 0BEh
cld
rep movsb
pop     di
pop     si
pop     cx
retn
sub_462F2 endp




sub_462FF proc near
add     ds:2E3h, ax
add     ds:311h, ax
add     ds:313h, ax
add     ds:2D9h, ax
add     ds:305h, ax
add     ds:2E5h, ax
add     ds:309h, ax
add     ds:30Bh, ax
add     ds:30Dh, ax
add     ds:30Fh, ax
les     si, ds:2FDh
mov     bx, es
or      bx, si
jz      short locret_46346

loc_46331:
mov     bx, es:[si]
cmp     bx, 0FFFFh
jz      short locret_46346
cmp     bx, 0FFFEh
jz      short loc_46341
add     es:[si], ax

loc_46341:
add     si, 3
jmp     short loc_46331

locret_46346:
retn
sub_462FF endp




sub_46347 proc near
cmp     word ptr ds:369h, 0
jnz     short locret_46351
call    sub_45AA1

locret_46351:
retn
sub_46347 endp




sub_46352 proc near
cmp     word ptr ds:369h, 0
jnz     short loc_4635E
call    sub_45AB2
jmp     short locret_46381

loc_4635E:
push    di
push    es
les     di, ds:2BDh
mov     al, es:[di]
dec     word ptr ds:369h
jz      short loc_4637F
push    si
push    ds
push    cx
mov     cx, ds:369h
push    es
pop     ds
mov     si, di
inc     si
cld
rep movsb
pop     cx
pop     ds
pop     si

loc_4637F:
pop     es
pop     di

locret_46381:
retn
sub_46352 endp




sub_46382 proc near
push    ds
push    ds
pop     es
mov     ds, word ptr ds:394h
push    ax
call    dword ptr es:2CDh
mov     es, dx
mov     si, ax
pop     ax
pop     ds
retn
sub_46382 endp

push    ds
push    ds
pop     es
mov     ds, word ptr ds:394h
call    dword ptr es:2EDh
pop     ds
retn



sub_463A4 proc near
push    ds
push    ds
pop     es
mov     ds, word ptr ds:394h
call    dword ptr es:2F1h
pop     ds
retn
sub_463A4 endp




sub_463B2 proc near
push    bp
push    si
push    di
push    ds
mov     ds, cs:word_461DA
call    dx ; sub_43726
pop     ds
pop     di
pop     si
pop     bp
retn
sub_463B2 endp



; Attributes: bp-based frame

sub_463C2 proc near

arg_2= word ptr  6

push    bp
mov     bp, sp
mov     ax, [bp+arg_2]
pop     bp
mov     dx, 186h
jmp     short sub_463B2
sub_463C2 endp



; Attributes: bp-based frame

sub_463CE proc far

arg_0= dword ptr  6
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    si
push    di
les     di, [bp+arg_0]
mov     bx, [bp+arg_4]
mov     dx, [bp+arg_6]
mov     ds, cs:word_461DA
call    sub_45E9E
pop     di
pop     si
pop     ds
pop     bp
retf
sub_463CE endp

seg054 ends


; Segment type: Pure code
seg055 segment byte public 'CODE' use16
assume cs:seg055
;org 0Ah
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_463EA proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
jmp     short loc_463F6

loc_463F3:
inc     word ptr [bp+arg_0]

loc_463F6:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_463F3
cmp     byte ptr es:[bx], 9
jz      short loc_463F3
cmp     byte ptr es:[bx], 2Dh ; '-'
jnz     short loc_46413
mov     si, 1
add     word ptr [bp+arg_0], si
jmp     short loc_46415

loc_46413:
xor     si, si

loc_46415:
mov     [bp+var_2], 0
mov     [bp+var_4], 0
jmp     short loc_46450

loc_46421:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
xor     cx, cx
mov     bx, 0Ah
call    sub_46A18
les     bx, [bp+arg_0]
push    dx
push    ax
mov     al, es:[bx]
cbw
cwd
pop     bx
pop     cx
add     bx, ax
adc     cx, dx
add     bx, 0FFD0h
adc     cx, 0FFFFh
mov     [bp+var_2], cx
mov     [bp+var_4], bx
inc     word ptr [bp+arg_0]

loc_46450:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 30h ; '0'
jl      short loc_4645F
cmp     byte ptr es:[bx], 39h ; '9'
jle     short loc_46421

loc_4645F:
or      si, si
jz      short loc_46476
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
neg     dx
neg     ax
sbb     dx, 0
mov     [bp+var_2], dx
mov     [bp+var_4], ax

loc_46476:
mov     dx, [bp+var_2]
mov     ax, [bp+var_4]
pop     si
mov     sp, bp
pop     bp
retf    4
sub_463EA endp



; Attributes: bp-based frame

sub_46483 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_463EA
pop     bp
retf    4
sub_46483 endp

seg055 ends


; Segment type: Pure code
seg056 segment byte public 'CODE' use16
assume cs:seg056
;org 4
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46494 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 4
push    si
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_25E94
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
call    sub_46E60
mov     si, ax
les     bx, [bp+arg_0]
add     bx, si
dec     bx
mov     [bp+var_2], es
mov     [bp+var_4], bx
or      si, si
jle     short loc_464E9
cmp     byte ptr es:[bx], 5Ch ; '\'
jz      short loc_464E9
cmp     byte ptr es:[bx], 2Fh ; '/'
jz      short loc_464E9
cmp     byte ptr es:[bx], 3Ah ; ':'
jz      short loc_464E9
inc     [bp+var_4]
mov     bx, [bp+var_4]
mov     byte ptr es:[bx], 5Ch ; '\'
inc     [bp+var_4]
mov     bx, [bp+var_4]
mov     byte ptr es:[bx], 0

loc_464E9:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_46494 endp

seg056 ends


; Segment type: Pure code
seg057 segment byte public 'CODE' use16
assume cs:seg057
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_464F0 proc far

arg_4= byte ptr  0Ah

push    bp
mov     bp, sp
mov     ah, [bp+arg_4]
int     21h             ; DOS -
pop     bp
retf    6
sub_464F0 endp



; Attributes: bp-based frame

sub_464FC proc far

arg_2= dword ptr  8
arg_6= byte ptr  0Ch

push    bp
mov     bp, sp
mov     ah, [bp+arg_6]
push    ds
lds     dx, [bp+arg_2]
clc
int     21h             ; DOS -
pop     ds
jnb     short loc_46512
mov     ds:0, ax
mov     ax, 0FFFFh

loc_46512:
pop     bp
retf    8
sub_464FC endp

seg057 ends


; Segment type: Pure code
seg058 segment byte public 'CODE' use16
assume cs:seg058
;org 6
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46516 proc near

arg_0= word ptr  4
arg_2= dword ptr  6
arg_6= dword ptr  0Ah

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_6]
or      ax, word ptr [bp+arg_6+2]
jz      short loc_4653F
push    word ptr [bp+arg_6+2]
push    word ptr [bp+arg_6]
push    word ptr [bp+arg_2+2]
push    word ptr [bp+arg_2]
push    [bp+arg_0]
call    sub_46DA1
les     bx, [bp+arg_6]
add     bx, [bp+arg_0]
mov     byte ptr es:[bx], 0

loc_4653F:
les     bx, [bp+arg_2]
mov     byte ptr es:[bx], 0
pop     bp
retn    0Ah
sub_46516 endp



; Attributes: bp-based frame

sub_4654A proc far

var_56= dword ptr -56h
var_52= byte ptr -52h
var_51= byte ptr -51h
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= dword ptr  0Eh
arg_C= dword ptr  12h
arg_10= dword ptr  16h

push    bp
mov     bp, sp
sub     sp, 56h
push    si
push    di
xor     di, di
mov     ax, word ptr [bp+arg_C]
or      ax, word ptr [bp+arg_C+2]
jz      short loc_46563
les     bx, [bp+arg_C]
mov     byte ptr es:[bx], 0

loc_46563:
mov     ax, word ptr [bp+arg_8]
or      ax, word ptr [bp+arg_8+2]
jz      short loc_46572
les     bx, [bp+arg_8]
mov     byte ptr es:[bx], 0

loc_46572:
mov     ax, word ptr [bp+arg_4]
or      ax, word ptr [bp+arg_4+2]
jz      short loc_46581
les     bx, [bp+arg_4]
mov     byte ptr es:[bx], 0

loc_46581:
mov     ax, word ptr [bp+arg_0]
or      ax, word ptr [bp+arg_0+2]
jz      short loc_46590
les     bx, [bp+arg_0]
mov     byte ptr es:[bx], 0

loc_46590:
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_52]
mov     word ptr [bp+var_56+2], es
mov     word ptr [bp+var_56], bx
jmp     short loc_465A2

loc_4659F:
inc     word ptr [bp+arg_10]

loc_465A2:
les     bx, [bp+arg_10]
cmp     byte ptr es:[bx], 20h ; ' '
jz      short loc_4659F
push    word ptr [bp+arg_10+2]
push    bx
call    sub_46E60
mov     si, ax
mov     ax, si
cmp     ax, 50h ; 'P'
jle     short loc_465C0
mov     si, 50h ; 'P'

loc_465C0:
les     bx, [bp+var_56]
mov     byte ptr es:[bx], 0
inc     word ptr [bp+var_56]
push    word ptr [bp+var_56+2]
push    word ptr [bp+var_56]
push    word ptr [bp+arg_10+2]
push    word ptr [bp+arg_10]
push    si
call    sub_46DA1
add     word ptr [bp+var_56], si
les     bx, [bp+var_56]
mov     byte ptr es:[bx], 0
xor     si, si

loc_465E8:
dec     word ptr [bp+var_56]
les     bx, [bp+var_56]
mov     al, es:[bx]
cbw
cmp     ax, 2Fh ; '/'
jnz     short loc_465FA
jmp     loc_46672

loc_465FA:
jg      short loc_4660F
or      ax, ax
jz      short loc_46646
cmp     ax, 2Ah ; '*'
jnz     short loc_46608
jmp     loc_466B2

loc_46608:
cmp     ax, 2Eh ; '.'
jz      short loc_46623
jmp     short loc_465E8

loc_4660F:
cmp     ax, 3Ah ; ':'
jz      short loc_46646
cmp     ax, 3Fh ; '?'
jnz     short loc_4661C
jmp     loc_466B2

loc_4661C:
cmp     ax, 5Ch ; '\'
jz      short loc_46672
jmp     short loc_465E8

loc_46623:
or      si, si
jnz     short loc_465E8
test    di, 2
jnz     short loc_465E8
or      di, 2
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0]
push    word ptr [bp+var_56+2]
push    word ptr [bp+var_56]
mov     ax, 5
push    ax
call    sub_46516
jmp     short loc_465E8

loc_46646:
or      si, si
jz      short loc_46672
inc     word ptr [bp+var_56]
les     bx, [bp+var_56]
cmp     byte ptr es:[bx], 0
jz      short loc_4665A
or      di, 8

loc_4665A:
push    word ptr [bp+arg_8+2]
push    word ptr [bp+arg_8]
push    word ptr [bp+var_56+2]
push    word ptr [bp+var_56]
mov     ax, 42h ; 'B'
push    ax
call    sub_46516
dec     word ptr [bp+var_56]
jmp     short loc_466C0

loc_46672:
or      si, si
jz      short loc_46679
jmp     loc_465E8

loc_46679:
inc     si
inc     word ptr [bp+var_56]
les     bx, [bp+var_56]
cmp     byte ptr es:[bx], 0
jz      short loc_4668A
or      di, 4

loc_4668A:
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4]
push    word ptr [bp+var_56+2]
push    word ptr [bp+var_56]
mov     ax, 9
push    ax
call    sub_46516
dec     word ptr [bp+var_56]
les     bx, [bp+var_56]
cmp     byte ptr es:[bx], 3Ah ; ':'
jz      short loc_466C0
cmp     byte ptr es:[bx], 0
jz      short loc_466C0
jmp     loc_465E8

loc_466B2:
or      si, si
jz      short loc_466B9
jmp     loc_465E8

loc_466B9:
or      di, 1
jmp     loc_465E8

loc_466C0:
les     bx, [bp+var_56]
cmp     byte ptr es:[bx], 3Ah ; ':'
jnz     short loc_466E5
cmp     [bp+var_51], 0
jz      short loc_466D3
or      di, 10h

loc_466D3:
push    word ptr [bp+arg_C+2]
push    word ptr [bp+arg_C]
push    ss
lea     ax, [bp+var_51]
push    ax
mov     ax, 3
push    ax
call    sub_46516

loc_466E5:
mov     ax, di
pop     di
pop     si
mov     sp, bp
pop     bp
retf    14h
sub_4654A endp



; Attributes: bp-based frame

sub_466EF proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
jmp     short loc_466F7

loc_466F4:
inc     word ptr [bp+arg_4]

loc_466F7:
les     bx, [bp+arg_0]
inc     word ptr [bp+arg_0]
mov     al, es:[bx]
les     bx, [bp+arg_4]
mov     es:[bx], al
or      al, al
jnz     short loc_466F4
mov     dx, word ptr [bp+arg_4+2]
mov     ax, bx
pop     bp
retf    8
sub_466EF endp



; Attributes: bp-based frame

sub_46713 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= dword ptr  0Eh
arg_C= dword ptr  12h
arg_10= dword ptr  16h

push    bp
mov     bp, sp
mov     ax, word ptr [bp+arg_C]
or      ax, word ptr [bp+arg_C+2]
jz      short loc_46740
les     bx, [bp+arg_C]
cmp     byte ptr es:[bx], 0
jz      short loc_46740
mov     al, es:[bx]
les     bx, [bp+arg_10]
mov     es:[bx], al
inc     word ptr [bp+arg_C]
inc     word ptr [bp+arg_10]
mov     bx, word ptr [bp+arg_10]
mov     byte ptr es:[bx], 3Ah ; ':'
inc     word ptr [bp+arg_10]

loc_46740:
mov     ax, word ptr [bp+arg_8]
or      ax, word ptr [bp+arg_8+2]
jz      short loc_46781
les     bx, [bp+arg_8]
cmp     byte ptr es:[bx], 0
jz      short loc_46781
push    word ptr [bp+arg_10+2]
push    word ptr [bp+arg_10]
push    word ptr [bp+arg_8+2]
push    bx
push    cs
call    near ptr sub_466EF
mov     word ptr [bp+arg_10+2], dx
mov     word ptr [bp+arg_10], ax
les     bx, [bp+arg_10]
dec     bx
cmp     byte ptr es:[bx], 5Ch ; '\'
jz      short loc_46781
mov     bx, ax
dec     bx
cmp     byte ptr es:[bx], 2Fh ; '/'
jz      short loc_46781
mov     bx, ax
mov     byte ptr es:[bx], 5Ch ; '\'
inc     word ptr [bp+arg_10]

loc_46781:
mov     ax, [bp+arg_4]
or      ax, [bp+arg_6]
jz      short loc_4679F
push    word ptr [bp+arg_10+2]
push    word ptr [bp+arg_10]
push    [bp+arg_6]
push    [bp+arg_4]
push    cs
call    near ptr sub_466EF
mov     word ptr [bp+arg_10+2], dx
mov     word ptr [bp+arg_10], ax

loc_4679F:
mov     ax, [bp+arg_0]
or      ax, [bp+arg_2]
jz      short loc_467BD
push    word ptr [bp+arg_10+2]
push    word ptr [bp+arg_10]
push    [bp+arg_2]
push    [bp+arg_0]
push    cs
call    near ptr sub_466EF
mov     word ptr [bp+arg_10+2], dx
mov     word ptr [bp+arg_10], ax

loc_467BD:
les     bx, [bp+arg_10]
mov     byte ptr es:[bx], 0
pop     bp
retf    14h
sub_46713 endp

seg058 ends


; Segment type: Pure code
seg059 segment byte public 'CODE' use16
assume cs:seg059
;org 8
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_467C8 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
mov     bx, si
mov     ah, 3Eh
int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                        ; BX = file handle
jnb     short loc_467DF
mov     ds:0, ax
mov     ax, 0FFFFh
jmp     short loc_467E1

loc_467DF:
xor     ax, ax

loc_467E1:
pop     si
pop     bp
retf    2
sub_467C8 endp

seg059 ends


; Segment type: Pure code
seg060 segment byte public 'CODE' use16
assume cs:seg060
;org 6
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_467E6 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
mov     cx, [bp+arg_0]
push    ds
lds     dx, [bp+arg_2]
mov     ah, 3Ch
int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)
                        ; CX = attributes for file
                        ; DS:DX -> ASCIZ filename (may include drive and path)
pop     ds
jnb     short loc_46800
mov     ds:0, ax
mov     ax, 0FFFFh
jmp     short $+2

loc_46800:
pop     si
pop     bp
retf    6
sub_467E6 endp

seg060 ends


; Segment type: Pure code
seg061 segment byte public 'CODE' use16
assume cs:seg061
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46805 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
mov     ah, 2Ah
int     21h             ; DOS - GET CURRENT DATE
                        ; Return: DL = day, DH = month, CX = year
                        ; AL = day of the week (0=Sunday, 1=Monday, etc.)
les     bx, [bp+arg_0]
mov     es:[bx], cx
mov     es:[bx+2], dx
pop     bp
retf    4
sub_46805 endp



; Attributes: bp-based frame

sub_4681A proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
mov     ah, 2Ch
int     21h             ; DOS - GET CURRENT TIME
                        ; Return: CH = hours, CL = minutes, DH = seconds
                        ; DL = hundredths of seconds
les     bx, [bp+arg_0]
mov     es:[bx], cx
mov     es:[bx+2], dx
pop     bp
retf    4
sub_4681A endp

seg061 ends


; Segment type: Pure code
seg062 segment byte public 'CODE' use16
assume cs:seg062
;org 0Fh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_4682F proc far

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    si
mov     dx, ds:1Ch
xor     ax, ax
mov     word ptr [bp+var_8+2], dx
mov     word ptr [bp+var_8], ax
jmp     short loc_468AB

loc_46844:
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_46855

loc_4684F:
inc     word ptr [bp+var_4]
inc     word ptr [bp+var_8]

loc_46855:
les     bx, [bp+var_4]
mov     al, es:[bx]
les     bx, [bp+var_8]
cmp     al, es:[bx]
jz      short loc_4684F
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_4689F
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 3Dh ; '='
jnz     short loc_4689F
inc     word ptr [bp+var_8]
mov     si, 0C17Eh
jmp     short loc_46889

loc_4687D:
les     bx, [bp+var_8]
mov     al, es:[bx]
mov     [si], al
inc     word ptr [bp+var_8]
inc     si

loc_46889:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jnz     short loc_4687D
mov     byte ptr [si], 0
mov     ax, 0C17Eh
mov     dx, ds
jmp     short loc_468BB

loc_4689C:
inc     word ptr [bp+var_8]

loc_4689F:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jnz     short loc_4689C
inc     word ptr [bp+var_8]

loc_468AB:
les     bx, [bp+var_8]
cmp     byte ptr es:[bx], 0
jz      short loc_468B7
jmp     loc_46844

loc_468B7:
xor     dx, dx
mov     ax, dx

loc_468BB:
pop     si
mov     sp, bp
pop     bp
retf    4
sub_4682F endp

seg062 ends


; Segment type: Pure code
seg063 segment byte public 'CODE' use16
assume cs:seg063
;org 2
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_468C2 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     ah, 35h
int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; Return: ES:BX = value of interrupt vector
mov     ax, bx
mov     dx, es
pop     bp
retf    2
sub_468C2 endp



; Attributes: bp-based frame

sub_468D4 proc far

arg_0= dword ptr  6
arg_4= byte ptr  0Ah

push    bp
mov     bp, sp
push    ds
lds     dx, [bp+arg_0]
mov     al, [bp+arg_4]
mov     ah, 25h
int     21h             ; DOS - SET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; DS:DX = new vector to be used for specified interrupt
pop     ds
pop     bp
retf    6
sub_468D4 endp

seg063 ends


; Segment type: Pure code
seg064 segment byte public 'CODE' use16
assume cs:seg064
;org 7
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
push    ax
push    bx
push    cx
push    dx
push    es
push    ds
push    si
push    di
push    bp
mov     bp, seg seg091
mov     ds, bp
assume ds:seg091
mov     bp, sp
mov     ax, sp
mov     word_57AB2, ax
mov     ax, [bp+2]
and     ax, 0FFh
push    ax
push    word ptr [bp+10h]
push    word ptr [bp+0]
push    word ptr [bp+4]
call    dword_57AAE
mov     [bp+10h], ax
pop     bp
pop     di
pop     si
pop     ds
assume ds:nothing
pop     es
pop     dx
pop     cx
pop     bx
pop     ax
iret


; Attributes: bp-based frame

sub_4691D proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
les     bx, [bp+arg_0]
mov     word ptr ds:0C200h, es
mov     ds:0C1FEh, bx
mov     ax, 24h ; '$'
push    ax
push    cs
mov     ax, 7
push    ax
call    sub_468D4
pop     bp
retf    4
sub_4691D endp

push    bp
mov     bp, sp
push    si
push    di
mov     ax, [bp+6]
mov     sp, ds:0C202h
pop     bp
pop     di
pop     si
pop     ds
pop     es
pop     dx
pop     cx
pop     bx
inc     sp
inc     sp
iret
pop     di
pop     si
pop     bp
retf    2


; Attributes: bp-based frame

sub_4695A proc far

arg_0= word ptr  6
arg_E= byte ptr  14h

push    bp
mov     bp, sp
push    si
push    di
mov     ax, 54h ; 'T'
push    ax
xor     ax, ax
push    ax
push    ax
call    sub_464F0
mov     ax, [bp+arg_0]
mov     bp, ds:0C202h
add     bp, 1Ah
mov     sp, bp
or      [bp+arg_E], 1
pop     bx
pop     cx
pop     dx
pop     si
pop     di
pop     bp
pop     ds
pop     es
iret
sub_4695A endp ; sp-analysis failed

seg064 ends


; Segment type: Pure code
seg065 segment byte public 'CODE' use16
assume cs:seg065
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
pop     di
pop     si
pop     bp
retf    2


; Attributes: bp-based frame

sub_4698B proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
push    di
cmp     [bp+arg_0], 0
jnz     short loc_4699B
mov     [bp+arg_0], 1

loc_4699B:
mov     ax, [bp+arg_0]
les     si, [bp+arg_2]
mov     bp, es:[si+0Ah]
mov     sp, es:[si]
push    word ptr es:[si+6]
push    word ptr es:[si+8]
mov     di, es:[si+0Ch]
mov     si, es:[si+10h]
retf    4
sub_4698B endp

pop     di
pop     si
pop     bp
retf    6


; Attributes: bp-based frame

sub_469C1 proc far

var_s0= word ptr  0
arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
mov     ax, [bp+4]
mov     bx, [bp+2]
push    di
les     di, [bp+arg_0]
pop     word ptr es:[di+0Ch]
mov     es:[di+8], bx
mov     es:[di+6], ax
lea     ax, [bp+arg_0]
mov     es:[di], ax
mov     cx, [bp+var_s0]
mov     es:[di+0Ah], cx
mov     es:[di+10h], si
xor     ax, ax
pop     di
pop     si
pop     bp
retf    4
sub_469C1 endp

seg065 ends


; Segment type: Pure code
seg066 segment byte public 'CODE' use16
assume cs:seg066
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_469F5 proc far

arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     cx, [bp+arg_4]
mov     dx, [bp+arg_2]
mov     bx, [bp+arg_6]
mov     ah, 42h
int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                        ; AL = method:
                        ; 0-from beginnig,1-from current,2-from end
jnb     short loc_46A14
mov     ds:0, ax
mov     dx, 0FFFFh
mov     ax, dx
jmp     short $+2

loc_46A14:
pop     bp
retf    8
sub_469F5 endp

seg066 ends


; Segment type: Pure code
seg067 segment byte public 'CODE' use16
assume cs:seg067
;org 8
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_46A18 proc far
push    bp
mov     bp, ax
mov     ax, dx
mul     bx
xchg    ax, cx
mul     bp
add     cx, ax
mov     ax, bp
mul     bx
add     dx, cx
pop     bp
retf
sub_46A18 endp

seg067 ends


; Segment type: Pure code
seg068 segment byte public 'CODE' use16
assume cs:seg068
;org 0Ch
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46A2C proc far

arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
push    si
push    di
push    ds
mov     dx, word ptr [bp+arg_6+2]
mov     ax, word ptr [bp+arg_6]
cmp     dx, word ptr [bp+arg_2+2]
ja      short loc_46A4A
jb      short loc_46A44
cmp     ax, word ptr [bp+arg_2]
jnb     short loc_46A4A

loc_46A44:
std
mov     ax, 1
jmp     short loc_46A4D

loc_46A4A:
cld
xor     ax, ax

loc_46A4D:
lds     si, [bp+arg_6]
les     di, [bp+arg_2]
mov     cx, [bp+arg_0]
or      ax, ax
jz      short loc_46A60
add     si, cx
dec     si
add     di, cx
dec     di

loc_46A60:
test    di, 1
jz      short loc_46A6A
jcxz    short loc_46A79
movsb
dec     cx

loc_46A6A:
sub     si, ax
sub     di, ax
shr     cx, 1
rep movsw
jnb     short loc_46A79
add     si, ax
add     di, ax
movsb

loc_46A79:
cld
pop     ds
pop     di
pop     si
pop     bp
retf    0Ah
sub_46A2C endp

seg068 ends


; Segment type: Pure code
seg069 segment byte public 'CODE' use16
assume cs:seg069
;org 1
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46A81 proc far

arg_0= byte ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
mov     al, [bp+arg_0]
push    ds
lds     dx, [bp+arg_2]
mov     ah, 3Dh
int     21h             ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
                        ; DS:DX -> ASCIZ filename
                        ; AL = access mode
                        ; 0 - read, 1 - write, 2 - read & write
pop     ds
jnb     short loc_46A9B
mov     ds:0, ax
mov     ax, 0FFFFh
jmp     short $+2

loc_46A9B:
pop     si
pop     bp
retf    6
sub_46A81 endp

seg069 ends


; Segment type: Pure code
seg070 segment byte public 'CODE' use16
assume cs:seg070
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_46AA0 proc far
mov     es, dx
xchg    ax, bx
mov     dx, es:[bx+2]
push    bx
mov     bx, es:[bx]
or      cx, cx
jge     short loc_46ABC
not     ax
not     cx
add     ax, 1
adc     cx, 0
jmp     short loc_46AFD
align 2

loc_46ABC:
add     bx, ax
jnb     short loc_46AC4
add     dx, 1000h

loc_46AC4:
mov     ah, cl
mov     cl, 4
shl     ah, cl
xor     al, al
add     dx, ax
mov     ch, bl
shr     bx, cl
add     dx, bx
mov     al, ch
and     ax, 0Fh
pop     bx
mov     es:[bx], ax
mov     es:[bx+2], dx
retf
mov     es, dx
xchg    ax, bx
mov     dx, es:[bx+2]
push    bx
mov     bx, es:[bx]
or      cx, cx
jge     short loc_46AFD
not     ax
not     cx
add     ax, 1
adc     cx, 0
jmp     short loc_46ABC

loc_46AFD:
sub     bx, ax
jnb     short loc_46B05
sub     dx, 1000h

loc_46B05:
mov     ah, cl
mov     cl, 4
shl     ah, cl
xor     al, al
sub     dx, ax
mov     ch, bl
shr     bx, cl
add     dx, bx
mov     al, ch
and     ax, 0Fh
pop     bx
mov     es:[bx], ax
mov     es:[bx+2], dx
retf
sub_46AA0 endp

seg070 ends


; Segment type: Pure code
seg071 segment byte public 'CODE' use16
assume cs:seg071
;org 3
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_46B23 proc far
or      cx, cx
jge     short loc_46B34
not     bx
not     cx
add     bx, 1
adc     cx, 0
jmp     short loc_46B60
align 2

loc_46B34:
add     ax, bx
jnb     short loc_46B3C
add     dx, 1000h

loc_46B3C:
mov     ch, cl
mov     cl, 4
shl     ch, cl
add     dh, ch
mov     ch, al
shr     ax, cl
add     dx, ax
mov     al, ch
and     ax, 0Fh
retf
or      cx, cx
jge     short loc_46B60
not     bx
not     cx
add     bx, 1
adc     cx, 0
jmp     short loc_46B34

loc_46B60:
sub     ax, bx
jnb     short loc_46B68
sub     dx, 1000h

loc_46B68:
mov     bh, cl
mov     cl, 4
shl     bh, cl
xor     bl, bl
sub     dx, bx
mov     ch, al
shr     ax, cl
add     dx, ax
mov     al, ch
and     ax, 0Fh
retf
sub_46B23 endp

seg071 ends


; Segment type: Pure code
seg072 segment byte public 'CODE' use16
assume cs:seg072
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_46B7E proc far
push    cx
mov     ch, al
mov     cl, 4
shr     ax, cl
add     dx, ax
mov     al, ch
mov     ah, bl
shr     bx, cl
pop     cx
add     cx, bx
mov     bl, ah
and     ax, 0Fh
and     bx, 0Fh
cmp     dx, cx
jnz     short locret_46B9F
cmp     ax, bx

locret_46B9F:
retf
sub_46B7E endp

seg072 ends


; Segment type: Pure code
seg073 segment byte public 'CODE' use16
assume cs:seg073
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_46BA0 proc far
push    di
mov     di, cx
mov     ch, dh
mov     cl, 4
shl     dx, cl
shr     ch, cl
add     dx, ax
adc     ch, 0
mov     ax, di
shl     di, cl
shr     ah, cl
add     bx, di
adc     ah, 0
sub     dx, bx
sbb     ch, ah
mov     al, ch
cbw
xchg    ax, dx
pop     di
retf
sub_46BA0 endp

seg073 ends


; Segment type: Pure code
seg074 segment byte public 'CODE' use16
assume cs:seg074
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46BC5 proc far

arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     cx, [bp+arg_0]
mov     bx, [bp+arg_6]
mov     ah, 3Fh ; '?'
push    ds
lds     dx, [bp+arg_2]
int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                        ; BX = file handle, CX = number of bytes to read
                        ; DS:DX -> buffer
pop     ds
jb      short loc_46BDB
jmp     short loc_46BE1

loc_46BDB:
mov     ds:0, ax
mov     ax, 0FFFFh

loc_46BE1:
pop     bp
retf    8
sub_46BC5 endp

seg074 ends


; Segment type: Pure code
seg075 segment byte public 'CODE' use16
assume cs:seg075
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46BE5 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
lds     si, [bp+arg_0]
les     di, [bp+arg_4]
mov     ax, ds
mov     dx, es
cmp     ax, dx
ja      short loc_46C07
cmp     si, di
ja      short loc_46C07
cld

loc_46BFE:
rep movsb
pop     ds
pop     di
pop     si
pop     bp
retf    8

loc_46C07:
add     si, cx
add     di, cx
dec     si
dec     di
std
jmp     short loc_46BFE
sub_46BE5 endp

seg075 ends


; Segment type: Pure code
seg076 segment byte public 'CODE' use16
assume cs:seg076
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46C10 proc far

arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
les     di, [bp+arg_4]
mov     cx, [bp+arg_2]
mov     al, [bp+arg_0]
mov     ah, al
cld
test    di, 1
jz      short loc_46C2B
jcxz    short loc_46C32
stosb
dec     cx

loc_46C2B:
shr     cx, 1
rep stosw
jnb     short loc_46C32
stosb

loc_46C32:
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
pop     di
pop     si
pop     bp
retf    8
sub_46C10 endp

seg076 ends


; Segment type: Pure code
seg077 segment byte public 'CODE' use16
assume cs:seg077
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46C3E proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
push    [bp+arg_6]
push    [bp+arg_4]
call    sub_46E60
mov     cx, [bp+arg_6]
mov     bx, [bp+arg_4]
add     bx, ax
push    cx
push    bx
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46E60
inc     ax
push    ax
call    sub_46A2C
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
pop     bp
retf    8
sub_46C3E endp

push    bp
mov     bp, sp
push    si
push    di
push    word ptr [bp+0Eh]
push    word ptr [bp+0Ch]
call    sub_46E60
mov     di, ax
push    word ptr [bp+0Ah]
push    word ptr [bp+8]
call    sub_46E60
mov     si, ax
cmp     si, [bp+6]
jle     short loc_46C9F
mov     si, [bp+6]

loc_46C9F:
push    word ptr [bp+0Ah]
push    word ptr [bp+8]
mov     dx, [bp+0Eh]
mov     ax, [bp+0Ch]
add     ax, di
push    dx
push    ax
push    si
call    sub_46A2C
mov     ax, di
add     ax, si
les     bx, [bp+0Ch]
add     bx, ax
mov     byte ptr es:[bx], 0
mov     dx, [bp+0Eh]
mov     ax, [bp+0Ch]
pop     di
pop     si
pop     bp
retf    0Ah
seg077 ends


; Segment type: Pure code
seg078 segment byte public 'CODE' use16
assume cs:seg078
;org 0Eh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46CCE proc far

arg_0= byte ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    si
push    ds
lds     si, [bp+arg_2]
mov     bl, [bp+arg_0]

loc_46CD9:
lodsw
cmp     al, bl
jz      short loc_46CF1
or      al, al
jz      short loc_46CEA
cmp     ah, bl
jz      short loc_46CF2
or      ah, ah
jnz     short loc_46CD9

loc_46CEA:
pop     ds
xor     dx, dx
mov     ax, dx
jmp     short loc_46CF8

loc_46CF1:
dec     si

loc_46CF2:
mov     dx, ds
mov     ax, si
dec     ax
pop     ds

loc_46CF8:
pop     si
pop     bp
retf    6
sub_46CCE endp

push    bp
mov     bp, sp
sub     sp, 4
push    word ptr [bp+0Ah]
push    word ptr [bp+8]
call    sub_46E60
les     bx, [bp+8]
add     bx, ax
dec     bx
mov     word ptr [bp-2], es
mov     [bp-4], bx
jmp     short loc_46D31

loc_46D1C:
les     bx, [bp-4]
mov     al, es:[bx]
cmp     al, [bp+6]
jnz     short loc_46D2E
mov     dx, [bp-2]
mov     ax, bx
jmp     short loc_46D4F

loc_46D2E:
dec     word ptr [bp-4]

loc_46D31:
mov     ax, [bp-4]
cmp     ax, [bp+8]
ja      short loc_46D1C
les     bx, [bp-4]
mov     al, es:[bx]
cmp     al, [bp+6]
jnz     short loc_46D4B
mov     dx, [bp-2]
mov     ax, bx
jmp     short loc_46D4F

loc_46D4B:
xor     dx, dx
mov     ax, dx

loc_46D4F:
mov     sp, bp
pop     bp
retf    6
seg078 ends


; Segment type: Pure code
seg079 segment byte public 'CODE' use16
assume cs:seg079
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46D55 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
cld
push    ds
les     di, [bp+arg_0]
lds     si, [bp+arg_4]

loc_46D62:
lodsb
scasb
jnz     short loc_46D6A
or      al, al
jnz     short loc_46D62

loc_46D6A:
sub     al, es:[di-1]
cbw
pop     ds
pop     di
pop     si
pop     bp
retf    8
sub_46D55 endp

seg079 ends


; Segment type: Pure code
seg080 segment byte public 'CODE' use16
assume cs:seg080
;org 6
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46D76 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    [bp+arg_2]
push    [bp+arg_0]
push    [bp+arg_6]
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_0]
call    sub_46E60
inc     ax
push    ax
call    sub_46A2C
mov     dx, [bp+arg_6]
mov     ax, [bp+arg_4]
pop     bp
retf    8
sub_46D76 endp



; Attributes: bp-based frame

sub_46DA1 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
push    si
push    di
mov     di, [bp+arg_0]
push    [bp+arg_4]
push    [bp+arg_2]
call    sub_46E60
mov     si, ax
cmp     si, di
jle     short loc_46DBC
mov     si, di

loc_46DBC:
push    [bp+arg_4]
push    [bp+arg_2]
push    [bp+arg_8]
push    [bp+arg_6]
push    si
call    sub_46A2C
cmp     si, di
jge     short loc_46DE9
mov     dx, [bp+arg_8]
mov     ax, [bp+arg_6]
add     ax, si
push    dx
push    ax
mov     ax, di
sub     ax, si
push    ax
xor     ax, ax
push    ax
call    sub_46C10

loc_46DE9:
mov     dx, [bp+arg_8]
mov     ax, [bp+arg_6]
pop     di
pop     si
pop     bp
retf    0Ah
sub_46DA1 endp

seg080 ends


; Segment type: Pure code
seg081 segment byte public 'CODE' use16
assume cs:seg081
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46DF5 proc far

var_2= byte ptr -2
var_1= byte ptr -1
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 2
jmp     short loc_46E33

loc_46DFD:
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F01
mov     [bp+var_2], al
les     bx, [bp+arg_0]
mov     al, es:[bx]
cbw
push    ax
call    sub_46F01
mov     [bp+var_1], al
mov     al, [bp+var_2]
cmp     al, [bp+var_1]
jl      short loc_46E45
mov     al, [bp+var_2]
cmp     al, [bp+var_1]
jg      short loc_46E53
inc     word ptr [bp+arg_4]
inc     word ptr [bp+arg_0]

loc_46E33:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_46DFD
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jle     short loc_46E4A

loc_46E45:
mov     ax, 0FFFFh
jmp     short loc_46E5A

loc_46E4A:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jge     short loc_46E58

loc_46E53:
mov     ax, 1
jmp     short loc_46E5A

loc_46E58:
xor     ax, ax

loc_46E5A:
mov     sp, bp
pop     bp
retf    8
sub_46DF5 endp

seg081 ends


; Segment type: Pure code
seg082 segment byte public 'CODE' use16
assume cs:seg082
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46E60 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
push    di
les     di, [bp+arg_0]
mov     al, 0
mov     cx, 0FFFFh
cld
repne scasb
mov     ax, cx
not     ax
dec     ax
pop     di
pop     si
pop     bp
retf    4
sub_46E60 endp

seg082 ends


; Segment type: Pure code
seg083 segment byte public 'CODE' use16
assume cs:seg083
;org 0Bh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46E7B proc far

arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
push    si
push    di
cld
push    ds
les     di, [bp+arg_2]
mov     si, di
mov     cx, [bp+arg_0]
jcxz    short loc_46EAD
mov     bx, cx
xor     al, al
repne scasb
sub     bx, cx
mov     cx, bx
mov     di, si
lds     si, [bp+arg_6]
repe cmpsb
mov     al, [si-1]
xor     ah, ah
mov     cl, es:[di-1]
xor     ch, ch
sub     ax, cx

loc_46EAA:
pop     ds
jmp     short loc_46EB0

loc_46EAD:
xchg    ax, cx
jmp     short loc_46EAA

loc_46EB0:
pop     di
pop     si
pop     bp
retf    0Ah
sub_46E7B endp

seg083 ends


; Segment type: Pure code
seg084 segment byte public 'CODE' use16
assume cs:seg084
;org 6
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46EB6 proc far

var_4= dword ptr -4
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
jmp     short loc_46EEE

loc_46EBE:
les     bx, [bp+arg_0]
mov     word ptr [bp+var_4+2], es
mov     word ptr [bp+var_4], bx
jmp     short loc_46EE2

loc_46EC9:
les     bx, [bp+arg_4]
mov     al, es:[bx]
les     bx, [bp+var_4]
cmp     al, es:[bx]
jnz     short loc_46EDF
mov     dx, word ptr [bp+arg_4+2]
mov     ax, word ptr [bp+arg_4]
jmp     short loc_46EFB

loc_46EDF:
inc     word ptr [bp+var_4]

loc_46EE2:
les     bx, [bp+var_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_46EC9
inc     word ptr [bp+arg_4]

loc_46EEE:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 0
jnz     short loc_46EBE
xor     dx, dx
mov     ax, dx

loc_46EFB:
mov     sp, bp
pop     bp
retf    8
sub_46EB6 endp

seg084 ends


; Segment type: Pure code
seg085 segment byte public 'CODE' use16
assume cs:seg085
;org 1
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46F01 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     ah, 0
mov     bx, ax
test    byte ptr [bx-7EDFh], 4
jz      short loc_46F1C
mov     al, [bp+arg_0]
mov     ah, 0
add     ax, 20h ; ' '
jmp     short loc_46F21

loc_46F1C:
mov     al, [bp+arg_0]
mov     ah, 0

loc_46F21:
pop     bp
retf    2
sub_46F01 endp



; Attributes: bp-based frame

sub_46F25 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
mov     al, [bp+arg_0]
mov     ah, 0
mov     bx, ax
test    byte ptr [bx-7EDFh], 8
jz      short loc_46F40
mov     al, [bp+arg_0]
mov     ah, 0
add     ax, 0FFE0h
jmp     short loc_46F45

loc_46F40:
mov     al, [bp+arg_0]
mov     ah, 0

loc_46F45:
pop     bp
retf    2
sub_46F25 endp

seg085 ends


; Segment type: Pure code
seg086 segment byte public 'CODE' use16
assume cs:seg086
;org 9
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46F49 proc far

arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
push    si
mov     ax, 41h ; 'A'
push    ax
push    [bp+arg_2]
push    [bp+arg_0]
xor     ax, ax
push    ax
call    sub_464FC
mov     si, ax
cmp     si, 0FFFFh
jz      short loc_46F68
xor     si, si

loc_46F68:
mov     ax, si
pop     si
pop     bp
retf    4
sub_46F49 endp

seg086 ends


; Segment type: Pure code
seg087 segment byte public 'CODE' use16
assume cs:seg087
;org 0Fh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46F6F proc far

arg_0= word ptr  6
arg_2= dword ptr  8
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     cx, [bp+arg_0]
mov     bx, [bp+arg_6]
mov     ah, 40h ; '@'
push    ds
lds     dx, [bp+arg_2]
int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
pop     ds
jb      short loc_46F85
jmp     short loc_46F8B

loc_46F85:
mov     ds:0, ax
mov     ax, 0FFFFh

loc_46F8B:
pop     bp
retf    8
sub_46F6F endp

seg087 ends


; Segment type: Pure code
seg088 segment byte public 'CODE' use16
assume cs:seg088
;org 0Fh
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_46F8F proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
mov     bx, ss
mov     es, bx
lea     bx, [bp+arg_4]
mov     [bp+var_2], es
mov     [bp+var_4], bx
push    [bp+arg_2]
push    [bp+arg_0]
push    [bp+var_2]
push    bx
call    sub_46FB5
mov     sp, bp
pop     bp
retf
sub_46F8F endp



; Attributes: bp-based frame

sub_46FB5 proc far

var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_6= dword ptr -6
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 1Ah
push    si
jmp     loc_47202

loc_46FBF:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 25h ; '%'
jz      short loc_46FE5
cmp     byte ptr es:[bx], 0Ah
jnz     short loc_46FD5
mov     dx, 0Dh
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output

loc_46FD5:
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
mov     dx, ax
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output
jmp     loc_471FF

loc_46FE5:
xor     si, si
inc     word ptr [bp+arg_4]
mov     bx, ss
mov     es, bx
lea     bx, [bp+var_6]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
dec     word ptr [bp+var_6]
mov     bx, word ptr [bp+var_6]
mov     byte ptr es:[bx], 0
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 6Ch ; 'l'
jnz     short loc_47010
inc     word ptr [bp+arg_4]
mov     si, 1

loc_47010:
les     bx, [bp+arg_4]
mov     al, es:[bx]
cbw
cmp     ax, 73h ; 's'
jnz     short loc_4701F
jmp     loc_471D4

loc_4701F:
jg      short loc_47031
cmp     ax, 63h ; 'c'
jnz     short loc_47029
jmp     loc_471C4

loc_47029:
cmp     ax, 64h ; 'd'
jz      short loc_4703C
jmp     loc_4720E

loc_47031:
cmp     ax, 78h ; 'x'
jnz     short loc_47039
jmp     loc_4713A

loc_47039:
jmp     loc_4720E

loc_4703C:
or      si, si
jz      short loc_47056
les     bx, [bp+arg_0]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
mov     [bp+var_14], dx
mov     [bp+var_16], ax
add     word ptr [bp+arg_0], 4
jmp     short loc_47067

loc_47056:
les     bx, [bp+arg_0]
mov     ax, es:[bx]
cwd
mov     [bp+var_14], dx
mov     [bp+var_16], ax
add     word ptr [bp+arg_0], 2

loc_47067:
cmp     [bp+var_14], 8000h
jnz     short loc_4707F
cmp     [bp+var_16], 0
jnz     short loc_4707F
mov     word ptr [bp+var_6+2], ds
mov     word ptr [bp+var_6], 8222h
jmp     loc_47103

loc_4707F:
mov     ax, [bp+var_16]
or      ax, [bp+var_14]
jnz     short loc_47091
mov     dx, 30h ; '0'
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output
jmp     loc_471FF

loc_47091:
cmp     [bp+var_14], 0
jg      short loc_470B9
jl      short loc_4709F
cmp     [bp+var_16], 0
jnb     short loc_470B9

loc_4709F:
mov     [bp+var_2], 1
mov     dx, [bp+var_14]
mov     ax, [bp+var_16]
neg     dx
neg     ax
sbb     dx, 0
mov     [bp+var_14], dx
mov     [bp+var_16], ax
jmp     short loc_470F5

loc_470B9:
mov     [bp+var_2], 0
jmp     short loc_470F5

loc_470C0:
dec     word ptr [bp+var_6]
xor     dx, dx
mov     ax, 0Ah
push    dx
push    ax
push    [bp+var_14]
push    [bp+var_16]
call    sub_1ED5A
add     al, 30h ; '0'
les     bx, [bp+var_6]
mov     es:[bx], al
xor     dx, dx
mov     ax, 0Ah
push    dx
push    ax
push    [bp+var_14]
push    [bp+var_16]
call    sub_1ED51
mov     [bp+var_14], dx
mov     [bp+var_16], ax

loc_470F5:
mov     ax, [bp+var_16]
or      ax, [bp+var_14]
jnz     short loc_470C0
cmp     [bp+var_2], 0
jz      short loc_4710A

loc_47103:
mov     [bp+var_2], 2Dh ; '-'
jmp     short loc_4710F

loc_4710A:
mov     [bp+var_2], 0

loc_4710F:
cmp     [bp+var_2], 0
jz      short loc_4712E
mov     dx, [bp+var_2]
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output
jmp     short loc_4712E

loc_4711E:
les     bx, [bp+var_6]
mov     al, es:[bx]
cbw
mov     dx, ax
inc     word ptr [bp+var_6]
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output

loc_4712E:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx], 0
jnz     short loc_4711E
jmp     loc_471FF

loc_4713A:
or      si, si
jz      short loc_47154
les     bx, [bp+arg_0]
mov     dx, es:[bx+2]
mov     ax, es:[bx]
mov     [bp+var_18], dx
mov     [bp+var_1A], ax
add     word ptr [bp+arg_0], 4
jmp     short loc_4719F

loc_47154:
les     bx, [bp+arg_0]
mov     ax, es:[bx]
xor     dx, dx
mov     [bp+var_18], dx
mov     [bp+var_1A], ax
add     word ptr [bp+arg_0], 2
jmp     short loc_4719F

loc_47168:
dec     word ptr [bp+var_6]
mov     ax, [bp+var_1A]
and     ax, 0Fh
mov     [bp+var_2], ax
cmp     ax, 9
jle     short loc_4717F
add     [bp+var_2], 57h ; 'W'
jmp     short loc_47183

loc_4717F:
add     [bp+var_2], 30h ; '0'

loc_47183:
mov     al, byte ptr [bp+var_2]
les     bx, [bp+var_6]
mov     es:[bx], al
mov     dx, [bp+var_18]
mov     ax, [bp+var_1A]
mov     cl, 4
call    sub_1EE33
mov     [bp+var_18], dx
mov     [bp+var_1A], ax

loc_4719F:
mov     ax, [bp+var_1A]
or      ax, [bp+var_18]
jnz     short loc_47168
jmp     short loc_471B9

loc_471A9:
les     bx, [bp+var_6]
mov     al, es:[bx]
cbw
mov     dx, ax
inc     word ptr [bp+var_6]
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output

loc_471B9:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx], 0
jnz     short loc_471A9
jmp     short loc_471FF

loc_471C4:
les     bx, [bp+arg_0]
mov     dx, es:[bx]
add     word ptr [bp+arg_0], 2
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output
jmp     short loc_471FF

loc_471D4:
les     bx, [bp+arg_0]
les     bx, es:[bx]
mov     word ptr [bp+var_6+2], es
mov     word ptr [bp+var_6], bx
add     word ptr [bp+arg_0], 4
jmp     short loc_471F6

loc_471E6:
les     bx, [bp+var_6]
mov     al, es:[bx]
cbw
mov     dx, ax
inc     word ptr [bp+var_6]
mov     ah, 2
int     21h             ; DOS - DISPLAY OUTPUT
                        ; DL = character to send to standard output

loc_471F6:
les     bx, [bp+var_6]
cmp     byte ptr es:[bx], 0
jnz     short loc_471E6

loc_471FF:
inc     word ptr [bp+arg_4]

loc_47202:
les     bx, [bp+arg_4]
cmp     byte ptr es:[bx], 0
jz      short loc_4720E
jmp     loc_46FBF

loc_4720E:
pop     si
mov     sp, bp
pop     bp
retf    8
sub_46FB5 endp

seg088 ends


; Segment type: Pure code
seg089 segment byte public 'CODE' use16
assume cs:seg089
;org 5
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing



sub_47215 proc near
xor     si, si
xor     di, di
mov     bx, 0Ah
cmp     dx, bx
jnb     short loc_47226
div     bx
xchg    si, dx
jmp     short locret_47241

loc_47226:
mov     cx, 20h ; ' '

loc_47229:
shl     ax, 1
rcl     dx, 1
rcl     si, 1
rcl     di, 1
test    di, di
jnz     short loc_47239
cmp     si, bx
jb      short loc_4723F

loc_47239:
sub     si, bx
sbb     di, 0
inc     ax

loc_4723F:
loop    loc_47229

locret_47241:
retn
sub_47215 endp




sub_47242 proc near
mov     byte ptr es:[di], 0
xor     bp, bp

loc_47248:
mov     bx, ax
or      bx, dx
jz      short loc_4725F
push    di
call    sub_47215
pop     di
mov     bx, si
add     bl, 30h ; '0'
mov     es:[di], bx
inc     di
inc     bp
jmp     short loc_47248

loc_4725F:
or      bp, bp
jnz     short loc_4726A
mov     word ptr es:[di], 30h ; '0'
inc     di
inc     bp

loc_4726A:
mov     bx, bp
sub     di, bx
dec     bx

loc_4726F:
jle     short locret_47282
mov     al, es:[di]
mov     ah, es:[bx+di]
mov     es:[di], ah
mov     es:[bx+di], al
inc     di
dec     bx
dec     bx
jmp     short loc_4726F

locret_47282:
retn
sub_47242 endp




sub_47283 proc near
or      dx, dx
jns     short loc_47296
mov     byte ptr es:[di], 2Dh ; '-'
inc     di
not     dx
not     ax
add     ax, 1
adc     dx, 0

loc_47296:
jmp     short sub_47242
sub_47283 endp



; Attributes: bp-based frame

sub_47298 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
les     ax, [bp+arg_4]
mov     dx, es
les     di, [bp+arg_0]
call    sub_47242
pop     ds
pop     di
pop     si
pop     bp
retf    8
sub_47298 endp



; Attributes: bp-based frame

sub_472B0 proc far

arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
les     ax, [bp+arg_4]
mov     dx, es
les     di, [bp+arg_0]
call    sub_47283
pop     ds
pop     di
pop     si
pop     bp
retf    8
sub_472B0 endp



; Attributes: bp-based frame

sub_472C8 proc far

arg_0= dword ptr  6
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
xor     dx, dx
les     di, [bp+arg_0]
mov     ax, [bp+arg_4]
call    sub_47242
pop     ds
pop     di
pop     si
pop     bp
retf    6
sub_472C8 endp



; Attributes: bp-based frame

sub_472E0 proc far

arg_0= dword ptr  6
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    si
push    di
push    ds
les     di, [bp+arg_0]
mov     ax, [bp+arg_4]
cwd
call    sub_47283
pop     ds
pop     di
pop     si
pop     bp
retf    6
sub_472E0 endp

align 10h
seg089 ends


; Segment type: Pure code
seg090 segment byte public 'CODE' use16
assume cs:seg090
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
db 24h, 2Ah, 24h, 2Ah, 24h, 2Ah, 5, 0Bh
db 0, 2, 54h, 4Ch, 49h, 4Eh, 4Bh, 0
word_47310 dw 0
word_47312 dw 0
byte_47314 db 0



sub_47315 proc far

; FUNCTION CHUNK AT 430C SIZE 0000001C BYTES

push    bx
int     21h             ; DOS -
pop     bx
cld
jb      short loc_4731D
retn

loc_4731D:
push    ax
mov     ax, 9
mov     cx, 2
jmp     loc_4B60C
sub_47315 endp




sub_47327 proc near
cmp     bx, 0FFFFh
jz      short locret_47331
mov     ah, 3Eh ; '>'
call    near ptr sub_47315

locret_47331:
retn
sub_47327 endp




sub_47332 proc far

; FUNCTION CHUNK AT 430C SIZE 0000001C BYTES

cmp     ah, 40h ; '@'
jnz     short near ptr sub_47315
call    near ptr sub_47315
cmp     ax, cx
jz      short locret_47346
mov     ax, 7
xor     cx, cx
jmp     loc_4B60C

locret_47346:
retn
sub_47332 endp ; sp-analysis failed




sub_47347 proc near
lodsb
cmp     al, 0
jz      short locret_47358
push    ds
mov     ds, cs:word_47310
call    sub_4B5C7
pop     ds
jmp     short sub_47347

locret_47358:
retn
sub_47347 endp

push    ds
lds     si, ds:14Eh
call    sub_47347
pop     ds
retn



sub_47363 proc far

; FUNCTION CHUNK AT 430C SIZE 0000001C BYTES

push    ax
push    cx
push    dx
int     21h             ; DOS -
pop     dx
pop     cx
pop     bx
cld
jb      short loc_4736F
retn

loc_4736F:
push    bx
push    cx
push    ds
cmp     ax, 4
jnz     short loc_47397
mov     ds, cs:word_47310
mov     word ptr ds:156h, 0
mov     cx, ds:1BDh
jcxz    short loc_47397
lds     si, ds:1B9h

loc_4738C:
mov     bx, [si]
and     bx, bx
jnz     short loc_473A5
add     si, 6
loop    loc_4738C

loc_47397:
pop     ds
pop     bx
pop     cx
push    ds
push    dx
mov     ax, 4
mov     cx, 4
jmp     loc_4B60C

loc_473A5:
mov     word ptr [si], 0
pop     ds
push    dx
call    sub_47327
pop     dx
pop     cx
pop     ax
jmp     short near ptr sub_47363
sub_47363 endp




sub_473B3 proc near
push    ax
add     ax, 0Fh
shr     ax, 1
shr     ax, 1
shr     ax, 1
shr     ax, 1
mov     es, word ptr ds:6
sub     ds:4, ax
add     ds:6, ax
pop     ax
retn
sub_473B3 endp

db 2Eh, 6Dh, 61h, 70h, 2Eh, 6Fh, 62h, 6Ah
db 2Eh, 65h, 78h, 65h, 2Eh, 6Ch, 69h, 62h



sub_473DD proc near
xor     dx, dx
xor     ax, ax
mov     cx, 3
mov     si, 13D8h
call    sub_4743C
mov     si, 13E4h
call    sub_4743C
mov     ds:1B1h, si
mov     ds:1B3h, bp
mov     ds:1BDh, dx
add     ax, 60h ; '`'
push    ax
add     ax, 7
shr     ax, 1
shr     ax, 1
shr     ax, 1
call    sub_47451
pop     cx
mov     ds:1B9h, di
mov     word ptr ds:1BBh, es
mov     word ptr ds:1AFh, es
xor     ax, ax
rep stosw
mov     word ptr ds:160h, 20h ; ' '
mov     ax, 20h ; ' '
call    sub_47451
mov     ds:158h, di
mov     word ptr ds:15Ah, es
mov     word ptr ds:15Ch, 200h
mov     ds:15Eh, di
retn
sub_473DD endp




sub_4743C proc near
push    ds

loc_4743D:
mov     bx, [si+2]
and     bx, bx
jz      short loc_4744D
add     ax, cx
inc     dx
mov     si, [si]
mov     ds, bx
jmp     short loc_4743D

loc_4744D:
mov     bp, ds
pop     ds
retn
sub_4743C endp




sub_47451 proc near
cmp     ax, ds:4
jnb     short loc_4746A
mov     es, word ptr ds:6
add     ds:6, ax
sub     ds:4, ax
sub     ds:8, ax
xor     di, di
retn

loc_4746A:
jmp     loc_477BB
sub_47451 endp




sub_4746D proc near
push    ax
push    bx
push    cx
push    dx
push    si
push    di
sub     dx, dx
mov     bx, 25Dh
mov     cl, 4

loc_4747A:
mov     ax, [bx+2]
add     ax, 0Fh
jnb     short loc_47486
add     dx, 1000h

loc_47486:
shr     ax, cl
add     dx, ax
add     dx, 8
add     bx, 6
cmp     bx, 28Dh
jbe     short loc_4747A

loc_47496:
mov     ax, ds:8
sub     ax, dx
jb      short loc_474A7
cmp     ax, 100h
ja      short loc_474AA
call    sub_47577
jnb     short loc_47496

loc_474A7:
jmp     loc_477BB

loc_474AA:
mov     di, ds:261h
mov     bx, 25Dh

loc_474B1:
cmp     di, [bx+4]
jbe     short loc_474EA
cmp     bx, 28Dh
jz      short loc_474CF
mov     ax, [bx+2]
add     ax, 0Fh
mov     cl, 4
shr     ax, cl
neg     ax
add     ax, [bx+0Ah]
cmp     di, ax
ja      short loc_47519

loc_474CF:
push    di
push    ds
mov     cx, [bx+2]
mov     es, di
mov     ds, word ptr [bx+4]
std
dec     cx
mov     si, cx
mov     di, cx
inc     cx
rep movsb
cld
pop     ds
pop     di
mov     [bx+4], di
jmp     short loc_474AA

loc_474EA:
jz      short loc_47519
mov     ax, [bx-4]
add     ax, 0Fh
mov     cl, 4
shr     ax, cl
add     ax, [bx-2]
cmp     di, ax
jb      short loc_47519
push    di
push    ds
mov     cx, [bx+2]
mov     es, di
sub     di, di
sub     si, si
mov     ds, word ptr [bx+4]
shr     cx, 1
rep movsw
jnb     short loc_47512
movsb

loc_47512:
pop     ds
pop     di
mov     [bx+4], di
jmp     short loc_474AA

loc_47519:
mov     ax, [bx+2]
add     ax, 0Fh
mov     cl, 4
shr     ax, cl
cmp     byte ptr ds:110h, 1
jz      short loc_4753F
mov     cx, dx
mul     word ptr ds:8
div     cx
mov     dx, cx
add     ax, 8
cmp     ax, 0FFFh
jb      short loc_4753F
mov     ax, 0FFFh

loc_4753F:
add     di, ax
mov     cl, 4
shl     ax, cl
mov     [bx], ax
add     bx, 6
cmp     bx, 28Dh
ja      short loc_47553
jmp     loc_474B1

loc_47553:
mov     ds:6, di
neg     di
add     di, ds:0Ah
mov     ds:4, di
mov     ax, ds:291h
mov     ss:14h, ax
mov     ss:18h, ax
mov     dx, ds:28Fh
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_4746D endp




sub_47577 proc near
push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    es
mov     ax, ds:195h
cmp     ax, 0FFFFh
stc
jz      short loc_475E5
cmp     word ptr ds:199h, 0
jz      short loc_475AD

loc_4758E:
push    si
push    di
mov     es, word ptr ds:199h
mov     dx, es:0Ch
xor     cx, cx
mov     ax, 4200h
mov     bx, ds:13Ah
call    near ptr sub_47315
pop     di
pop     si
mov     word ptr ds:199h, 0

loc_475AD:
mov     es, word ptr ds:195h
mov     cx, es:6
mov     ax, es:0
cmp     ax, 0FFFFh
jz      short loc_475C8
cmp     ax, ds:191h
jbe     short loc_475CB
mov     ax, 0FFFFh

loc_475C8:
mov     ds:191h, ax

loc_475CB:
mov     ds:195h, ax
add     ds:0Ah, cx
add     ds:4, cx
add     ds:8, cx
cmp     word ptr ds:13B2h, 0
jz      short loc_475E4
call    sub_4761B

loc_475E4:
clc

loc_475E5:
pop     es
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
mov     word ptr ds:19Bh, 0
retn
sub_47577 endp




sub_475F3 proc near
push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    es
mov     ax, ds:195h
cmp     ax, 0FFFFh
stc
jz      short loc_475E5
cmp     ax, ds:199h
jnz     short loc_475AD
mov     ax, 3D00h
push    ds
lds     dx, ds:14Eh
call    near ptr sub_47363
pop     ds
mov     ds:13Ah, ax
jmp     loc_4758E
sub_475F3 endp




sub_4761B proc near
push    ds
mov     bx, ds:13AAh
add     ds:13AAh, cx
mov     es, word ptr ds:13AAh
mov     cx, ds:13B0h
inc     cx
and     cl, 0FEh
mov     si, cx
dec     si
dec     si
mov     di, si
shr     cx, 1
mov     ds, bx
rep movsw
pop     ds
retn
sub_4761B endp




sub_4763E proc near
mov     di, 25Dh
mov     ax, ds:6

loc_47644:
mov     word ptr [di+2], 0
mov     [di+4], ax
add     di, 6
cmp     di, 28Dh
jbe     short loc_47644
mov     ax, ds:10h
mov     ds:28Fh, ax
mov     ax, ds:12h
mov     ds:291h, ax
mov     ds:28Bh, ax
mov     byte ptr ds:110h, 0
call    sub_4746D
retn
sub_4763E endp




sub_4766D proc far

; FUNCTION CHUNK AT 430C SIZE 0000001C BYTES

push    es
push    di
mov     di, 3758h
sub     di, cx
push    di
push    ax
push    bx
push    dx
jcxz    short loc_47683
push    ds
pop     es
shr     cx, 1
rep movsw
jnb     short loc_47683
movsb

loc_47683:
cmp     word ptr ds:199h, 0
jz      short loc_476BC
push    es
push    ds
pop     es
xor     bx, bx
mov     ds, word ptr ds:199h
mov     ax, [bx+4]
sub     ax, [bx+0Ch]
mov     cx, 2000h
cmp     cx, ax
jbe     short loc_476A2
mov     cx, ax

loc_476A2:
mov     ax, cx
mov     si, [bx+0Ch]
add     [bx+0Ch], ax
add     si, 0Eh
mov     di, 3758h
shr     cx, 1
rep movsw
jnb     short loc_476B7
movsb

loc_476B7:
push    es
pop     ds
pop     es
jmp     short loc_476D4

loc_476BC:
mov     ah, 3Fh ; '?'
mov     bx, ds:13Ah
mov     dx, 3758h
mov     cx, 2000h
add     ds:1B5h, cx
adc     word ptr ds:1B7h, 0
call    near ptr sub_47315

loc_476D4:
or      ax, ax
jz      short loc_476E5
add     ax, 3758h
mov     ds:13Ch, ax
pop     dx
pop     bx
pop     ax
pop     si
pop     di
pop     es
retn

loc_476E5:
push    word ptr ds:150h
push    word ptr ds:14Eh
mov     ax, 0Ch
mov     cx, 4
jmp     loc_4B60C
sub_4766D endp ; sp-analysis failed




sub_476F6 proc near
xchg    bx, si
push    bx
push    cx
push    dx
push    ds
push    ax
mov     ax, 4200h
mov     dx, si
mov     cl, 4
shl     dx, cl
xchg    dl, dh
sub     cx, cx
xchg    dl, cl
mov     bx, ds:138h
call    near ptr sub_47332
mov     cx, 2000h
cmp     si, ds:120h
jnz     short loc_47720
mov     cx, ds:124h

loc_47720:
pop     ax
xor     dx, dx
mov     ds, word ptr [si+1293h]
call    near ptr sub_47332
pop     ds
pop     dx
pop     cx
pop     bx
xchg    bx, si
retn
sub_476F6 endp




sub_47731 proc near
cmp     bx, ds:120h
jle     short loc_47741
mov     ds:120h, bx
mov     word ptr ds:124h, 0

loc_47741:
cmp     word ptr ds:4, 200h
jb      short loc_47756
mov     ax, 2000h
call    sub_473B3
inc     word ptr ds:1A1h
jmp     short loc_477B6
align 2

loc_47756:
cmp     word ptr ds:19Fh, 200h
jb      short loc_47772
sub     word ptr ds:19Fh, 200h
push    ax
mov     ax, ds:19Dh
add     ax, ds:19Fh
mov     es, ax
pop     ax
jmp     short loc_477B6
align 2

loc_47772:
cmp     word ptr ds:1A1h, 2
jnb     short loc_47780
call    sub_475F3
jnb     short loc_47741
jmp     short loc_477BB

loc_47780:
push    bx
mov     bx, ds:12Ch
mov     cx, 82h

loc_47788:
dec     cx
jcxz    short loc_477BB
add     bx, 3
and     bl, 0FEh
cmp     bx, 100h
jb      short loc_47799
xor     bx, bx

loc_47799:
cmp     word ptr [bx+1293h], 0FFFEh
jnb     short loc_47788
cmp     bx, ds:122h
jz      short loc_47788
mov     ah, 40h ; '@'
call    sub_476F6
mov     es, word ptr [bx+1293h]
mov     word ptr [bx+1293h], 0FFFEh
pop     bx

loc_477B6:
mov     word ptr [bx+1293h], es
retn

loc_477BB:
xor     ax, ax
mov     ss:0BFB0h, ax
mov     ss:0BFB2h, ax
xor     si, si
push    si
mov     ax, 6
push    ax
push    ss
pop     ds
mov     byte ptr ds:9A63h, 0
call    sub_3129B
sub_47731 endp ; sp-analysis failed




sub_477D8 proc near
call    sub_47731
push    di
sub     di, di
mov     cx, 1000h
sub     ax, ax
rep stosw
pop     di
retn
sub_477D8 endp




sub_477E7 proc near
sub     bx, bx
jmp     short loc_47813
align 2

loc_477EC:
cmp     word ptr [bx+1293h], 0FFFFh
jnz     short loc_47804
mov     es, word ptr ds:1293h
sub     di, di
sub     ax, ax
mov     cx, 1000h
rep stosw
mov     word ptr [bx+1293h], es

loc_47804:
cmp     word ptr [bx+1293h], 0FFFEh
jz      short loc_47810
mov     ah, 40h ; '@'
call    sub_476F6

loc_47810:
add     bx, 2

loc_47813:
cmp     bx, ds:120h
jbe     short loc_477EC
retn
sub_477E7 endp




sub_4781A proc near
push    ax
push    bx
push    cx
push    dx
call    sub_4A8BB
mov     bx, dx
mov     di, cx
mov     cl, 9
shr     bx, cl
mov     cl, 4
shl     dx, cl
add     di, dx
and     di, 1FFFh
shl     bx, 1
mov     ax, [bx+1293h]
cmp     ax, 0FFFEh
jnb     short loc_47849
mov     es, ax

loc_47840:
mov     ds:122h, bx
pop     dx
pop     cx
pop     bx
pop     ax
retn

loc_47849:
jz      short loc_47850
call    sub_477D8
jmp     short loc_47840

loc_47850:
call    sub_47731
mov     ah, 3Fh ; '?'
call    sub_476F6
jmp     short loc_47840
sub_4781A endp




sub_4785A proc near
push    ax
push    bx
push    cx

loc_4785D:
push    ds
mov     ds, cs:word_47310
call    sub_4781A
pop     ds
mov     bx, cx
mov     cx, 2000h
sub     cx, di
cmp     cx, ax
jb      short loc_478B2
mov     cx, ax
shr     cx, 1
rep movsw
jnb     short loc_4787B
movsb

loc_4787B:
mov     ds, cs:word_47310
mov     cx, ds:122h
cmp     cx, ds:120h
jnz     short loc_47894
cmp     di, ds:124h
jb      short loc_47894
mov     ds:124h, di

loc_47894:
cmp     cs:word_47312, 0
jnz     short loc_478AE
cmp     cx, ds:12Eh
jg      short loc_478C1
jl      short loc_478AE
cmp     di, ds:130h
jb      short loc_478AE
mov     ds:130h, di

loc_478AE:
pop     cx
pop     bx
pop     ax
retn

loc_478B2:
add     bx, cx
sub     ax, cx
shr     cx, 1
rep movsw
jnb     short loc_478BD
movsb

loc_478BD:
mov     cx, bx
jmp     short loc_4785D

loc_478C1:
mov     ds:12Eh, cx
mov     ds:130h, di
jmp     short loc_478AE
sub_4785A endp




sub_478CB proc near
push    ax
push    cx
push    si
push    bp

loc_478CF:
call    sub_4781A
push    cx
push    ds
push    es
mov     si, di
xchg    bx, cx
call    sub_4781A
xchg    bx, cx
mov     cx, 2000h
cmp     si, di
jb      short loc_478E9
sub     cx, si
add     cx, di

loc_478E9:
sub     cx, di
cmp     cx, ax
jb      short loc_478F1
mov     cx, ax

loc_478F1:
pop     ds
mov     bp, cx
shr     cx, 1
rep movsw
jnb     short loc_478FB
movsb

loc_478FB:
pop     ds
pop     cx
sub     ax, bp
add     bx, bp
add     cx, bp
or      ax, ax
jnz     short loc_478CF
mov     cx, ds:122h
cmp     cx, ds:120h
jnz     short loc_4791B
cmp     di, ds:124h
jb      short loc_4791B
mov     ds:124h, di

loc_4791B:
cmp     cs:word_47312, 0
jnz     short loc_47935
cmp     cx, ds:12Eh
jg      short loc_4793A
jl      short loc_47935
cmp     di, ds:130h
jb      short loc_47935
mov     ds:130h, di

loc_47935:
pop     bp
pop     si
pop     cx
pop     ax
retn

loc_4793A:
mov     ds:12Eh, cx
mov     ds:130h, di
jmp     short loc_47935
sub_478CB endp




sub_47944 proc near
push    ds
pop     es
jmp     loc_47A42

loc_47949:
mov     ds:14Eh, si
mov     word ptr ds:150h, es
push    si
push    es
push    ax
push    bx
push    cx
push    dx
push    es
push    ds
push    es
push    si
mov     al, ds:110h
inc     al
cbw
push    ax
push    ss
pop     ds
call    sub_313DD
pop     ds
pop     es
pop     dx
pop     cx
pop     bx
pop     ax
mov     word ptr ds:199h, 0
cmp     byte ptr ds:110h, 1
jz      short loc_479C2
mov     ax, 3D00h
push    ds
lds     dx, ds:14Eh
call    near ptr sub_47363
pop     ds
cmp     word ptr ds:156h, 0
jz      short loc_47996
les     si, ds:1ADh
mov     es:[si], ax

loc_47996:
mov     ds:13Ah, ax
cmp     word ptr ds:19Bh, 0
jz      short loc_47A10
push    ax
les     di, ds:14Eh
xor     al, al
mov     cx, 0FFFFh
repne scasb
pop     ax
cmp     word ptr es:[di-5], 4C2Eh
jnz     short loc_479BD
cmp     word ptr es:[di-3], 4249h
jz      short loc_47A10

loc_479BD:
call    sub_47A86
jmp     short loc_47A10

loc_479C2:
les     si, ds:1ADh
mov     ax, es:[si+4]
mov     ds:13BEh, ax
mov     ax, es:[si+2]
mov     ds:1A7h, ax
mov     si, ds:191h
cmp     si, 0FFFFh
jz      short loc_479F3
mov     es, si
mov     ax, ds:14Eh
cmp     ax, es:8
jnz     short loc_479F3
mov     ax, ds:150h
cmp     ax, es:0Ah
jz      short loc_47A63

loc_479F3:
les     si, ds:1ADh
mov     ax, es:[si]
and     ax, ax
jnz     short loc_47A0A
push    ds
lds     dx, ds:14Eh
mov     ax, 3D00h
call    near ptr sub_47363
pop     ds

loc_47A0A:
mov     ds:13Ah, ax
call    sub_47A77

loc_47A10:
mov     si, ds:13Ch
call    loc_482A0
mov     bx, ds:13Ah
cmp     byte ptr ds:110h, 1
jnz     short loc_47A5A
cmp     word ptr ds:199h, 0
jnz     short loc_47A70
les     si, ds:1ADh
mov     word ptr es:[si], 0

loc_47A32:
call    sub_47327

loc_47A35:
mov     word ptr ds:13Ah, 0FFFFh
pop     es
pop     si
add     word ptr ds:1ADh, 6

loc_47A42:
mov     word ptr ds:199h, 0
cmp     word ptr es:[si-2], 0
jz      short locret_47A59
les     si, es:[si-4]
add     si, 4
jmp     loc_47949

locret_47A59:
retn

loc_47A5A:
cmp     word ptr ds:156h, 0
jz      short loc_47A32
jmp     short loc_47A35

loc_47A63:
mov     word ptr ds:199h, es
mov     word ptr es:0Ch, 0
jmp     short loc_47A10

loc_47A70:
push    bx
call    sub_47B56
pop     bx
jmp     short loc_47A32
sub_47944 endp




sub_47A77 proc near
push    ax
mov     bx, ax
xor     cx, cx
mov     dx, cx
mov     ax, 4200h
call    near ptr sub_47315
pop     ax
retn
sub_47A77 endp




sub_47A86 proc near
mov     bx, ax
mov     ax, 4202h
xor     cx, cx
xor     dx, dx
call    near ptr sub_47315
push    dx
push    ax
mov     bx, ds:13Ah
mov     ax, 4200h
xor     cx, cx
xor     dx, dx
call    near ptr sub_47315
pop     ax
pop     dx
and     dx, dx
jnz     short loc_47AEC
mov     di, ax
add     ax, 1Dh
jb      short loc_47AEC
mov     cl, 4
shr     ax, cl
mov     bx, ds:4
sub     bx, ax
jb      short loc_47AEC
cmp     bx, 1000h
jb      short loc_47AEC
mov     cx, ds:0Eh
mov     bx, cx
shl     cx, 1
rcl     dl, 1
add     cx, bx
adc     dl, 0
mov     bx, ds:0Ch
sub     bx, ds:0Ah
add     bx, ax
shl     bx, 1
rcl     dh, 1
shl     bx, 1
rcl     dh, 1
cmp     dh, dl
ja      short loc_47AEC
jb      short loc_47AF3
cmp     bx, cx
jbe     short loc_47AF3

loc_47AEC:
mov     word ptr ds:19Bh, 0
retn

loc_47AF3:
mov     dx, di
mov     bx, ds:0Ah
sub     bx, ax
mov     ds:0Ah, bx
sub     ds:4, ax
sub     ds:8, ax
mov     cx, dx
mov     dx, ax
mov     es, bx
xor     di, di
mov     ax, ds:195h
mov     word ptr ds:195h, es
cmp     ax, 0FFFFh
jnz     short loc_47B21
mov     word ptr ds:191h, es
jmp     short loc_47B29

loc_47B21:
push    ds
mov     ds, ax
mov     word ptr ds:2, es
pop     ds

loc_47B29:
stosw
mov     ax, 0FFFFh
stosw
mov     ax, cx
stosw
mov     ax, dx
stosw
mov     ax, ds:14Eh
stosw
mov     ax, ds:150h
stosw
xor     ax, ax
stosw
mov     dx, di
mov     ds:199h, bx
push    ds
pop     es
mov     ds, bx
mov     bx, es:13Ah
mov     ah, 3Fh ; '?'
call    near ptr sub_47315
push    es
pop     ds
retn
sub_47A86 endp




sub_47B56 proc near
push    es
mov     es, word ptr ds:191h
xor     bx, bx
mov     ax, es:[bx+2]
mov     ds:191h, ax
mov     ax, es:[bx+6]
mov     word ptr ds:19Dh, es
add     ds:19Fh, ax
mov     ax, es
cmp     ax, ds:195h
jnz     short loc_47B92
mov     ax, ds:19Dh
sub     ax, ds:6
add     ax, ds:19Fh
mov     ds:4, ax
xor     ax, ax
mov     ds:19Fh, ax
dec     ax
mov     ds:191h, ax
mov     ds:195h, ax

loc_47B92:
pop     es
retn
sub_47B56 endp

db 12h, 0, 26h, 0, 26h, 0

loc_47B9A:
mov     dx, es:[di+0Ch]
mov     bp, ds:265h
sub     bp, 12h

loc_47BA5:
mov     bx, es:[di+10h]
add     di, cs:[bx+894h]
cmp     di, bp
jnb     short loc_47C2E
cmp     dx, es:[di+0Ch]
jnb     short loc_47C2E
cmp     word ptr es:[di+0Ah], 2
jb      short loc_47BA5
mov     ds:140h, di
mov     ax, es:[di+0Ch]
mul     word ptr ds:1A7h
sub     ax, ds:1B5h
sbb     dx, ds:1B7h
and     dx, dx
jnz     short loc_47BE4
cmp     ax, 2000h
jnb     short loc_47BE4
mov     si, 3758h
add     si, ax
jmp     loc_482DD

loc_47BE4:
sub     ax, 2000h
sbb     dx, 0
push    ax
and     ax, 0E000h
mov     cx, dx
mov     dx, ax
add     ds:1B5h, dx
adc     ds:1B7h, cx
mov     bx, ds:13Ah
mov     ax, 4201h
call    near ptr sub_47315
mov     ah, 3Fh ; '?'
mov     bx, ds:13Ah
mov     dx, 3758h
mov     cx, 2000h
add     ds:1B5h, cx
adc     word ptr ds:1B7h, 0
call    near ptr sub_47315
add     ax, 3758h
mov     ds:13Ch, ax
pop     si
and     si, 1FFFh
add     si, 3758h
jmp     loc_482DD

loc_47C2E:
mov     ds:140h, di
retn



sub_47C33 proc near
push    si
mov     ax, 4201h
mov     bx, ds:13Ah
xor     cx, cx
mov     dx, cx
call    near ptr sub_47315
mov     ds:139Ch, ax
mov     ds:139Eh, dx
pop     si
lodsw
mov     dx, ax
mov     ds:13A0h, ax
lodsw
mov     cx, ax
mov     ds:13A2h, ax
lodsw
cmp     ax, 80h
jnb     short loc_47CC6
cbw
shl     al, 1
xchg    al, ah
mov     ds:13AEh, ax
add     dx, ax
adc     cx, 0
mov     ds:13A4h, dx
mov     ds:13A6h, cx
mov     ax, 4202h
xor     dx, dx
mov     cx, dx
mov     bx, ds:13Ah
call    near ptr sub_47315
jb      short loc_47CC6
sub     ax, ds:13A4h
sbb     dx, ds:13A6h
jnz     short loc_47CC6
and     ax, ax
jz      short loc_47CC6
mov     ds:13ACh, ax
add     ax, ds:13AEh
jb      short loc_47CC6
mov     ax, 4200h
mov     bx, ds:13Ah
mov     dx, ds:13A4h
mov     cx, ds:13A6h
call    near ptr sub_47315
jb      short loc_47CC6
mov     ah, 3Fh ; '?'
mov     cx, 8
mov     dx, 1394h
call    near ptr sub_47315
jb      short loc_47CC6
cmp     ax, 8
jnz     short loc_47CC6
cmp     word ptr ds:1394h, 2BADh
jz      short loc_47CDA

loc_47CC6:
mov     dx, ds:139Ch
mov     cx, ds:139Eh
mov     ax, 4200h
mov     bx, ds:13Ah
call    near ptr sub_47315
stc
retn

loc_47CDA:
mov     ax, ds:13AEh
add     ax, ds:13ACh
mov     ds:13B0h, ax
add     ax, 0Fh
mov     cl, 4
shr     ax, cl
mov     bx, ax
mov     ax, ds:186h
mul     word ptr ds:139Ah
add     ax, ds:26Bh
sub     ax, ds:269h
mov     bp, ax
mov     ax, 10h
mul     word ptr ds:1398h
add     ax, ds:271h
sub     ax, ds:26Fh
add     bp, ax
mov     ax, 12h
mul     word ptr ds:1396h
add     ax, ds:265h
sub     ax, ds:263h
add     ax, bp
jle     short loc_47D33
mov     cl, 4
shr     ax, cl
add     ax, bx
add     ax, 100h
add     ax, bx
cmp     ax, ds:4
ja      short loc_47D97

loc_47D33:
mov     ax, bx
mov     bx, ds:4
sub     bx, ax
jb      short loc_47D97
cmp     bx, 100h
jb      short loc_47D97
mov     bx, ds:0Ah
sub     bx, ax
mov     ds:0Ah, bx
sub     ds:4, ax
sub     ds:8, ax
mov     ds:13B2h, ax
mov     ds:13AAh, bx
mov     word ptr ds:13A8h, 0
mov     ax, 4200h
mov     bx, ds:13Ah
mov     dx, ds:13A0h
mov     cx, ds:13A2h
call    near ptr sub_47315
jb      short loc_47D97
push    ds
mov     ah, 3Fh ; '?'
mov     bx, ds:13Ah
mov     cx, ds:13AEh
mov     ds:13B4h, cx
mov     dx, ds:13A8h
mov     ds:13BAh, dx
mov     ds, word ptr ds:13AAh
call    near ptr sub_47315
pop     ds
jnb     short loc_47D9D

loc_47D97:
call    sub_47DDD
jmp     loc_47CC6

loc_47D9D:
mov     ax, 4200h
mov     bx, ds:13Ah
mov     dx, ds:13A4h
mov     cx, ds:13A6h
call    near ptr sub_47315
jb      short loc_47D97
push    ds
mov     ah, 3Fh ; '?'
mov     bx, ds:13Ah
mov     cx, ds:13ACh
mov     dx, ds:13B4h
mov     ds, word ptr ds:13AAh
call    near ptr sub_47315
pop     ds
jb      short loc_47D97
call    sub_47E15
jb      short loc_47D97
call    sub_47DDD
les     di, ds:1ADh
mov     word ptr es:[di+4], 1
retn
sub_47C33 endp ; sp-analysis failed




sub_47DDD proc near
mov     ax, ds:13B2h
add     ds:0Ah, ax
add     ds:4, ax
add     ds:8, ax
mov     word ptr ds:13B2h, 0
retn
sub_47DDD endp




sub_47DF3 proc near
lodsb
cbw
and     al, al
jns     short locret_47E14
push    bx
mov     bl, al
lodsb
mov     bh, al
shl     bl, 1
shr     bx, 1
and     al, al
jns     short loc_47E11
lodsb
and     bh, 3Fh
ror     al, 1
ror     al, 1
or      bh, al

loc_47E11:
mov     ax, bx
pop     bx

locret_47E14:
retn
sub_47DF3 endp




sub_47E15 proc near
push    ds
pop     es
mov     di, 215h
mov     cx, 13h
xor     ax, ax
rep stosw
mov     si, ds:13B4h
mov     ds, word ptr ds:13AAh
push    word ptr [si+2]
add     si, 8
lodsw
mov     cx, ax
lodsw
mov     es:13B6h, si
mov     bx, si
add     bx, ax
push    bx
jcxz    short loc_47E44
mov     ah, 80h
call    sub_47F06

loc_47E44:
pop     si
lodsw
mov     cx, ax
lodsw
mov     es:13B8h, si
mov     bx, si
add     bx, ax
push    bx
jcxz    short loc_47E5A
mov     ah, 0
call    sub_47F06

loc_47E5A:
pop     si
pop     bp

loc_47E5C:
push    bp
lodsw
mov     cl, 40h ; '@'
call    sub_47F34
mov     es:13BCh, ax
mov     di, 215h
mov     ax, bx
stosw
mov     ax, es:271h
stosw
mov     ax, es:277h
stosw
mov     ax, es:26Bh
stosw
mov     ax, es:283h
stosw
mov     ax, 1
stosw
mov     ax, dx
stosw
lodsb
cbw
and     al, al
jns     short loc_47E93
sub     al, 80h
mov     ah, al
lodsb

loc_47E93:
stosw
xor     ax, ax
stosw
lodsw
push    ax
and     ax, 7
jz      short loc_47EA1
call    sub_47FEB

loc_47EA1:
pop     ax
shr     al, 1
shr     al, 1
shr     al, 1
push    ax
and     ax, 3
jz      short loc_47EB1
call    sub_480C3

loc_47EB1:
pop     ax
mov     al, ah
push    ax
and     ax, 0Fh
jz      short loc_47EBD
call    sub_481A5

loc_47EBD:
pop     ax
shr     ax, 1
shr     ax, 1
shr     ax, 1
shr     ax, 1
and     ax, 7
jz      short loc_47ECE
call    sub_4813E

loc_47ECE:
push    si
push    es
pop     ds

loc_47ED1:
les     di, ds:265h
add     di, 12h
cmp     di, ds:263h
jbe     short loc_47EE3
call    sub_4746D
jmp     short loc_47ED1

loc_47EE3:
xchg    di, ds:265h
mov     si, 215h
mov     cx, 12h
shr     cx, 1
rep movsw
jnb     short loc_47EF4
movsb

loc_47EF4:
push    ds
pop     es
mov     ds, word ptr ds:13AAh
pop     si
pop     bp
dec     bp
jz      short loc_47F02
jmp     loc_47E5C

loc_47F02:
push    es
pop     ds
clc
retn
sub_47E15 endp




sub_47F06 proc near
push    ds
push    es
pop     ds
pop     es
mov     word ptr ds:16Ah, es
mov     di, si
add     si, cx
add     si, cx

loc_47F14:
push    ax
push    cx
push    si
push    di
push    es
call    near ptr sub_4B4A0
pop     es
pop     di
pop     si
mov     ax, bx
stosw
mov     ax, es:[si]
and     ax, 3Fh
inc     ax
add     si, ax
pop     cx
pop     ax
loop    loc_47F14
push    ds
push    es
pop     ds
pop     es
retn
sub_47F06 endp ; sp-analysis failed




sub_47F34 proc near
push    ds
push    si
push    ds
push    es
pop     ds
pop     es
mov     word ptr ds:16Ah, es
mov     si, ds:13BAh
add     si, ax
push    si
mov     bl, es:[si]
and     bx, 3Fh
push    word ptr es:[bx+si+1]
cmp     byte ptr es:[bx+si], 21h ; '!'
jnz     short loc_47F58
dec     byte ptr es:[si]

loc_47F58:
mov     ah, cl
call    near ptr sub_4B4A0
push    ds
pop     es
pop     dx
pop     ax
pop     si
pop     ds
retn
sub_47F34 endp ; sp-analysis failed

db 1, 5, 28h, 2, 6, 48h, 3, 7, 48h, 3 dup(0)
db 0E0h, 5, 28h, 0E1h, 6, 48h, 6 dup(0)
db 80h, 0Ch, 85h, 0Ch, 5Fh, 54h, 45h, 58h
db 54h, 5Fh, 44h, 41h, 54h, 41h



sub_47F8A proc near
lodsb
cbw
cmp     al, 0E0h
jnb     short sub_47F9C
dec     si
lodsb
cbw
and     al, al
jns     short sub_47F9C
sub     al, 80h
mov     ah, al
lodsb
sub_47F8A endp




sub_47F9C proc near
and     ax, ax
js      short loc_47FAC
mov     bx, ax
shl     bx, 1
add     bx, es:13B6h
mov     bx, [bx]
retn

loc_47FAC:
push    si
push    di
mov     bl, al
mov     si, es:13BCh
lodsb
and     ax, 3Fh
mov     cx, ax
mov     di, 13C3h
rep movsb
and     bx, 7
shl     bx, 1
mov     si, cs:[bx+0C7Ch]
push    cs
pop     ds
assume ds:seg090
mov     cx, 5
rep movsb
push    es
pop     ds
assume ds:nothing
mov     si, 13C2h
mov     ax, di
sub     ax, si
dec     ax
mov     [si], al
mov     ah, 80h
call    sub_4B49C
push    ds
pop     es
mov     ds, word ptr ds:13AAh
pop     di
pop     si
retn
sub_47F9C endp




sub_47FEB proc near
cmp     ax, 7
jb      short loc_47FFB
lodsb
cbw
and     al, al
jns     short loc_47FFB
sub     al, 80h
mov     ah, al
lodsb

loc_47FFB:
push    ax
mov     al, [si]
and     al, 0E0h
cmp     al, 0C0h
jnz     short loc_48029
lodsb
and     ax, 7
mov     di, ax
shl     ax, 1
add     di, ax
add     di, 0C64h
mov     al, cs:[di+1]
cbw
call    sub_47F9C
push    bx
mov     al, cs:[di]
cbw
call    sub_47F9C
push    bx
mov     al, cs:[di+2]
jmp     short loc_48032

loc_48029:
call    sub_47F8A
push    bx
call    sub_47F8A
push    bx
lodsb

loc_48032:
push    ax
and     al, 0E0h
jnz     short loc_48039
lodsw
push    ax

loc_48039:
call    sub_47DF3
push    ax
push    ds
push    es
pop     ds
pop     dx

loc_48041:
les     di, ds:271h
add     di, 10h
cmp     di, ds:26Fh
jbe     short loc_48053
call    sub_4746D
jmp     short loc_48041

loc_48053:
xchg    di, ds:271h
mov     word ptr es:[di+8], 0FFFFh
mov     byte ptr es:[di+1], 0
pop     word ptr es:[di+2]
pop     ax
mov     es:[di], al
test    al, 0E0h
jnz     short loc_48078
pop     word ptr es:[di+0Ch]
mov     word ptr es:[di+0Eh], 0

loc_48078:
pop     bx
mov     es:[di+4], bx
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_48091
mov     ax, ds:12Ah
inc     ax
mov     es:[bx], ax
mov     ds:12Ah, ax

loc_48091:
mov     es, word ptr ds:273h
mov     ax, ds:265h
mov     es:[di+0Ah], ax
pop     bx
mov     es:[di+6], bx
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_480B5
mov     ax, ds:12Ah
inc     ax
mov     es:[bx], ax
mov     ds:12Ah, ax

loc_480B5:
push    ds
pop     es
mov     ds, word ptr ds:13AAh
pop     ax
dec     ax
jz      short locret_480C2
jmp     loc_47FFB

locret_480C2:
retn
sub_47FEB endp ; sp-analysis failed




sub_480C3 proc near
cmp     ax, 3
jb      short loc_480D3
lodsb
cbw
and     al, al
jns     short loc_480D3
sub     al, 80h
mov     ah, al
lodsb

loc_480D3:
mov     cx, ax

loc_480D5:
push    cx
lodsw
mov     cx, ax
and     cx, 0Fh
mov     bx, ax
shr     bx, 1
shr     bx, 1
shr     bx, 1
shr     bx, 1
shl     bx, 1
add     bx, es:13B6h
mov     ax, [bx]
push    ds
push    es
pop     ds

loc_480F2:
les     di, ds:283h
add     di, 2
cmp     di, ds:281h
jbe     short loc_48104
call    sub_4746D
jmp     short loc_480F2

loc_48104:
xchg    di, ds:283h
stosw
pop     es

loc_4810A:
sub     bx, bx
add     bl, es:[si]
jge     short loc_4811A
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, es:[si]

loc_4811A:
inc     si
push    es
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, ds:217h
mov     es, word ptr ds:273h
mov     es:[bx+8], ax
pop     es
loop    loc_4810A
push    ds
pop     es
mov     ds, word ptr ds:13AAh
pop     cx
loop    loc_480D5
retn
sub_480C3 endp




sub_4813E proc near
cmp     ax, 7
jb      short loc_4814E
lodsb
cbw
and     al, al
jns     short loc_4814E
sub     al, 80h
mov     ah, al
lodsb

loc_4814E:
mov     cx, ax

loc_48150:
push    cx
sub     bx, bx
add     bl, [si]
jge     short loc_4815F
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4815F:
inc     si
and     bx, bx
jz      short loc_48170
dec     bx
shl     bx, 1
add     bx, es:13B8h
mov     bx, [bx]
jmp     short loc_48180

loc_48170:
lodsb
cbw
and     al, al
jns     short loc_4817B
sub     al, 80h
mov     ah, al
lodsb

loc_4817B:
mov     cl, 0
call    sub_47F34

loc_48180:
push    es
pop     ds

loc_48182:
les     di, ds:277h
add     di, 2
cmp     di, ds:275h
jbe     short loc_48194
call    sub_4746D
jmp     short loc_48182

loc_48194:
xchg    di, ds:277h
mov     es:[di], bx
push    ds
pop     es
mov     ds, word ptr ds:13AAh
pop     cx
loop    loc_48150
retn
sub_4813E endp




sub_481A5 proc near
cmp     ax, 0Fh
jb      short loc_481B5
lodsb
cbw
and     al, al
jns     short loc_481B5
sub     al, 80h
mov     ah, al
lodsb

loc_481B5:
push    ax
lodsw
mov     cl, 0
call    sub_47F34
mov     dx, bx
lodsb
cbw
and     al, al
jns     short loc_481C9
sub     al, 80h
mov     ah, al
lodsb

loc_481C9:
mov     bp, ax
lodsb
cbw
and     al, al
jns     short loc_481D6
sub     al, 80h
mov     ah, al
lodsb

loc_481D6:
mov     bx, ax
or      ax, bp
mov     cl, 0
jnz     short loc_481E1
lodsw
inc     cl

loc_481E1:
mov     es:188h, cl
lodsw
push    ax
push    dx
push    es
pop     ds
or      bx, bx
jnz     short loc_481F9
mov     dx, ds:265h
inc     dx
mov     bp, 0FFFFh
jmp     short loc_4821C

loc_481F9:
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     dx, bx
add     dx, ds:217h
dec     bp
cmp     bp, 0FFFFh
jz      short loc_4821C
shl     bp, 1
add     bp, ds:21Dh
mov     es, word ptr ds:285h
mov     bp, es:[bp+0]

loc_4821C:
les     di, ds:26Bh
add     di, ds:186h
cmp     di, ds:269h
jbe     short loc_4822F
call    sub_4746D
jmp     short loc_4821C

loc_4822F:
xchg    di, ds:26Bh
mov     es:[di], dx
mov     es:[di+4], bp
cmp     byte ptr ds:13D6h, 0
jz      short loc_48254
xor     ax, ax
mov     es:[di+8], ax
mov     al, ds:188h
mov     es:[di+0Ah], ax
mov     word ptr es:[di+6], 0FFFFh

loc_48254:
pop     bx
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_48287
mov     es:[bx], di
cmp     byte ptr ds:13D6h, 0
jz      short loc_48271
mov     es, word ptr ds:26Dh
mov     es:[di+6], bx

loc_48271:
mov     es, word ptr ds:26Dh
pop     word ptr es:[di+2]
push    ds
pop     es
mov     ds, word ptr ds:13AAh
pop     ax
dec     ax
jz      short locret_48286
jmp     loc_481B5

locret_48286:
retn

loc_48287:
cmp     byte ptr ds:13D4h, 1
jnz     short loc_48271
push    si
push    di
push    ds
push    ss
pop     ds
call    sub_25EC4
pop     ds
pop     di
pop     si
call    loc_498EA
jmp     short loc_48271
sub_481A5 endp


loc_482A0:
mov     byte ptr ds:10Ah, 0
mov     ax, 0E000h
cwd
mov     ds:1B5h, ax
mov     ds:1B7h, dx
cmp     byte ptr ds:110h, 1
jnz     short loc_482DD
mov     es, word ptr ds:267h
mov     di, ds:140h
cmp     word ptr es:[di+0Ch], 0
jz      short loc_482DD
cmp     word ptr es:[di+0Ah], 2
jnb     short loc_482DD
mov     si, 3758h
mov     byte ptr ds:10Ah, 1
jmp     loc_47B9A

loc_482D8:
mov     si, ds:13Eh
inc     si

loc_482DD:
mov     cx, ds:13Ch
sub     cx, si
cmp     cx, 3
jnb     short loc_482ED
call    near ptr sub_4766D
jmp     short loc_482DD

loc_482ED:
mov     bl, [si]
inc     si
sub     bh, bh
lodsw
cmp     ax, 1770h
ja      short loc_4831B

loc_482F8:
mov     cx, ds:13Ch
sub     cx, si
cmp     cx, ax
jnb     short loc_48307
call    near ptr sub_4766D
jmp     short loc_482F8

loc_48307:
mov     di, si
add     di, ax
dec     di
mov     ds:13Eh, di
shr     bx, 1
jb      short locret_4831E
shl     bx, 1
db 2Eh, 0FFh, 0A7h
word_48319 dw 0

loc_4831B:
jmp     loc_476E5

locret_4831E:
retn
mov     ax, ds:13Eh
sub     ax, si
add     ax, 4
les     di, ds:1ADh
mov     es:[di+2], ax
mov     ds:1A7h, ax
mov     byte ptr ds:10Ah, 1
cmp     byte ptr ds:110h, 1
jz      short loc_4834B
cmp     word ptr ds:13C0h, 1
jz      short loc_4834B
call    sub_47C33
jb      short loc_4834B
retn

loc_4834B:
jmp     short loc_482D8
db 95h, 11h, 73h, 11h, 0C2h, 11h, 0E5h, 11h
db 0FBh, 11h, 51h, 12h, 13h, 12h, 89h, 12h
db 8Fh, 12h, 6, 13h, 0B2h, 12h, 0BAh, 12h
db 0DCh, 12h, 6, 13h, 6, 13h, 6, 13h, 6
db 13h, 6, 13h, 6, 13h, 6, 13h, 6, 13h, 6
db 13h, 6, 13h, 6, 13h, 65h, 1Ch, 0CDh, 1Ch
db 60h, 1Ch, 78h, 1Fh, 33h, 1Eh, 7, 20h
db 0E4h, 1Dh, 0DFh, 21h, 0DFh, 21h, 0DFh
db 21h, 0DFh, 21h, 0DFh, 21h, 0DFh, 21h
db 0DFh, 21h, 0DFh, 21h, 0DFh, 21h, 0DFh
db 21h, 0DFh, 21h, 0DFh, 21h, 0DFh, 21h
db 0DFh, 21h, 0DFh, 21h, 3 dup(0), 2, 40h
db 0, 20h, 0, 10h, 3 dup(0), 20h, 0, 40h
db 0, 20h, 9 dup(0), 4, 2 dup(0), 1, 2 dup(0)
db 2, 0, 80h, 3 dup(0FFh), 7Fh, 3 dup(0)
db 5, 2 dup(0), 2, 2 dup(0), 4, 2 dup(0)
db 80h, 3 dup(0FFh), 7Fh, 2 dup(0), 6, 2 dup(0)
db 4, 2 dup(0), 6, 4 dup(0), 80h, 3 dup(0FFh)
db 7Fh, 8, 2 dup(0), 1, 2 dup(0), 8, 5 dup(0)
db 0FFh, 3 dup(0), 9, 2 dup(0), 2, 2 dup(0)
db 0Ah, 5 dup(0), 2 dup(0FFh), 2 dup(0)
db 0Ah, 2 dup(0), 4, 2 dup(0), 0Ch, 5 dup(0)
db 4 dup(0FFh), 0Dh, 2 dup(0), 4, 4 dup(0)
db 0Fh, 2 dup(0), 8, 4 dup(0), 10h, 2 dup(0)
db 0Ah, 4 dup(0), 0Eh, 2 dup(0), 6, 4 dup(0)
db 28h, 2 dup(0), 1, 4 dup(0), 0Ch, 2 dup(0)
db 1, 2 dup(0), 13h, 5 dup(0), 0FFh, 3 dup(0)
db 7, 2 dup(0), 8, 4 dup(0), 0Bh, 2 dup(0)
db 8, 4 dup(0), 2Bh, 2 dup(0), 0Ah, 4 dup(0)
db 2Bh, 0DBh, 2, 1Ch, 7Dh, 8, 46h, 80h, 0EBh
db 80h, 8Ah, 0FBh, 8Ah, 1Ch, 46h, 8Eh, 6
db 6Dh, 2, 8Bh, 3Eh, 72h, 1, 83h, 0C7h, 8
db 8Bh, 0C3h, 0ABh, 0ACh, 26h, 8, 5, 0C3h
db 2Bh, 0DBh, 2, 1Ch, 7Dh, 8, 46h, 80h, 0EBh
db 80h, 8Ah, 0FBh, 8Ah, 1Ch, 46h, 80h, 3Eh
db 0Ah, 2 dup(1), 74h, 16h, 83h, 0FBh, 18h
db 90h, 72h, 4, 3, 1Eh, 1Ah, 58h, 8Eh, 6
db 61h, 2, 8Bh, 3Eh, 74h, 1, 26h, 89h, 5Dh
db 0FAh, 0C3h, 0EBh, 13h, 90h, 0FFh, 45h
db 14h, 0ACh, 0A8h, 40h, 75h, 13h, 0ACh
db 98h, 3, 0F0h, 80h, 3Ch, 80h, 83h, 0DEh
db 0FEh, 3Bh, 36h, 3Eh, 1, 72h, 0E8h, 75h
db 31h, 0C3h, 83h, 0C6h, 4, 0EBh, 0F2h, 80h
db 3Ch, 80h, 83h, 0DEh, 0FEh, 0ACh, 98h
db 3, 0F0h, 0ADh, 0ACh, 0BBh, 7, 13h, 2Eh
db 0D7h, 98h, 1, 45h, 12h, 0C3h, 0EBh, 0Ah
db 90h, 0FFh, 45h, 14h, 2 dup(0ACh), 98h
db 3, 0F0h, 0ADh, 3Bh, 36h, 3Eh, 1, 72h
db 0F1h, 75h, 1, 0C3h, 0E9h, 0D2h, 0F1h
db 0BBh, 33h, 13h, 0EBh, 30h, 90h, 0FFh
db 45h, 16h, 0ACh, 98h, 3, 0F0h, 80h, 3Ch
db 80h, 83h, 0DEh, 0FEh, 0ACh, 24h, 7, 2Eh
db 0D7h, 0A8h, 80h, 74h, 14h, 0FFh, 6, 0ECh
db 57h, 80h, 3Ch, 80h, 83h, 0DEh, 0FEh, 3Ch
db 90h, 72h, 6, 80h, 3Ch, 80h, 83h, 0DEh
db 0FEh, 25h, 7, 0, 3, 0F0h, 3Bh, 36h, 3Eh
db 1, 72h, 0CBh, 75h, 0C0h, 0C3h, 0FFh, 45h
db 1Ah, 0FFh, 6, 76h, 1, 0A1h, 76h, 1, 3Bh
db 6, 78h, 1, 76h, 3, 0A3h, 78h, 1, 2Bh
db 0DBh, 2, 1Ch, 7Dh, 8, 46h, 80h, 0EBh
db 80h, 8Ah, 0FBh, 8Ah, 1Ch, 46h, 0E8h, 16h
db 17h, 0A1h, 0ECh, 57h, 3Bh, 6, 7Eh, 1
db 76h, 3, 0A3h, 7Eh, 1, 0C7h, 6, 0ECh, 57h
db 2 dup(0), 0C3h, 0FFh, 0Eh, 76h, 1, 0EBh
db 0E7h, 2Bh, 0DBh, 2, 1Ch, 7Dh, 8, 46h
db 80h, 0EBh, 80h, 8Ah, 0FBh, 8Ah, 1Ch, 46h
db 23h, 0DBh, 75h, 3, 0FFh, 45h, 1Eh, 0C7h
db 6, 28h, 58h, 1, 0, 0C7h, 6, 82h, 1, 0FFh
db 0FFh, 0C3h, 0ADh, 88h, 45h, 24h, 88h
db 65h, 25h, 0C3h, 0B4h, 0, 0E8h, 0DDh, 2Eh
db 8Bh, 0FBh, 2Bh, 0DBh, 2, 1Ch, 7Dh, 8
db 46h, 80h, 0EBh, 80h, 8Ah, 0FBh, 8Ah, 1Ch
db 46h, 80h, 3Eh, 0Ah, 2 dup(1), 74h, 4
db 26h, 89h, 5Dh, 0FAh, 0C3h, 0B4h, 0, 0E8h
db 0BBh, 2Eh, 26h, 8Bh, 3Fh, 83h, 2 dup(0FFh)
db 74h, 1Ch, 8Eh, 6, 6Dh, 2, 2Bh, 0DBh, 2
db 1Ch, 7Dh, 8, 46h, 80h, 0EBh, 80h, 8Ah
db 0FBh, 8Ah, 1Ch, 46h, 26h, 89h, 5Dh, 8
db 0ACh, 26h, 8, 45h, 0Ah, 2 dup(0C3h), 4 dup(1)
db 3 dup(2), 1, 3 dup(2), 1, 2, 0Eh dup(1)
db 2 dup(2), 3 dup(1), 3 dup(2), 6 dup(1)
db 2, 2 dup(1), 92h, 82h, 2 dup(2), 1, 3 dup(0)
db 93h, 84h, 2, 4, 1, 0, 2 dup(1), 0C8h
db 57h, 9, 0, 0F3h, 1, 82h, 57h, 10h, 0
db 0F7h, 1, 8Ch, 57h, 6, 0, 0FFh, 1, 96h
db 57h, 4, 0, 0FDh, 1, 0CCh, 57h, 0Ch, 0
db 0FBh, 1, 0B4h, 57h, 10h, 0, 1, 2, 0BEh
db 57h, 8, 0, 3, 2, 0A0h, 57h, 8, 0, 0F9h
db 1, 0D0h, 57h, 8, 0, 0EFh, 1, 0AAh, 57h
db 5, 0, 0F1h, 1



sub_4867F proc near
mov     word ptr ds:581Ah, 0
push    ds
pop     es
mov     ds, word ptr ds:267h
mov     dx, es:265h
sub     dx, 12h
xor     si, si
jmp     short loc_486D5

loc_48697:
mov     bx, [si+10h]
cmp     word ptr [si+0Ah], 2
jb      short loc_486D0
inc     word ptr es:1F7h
and     bx, bx
jz      short loc_486D0
mov     bp, si
lea     si, [bp+12h]
mov     di, 1EFh
mov     cx, 3
call    sub_48B78
lea     si, [bp+18h]
mov     di, 1F9h
mov     cx, 5
call    sub_48B78
mov     si, bp
mov     ax, [si+22h]
add     es:203h, ax
call    sub_488F5

loc_486D0:
add     si, cs:[bx+894h]

loc_486D5:
cmp     si, dx
jb      short loc_48697
push    es
pop     ds
mov     di, 1E5h
mov     ax, [di+10h]
add     [di+0Eh], ax
add     word ptr [di+0Ah], 18h
xor     di, di
mov     si, ds:1CBh
add     si, ds:128h
rcl     di, 1
shl     si, 1
rcl     di, 1
shl     si, 1
rcl     di, 1
shl     si, 1
rcl     di, 1
shl     si, 1
rcl     di, 1
add     si, ds:126h
adc     di, 0
add     si, 30h ; '0'
adc     di, 0
mov     bp, 1343h
mov     cx, 0Ah

loc_48717:
mov     bx, cs:[bp+0]
mov     [bx], si
mov     [bx+2], di
mov     ax, cs:[bp+2]
mov     bx, cs:[bp+4]
mul     word ptr [bx]
add     si, ax
adc     di, dx
add     bp, 6
loop    loc_48717
mov     ds:57D4h, si
mov     ds:57D6h, di
mov     di, 1E5h
mov     ax, 9
mul     word ptr [di+10h]
add     ax, ds:57C8h
adc     dx, ds:57CAh
mov     ds:5778h, ax
mov     ds:577Ah, dx
mov     ax, [di+10h]
mov     [di+0Eh], ax
xor     ax, ax
mov     [di+18h], ax
mov     [di+16h], ax
mov     [di+14h], ax
mov     word ptr [di+0Ah], 18h
mov     [di+0Ch], ax
mov     [di+1Ah], ax
mov     [di+12h], ax
mov     [di+1Ch], ax
mov     [di+1Eh], ax
mov     cl, 4
mov     ax, 12h
mul     word ptr ds:178h
add     ax, 0Fh
shr     ax, cl
mov     ds:57F4h, ax
mov     bx, ax
mov     ax, 8
mul     word ptr ds:17Ah
add     ax, 0Fh
shr     ax, cl
mov     ds:57E8h, ax
add     bx, ax
mov     ax, ds:17Ah
shl     ax, 1
add     ax, 0Fh
shr     ax, cl
mov     ds:57EAh, ax
add     bx, ax
mov     ax, 9
mul     word ptr ds:17Eh
add     ax, 0Fh
shr     ax, cl
mov     ds:57EEh, ax
add     bx, ax
mov     ax, ds:17Eh
shl     ax, 1
add     ax, 0Fh
shr     ax, cl
mov     ds:57F0h, ax
add     bx, ax
mov     ax, 10h
mul     word ptr ds:17Ch
add     ax, 0Fh
shr     ax, cl
mov     ds:57F2h, ax
add     bx, ax
add     bx, 2Fh ; '/'
add     bx, 80h
mov     ax, bx

loc_487E5:
cmp     ax, ds:4
jbe     short loc_487F3
call    sub_475F3
jnb     short loc_487E5
jmp     loc_477BB

loc_487F3:
mov     cx, ds:28Fh
mov     bx, ds:291h
add     bx, ax
mov     es, bx
mov     dx, ds:291h
inc     cx
and     cl, 0FEh
mov     si, cx
dec     si
dec     si
mov     di, si
shr     cx, 1
push    ds
mov     ds, dx
std
rep movsw
cld
pop     ds
mov     ds:291h, bx
mov     ss:14h, bx
mov     ss:18h, bx
add     ds:6, ax
add     ds:12h, ax
sub     ds:4, ax
sub     ds:8, ax
xor     ax, ax
mov     ds:57F6h, ax
mov     ds:57F8h, dx
add     dx, ds:57F4h
mov     ds:57FEh, ax
mov     ds:5800h, dx
add     dx, ds:57E8h
mov     ds:5802h, ax
mov     ds:5804h, dx
add     dx, ds:57EAh
mov     ds:5806h, ax
mov     ds:5808h, dx
add     dx, ds:57EEh
mov     ds:580Ah, ax
mov     ds:580Ch, dx
add     dx, ds:57F0h
mov     ds:57FAh, ax
mov     ds:57FCh, dx
add     dx, ds:57F2h
mov     di, 5778h
mov     cx, 804h
mov     si, 10ABh
push    ds
pop     es

loc_48884:
add     di, 4
xor     ax, ax
stosw
mov     ax, dx
stosw
lods    word ptr cs:[si]
stosw
shr     ax, cl
add     dx, ax
dec     ch
jnz     short loc_48884
xor     ax, ax
mov     ds:57E4h, dx
mov     ds:57D8h, ax
mov     ds:57DAh, dx
mov     ds:57DCh, ax
mov     ds:57DEh, ax
mov     word ptr ds:57E0h, 800h
mov     ds:57E2h, ax
mov     ds:581Ch, ax
mov     ds:581Ah, ax
mov     byte ptr ds:13D6h, 2
push    ss
pop     es
mov     di, 9A78h
mov     ds:166h, di
mov     word ptr ds:168h, es
mov     cx, 1000h
rep stosw
mov     ax, ds:57D0h
mov     dx, ds:57D2h
mov     si, 10BBh
mov     cx, 0B8h
add     ds:57D0h, cx
adc     word ptr ds:57D2h, 0
push    ds
push    cs
pop     ds
assume ds:seg090
call    sub_48BD6
pop     ds
assume ds:nothing
mov     bp, 1658h
call    sub_4892C
retn
sub_4867F endp




sub_488F5 proc near
push    bx
push    ds
mov     bx, cs:[bx+894h]
mov     di, [si+6]
mov     bx, [bx+si+6]
mov     cx, es:581Ah
mov     ds, word ptr es:26Dh
jmp     short loc_4891D
db 90h

loc_4890F:
mov     ax, [di+8]
cmp     ax, 18h
jb      short loc_4891A
add     [di+8], cx

loc_4891A:
add     di, 0Ch

loc_4891D:
cmp     di, bx
jb      short loc_4890F
pop     ds
pop     bx
mov     ax, [si+12h]
add     es:581Ah, ax
retn
sub_488F5 endp




sub_4892C proc near
xor     bx, bx
jmp     short loc_48951

loc_48930:
mov     es, word ptr ds:28Bh
mov     si, es:[bx]
mov     es, word ptr ds:261h
mov     si, es:[si]
mov     es, word ptr ds:26Dh
cmp     word ptr es:[si+6], 0FFFFh
jz      short loc_4894F
push    bx
push    bp
call    bp ; sub_48958
pop     bp
pop     bx

loc_4894F:
inc     bx
inc     bx

loc_48951:
cmp     bx, ds:289h
jb      short loc_48930
retn
sub_4892C endp




sub_48958 proc near
cmp     word ptr es:[si+8], 0
jnz     short loc_48973
push    si
push    es
mov     bx, es:[si+6]
mov     es, word ptr ds:261h
mov     ax, es:[bx-6]
pop     es
pop     si
mov     es:[si+8], ax

loc_48973:
push    es
mov     bx, es:[si+6]
mov     es, word ptr ds:261h
mov     al, es:[bx+2]
and     ax, 3Fh
inc     ax
add     ds:1E9h, ax
adc     word ptr ds:1EBh, 0
inc     word ptr ds:1EDh
mov     ax, ds:1EDh
mov     es:[bx-4], ax
pop     es
retn
sub_48958 endp

push    si
push    ds
push    es
mov     si, es:[si+6]
push    ds
pop     es
mov     ds, word ptr ds:261h
mov     ax, [si-4]
mov     es:581Ch, ax
inc     si
inc     si
and     byte ptr [si], 3Fh
lodsb
and     ax, 3Fh
mov     cx, ax
mov     bx, cx
add     bx, si
inc     cx
mov     ax, es:57D4h
mov     dx, es:57D6h
add     es:57D4h, cx
adc     word ptr es:57D6h, 0
push    word ptr [bx]
push    ds
push    bx
mov     byte ptr [bx], 0
call    sub_48BD6
pop     bx
pop     ds
pop     word ptr [bx]
pop     es
pop     ds
pop     si
call    sub_48CEC
retn



sub_489E7 proc near
mov     si, 189h
mov     cx, ds:235h
xor     di, di
mov     es, word ptr ds:273h
mov     di, ds:217h
mov     dx, ds:271h
mov     ax, 1

loc_489FF:
test    [si], ax
jz      short loc_48A08
mov     byte ptr es:[di+1], 1

loc_48A08:
shl     ax, 1
jb      short loc_48A14
add     di, 10h
cmp     di, dx
jb      short loc_489FF
retn

loc_48A14:
rcl     ax, 1
inc     si
inc     si
jmp     short loc_48A08
sub_489E7 endp




sub_48A1A proc near
inc     word ptr ds:1F7h
push    ds
pop     es
mov     di, 5768h
mov     cx, 8
xor     ax, ax
rep stosw
mov     es, word ptr ds:261h
mov     si, ds:215h
add     si, 2
call    sub_48C08
mov     ds:184h, ax
cmp     byte ptr ds:10Ah, 1
jz      short loc_48A7F
les     di, ds:14Eh
mov     si, di
xor     al, al
mov     cx, 0FFFFh
repne scasb
sub     di, 5
xor     cx, cx

loc_48A54:
cmp     si, di
jz      short loc_48A6C
mov     al, es:[di-1]
cmp     al, 5Ch ; '\'
jz      short loc_48A6C
cmp     al, 3Ah ; ':'
jz      short loc_48A6C
cmp     al, 2Fh ; '/'
jz      short loc_48A6C
dec     di
inc     cx
jmp     short loc_48A54

loc_48A6C:
dec     di
push    word ptr es:[di]
push    es
push    di
mov     es:[di], cl
mov     si, di
call    sub_48C08
pop     di
pop     es
pop     word ptr es:[di]

loc_48A7F:
mov     di, 5768h
mov     [di], ax
mov     ax, ds:201h
inc     ax
mov     ds:582Ch, ax
mov     si, 215h
xor     ax, ax
mov     bx, ax
mov     cx, ax
mov     dx, ax
mov     bp, ax
cmp     word ptr [si+10h], 0
jz      short loc_48AB7
mov     ax, [si+1Eh]
and     ax, ax
jz      short loc_48AAA
mov     bx, ds:1FFh
inc     bx

loc_48AAA:
mov     cx, [si+22h]
jcxz    short loc_48AB4
mov     dx, ds:203h
inc     dx

loc_48AB4:
mov     bp, [si+24h]

loc_48AB7:
mov     [di+0Ah], ax
mov     [di+8], bx
mov     [di+0Eh], cx
mov     [di+0Ch], dx
mov     [di+2], bp
mov     ax, ds:1F1h
inc     ax
mov     ds:582Ah, ax
mov     ax, ds:1FFh
mov     ds:582Eh, ax
xor     ax, ax
mov     ds:5810h, ax
mov     ds:57E6h, ax
mov     ds:5812h, ax
mov     ds:5814h, ax
mov     ds:57ECh, ax
mov     ds:5816h, ax
mov     ds:580Eh, ax
mov     ds:176h, ax
mov     ds:5818h, ax
dec     ax
mov     ds:581Eh, ax
mov     ds:182h, ax
mov     ds:5828h, ax
cmp     word ptr ds:235h, 0
jz      short locret_48B77
xor     di, di

loc_48B03:
mov     es, word ptr ds:267h
mov     si, ds:180h
mov     cx, es:[si+28h]
mov     si, ds:217h
push    ds
pop     es
mov     ds, word ptr ds:273h
mov     dx, 0FFFFh
mov     bx, 0FFFFh

loc_48B1F:
cmp     byte ptr [si+1], 1
jnz     short loc_48B3D
mov     ax, [si+0Ch]
cmp     ax, dx
ja      short loc_48B3D
jb      short loc_48B35
mov     ax, [si+0Eh]
cmp     ax, bx
jnb     short loc_48B3D

loc_48B35:
mov     dx, [si+0Ch]
mov     bx, [si+0Eh]
mov     bp, si

loc_48B3D:
add     si, 10h
cmp     si, cx
jb      short loc_48B1F
cmp     dx, 0FFFFh
jz      short loc_48B75
mov     byte ptr ds:[bp+1], 2
mov     si, ds:[bp+2]
push    es
pop     ds
mov     es, word ptr ds:57FCh
mov     ax, ds:1F7h
stosw
mov     ax, dx
stosw
mov     ax, bx
stosw
mov     ax, si
stosw
xor     ax, ax
stosw
stosw
stosw
stosw
inc     word ptr ds:201h
mov     ds:5826h, di
jmp     short loc_48B03

loc_48B75:
push    es
pop     ds

locret_48B77:
retn
sub_48A1A endp




sub_48B78 proc near
lodsw
add     ax, es:[di]
stosw
loop    sub_48B78
retn
sub_48B78 endp




sub_48B80 proc near
les     di, [bx+4]
mov     dx, cx
mov     ax, dx
add     ax, di
cmp     ax, [bx+8]
jbe     short loc_48B94
mov     dx, [bx+8]
sub     dx, [bx+4]

loc_48B94:
mov     ax, cx
mov     cx, dx
push    ds
mov     ds, bp
shr     cx, 1
rep movsw
jnb     short loc_48BA2
movsb

loc_48BA2:
pop     ds
mov     [bx+4], di
sub     ax, dx
jnz     short loc_48BAB
retn

loc_48BAB:
push    ax
push    bx
push    si
push    bp
call    sub_48BB8
pop     bp
pop     si
pop     bx
pop     cx
jmp     short sub_48B80
sub_48B80 endp




sub_48BB8 proc near
mov     dx, [bx+2]
mov     ax, [bx]
mov     cx, [bx+4]
jcxz    short locret_48BD5
xor     si, si
mov     [bx+4], si
add     [bx], cx
adc     word ptr [bx+2], 0
push    ds
mov     ds, word ptr [bx+6]
call    sub_48BD6
pop     ds

locret_48BD5:
retn
sub_48BB8 endp




sub_48BD6 proc near
push    cx
push    ax
mov     cl, 4
ror     dx, cl
shr     ax, cl
and     ax, 0FFFh
add     dx, ax
pop     cx
and     cx, 0Fh
pop     ax
inc     cs:word_47312
call    sub_4785A
dec     cs:word_47312
retn
sub_48BD6 endp




sub_48BF6 proc near
push    di
push    ds
pop     es
push    si
call    sub_48C08
pop     si
mov     bx, ax
lodsb
cbw
add     si, ax
mov     ax, bx
pop     di
retn
sub_48BF6 endp




sub_48C08 proc near
push    si
mov     word ptr ds:16Ah, es
xor     ah, ah
call    near ptr sub_4B4A0
pop     dx
jb      short loc_48C1E
mov     ax, es:[bx-4]
and     ax, ax
jz      short loc_48C1E
retn

loc_48C1E:
mov     es, word ptr ds:16Ah
mov     ax, ds:16Eh
shl     ax, 1
lds     bx, ds:166h
add     bx, ax

loc_48C2D:
mov     ax, [bx+1]
and     ax, ax
jz      short loc_48C66
push    ds
push    bx
mov     si, [bx]
and     si, 0FFh
mov     bp, si
mov     ds, ax
add     si, 5
mov     di, dx
lodsb
scasb
jnz     short loc_48C5F
and     ax, 3Fh
mov     cx, ax
repe cmpsb
jnz     short loc_48C5F
mov     ax, ds:[bp+3]
add     sp, 4
mov     ds, cs:word_47310
retn

loc_48C5F:
add     sp, 4
mov     bx, bp
jmp     short loc_48C2D

loc_48C66:
mov     si, dx
mov     al, es:[si]
and     ax, 3Fh
inc     ax
mov     cx, ax
add     ax, 6
push    es
push    ds
mov     ds, cs:word_47310
mov     di, 57E0h

loc_48C7E:
sub     [di], ax
sbb     word ptr [di+2], 0
jge     short loc_48C91
add     [di], ax
adc     word ptr [di+2], 0
call    sub_48D35
jmp     short loc_48C7E

loc_48C91:
add     ds:57DCh, ax
adc     word ptr ds:57DEh, 0
add     ds:1E9h, cx
adc     word ptr ds:1EBh, 0
les     di, ds:57D8h
push    cx
add     ax, ds:57D8h
mov     cx, ax
and     cx, 0Fh
mov     ds:57D8h, cx
mov     cl, 4
shr     ax, cl
add     ds:57DAh, ax
pop     cx
mov     ax, ds
pop     ds
mov     [bx], di
mov     word ptr [bx+1], es
mov     ds, ax
xor     ax, ax
stosb
stosw
inc     word ptr ds:1EDh
mov     ax, ds:1EDh
stosw
mov     dx, ds
pop     ds
lodsb
and     al, 3Fh
stosb
dec     cx
shr     cx, 1
rep movsw
jnb     short loc_48CE3
movsb

loc_48CE3:
xor     al, al
stosb
mov     ds, dx
mov     ax, ds:1EDh
retn
sub_48C08 endp ; sp-analysis failed




sub_48CEC proc near
push    cx
push    dx
push    si
push    es
mov     di, 5758h
mov     al, es:[si+0Ah]
mov     [di+8], al
mov     ax, es:[si+8]
mov     [di+2], ax
push    word ptr es:[si+6]
call    near ptr loc_4AF7F+1
mov     [di+6], ax
mov     [di+4], cx
pop     si
mov     ax, ds:581Ch
and     ax, ax
jnz     short loc_48D20
mov     es, word ptr ds:261h
add     si, 2
call    sub_48C08

loc_48D20:
mov     si, 5758h
mov     [si], ax
mov     cx, 9
mov     bx, 5778h
mov     bp, ds
call    sub_48B80
pop     es
pop     si
pop     dx
pop     cx
retn
sub_48CEC endp




sub_48D35 proc near
push    ax
push    bx
push    cx
push    si
push    di
push    es

loc_48D3B:
mov     bx, ds:10h
sub     bx, ds:28Fh
cmp     bx, 0A0h
jb      short loc_48D95
sub     bx, 64h ; 'd'
and     bl, 0F0h
add     ds:57E0h, bx
adc     word ptr ds:57E2h, 0
sub     ds:10h, bx
mov     cl, 4
shr     bx, cl
mov     cx, ds:28Fh
add     bx, ds:291h
mov     es, bx
jcxz    short loc_48D80
mov     si, cx
dec     si
mov     di, si
sub     cx, ss:12h
push    ds
mov     ds, word ptr ds:291h
std
rep movsb
cld
pop     ds

loc_48D80:
mov     word ptr ds:291h, es
mov     word ptr ss:14h, es
mov     word ptr ss:18h, es
pop     es
pop     di
pop     si
pop     cx
pop     bx
pop     ax
retn

loc_48D95:
call    sub_4AFC5
jmp     short loc_48D3B
sub_48D35 endp




sub_48D9A proc near
call    sub_49342
mov     bx, 5768h
mov     di, 1E5h
mov     cx, ds:5818h
mov     ax, [di+0Eh]
inc     ax
jcxz    short loc_48DB2
sub     ax, cx
xchg    ax, cx
jmp     short loc_48DB4

loc_48DB2:
xor     cx, cx

loc_48DB4:
mov     [bx+4], ax
mov     [bx+6], cx
mov     ax, ds:576Eh
and     ax, ax
jnz     short loc_48DC4
mov     ds:576Ch, ax

loc_48DC4:
mov     si, 5768h
mov     cx, 10h
mov     bp, ds
mov     bx, 5782h
call    sub_48B80
mov     ax, ds:1EFh
sub     ax, 18h
mov     bx, ds:581Ah
mov     ds:581Ah, ax
sub     ax, bx
xor     dx, dx
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
add     ds:57D0h, ax
adc     ds:57D2h, dx
cmp     word ptr ds:235h, 0
jnz     short loc_48E01
jmp     locret_48EB9

loc_48E01:
cmp     word ptr ds:57E6h, 0
jnz     short loc_48E0B
jmp     locret_48EB9

loc_48E0B:
mov     cx, ds:57E6h
cmp     cx, 1
jbe     short loc_48E20
shl     cx, 1
mov     bp, 1BBAh
mov     es, word ptr ds:5804h
call    sub_4B80D

loc_48E20:
mov     ax, ds:203h
inc     ax
mov     cx, ds:57E6h
add     ds:203h, cx
xor     si, si

loc_48E2E:
mov     es, word ptr ds:5804h
mov     di, es:[si]
mov     es, word ptr ds:5800h
mov     bx, es:[di]
mov     bp, bx
sub     bx, ds:582Ch
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     es, word ptr ds:57FCh
mov     es:[bx+0Ch], ax
mov     es, word ptr ds:5800h
push    ds
mov     ds, word ptr ds:5804h
mov     dx, 1
dec     cx
jz      short loc_48E6D

loc_48E61:
inc     si
inc     si
mov     di, [si]
cmp     bp, es:[di]
jnz     short loc_48E6D
inc     dx
loop    loc_48E61

loc_48E6D:
pop     ds
mov     es, word ptr ds:57FCh
mov     es:[bx+0Eh], dx
add     ax, dx
inc     cx
loop    loc_48E2E
mov     cx, ds:57E6h
xor     bx, bx
mov     es, word ptr ds:5804h

loc_48E85:
push    bx
push    cx
push    es
mov     si, es:[bx]
mov     cx, 8
mov     bx, 57BEh
mov     bp, ds:5800h
call    sub_48B80
pop     es
pop     cx
pop     bx
add     bx, 2
loop    loc_48E85
mov     ax, 10h
mul     word ptr ds:235h
and     ax, ax
jz      short locret_48EB9
mov     cx, ax
xor     si, si
mov     bp, ds:57FCh
mov     bx, 57B4h
call    sub_48B80

locret_48EB9:
retn
sub_48D9A endp

push    ax
push    es
mov     es, word ptr ds:5800h
mov     ax, es:[si]
cmp     ax, es:[di]
jnz     short loc_48ECA
cmp     si, di

loc_48ECA:
pop     es
pop     ax
retn



sub_48ECD proc near
add     word ptr ds:1EFh, 0
mov     bx, 5778h
call    sub_48BB8
mov     ax, ds:57C8h
mov     ds:5778h, ax
mov     ax, ds:57CAh
mov     ds:577Ah, ax
mov     bp, 169Ah
call    sub_4892C
mov     word ptr ds:581Ch, 0
mov     bx, 5778h
mov     cx, 8

loc_48EF6:
push    bx
push    cx
call    sub_48BB8
pop     cx
pop     bx
add     bx, 0Ah
loop    loc_48EF6
push    ds
mov     ax, ds:57D4h
mov     dx, ds:57D6h
mov     bx, ds:57DCh
mov     di, ds:57DEh
mov     ds, word ptr ds:57E4h
xor     si, si

loc_48F18:
add     si, 5
mov     cl, [si]
and     cx, 3Fh
inc     si
inc     cx
push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    ds
call    sub_48BD6
pop     ds
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
sub     bx, cx
sbb     di, 0
add     ax, cx
adc     dx, 0
add     si, cx
mov     bp, ds
push    si
shr     si, 1
shr     si, 1
shr     si, 1
shr     si, 1
add     bp, si
mov     ds, bp
pop     si
and     si, 0Fh
sub     bx, 6
sbb     di, 0
mov     bp, bx
or      bp, di
jnz     short loc_48F18
pop     ds
retn
sub_48ECD endp

mov     dx, 1
jmp     short loc_48F67
xor     dx, dx

loc_48F67:
jmp     short loc_48FB7
align 2

loc_48F6A:
inc     word ptr ds:1F1h
mov     di, 5758h
lodsb
mov     [di], al
test    al, 40h
jnz     short loc_48FBE
lodsb
cbw
and     ax, ax
jz      short loc_48F84
dec     si
push    dx
call    sub_48BF6
pop     dx

loc_48F84:
mov     [di+1], ax
and     dx, dx
jnz     short loc_48FC8
sub     bx, bx
add     bl, [si]
jge     short loc_48F99
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_48F99:
inc     si
cmp     bx, 18h
jb      short loc_48FA3
add     bx, ds:581Ah

loc_48FA3:
mov     [di+3], bx

loc_48FA6:
push    dx
push    si
mov     si, di
mov     cx, 5
mov     bp, ds
mov     bx, 57AAh
call    sub_48B80
pop     si
pop     dx

loc_48FB7:
cmp     si, ds:13Eh
jb      short loc_48F6A
retn

loc_48FBE:
lodsw
mov     [di+1], ax
lodsw
mov     [di+3], ax
jmp     short loc_48FA6

loc_48FC8:
lodsw
mov     bx, ax
jmp     short loc_48FA3
mov     di, 5758h
xor     ax, ax
push    ds
pop     es
mov     cx, 4
rep stosw
sub     bx, bx
add     bl, [si]
jge     short loc_48FE7
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_48FE7:
inc     si
push    bx
mov     al, [si]
cbw
and     ax, ax
jz      short loc_48FF6
call    sub_48BF6
push    ds
pop     es
dec     si

loc_48FF6:
inc     si
mov     di, 5758h
mov     [di+1], ax
lodsw
mov     [di+3], ax
lodsb
mov     [di], al
mov     bx, di
add     di, 5
mov     cx, 8
mov     dx, ds:581Ah
cmp     al, 23h ; '#'
jz      short loc_4906C
cmp     al, 1Eh
jz      short loc_49049
cmp     al, 1Fh
jz      short loc_49049
cmp     al, 15h
jz      short loc_49087
cmp     al, 16h
jz      short loc_49087
cmp     al, 1Ah
jz      short loc_49050
cmp     al, 18h
jz      short loc_49087
cmp     al, 19h
jz      short loc_49087
cmp     al, 22h ; '"'
jz      short loc_490A7
cmp     al, 24h ; '$'
jz      short loc_490A4
cmp     al, 20h ; ' '
jz      short loc_49043
cmp     al, 21h ; '!'
jz      short loc_49043
jmp     short loc_490BE
db 90h

loc_49043:
movsw
mov     cx, 10h
jmp     short loc_4904A

loc_49049:
inc     di

loc_4904A:
mov     ax, ds:582Ah
stosw
jmp     short loc_490B7

loc_49050:
sub     bx, bx
add     bl, [si]
jge     short loc_4905E
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4905E:
inc     si
mov     [di+1], bx
cmp     bx, 18h
jb      short loc_490BE
add     [di+1], dx
jmp     short loc_490BE

loc_4906C:
sub     bx, bx
add     bl, [si]
jge     short loc_4907A
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4907A:
inc     si
push    bx
lodsw
ror     ah, 1
and     ah, 80h
or      al, ah
stosb
jmp     short loc_49098

loc_49087:
sub     bx, bx
add     bl, [si]
jge     short loc_49095
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49095:
inc     si
push    bx
movsb

loc_49098:
pop     ax
stosw
cmp     ax, 18h
jb      short loc_490BE
add     [di-2], dx
jmp     short loc_490BE

loc_490A4:
movsb
jmp     short loc_490BE

loc_490A7:
mov     cx, 10h
add     di, 3
movsw
movsw
mov     ax, ds:582Ah
stosw
mov     si, ds:13Eh

loc_490B7:
mov     ax, ds:1F1h
inc     ax
mov     ds:582Ah, ax

loc_490BE:
pop     ax
sub     ax, 18h
mov     di, cx
push    cx
mov     cl, 3
shl     ax, cl
shr     di, cl
add     ds:1EFh, di
pop     cx
push    si
mov     si, 5758h
mov     dx, ds:57D2h
add     ax, ds:57D0h
adc     dx, 0
call    sub_48BD6
pop     si
retn
mov     word ptr ds:182h, 0FFFFh
sub     bx, bx
add     bl, [si]
jge     short loc_490F8
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_490F8:
inc     si
and     bx, bx
jnz     short loc_49126
call    sub_48BF6



sub_49100 proc near
inc     word ptr ds:1FFh
mov     bx, ds:1FFh
mov     ds:5828h, bx
mov     di, 5758h
mov     bx, di
push    ds
pop     es
stosw
movsw
movsw
push    si
mov     si, bx
mov     cx, 6
mov     bp, ds
mov     bx, 578Ch
call    sub_48B80
pop     si
retn
sub_49100 endp


loc_49126:
add     bx, ds:582Eh
mov     ds:5828h, bx
mov     si, ds:13Eh
retn
mov     ax, ds:1F3h
inc     ax
cmp     word ptr ds:176h, 0
jnz     short loc_4914A
cmp     word ptr ds:5818h, 0
jnz     short loc_49148
mov     ds:5818h, ax

loc_49148:
jmp     short loc_491C2

loc_4914A:
mov     di, ds:580Eh
mov     es, word ptr ds:57F8h
cmp     word ptr es:[di-12h], 0
jnz     short loc_491C2
mov     es:[di-12h], ax
jmp     short loc_491C2

loc_4915F:
inc     word ptr ds:1F3h
cmp     word ptr ds:176h, 0
jz      short loc_49176
mov     di, ds:580Eh
mov     es, word ptr ds:57F8h
inc     word ptr es:[di-10h]

loc_49176:
call    sub_48BF6
mov     di, 5758h
mov     [di], ax
sub     bx, bx
add     bl, [si]
jge     short loc_4918C
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4918C:
inc     si
cmp     bx, 18h
jb      short loc_49196
add     bx, ds:581Ah

loc_49196:
mov     [di+2], bx
lodsb
mov     [di+8], al
and     ax, 7
mov     bx, ax
shl     bx, 1
call    cs:funcs_491A4[bx]
push    si
mov     si, 5758h
mov     cx, 9
mov     bp, ds
mov     bx, 5778h
mov     al, [si+8]
and     al, 7
cmp     al, 1
jbe     short loc_491C9
call    sub_48B80

loc_491C1:
pop     si

loc_491C2:
cmp     si, ds:13Eh
jb      short loc_4915F
retn

loc_491C9:
mov     es, word ptr ds:580Ch
mov     di, ds:5816h
mov     ax, ds:5814h
stosw
mov     ds:5816h, di
mov     di, ax
mov     es, word ptr ds:5808h
push    ds
mov     ds, bp
shr     cx, 1
rep movsw
jnb     short loc_491E9
movsb

loc_491E9:
pop     ds
inc     word ptr ds:57ECh
mov     ds:5814h, di
jmp     short loc_491C1
funcs_491A4 dw offset sub_49204
dw offset sub_4923B
dw offset sub_4926A
dw offset sub_4926A
dw offset sub_49274
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3



sub_49204 proc near
sub     bx, bx
add     bl, [si]
jge     short loc_49212
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49212:
inc     si
and     bx, bx
jz      short sub_4923B
dec     bx
shl     bx, 1
add     bx, ds:21Dh
mov     es, word ptr ds:285h
mov     bx, es:[bx]
mov     es, word ptr ds:261h
mov     ax, es:[bx]
xor     cx, cx
cmp     byte ptr [si], 0
jnz     short sub_4923B
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh
jmp     short loc_49260
sub_49204 endp




sub_4923B proc near
sub     bx, bx
add     bl, [si]
jge     short loc_49249
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49249:
inc     si
push    si
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     si, bx
add     si, ds:217h
xor     cx, cx
call    sub_4AF8D
pop     si

loc_49260:
mov     [di+6], ax
lodsw
add     ax, cx
mov     [di+4], ax
sub_4923B endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS CTRL-NUMPAD+ TO EXPAND]



sub_4926A proc near
lodsw

loc_4926B:
mov     word ptr [di+6], 0
mov     [di+4], ax
retn
sub_4926A endp




sub_49274 proc near
lodsb
cbw
jmp     short loc_4926B
sub_49274 endp

push    si
call    sub_49342
pop     si
mov     di, ds:580Eh
add     word ptr ds:580Eh, 12h
mov     bx, di
mov     es, word ptr ds:57F8h
mov     cx, 9
xor     ax, ax
rep stosw
cmp     word ptr ds:176h, 0
jz      short loc_492A2
mov     ax, es:[bx-2]
mov     es:[bx+4], ax

loc_492A2:
inc     word ptr ds:1FBh
mov     ax, ds:1FBh
mov     es:[bx+10h], ax
mov     ax, ds:57CCh
mov     es:[bx+0Ch], ax
mov     ax, ds:57CEh
mov     es:[bx+0Eh], ax
add     word ptr ds:57CCh, 0Ch
adc     word ptr ds:57CEh, 0
push    bx
sub     bx, bx
add     bl, [si]
jge     short loc_492D4
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_492D4:
inc     si
push    si
push    es
cmp     bx, ds:581Eh
jz      short loc_492E0
call    near ptr sub_493E3

loc_492E0:
mov     si, ds:5822h
mov     es, word ptr ds:57FCh
cmp     word ptr es:[si+0Ah], 0
jnz     short loc_492F6
mov     ax, ds:1FBh
mov     es:[si+8], ax

loc_492F6:
inc     word ptr es:[si+0Ah]
pop     es
pop     si
pop     bx
lodsw
mov     es:[bx+8], ax
inc     word ptr ds:176h
retn
push    si
call    sub_49342
pop     si
sub     word ptr ds:580Eh, 12h
mov     bx, ds:580Eh
mov     es, word ptr ds:57F8h
lodsw
sub     ax, es:[bx+8]
mov     es:[bx+0Ah], ax
mov     ax, ds:5824h
add     es:[bx+8], ax
push    si
push    ds
push    es
pop     ds
mov     ax, [bx+0Ch]
mov     dx, [bx+0Eh]
mov     si, bx
mov     cx, 0Ch
call    sub_48BD6
pop     ds
dec     word ptr ds:176h
pop     si
retn



sub_49342 proc near
mov     cx, ds:57ECh
jcxz    short locret_49386
cmp     cx, 1
jz      short loc_49359
shl     cx, 1
mov     bp, 2087h
mov     es, word ptr ds:580Ch
call    sub_4B80D

loc_49359:
mov     cx, ds:57ECh
xor     bx, bx

loc_4935F:
mov     es, word ptr ds:580Ch
mov     si, es:[bx]
push    bx
push    cx
mov     bp, ds:5808h
mov     cx, 9
mov     bx, 5778h
call    sub_48B80
pop     cx
pop     bx
inc     bx
inc     bx
loop    loc_4935F
xor     ax, ax
mov     ds:5814h, ax
mov     ds:57ECh, ax
mov     ds:5816h, ax

locret_49386:
retn
sub_49342 endp

push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    es
mov     es, word ptr ds:5808h
mov     al, es:[si+8]
mov     ah, es:[di+8]
and     ax, 303h
cmp     ah, al
jnz     short loc_493DB
mov     cl, 4
mov     bx, es:[si+6]
mov     dx, es:[di+6]
rol     bx, cl
rol     dx, cl
mov     cx, es:[si+4]
mov     ax, es:[di+4]
cmp     bx, dx
jz      short loc_493D9
mov     si, bx
and     bx, 0Fh
and     si, 0FFF0h
add     cx, si
adc     bl, 0
mov     di, dx
and     dx, 0Fh
and     di, 0FFF0h
add     ax, di
adc     dl, 0
cmp     bx, dx
jnz     short loc_493DB

loc_493D9:
cmp     cx, ax

loc_493DB:
pop     es
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
retn



sub_493E3 proc far
mov     ds:581Eh, bx
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     si, bx
add     si, ds:217h
mov     es, word ptr ds:273h
mov     ax, es:[si+0Ch]
mov     cx, es:[si+0Eh]
mov     ds:5824h, cx
mov     bp, dx
mov     es, word ptr ds:57FCh
xor     si, si
mov     dx, ds:582Ch

loc_49412:
cmp     ax, es:[si+2]
jnz     short loc_4941E
cmp     cx, es:[si+4]
jz      short loc_4942B

loc_4941E:
inc     dx
add     si, 10h
cmp     si, ds:5826h
jb      short loc_49412
jmp     loc_476E5

loc_4942B:
mov     ds:5820h, dx
mov     ds:5822h, si
retn
sub_493E3 endp




sub_49434 proc near
push    si
cmp     word ptr ds:5828h, 0FFFFh
jnz     short loc_49450
push    ax
push    cx
push    dx
push    si
mov     word ptr ds:182h, 0FFFFh
mov     ax, ds:184h
call    sub_49100
pop     si
pop     dx
pop     cx
pop     ax

loc_49450:
mov     bx, ds:13Eh
sub     bx, si
shr     bx, 1
shr     bx, 1
cmp     dx, ds:182h
jnz     short loc_4946D
mov     si, ds:5810h
sub     si, 8
mov     es, word ptr ds:5800h
jmp     short loc_494B9

loc_4946D:
mov     ds:182h, dx
push    ax
push    bx
push    cx
mov     bx, dx
call    near ptr sub_493E3
mov     si, ds:5810h
mov     es, word ptr ds:5800h
add     word ptr ds:5810h, 8
mov     ax, ds:5820h
mov     es:[si], ax
mov     ax, ds:5828h
mov     es:[si+2], ax
mov     ax, ds:1FDh
inc     ax
mov     es:[si+4], ax
mov     word ptr es:[si+6], 0
push    es
mov     es, word ptr ds:5804h
mov     di, ds:5812h
mov     ax, si
stosw
mov     ds:5812h, di
pop     es
pop     cx
pop     bx
pop     ax
inc     word ptr ds:57E6h

loc_494B9:
add     es:[si+6], bx
add     ds:1FDh, bx
xchg    cx, bx
pop     si
mov     dx, si
inc     si
inc     si
push    cx

loc_494C9:
add     [si], bx
add     si, 4
loop    loc_494C9
mov     si, dx
pop     cx
shl     cx, 1
shl     cx, 1
mov     bp, ds
mov     bx, 5796h
call    sub_48B80
mov     si, ds:13Eh
retn
sub_49434 endp ; sp-analysis failed

lodsw
mov     dx, 0D9h
cmp     ah, 9Fh
jz      short loc_4952A
xor     dx, dx
cmp     ah, 0B4h
jz      short loc_4952A
cmp     ah, 0C0h
jz      short loc_49522
cmp     byte ptr ds:13D6h, 0
jz      short loc_4951F
mov     bl, ah
xor     bh, bh
sub     bx, 0E0h
jl      short loc_4951F
cmp     bx, 18h
jnb     short loc_4951F
mov     di, 215h
shl     bx, 1
call    word ptr cs:[bx+104Dh]
mov     word ptr ds:225h, 4

loc_4951F:
jmp     loc_495DB

loc_49522:
mov     byte ptr ds:115h, 1
mov     dx, 0D1h

loc_4952A:
cmp     byte ptr ds:10Dh, 1
jz      short loc_4951F
cmp     word ptr ds:160h, 0
jz      short loc_4951F
mov     di, ds:15Eh
mov     es, word ptr ds:15Ah
add     di, 4
mov     cx, ds:13Eh
sub     cx, si
xor     bl, bl

loc_4954B:
lodsb
cmp     al, 61h ; 'a'
jb      short loc_49556
cmp     al, 61h ; 'a'
ja      short loc_49556
sub     al, 20h ; ' '

loc_49556:
cmp     di, ds:15Ch
jnb     short loc_495DB
stosb
cmp     al, 5Ch ; '\'
jz      short loc_49571
cmp     al, 3Ah ; ':'
jz      short loc_49571
cmp     al, 2Fh ; '/'
jz      short loc_49571
cmp     al, 2Eh ; '.'
jnz     short loc_49573
mov     bl, 1
jmp     short loc_49573

loc_49571:
xor     bl, bl

loc_49573:
loop    loc_4954B
and     dx, dx
jz      short loc_4958E
and     bl, bl
jnz     short loc_4958E
lea     ax, [di+4]
cmp     ax, ds:15Ch
jnb     short loc_495DB
mov     si, dx
push    ds
push    cs
pop     ds
assume ds:seg090
movsw
movsw
pop     ds
assume ds:nothing

loc_4958E:
cmp     di, ds:15Ch
jnb     short loc_495DB
sub     al, al
stosb
mov     cx, di
mov     di, ds:158h
add     di, 4
sub     cx, di
push    ds
mov     si, 13D8h
call    sub_495DE
pop     ds
jb      short loc_495DB
push    ds
mov     si, 13E4h
call    sub_495DE
pop     ds
jb      short loc_495DB
add     di, cx
xchg    di, ds:158h
push    si
push    ds
lds     si, ds:1B1h
mov     [si], di
mov     word ptr [si+2], es
pop     ds
mov     ds:1B1h, di
mov     word ptr ds:1B3h, es
mov     word ptr es:[di+2], 0
pop     si
dec     word ptr ds:160h

loc_495DB:
jmp     loc_482D8



sub_495DE proc near
cmp     word ptr [si+2], 0
jz      short loc_495F5
lds     si, [si]
push    si
push    di
push    cx
add     si, 4
repe cmpsb
pop     cx
pop     di
pop     si
jnz     short sub_495DE
stc
retn

loc_495F5:
clc
retn
sub_495DE endp

jmp     loc_482D8
push    ds
push    ss
pop     ds
call    sub_25EC4
pop     ds
mov     word ptr ds:27Dh, 0
mov     ah, 40h ; '@'
cmp     byte ptr ds:10Ah, 1
jz      short loc_49679
mov     word ptr ds:221h, 0
cmp     word ptr [si], 4101h
jnz     short loc_49691
push    ax
push    cx
push    si
push    di
mov     word ptr ds:253h, 4101h
push    ds
pop     es
lds     bx, ds:14Eh
mov     si, bx

loc_49630:
cmp     byte ptr [bx], 3Ah ; ':'
jz      short loc_4963F
cmp     byte ptr [bx], 5Ch ; '\'
jz      short loc_4963F
cmp     byte ptr [bx], 2Fh ; '/'
jnz     short loc_49642

loc_4963F:
lea     si, [bx+1]

loc_49642:
cmp     byte ptr [bx], 0
jz      short loc_4964A
inc     bx
jmp     short loc_49630

loc_4964A:
mov     cx, bx
sub     cx, si
jz      short loc_49667

loc_49650:
dec     bx
cmp     bx, si
jb      short loc_4965E
cmp     byte ptr [bx], 2Eh ; '.'
jnz     short loc_49650
mov     cx, bx
sub     cx, si

loc_4965E:
mov     di, 253h
cld
mov     al, cl
stosb
rep movsb

loc_49667:
push    es
pop     ds
mov     si, 253h
call    sub_4B49C
pop     di
pop     si
pop     cx
pop     ax
add     si, 2
jmp     short loc_49694
db 90h

loc_49679:
mov     ax, si
sub     ax, 375Bh
xor     dx, dx
add     ax, ds:1B5h
adc     dx, ds:1B7h
div     word ptr ds:1A7h
mov     ds:221h, ax
mov     ah, 40h ; '@'

loc_49691:
call    sub_4B49C

loc_49694:
push    ds
pop     es
mov     di, 215h
mov     ax, bx
stosw
mov     ax, ds:271h
stosw
mov     ax, ds:277h
stosw
mov     ax, ds:26Bh
stosw
mov     ax, ds:283h
stosw
mov     al, ds:10Ah
xor     ah, ah
stosw
inc     di
inc     di
xor     al, al
mov     cx, 0Ch
rep stosw
mov     ds:176h, ax
mov     di, 189h
mov     cx, 4
rep stosw
mov     word ptr ds:182h, 0FFFFh
mov     word ptr ds:5828h, 0FFFFh
mov     word ptr ds:57ECh, 0
jmp     loc_482D8
mov     al, [si]
cmp     al, 0C1h
jnz     short loc_496F0
cmp     word ptr ds:14Ah, 0FFFFh
jnz     short loc_496F0
mov     di, ds:265h
mov     ds:14Ah, di

loc_496F0:
mov     bx, ds:225h
and     bx, bx
jz      short loc_4970D
mov     ax, ds:235h
cmp     ax, ds:17Ch
jbe     short loc_49704
mov     ds:17Ch, ax

loc_49704:
and     ax, ax
jz      short loc_4970D
push    bx
call    sub_489E7
pop     bx

loc_4970D:
mov     ax, ds:57ECh
cmp     ax, ds:17Eh
jbe     short loc_49719
mov     ds:17Eh, ax

loc_49719:
mov     ax, ds:227h
add     ds:581Ah, ax
mov     cx, cs:[bx+894h]

loc_49725:
les     di, ds:265h
add     di, cx
cmp     di, ds:263h
jbe     short loc_49736
call    sub_4746D
jmp     short loc_49725

loc_49736:
xchg    di, ds:265h
mov     si, 215h
shr     cx, 1
rep movsw
jnb     short loc_49744
movsb

loc_49744:
cmp     byte ptr ds:10Ah, 1
jnz     short locret_49778

loc_4974B:
mov     si, ds:13Eh
inc     si
push    ds
pop     es

loc_49752:
mov     cx, ds:13Ch
sub     cx, si
cmp     cx, 2
jnb     short loc_49762
call    near ptr sub_4766D
jmp     short loc_49752

loc_49762:
sub     ax, ax
mov     di, si
shr     cx, 1
repe scasw
mov     si, di
jz      short loc_49752
dec     si
dec     si
cmp     byte ptr [si], 1
adc     si, ax
jmp     loc_482DD

locret_49778:
retn

loc_49779:
xor     ah, ah
call    sub_4B49C
mov     ds:174h, bx

loc_49782:
les     di, ds:277h
add     di, 2
cmp     di, ds:275h
jbe     short loc_49794
call    sub_4746D
jmp     short loc_49782

loc_49794:
xchg    di, ds:277h
mov     es:[di], bx
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh
cmp     si, ds:13Eh
jb      short loc_49779
jmp     loc_482D8

loc_497AA:
xor     ah, ah
call    sub_4B49C

loc_497AF:
les     di, ds:277h
add     di, 2
cmp     di, ds:275h
jbe     short loc_497C1
call    sub_4746D
jmp     short loc_497AF

loc_497C1:
xchg    di, ds:277h
mov     es:[di], bx
add     si, 5
cmp     si, ds:13Eh
jb      short loc_497AA
jmp     loc_482D8
jmp     loc_482D8

loc_497D7:
mov     ah, 80h
call    sub_4B49C

loc_497DC:
les     di, ds:27Dh
add     di, 2
cmp     di, ds:27Bh
jbe     short loc_497EE
call    sub_4746D
jmp     short loc_497DC

loc_497EE:
xchg    di, ds:27Dh
mov     es:[di], bx
cmp     si, ds:13Eh
jb      short loc_497D7
jmp     loc_482D8
sub     bx, bx
add     bl, [si]
jge     short loc_4980C
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4980C:
inc     si
mov     bp, bx
sub     bx, bx
add     bl, [si]
jge     short loc_4981D
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4981D:
inc     si
or      bx, bx
jnz     short loc_49835
mov     dx, ds:265h
inc     dx
mov     bp, 0FFFFh
add     si, 2
mov     byte ptr ds:188h, 1
jmp     loc_498CE

loc_49835:
mov     byte ptr ds:188h, 0
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
mov     dx, bx
add     dx, ds:217h
dec     bp
cmp     bp, 0FFFFh
jz      short loc_4985D
shl     bp, 1
add     bp, ds:21Dh
mov     es, word ptr ds:285h
mov     bp, es:[bp+0]

loc_4985D:
jmp     short loc_498CE
align 2

loc_49860:
les     di, ds:26Bh
add     di, ds:186h
cmp     di, ds:269h
jbe     short loc_49873
call    sub_4746D
jmp     short loc_49860

loc_49873:
xchg    di, ds:26Bh
mov     ds:172h, di
mov     es:[di], dx
mov     es:[di+4], bp
cmp     byte ptr ds:13D6h, 0
jz      short loc_4989C
xor     ax, ax
mov     es:[di+8], ax
mov     al, ds:188h
mov     es:[di+0Ah], ax
mov     word ptr es:[di+6], 0FFFFh

loc_4989C:
push    bp
push    dx
push    di
mov     ah, 0
call    sub_4B49C
pop     di
pop     dx
pop     bp
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_498D7
mov     es:[bx], di
cmp     byte ptr ds:13D6h, 0
jz      short loc_498BF
mov     es, word ptr ds:26Dh
mov     es:[di+6], bx

loc_498BF:
lodsw
mov     es, word ptr ds:26Dh
mov     es:[di+2], ax
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh

loc_498CE:
cmp     si, ds:13Eh
jb      short loc_49860
jmp     loc_482D8

loc_498D7:
cmp     byte ptr ds:10Ah, 1
jnz     short loc_498E5
cmp     byte ptr ds:13D4h, 1
jnz     short loc_498BF

loc_498E5:
call    loc_498EA
jmp     short loc_498BF

loc_498EA:
push    si
push    di
push    bx
push    di
push    ax
push    dx
push    es
push    bx
mov     es, word ptr ds:261h
mov     si, es:[bx]
mov     es, word ptr ds:26Dh
mov     si, es:[si]
test    si, 1
jnz     short loc_4990E
mov     es, word ptr ds:273h
mov     si, es:[si+0Ah]

loc_4990E:
mov     bx, si
push    ds
pop     es
pop     si
pop     ds
push    bx
mov     di, 68h ; 'h'
call    sub_4B7FE
pop     si
mov     word ptr ds:164h, 1
mov     word ptr ds:162h, 1
and     si, 0FFFEh
cmp     si, ds:265h
jz      short loc_4996E
mov     es, word ptr ds:267h
mov     si, es:[si]
push    ds
pop     es
mov     ds, word ptr ds:261h
mov     di, 0B8h
call    sub_4B7FE
push    ds
mov     ax, 0B8h
push    ax
push    ds
mov     ax, 68h ; 'h'
push    ax
mov     ax, 0C2h
cmp     byte ptr ds:10Ah, 1
jz      short loc_49966
mov     byte ptr ds:11Bh, 1
mov     ax, 12h
mov     word ptr ds:164h, 0FFFFh

loc_49966:
mov     cx, 8
call    sub_4B78B
jmp     short loc_49991

loc_4996E:
push    ds
mov     ax, 68h ; 'h'
push    ax
mov     ax, 0C1h
cmp     byte ptr ds:10Ah, 1
jz      short loc_4998B
mov     byte ptr ds:11Bh, 1
mov     ax, 11h
mov     word ptr ds:164h, 0FFFFh

loc_4998B:
mov     cx, 4
call    sub_4B78B

loc_49991:
pop     dx
pop     ax
pop     di
pop     bx
call    sub_4B5AC
cmp     byte ptr ds:10Ah, 1
jz      short loc_499B2
mov     byte ptr ds:11Bh, 1
call    sub_4B628
pop     es
inc     bp
jb      short loc_49A1D
outsw
jb      short near ptr loc_499E7+1
and     bl, ch
push    cs
nop

loc_499B2:
call    sub_4B628
or      [bx+61h], dx
jb      short near ptr loc_49A27+1
imul    bp, [bp+67h], 203Ah
mov     si, bx
call    sub_4B6A4
mov     es, word ptr ds:261h
mov     si, es:[bx]
mov     es, word ptr ds:26Dh
mov     si, es:[si]
test    si, 1
jnz     short loc_499E0
mov     es, word ptr ds:273h
mov     si, es:[si+0Ah]

loc_499E0:
and     si, 0FFFEh
cmp     si, ds:265h

loc_499E7:
jz      short loc_49A0C
push    si
call    sub_4B628
adc     sp, [bx+si]
db      64h
imul    ebp, gs:[bp+65h], 6E692064h
and     [di+6Fh], ch
db      64h
jnz     short loc_49A6B
and     gs:[bp-72h], bl
push    es
add     ah, [esi]
mov     si, [si]
call    sub_4B6A4

loc_49A0C:
call    sub_4B628
sbb     [bx+si], sp
imul    si, [bp+di+20h], 7564h
jo      short loc_49A84
imul    sp, [bp+di+61h], 6574h

loc_49A1D:
and     fs:[bx+di+6Eh], ch
and     [di+6Fh], ch
db      64h
jnz     short near ptr loc_49A92+1

loc_49A27:
and     gs:[bp+di+1536h], cl
add     ch, al
jz      short near ptr byte_49A4C
call    sub_4B630
call    sub_4B5BE
pop     di
pop     si
retn
mov     word ptr ds:162h, 1
xor     cx, cx
mov     ax, 0Dh
jmp     loc_4B60C
db 0C4h, 3Eh, 71h, 2, 83h
byte_49A4C db 0C7h, 10h, 3Bh, 3Eh, 6Fh, 2, 76h, 5, 0E8h
db 16h, 0DAh, 0EBh, 0EEh, 87h, 3Eh, 71h
db 2, 26h, 0C7h, 45h, 8, 2 dup(0FFh), 0ACh
db 26h, 88h, 5, 26h, 0C6h, 45h, 1

loc_49A6B:
add     [si], bh
sal     byte ptr [bp+di-37h], 0A8h
loopne  near ptr loc_49AE6+2
jnp     near ptr unk_4C083
mov     [di+0Ch], cx
sub     bx, bx
add     si, 3
mov     es:[di+0Eh], bx
lodsw

loc_49A84:
mov     es:[di+2], ax
sub     bx, bx
add     bl, [si]
jge     short loc_49A96
inc     si
sub     bl, 80h

loc_49A92:
mov     bh, bl
mov     bl, [si]

loc_49A96:
inc     si
dec     bx
shl     bx, 1
mov     es, word ptr ds:27Fh
mov     bx, es:[bx]
mov     es, word ptr ds:273h
mov     es:[di+4], bx
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_49ABD
mov     ax, ds:12Ah
inc     ax
mov     es:[bx], ax
mov     ds:12Ah, ax

loc_49ABD:
mov     es, word ptr ds:273h
mov     bx, ds:265h
mov     es:[di+0Ah], bx
sub     bx, bx
add     bl, [si]
jge     short loc_49AD7
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49AD7:
inc     si
dec     bx
shl     bx, 1
mov     es, word ptr ds:27Fh
mov     bx, es:[bx]
mov     es, word ptr ds:273h

loc_49AE6:
mov     es:[di+6], bx
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_49AFE
mov     ax, ds:12Ah
inc     ax
mov     es:[bx], ax
mov     ds:12Ah, ax

loc_49AFE:
jmp     loc_482D8
sub     bx, bx
add     bl, [si]
jge     short loc_49B0F
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49B0F:
inc     si
dec     bx
shl     bx, 1
mov     es, word ptr ds:27Fh
mov     dx, es:[bx]

loc_49B1A:
les     di, ds:283h
add     di, 2
cmp     di, ds:281h
jbe     short loc_49B2C
call    sub_4746D
jmp     short loc_49B1A

loc_49B2C:
xchg    di, ds:283h
mov     es:[di], dx
jmp     short loc_49B6A
align 2

loc_49B36:
lodsb
cmp     al, 0FFh
jnz     short loc_49B73
sub     bx, bx
add     bl, [si]
jge     short loc_49B49
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49B49:
inc     si
or      bx, bx
jz      short loc_49B73
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, ds:217h
mov     es, word ptr ds:273h
cmp     word ptr es:[bx+8], 0FFFFh
jnz     short loc_49B73
mov     es:[bx+8], dx

loc_49B6A:
cmp     si, ds:13Eh
jb      short loc_49B36
jmp     loc_482D8

loc_49B73:
mov     si, dx
push    ds
pop     es
mov     ds, word ptr ds:261h
mov     di, 68h ; 'h'
call    sub_4B7FE
mov     word ptr ds:162h, 1
push    ds
mov     ax, 68h ; 'h'
push    ax
mov     cx, 4
mov     ax, 0Eh
jmp     loc_4B60C
mov     cx, ds:223h
jmp     short loc_49C08
align 2

loc_49B9C:
mov     al, [si]
inc     si
test    al, 80h
jnz     short loc_49BC4
shr     al, 1
shr     al, 1
test    al, 10h
jnz     short loc_49BAD
and     al, 3

loc_49BAD:
and     al, 7
cmp     al, 3
jz      short loc_49BBE
ja      short loc_49C08
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh
jmp     short loc_49C08
align 2

loc_49BBE:
add     si, 2
jmp     short loc_49C08
align 2

loc_49BC4:
mov     ah, al
lodsb
mov     di, ax
and     ah, 18h
cmp     ah, 8
jnz     short loc_49BE2
inc     cx
cmp     byte ptr ds:10Eh, 1
jnz     short loc_49BE2
and     di, 3Fh
call    sub_49DD9
dec     ax
add     cx, ax

loc_49BE2:
lodsb
test    al, 80h
jnz     short loc_49BF1
cmp     al, 30h ; '0'
jnb     short loc_49C1C
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh

loc_49BF1:
not     al
test    al, 8
jz      short loc_49C01
test    al, 3
jz      short loc_49C17
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh

loc_49C01:
test    al, 4
jz      short loc_49C08
add     si, 2

loc_49C08:
cmp     si, ds:13Eh
jnb     short loc_49C10
jmp     short loc_49B9C

loc_49C10:
mov     ds:223h, cx
jmp     loc_482D8

loc_49C17:
add     si, 2
jmp     short loc_49C01

loc_49C1C:
cmp     al, 40h ; '@'
jnb     short loc_49BF1
add     si, 2
jmp     short loc_49BF1
cmp     byte ptr [si], 80h
sbb     si, 0FFFEh
sub     bx, bx
add     bl, [si]
jge     short loc_49C39
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49C39:
inc     si
cmp     byte ptr ds:13D6h, 0
jz      short loc_49C89
cmp     bx, ds:182h
jz      short loc_49C5E
mov     ds:182h, bx
inc     word ptr ds:237h
mov     ax, ds:237h
cmp     ax, ds:17Ah
jbe     short loc_49C5B
mov     ds:17Ah, ax

loc_49C5B:
call    near ptr sub_49C8C

loc_49C5E:
cmp     word ptr ds:5828h, 0FFFFh
jnz     short loc_49C6F
inc     word ptr ds:233h
mov     word ptr ds:5828h, 0

loc_49C6F:
mov     ax, ds:13Eh
sub     ax, si
shr     ax, 1
shr     ax, 1
add     ds:231h, ax
cmp     word ptr ds:225h, 0
jnz     short loc_49C89
mov     word ptr ds:225h, 2

loc_49C89:
jmp     loc_482D8



sub_49C8C proc far
push    si
dec     bx
cmp     bx, 80h
jnb     short loc_49CB4
mov     si, bx
and     si, 7
shr     bx, 1
shr     bx, 1
shr     bx, 1
mov     al, cs:[si+29B7h]
test    [bx+189h], al
jnz     short loc_49CB2
inc     word ptr ds:235h
or      [bx+189h], al

loc_49CB2:
pop     si
retn

loc_49CB4:
jmp     loc_476E5
sub_49C8C endp

db 1, 2, 4, 8, 10h, 20h, 40h, 80h, 1Eh, 16h
db 1Fh, 9Ah, 0D4h, 4
dw seg seg009
pop     ds
mov     es, word ptr ds:267h
mov     si, ds:140h
mov     ds:180h, si
mov     bx, es:[si+10h]
mov     cx, cs:[bx+894h]
mov     ax, 26h ; '&'
sub     ax, cx
add     ds:140h, cx
cmp     word ptr es:[si+0Ah], 2
jb      short loc_49D1E
mov     di, 215h
push    es
push    ds
pop     es
pop     ds
shr     cx, 1
rep movsw
jnb     short loc_49CFB
movsb

loc_49CFB:
xchg    ax, cx
shr     cx, 1
rep stosw
push    es
push    ds
pop     es
pop     ds
cmp     byte ptr ds:13D6h, 0
jz      short loc_49D1B
push    word ptr ds:13D2h
mov     byte ptr ds:13D2h, 0
call    sub_48A1A
pop     ax
mov     ds:13D2h, al

loc_49D1B:
jmp     loc_482D8

loc_49D1E:
mov     si, ds:13Eh
inc     si

loc_49D23:
mov     cx, ds:13Ch
sub     cx, si
cmp     cx, 3
jnb     short loc_49D33
call    near ptr sub_4766D
jmp     short loc_49D23

loc_49D33:
mov     bl, [si]
inc     si
lodsw

loc_49D37:
mov     cx, ds:13Ch
sub     cx, si
cmp     cx, ax
jnb     short loc_49D46
call    near ptr sub_4766D
jmp     short loc_49D37

loc_49D46:
mov     di, si
add     di, ax
dec     di
mov     ds:13Eh, di
cmp     bl, 8Ah
jnz     short loc_49D1E
jmp     short loc_49D7F
call    sub_49DA0
mov     al, [si]
cmp     al, 0C1h
jnz     short loc_49D75
cmp     word ptr ds:1D9h, 0FFFFh
jnz     short loc_49D75
inc     si
mov     dx, 0CC00h
call    loc_4A18F
mov     ds:1D7h, cx
mov     ds:1D9h, bx

loc_49D75:
cmp     byte ptr ds:13D6h, 0
jz      short loc_49D7F
call    sub_48D9A

loc_49D7F:
cmp     byte ptr ds:10Ah, 1
jnz     short locret_49D9F
mov     es, word ptr ds:267h
mov     di, ds:140h
cmp     word ptr es:[di+0Ah], 2
jnb     short loc_49D9C
mov     di, ds:180h
jmp     loc_47B9A

loc_49D9C:
jmp     loc_4974B

locret_49D9F:
retn



sub_49DA0 proc near
push    si
cmp     byte ptr ds:10Eh, 0FFh
jz      short loc_49DD2
mov     dx, ds:142h
mov     cx, ds:144h
mov     ax, ds:146h
mov     si, 13E8h
add     dx, ds:1CBh
cmp     byte ptr ds:10Eh, 1
jz      short loc_49DC6
call    sub_4785A
jmp     short loc_49DD2

loc_49DC6:
add     ax, 13E8h
jmp     short loc_49DCE

loc_49DCB:
call    sub_49E13

loc_49DCE:
cmp     si, ax
jb      short loc_49DCB

loc_49DD2:
pop     si
mov     byte ptr ds:10Eh, 0FFh
retn
sub_49DA0 endp




sub_49DD9 proc near
push    cx
push    dx
push    si
push    di
mov     si, 13E8h
add     di, si

loc_49DE2:
call    sub_49DEC
jnb     short loc_49DE2
pop     di
pop     si
pop     dx
pop     cx
retn
sub_49DD9 endp




sub_49DEC proc near
lodsw
push    ax
lodsw
mov     cx, ax
jcxz    short loc_49DFF

loc_49DF3:
push    cx
call    sub_49DEC
pop     cx
jb      short loc_49E0B
loop    loc_49DF3
jmp     short loc_49E10
db 90h

loc_49DFF:
lodsb
sub     ah, ah
add     si, ax
cmp     si, di
jb      short loc_49E10
mov     ax, 1

loc_49E0B:
pop     dx
mul     dx
stc
retn

loc_49E10:
pop     dx
clc
retn
sub_49DEC endp




sub_49E13 proc near
push    ax
push    cx
push    word ptr [si]
mov     ax, [si+2]
add     si, 4
or      ax, ax
jz      short loc_49E29

loc_49E21:
call    sub_49E13
dec     ax
jnz     short loc_49E21
jmp     short loc_49E31

loc_49E29:
lodsb
sub     ah, ah
call    sub_4785A
add     cx, ax

loc_49E31:
pop     ax
dec     ax
mov     bx, cx
pop     cx
mov     bp, bx
sub     bp, cx
push    dx
mul     bp
pop     dx
xchg    ax, bp
jmp     short loc_49E49
align 2

loc_49E42:
call    sub_478CB
sub     bp, ax
shl     ax, 1

loc_49E49:
cmp     bp, ax
jnb     short loc_49E42
mov     ax, bp
call    sub_478CB
mov     cx, bx
pop     ax
retn
sub_49E13 endp




sub_49E56 proc near
push    si
mov     si, 13E8h
add     di, si
sub     bx, bx
mov     ax, ds:146h
add     ax, 13E8h

loc_49E64:
push    ax
call    sub_49E6F
pop     ax
cmp     si, ax
jb      short loc_49E64
pop     si
retn
sub_49E56 endp




sub_49E6F proc near
push    bp
push    cx
lodsw
mov     cx, ax
mov     bp, si

loc_49E76:
mov     si, bp
lodsw
push    cx
mov     cx, ax
jcxz    short loc_49E86

loc_49E7E:
call    sub_49E6F
loop    loc_49E7E
jmp     short loc_49EA2
align 2

loc_49E86:
lodsb
sub     ah, ah
cmp     di, si
jb      short loc_49E9E
mov     dx, si
add     dx, ax
cmp     di, dx
jnb     short loc_49E9E
push    di
sub     di, si
add     di, bx
call    sub_49F1D
pop     di

loc_49E9E:
add     si, ax
add     bx, ax

loc_49EA2:
pop     cx
loop    loc_49E76
pop     cx
pop     bp
retn
sub_49E6F endp

mov     byte ptr ds:10Eh, 0
jmp     loc_482D8
call    sub_49DA0
mov     byte ptr ds:10Eh, 0
jmp     short loc_49EC3
db 90h
call    sub_49DA0
mov     byte ptr ds:10Eh, 1

loc_49EC3:
sub     bx, bx
add     bl, [si]
jge     short loc_49ED1
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49ED1:
inc     si
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, ds:217h
mov     es, word ptr ds:273h
test    byte ptr es:[bx], 0E0h
jz      short loc_49F15
mov     ds:14Ch, bx
mov     ax, es:[bx+0Ch]
mov     ds:142h, ax
lodsw
add     ax, es:[bx+0Eh]
mov     ds:144h, ax
mov     cx, ds:13Eh
sub     cx, si
mov     ds:146h, cx
push    ds
pop     es
mov     di, 13E8h
shr     cx, 1
rep movsw
jnb     short loc_49F12
movsb

loc_49F12:
jmp     loc_482D8

loc_49F15:
mov     byte ptr ds:10Eh, 0FFh
jmp     loc_482D8



sub_49F1D proc near
cmp     byte ptr ds:10Fh, 1
jz      short loc_49F25
retn

loc_49F25:
inc     word ptr ds:1C9h
push    ax
push    bx
push    cx
push    dx
push    si
push    di
push    bp
add     di, ds:144h
mov     ds:1BFh, di
mov     di, ds:142h
mov     ds:1C1h, di
mov     cx, ds:148h
mov     dx, 0
mov     si, 1BFh
mov     ax, 4
add     ds:148h, ax
call    sub_4785A
pop     bp
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_49F1D endp


loc_49F5C:
lodsb
test    al, 80h
jnz     short loc_49FCA
mov     di, ax
and     di, 3
shr     al, 1
shr     al, 1
test    al, 10h
jnz     short loc_49F9C
and     al, 3
mov     [di+23Bh], al
shl     di, 1
cmp     al, 3
jz      short loc_49F90
sub     bx, bx
add     bl, [si]
jge     short loc_49F88
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49F88:
inc     si
mov     [di+23Fh], bx
jmp     short loc_4A00D
align 2

loc_49F90:
mov     bx, [si]
add     si, 2
mov     [di+23Fh], bx
jmp     short loc_4A00D
align 2

loc_49F9C:
and     al, 7
mov     [di+247h], al
shl     di, 1
cmp     al, 3
jz      short loc_49FBE
sub     bx, bx
add     bl, [si]
jge     short loc_49FB6
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_49FB6:
inc     si
mov     [di+24Bh], bx
jmp     short loc_4A00D
align 2

loc_49FBE:
mov     bx, [si]
add     si, 2
mov     [di+24Bh], bx
jmp     short loc_4A00D
align 2

loc_49FCA:
mov     dh, al
mov     dl, [si]
inc     si
call    loc_4A18F
jnb     short loc_49FD7
jmp     short loc_4A00D
db 90h

loc_49FD7:
and     dh, 1Ch
jz      short loc_49FED
cmp     dh, 8
jb      short loc_49FF3
jz      short loc_49FF9
add     [di+13E8h], cx
add     di, 2
jmp     short loc_49FF9
db 90h

loc_49FED:
add     [di+13E8h], cl
jmp     short loc_4A00D

loc_49FF3:
add     [di+13E8h], cx
jmp     short loc_4A00D

loc_49FF9:
add     [di+13E8h], bx
cmp     byte ptr ds:10Eh, 1
jnz     short loc_4A00A
call    sub_49E56
jmp     short loc_4A00D
align 2

loc_4A00A:
call    sub_49F1D

loc_4A00D:
cmp     si, ds:13Eh
jnb     short loc_4A016
jmp     loc_49F5C

loc_4A016:
jmp     loc_482D8
lodsw
cmp     byte ptr ds:13D6h, 0
jz      short loc_4A047
cmp     word ptr ds:13BEh, 0
jnz     short loc_4A047
mov     bl, ah
xor     bh, bh
sub     bx, 0E2h
jl      short loc_4A047
cmp     bx, 16h
jnb     short loc_4A047
shl     bx, 1
call    word ptr cs:[bx+107Dh]
cmp     si, ds:13Eh
jz      short loc_4A047
jmp     loc_476E5

loc_4A047:
jmp     loc_482D8



sub_4A04A proc near
cmp     ax, 0Ah
jb      short loc_4A063
push    dx
push    bx
mov     bx, 0Ah
sub     dx, dx
div     bx
pop     bx
dec     cx
call    sub_4A04A
mov     ax, dx
pop     dx
jmp     short loc_4A06E
db 90h

loc_4A063:
push    ax
mov     al, 20h ; ' '

loc_4A066:
mov     al, 20h ; ' '
call    sub_4B5C7
loop    loc_4A066
pop     ax

loc_4A06E:
add     al, 30h ; '0'
call    sub_4B5C7
retn
sub_4A04A endp

db 83h, 3Eh, 0BEh, 13h, 0, 75h, 7, 80h, 3Eh
db 0D6h, 13h, 0, 75h, 0Ah, 80h, 3Eh, 0D1h
db 13h, 1, 74h, 3, 0E9h, 4Ch, 0E2h, 80h
db 3Ch, 80h, 83h, 0DEh, 0FEh, 2Bh, 0DBh
db 2, 1Ch, 7Dh, 8, 46h, 80h, 0EBh, 80h, 8Ah
db 0FBh, 8Ah, 1Ch, 46h, 8Bh, 0D3h, 4Bh, 0D1h
db 0E3h, 0D1h, 0E3h, 0D1h, 0E3h, 0D1h, 0E3h
db 3, 1Eh, 17h, 2, 8Eh, 6, 73h, 2, 26h, 8Bh
db 47h, 0Ch, 26h, 8Bh, 4Fh, 0Eh, 26h, 8Bh
db 7Fh, 8, 83h, 2 dup(0FFh), 74h, 14h, 8Eh
db 6, 61h, 2, 26h, 2Bh, 5, 0D1h, 0E0h, 0D1h
db 0E0h, 0D1h, 0E0h, 0D1h, 0E0h, 3, 0C8h
db 26h, 8Bh, 5, 80h, 3Eh, 0D6h, 13h, 0, 74h
db 1Ch, 83h, 3Eh, 0BEh, 13h, 0, 75h, 0Bh
db 50h, 53h, 56h, 0E8h, 47h, 0F3h, 5Eh, 5Bh
db 58h, 33h, 0C9h, 80h, 3Eh, 0D1h, 13h, 1
db 74h, 3, 0E9h, 0DCh, 0E1h, 8Bh, 0D0h, 8Bh
db 3Eh, 36h, 1, 3Bh, 1Eh, 52h, 1, 89h, 1Eh
db 52h, 1, 74h, 45h, 56h, 0E8h, 18h, 15h
db 11h, 4Ch, 69h, 6Eh, 65h, 20h, 6Eh, 75h
db 6Dh, 62h, 65h, 72h, 73h, 20h, 66h, 6Fh
db 72h, 20h, 0E8h, 34h, 0D2h, 0B0h, 28h
db 0E8h, 9Dh, 14h, 8Bh, 36h, 15h, 2, 0E8h
db 73h, 15h, 0E8h, 0F4h, 14h, 0Ah, 29h, 20h
db 73h, 65h, 67h, 6Dh, 65h, 6Eh, 74h, 20h
db 8Eh, 6, 73h, 2, 26h, 8Bh, 77h, 4, 0E8h
db 5Ah, 15h, 0E8h, 0E3h, 14h, 0E8h, 0E0h
db 14h, 5Eh, 33h, 0DBh, 0EBh, 2Ah, 90h, 83h
db 0FBh, 4, 72h, 5, 0E8h, 0D2h, 14h, 33h
db 0DBh, 43h, 0ADh, 51h, 0B9h, 5, 0, 0E8h
db 0E1h, 0FEh, 59h, 0B0h, 20h, 0E8h, 58h
db 14h, 8Bh, 0C2h, 0E8h, 8, 15h, 0B0h, 3Ah
db 0E8h, 4Eh, 14h, 0ADh, 3, 0C1h, 0E8h, 0FDh
db 14h, 3Bh, 36h, 3Eh, 1, 72h, 0D1h, 0E8h
db 0A8h, 14h, 89h, 3Eh, 36h, 1, 0E9h, 49h
db 0E1h

loc_4A18F:
mov     byte ptr ds:10Fh, 1
mov     word ptr ds:108h, 0FFFFh
lodsb
mov     ah, al
shr     al, 1
shr     al, 1
shr     al, 1
shr     al, 1
test    al, 8
jz      short loc_4A1C3
mov     bx, ax
and     bx, 3
mov     al, [bx+247h]
shl     bx, 1
mov     bp, [bx+24Bh]
jmp     short loc_4A1D8
db 90h

loc_4A1BB:
ja      short loc_4A1D8
mov     bp, [si]
inc     si
inc     si
jmp     short loc_4A1D8

loc_4A1C3:
cmp     al, 3
jnb     short loc_4A1BB
sub     bx, bx
add     bl, [si]
jge     short loc_4A1D5
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4A1D5:
inc     si
mov     bp, bx

loc_4A1D8:
test    ah, 8
jz      short loc_4A20D
sub     cx, cx
test    ah, 4
jnz     short loc_4A1E8
mov     cx, [si]
inc     si
inc     si

loc_4A1E8:
mov     bl, ah
and     bx, 3
mov     ah, [bx+23Bh]
shl     bx, 1
mov     bx, [bx+23Fh]
jmp     short loc_4A249
align 2

loc_4A1FA:
mov     bx, [si]
mov     cx, [si+2]
add     si, 4
jmp     short loc_4A249
db 90h

loc_4A205:
mov     bx, [si]
add     si, 2
jmp     short loc_4A249
db 90h

loc_4A20D:
test    ah, 4
jnz     short loc_4A230
and     ah, 3
cmp     ah, 3
jz      short loc_4A1FA
sub     bx, bx
add     bl, [si]
jge     short loc_4A228
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4A228:
inc     si
mov     cx, [si]
add     si, 2
jmp     short loc_4A249

loc_4A230:
sub     cx, cx
and     ah, 3
cmp     ah, 3
jz      short loc_4A205
sub     bx, bx
add     bl, [si]
jge     short loc_4A248
inc     si
sub     bl, 80h
mov     bh, bl
mov     bl, [si]

loc_4A248:
inc     si

loc_4A249:
cmp     ah, 2
jz      short loc_4A29D
ja      short loc_4A293
or      ah, ah
jnz     short loc_4A27B
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, ds:217h
mov     es, word ptr ds:273h
add     cx, es:[bx+0Eh]
mov     di, es:[bx+0Ch]
test    byte ptr es:[bx], 0E0h
jnz     short loc_4A278
mov     byte ptr ds:10Fh, 0

loc_4A278:
jmp     short loc_4A2E8
db 90h

loc_4A27B:
dec     bx
shl     bx, 1
add     bx, ds:21Dh
mov     es, word ptr ds:285h
mov     bx, es:[bx]
mov     es, word ptr ds:261h
mov     di, es:[bx]
jmp     short loc_4A2E8
db 90h

loc_4A293:
mov     di, bx
jmp     short loc_4A2E8
align 2

loc_4A298:
sub     di, di
jmp     short loc_4A2E8
db 90h

loc_4A29D:
dec     bx
shl     bx, 1
add     bx, ds:219h
mov     es, word ptr ds:279h
mov     bx, es:[bx]
mov     es, word ptr ds:261h
mov     di, es:[bx]
cmp     di, 0FFFEh
jb      short loc_4A2BA
jmp     loc_4A490

loc_4A2BA:
mov     ds:108h, bx
mov     bx, di
mov     es, word ptr ds:26Dh
add     cx, es:[bx+2]
mov     bx, es:[bx]
test    bx, 1
jnz     short loc_4A298
mov     es, word ptr ds:273h
add     cx, es:[bx+0Eh]
mov     di, es:[bx+0Ch]
test    byte ptr es:[bx], 0E0h
jnz     short loc_4A2E8
mov     byte ptr ds:10Fh, 0

loc_4A2E8:
xchg    bx, bp
cmp     al, 2
ja      short loc_4A327
jnz     short loc_4A2F3
jmp     short loc_4A366
db 90h

loc_4A2F3:
or      al, al
jnz     short loc_4A30F
dec     bx
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bx, ds:217h
mov     es, word ptr ds:273h
mov     bx, es:[bx+0Ch]
jmp     loc_4A39F

loc_4A30F:
dec     bx
shl     bx, 1
add     bx, ds:21Dh
mov     es, word ptr ds:285h
mov     bx, es:[bx]
mov     es, word ptr ds:261h
mov     bx, es:[bx]

loc_4A324:
jmp     short loc_4A39F
db 90h

loc_4A327:
cmp     al, 4
jb      short loc_4A324
mov     bx, di
jz      short loc_4A324
cmp     ah, 2
jnz     short loc_4A324
test    bp, 1
jnz     short loc_4A324
mov     es, word ptr ds:273h
cmp     word ptr es:[bp+8], 0FFFFh
jz      short loc_4A324
mov     bx, es:[bp+8]
mov     es, word ptr ds:261h
mov     bx, es:[bx]
jmp     short loc_4A39F
db 90h

loc_4A353:
mov     bx, es:[bx+4]
mov     es, word ptr ds:261h
mov     bx, es:[bx]
jmp     short loc_4A39F
db 90h

loc_4A361:
sub     bx, bx
jmp     short loc_4A39F
align 2

loc_4A366:
dec     bx
shl     bx, 1
add     bx, ds:219h
mov     es, word ptr ds:279h
mov     bx, es:[bx]
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFEh
jb      short loc_4A381
jmp     loc_4A490

loc_4A381:
mov     bx, es:[bx]
mov     es, word ptr ds:26Dh
cmp     word ptr es:[bx+4], 0FFFFh
jnz     short loc_4A353
mov     bx, es:[bx]
test    bl, 1
jnz     short loc_4A361
mov     es, word ptr ds:273h
mov     bx, es:[bx+0Ch]

loc_4A39F:
mov     bp, di
sub     bp, bx
jz      short loc_4A3B7
cmp     bp, 1000h
jnb     short loc_4A3ED
shl     bp, 1
shl     bp, 1
shl     bp, 1
shl     bp, 1
add     cx, bp
jb      short loc_4A3EB

loc_4A3B7:
mov     di, dx
and     di, 3FFh
test    dh, 40h
jnz     short loc_4A3E9
mov     bp, ds:142h
sub     bp, bx
cmp     bp, 1000h
jnb     short loc_4A3EB
shl     bp, 1
shl     bp, 1
shl     bp, 1
shl     bp, 1
mov     ax, bp
add     ax, ds:144h
jb      short loc_4A3EB
sub     cx, bp
sub     cx, 2
sub     cx, ds:144h
sub     cx, di

loc_4A3E9:
clc
retn

loc_4A3EB:
sub     cx, bp

loc_4A3ED:
push    si
push    cx
push    di
mov     byte ptr ds:11Bh, 1
call    sub_4B5AC
call    sub_4B628
sbb     al, [bp+69h]
js      short near ptr loc_4A474+1
jo      short loc_4A422
outsw
jbe     short near ptr loc_4A469+1
jb      short near ptr loc_4A46C+1
insb
outsw
ja      short near ptr loc_4A42A+1
imul    bp, [bp+20h], 6573h
ins     word ptr es:[edi], dx
outs    dx, byte ptr gs:[si]
jz      short near ptr loc_4A435+1
mov     si, ds:14Ch
mov     es, word ptr ds:273h
mov     si, es:[si+4]

loc_4A422:
push    di
push    ds
pop     es
mov     ds, word ptr ds:261h
push    si

loc_4A42A:
mov     di, 68h ; 'h'
call    sub_4B7FE
pop     si
pop     di
call    sub_4B6A4

loc_4A435:
call    sub_4B628
or      bp, [si]
and     [si+61h], dh
jb      short near ptr loc_4A4A4+2
db      65h
jz      short loc_4A462
cmp     ax, 8B20h
or      ss:[bx+di], al
inc     si
jz      short loc_4A465
add     sp, 4
push    di
push    si
push    ds
pop     es
mov     ds, word ptr ds:261h
mov     di, 0B8h
call    sub_4B7FE
pop     si
pop     di
dec     si
call    sub_4B6A4

loc_4A462:
jmp     short loc_4A472
db 90h

loc_4A465:
pop     ax
call    sub_4B67C

loc_4A469:
call    sub_4B628

loc_4A46C:
add     [bp+si], di
pop     ax
call    sub_4B67C

loc_4A472:
push    di
push    ds

loc_4A474:
mov     ax, 0B8h
push    ax
push    ds
mov     ax, 68h ; 'h'
push    ax
mov     ax, 10h
mov     word ptr ds:162h, 1
mov     cx, 8
call    sub_4B78B
pop     di
jmp     short near ptr loc_4A4F7+1
align 2

loc_4A490:
cmp     word ptr es:[bx], 0FFFEh
jnz     short loc_4A499
jmp     short loc_4A4FF
db 90h

loc_4A499:
dec     word ptr es:[bx]
push    bx
push    si
push    ds
push    es
pop     ds
pop     es
mov     si, bx

loc_4A4A4:
mov     di, 68h ; 'h'
push    es
push    di
call    sub_4B7FE
mov     ax, 48h ; 'H'
mov     cx, 4
mov     word ptr ds:162h, 1
call    sub_4B78B
pop     si
pop     bx
push    si
mov     byte ptr ds:11Bh, 1
call    sub_4B5AC
call    sub_4B628
adc     dl, [di+6Eh]
db      64h
imul    ebp, gs:[bp+65h], 79732064h
insw
bound   bp, [bx+6Ch]
and     [bx], ah
mov     si, bx
call    sub_4B6A4
call    sub_4B628
or      al, 27h
and     [bx+di+6Eh], ch
and     [di+6Fh], ch
db      64h
jnz     short loc_4A55B
and     gs:[bp+di+1536h], cl
add     ch, al
lodsb

loc_4A4F7:
adc     ax, bp
xor     ax, 0E811h
rcl     byte ptr [bx+si], 5Eh

loc_4A4FF:
stc
retn
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]

loc_4A55B:
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
cli
and     dh, bh
and     dh, bh
and     dh, bh
and     ah, ah
and     bx, bx
and     sp, [bx+di-8DCh]
and     bh, dh
and     al, 0F7h
and     ah, [di]
sub     bp, si
and     al, 47h
daa
add     [bx+si], bp
xchg    ax, bp
sub     bh, dh
and     ch, [bx+si-41D5h]
sub     bx, [bx]
adc     ds:1E10h, bl
adc     ds:0F710h, bl
and     dh, bh
and     cl, bl
and     al, 0F7h
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     bl, [bx]
adc     bh, dh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     bh, [bx-8D7h]
and     dh, bh
and     dh, bh
and     bl, [bx+di]
sub     ax, 2A56h
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
jz      short loc_4A6C4
mul     word ptr [bp+si]
mul     word ptr [bp+si]
mul     word ptr [bp+si]
or      ax, 0F72Dh
and     dh, [bx+si-44D5h]
sub     bx, [bx]
adc     ds:1E10h, bl
adc     ds:0F710h, bl
and     dh, bh
and     dl, ah
and     al, 0F7h
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh

loc_4A6C4:
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     bl, [bx]
adc     bh, dh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
and     dh, bh
db 22h



sub_4A701 proc near
push    bx
mov     es, word ptr ds:267h
cmp     word ptr es:[si+0Ah], 2
jb      short loc_4A710
jmp     loc_4A7CE

loc_4A710:
mov     word ptr es:[si+0Ah], 2
push    cx
push    si
add     ax, es:[si+0Eh]
mov     bx, es:[si+10h]
push    bx
push    di
push    es
mov     bx, cs:[bx+894h]
mov     di, es:[si+6]
mov     cx, es:[bx+si+6]
xor     bx, bx
mov     es, word ptr ds:26Dh

loc_4A736:
cmp     di, cx
jnb     short loc_4A748
cmp     word ptr es:[di+6], 0FFFFh
jz      short loc_4A742
inc     bx

loc_4A742:
add     di, ds:186h
jmp     short loc_4A736

loc_4A748:
pop     es
pop     di
add     ds:1F5h, bx
pop     bx
mov     bx, cs:[bx+894h]
mov     cx, es:[bx+si+4]
mov     bx, es:[si+4]

loc_4A75C:
cmp     bx, cx
jnb     short loc_4A790
mov     es, word ptr ds:279h
mov     si, es:[bx]
mov     es, word ptr ds:261h
mov     si, es:[si]
cmp     si, 0FFFEh
jnb     short loc_4A78B
mov     es, word ptr ds:26Dh
mov     si, es:[si]
test    si, 1
jnz     short loc_4A7D0
mov     es, word ptr ds:273h
mov     si, es:[si+0Ah]

loc_4A788:
call    sub_4A701

loc_4A78B:
add     bx, 2
jmp     short loc_4A75C

loc_4A790:
mov     es, word ptr ds:267h
pop     si
inc     dx
mov     es:[si+0Ah], dx
mov     bx, es:[si+10h]
mov     bx, cs:[bx+894h]
mov     cx, es:[bx+si+2]
mov     bx, es:[si+2]

loc_4A7AB:
cmp     bx, cx
jnb     short loc_4A7CD

loc_4A7AF:
les     di, ds:289h
add     di, 2
cmp     di, ds:287h
jbe     short loc_4A7C1
call    sub_4746D
jmp     short loc_4A7AF

loc_4A7C1:
xchg    di, ds:289h
mov     es:[di], bx
add     bx, 10h
jmp     short loc_4A7AB

loc_4A7CD:
pop     cx

loc_4A7CE:
pop     bx
retn

loc_4A7D0:
dec     si
jmp     short loc_4A788
sub_4A701 endp




sub_4A7D3 proc near
xor     ax, ax
mov     dx, 2
mov     si, ds:14Ah
cmp     si, 0FFFFh
jz      short loc_4A7E4
call    sub_4A701

loc_4A7E4:
xor     si, si
jmp     short loc_4A804
db 90h

loc_4A7E9:
mov     es, word ptr ds:267h
cmp     word ptr es:[si+0Ah], 0
jnz     short loc_4A7FB
call    sub_4A701
mov     es, word ptr ds:267h

loc_4A7FB:
mov     bx, es:[si+10h]
add     si, cs:[bx+894h]

loc_4A804:
cmp     si, ds:265h
jb      short loc_4A7E9
mov     ds:1C9h, ax
retn
sub_4A7D3 endp

push    es
push    ax
mov     es, word ptr ds:273h
clc
test    byte ptr es:[si], 0E0h
jz      short loc_4A860
test    byte ptr es:[di], 0E0h
stc
jz      short loc_4A860
mov     ax, es:[si+6]
cmp     ax, es:[di+6]
jnz     short loc_4A863
mov     ax, es:[si+4]
cmp     ax, es:[di+4]
jnz     short loc_4A877
cmp     byte ptr ds:115h, 1
jnz     short loc_4A85E
mov     ax, es:[di+0Ah]
cmp     ax, es:[si+0Ah]
jz      short loc_4A85E
push    bx
push    ax
mov     bx, es:[si+0Ah]
mov     es, word ptr ds:267h
mov     ax, es:[bx+0Ah]
pop     bx
cmp     ax, es:[bx+0Ah]
pop     bx
jmp     short loc_4A860
align 2

loc_4A85E:
cmp     si, di

loc_4A860:
pop     ax
pop     es
retn

loc_4A863:
push    bx
push    ax
mov     bx, es:[di+6]
mov     es, word ptr ds:261h
mov     ax, es:[bx]
pop     bx
cmp     es:[bx], ax
pop     bx
jmp     short loc_4A860

loc_4A877:
push    bx
push    ax
mov     bx, es:[di+4]
mov     es, word ptr ds:261h
mov     ax, es:[bx]
pop     bx
cmp     es:[bx], ax
pop     bx
jmp     short loc_4A860



sub_4A88B proc near
test    byte ptr es:[si], 1Ch
jz      short loc_4A8B9
test    byte ptr es:[di], 1Ch
jz      short loc_4A8B9
test    byte ptr es:[si], 2
jnz     short loc_4A8B9
test    byte ptr es:[di], 2
jnz     short loc_4A8B9
mov     bx, es:[si+6]
cmp     bx, es:[di+6]
jnz     short loc_4A8B9
mov     bx, es:[si+4]
cmp     bx, es:[di+4]
jnz     short loc_4A8B9
stc
retn

loc_4A8B9:
clc
retn
sub_4A88B endp




sub_4A8BB proc near
push    cx
shr     cx, 1
shr     cx, 1
shr     cx, 1
shr     cx, 1
add     dx, cx
pop     cx
and     cx, 0Fh
retn
sub_4A8BB endp




sub_4A8CB proc near
mov     ax, ds:120h
inc     ax
jnz     short loc_4A8E7
mov     ax, 10h
mul     word ptr ds:1CBh
push    ax
and     ax, 1FFFh
mov     ds:124h, ax
pop     ax
mov     cl, 0Dh
shr     ax, cl
mov     ds:120h, ax

loc_4A8E7:
cmp     byte ptr ds:13D6h, 0
jz      short loc_4A961
mov     ax, ds:1CBh
xor     dx, dx
add     ax, ds:128h
adc     dx, 0
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
add     ax, ds:126h
adc     dx, 0
push    ax
push    dx
mov     bx, ax
and     bh, 1
mov     ds:1C5h, bx
add     ax, 1FFh
adc     dx, 0
mov     al, ah
mov     ah, dl
shr     dh, 1
rcr     ax, 1
mov     ds:1C7h, ax
mov     si, 1E5h
mov     word ptr [si], 52FBh
mov     word ptr [si+2], 208h
mov     al, ds:13D2h
mov     [si+28h], al
mov     ax, ds:12Eh
mov     cx, 1000h
mul     cx
add     ax, ds:130h
adc     dx, 0
mov     [si+20h], ax
mov     [si+22h], dx
pop     dx
pop     ax
mov     cx, 30h ; '0'
call    sub_48BD6
xor     dx, dx
jmp     short loc_4A9A5
db 90h

loc_4A961:
mov     ax, ds:124h
push    ax
and     ax, 1FFh
mov     ds:1C5h, ax
pop     ax
add     ax, 1FFh
mov     cl, 9
shr     ax, cl
mov     bx, ds:120h
mov     cl, 3
shl     bx, cl
add     ax, bx
mov     ds:1C7h, ax
mov     dx, ds:120h
mov     cl, 8
shl     dx, cl
sub     dx, ds:1CBh
mov     cx, ds:124h
call    sub_4A8BB
mov     ax, dx
mov     dx, ds:128h
mov     cx, ds:126h
add     cx, 0Fh
call    sub_4A8BB
sub     dx, ax

loc_4A9A5:
mov     ds:1CDh, dx
mov     word ptr ds:1CFh, 0FFFFh
mov     word ptr ds:1DDh, 0
mov     word ptr ds:1DFh, 1
cmp     word ptr ds:1D9h, 0FFFFh
jnz     short loc_4A9CE
mov     word ptr ds:1D9h, 0
mov     word ptr ds:1D7h, 0

loc_4A9CE:
mov     word ptr ds:1C3h, 5A4Dh
mov     word ptr ds:1E1h, 20FBh
mov     word ptr ds:1E3h, 6A72h
sub     dx, dx
sub     cx, cx
mov     ax, 22h ; '"'
mov     si, 1C3h
call    sub_4785A
mov     di, ds:136h
call    sub_4B628
pop     ss
push    ax
jb      short loc_4AA67
db      67h
jb      loc_4AA5C
insw
and     [di+6Eh], ah
jz      short near ptr loc_4AA72+1
jns     short near ptr loc_4AA20+3
jo      short near ptr loc_4AA72+2
imul    bp, [bp+74h], 6120h
jz      short loc_4AA2C
mov     ax, ds:1D9h
call    sub_4B67C
mov     al, 3Ah ; ':'
call    sub_4B5C7
mov     ax, ds:1D7h
call    sub_4B67C
call    sub_4B630

loc_4AA20:
mov     ds:136h, di
cmp     byte ptr ds:10Ch, 1
jz      short locret_4AA5F
push    ds

loc_4AA2C:
push    ss
pop     ds
xor     ax, ax
mov     ds:0BFB0h, ax
mov     ds:0BFB2h, ax
mov     ax, 0C3h
push    ax
call    sub_31324
pop     ax
pop     ds
call    sub_4B5AC
call    sub_4B628
adc     [bx+61h], dx
jb      short near ptr loc_4AAB8+2
imul    bp, [bp+67h], 203Ah
outsb
outsw
and     [bp+di+74h], dh
popa
arpl    [bp+di-18h], bp
aam     0Bh

loc_4AA5C:
call    sub_4B5BE

locret_4AA5F:
retn
sub_4A8CB endp ; sp-analysis failed




sub_4AA60 proc near
cmp     byte ptr ds:118h, 1
jz      short loc_4AA6A

loc_4AA67:
jmp     locret_4AB0D

loc_4AA6A:
push    ax
push    bx
push    di
push    si
mov     es, word ptr ds:273h

loc_4AA72:
mov     al, es:[di]
mov     ds:25Ch, al
mov     bx, di
mov     di, ds:136h
mov     al, 20h ; ' '
call    sub_4B5C7
mov     ax, dx
test    byte ptr ds:25Ch, 2
jz      short loc_4AA8F
sub     ax, 1000h

loc_4AA8F:
call    sub_4B67C
mov     ax, bp
call    sub_4B65C
call    sub_4B628
add     cl, [bx+si+20h]
mov     ax, cx
sub     ax, bp
push    ax
push    dx
push    cx
or      ax, ax
jz      short loc_4AAA9
dec     cx

loc_4AAA9:
call    sub_4A8BB
mov     ax, dx
call    sub_4B67C
mov     ax, cx
call    sub_4B65C
pop     cx
pop     dx

loc_4AAB8:
call    sub_4A8BB
call    sub_4B628
add     cl, [bx+si+20h]
mov     al, ds:25Ch
shr     al, 1
and     al, 1
add     al, 30h ; '0'
call    sub_4B5C7
pop     ax
call    sub_4B67C
call    sub_4B628
add     cl, [bx+si+20h]
mov     es, word ptr ds:273h
mov     si, es:[bx+4]
call    sub_4B6A4
mov     al, 20h ; ' '
push    cx
mov     cx, 12h
sub     cx, ds:154h
jbe     short loc_4AAF3

loc_4AAEE:
call    sub_4B5C7
loop    loc_4AAEE

loc_4AAF3:
call    sub_4B5C7
pop     cx
mov     es, word ptr ds:273h
mov     si, es:[bx+6]
call    sub_4B6A4
call    sub_4B630
mov     ds:136h, di
pop     si
pop     di
pop     bx
pop     ax

locret_4AB0D:
retn
sub_4AA60 endp


loc_4AB0E:
cmp     byte ptr ds:118h, 1
jnz     short loc_4AB58
mov     di, ds:136h
call    sub_4B630
call    sub_4B628
and     cs:[bp+di+74h], dl
popa
jb      short loc_4AB9A
and     [bx+si], ah
push    bx
jz      short loc_4AB9A
jo      short near ptr loc_4AB4C+1
and     [bx+si], ah
dec     sp
outs    dx, byte ptr gs:[si]
db      67h
jz      loc_4AB9D
and     [bp+61h], cl
insw
and     gs:[bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bp+di+6Ch], al
popa

loc_4AB4C:
jnb     short loc_4ABC1
call    sub_4B630
call    sub_4B630
mov     ds:136h, di

loc_4AB58:
mov     word ptr ds:1D1h, 0
mov     word ptr ds:1D3h, 0
sub     si, si
sub     cx, cx
mov     bp, cx
sub     dx, dx
mov     es, word ptr ds:28Bh
mov     di, es:[si]

loc_4AB73:
cmp     si, ds:289h
jnb     short loc_4AB7C
jmp     short loc_4ABBD
align 2

loc_4AB7C:
call    sub_4AA60
call    sub_4A8BB
mov     ds:128h, dx
mov     ds:126h, cx
mov     bx, 22h ; '"'
mov     ds:148h, bx
mov     ax, ds:1C9h
shl     ax, 1
shl     ax, 1
add     ax, bx

loc_4AB9A:
add     ax, 1FFh

loc_4AB9D:
and     ax, 0FE00h
mov     cl, 4
shr     ax, cl
mov     ds:1CBh, ax
mov     word ptr ds:1DBh, 22h ; '"'
mov     word ptr ds:1D5h, 0
mov     word ptr ds:1C9h, 0
retn

loc_4ABBA:
jmp     loc_4AC86

loc_4ABBD:
push    si
mov     si, es:[si]

loc_4ABC1:
mov     es, word ptr ds:273h
mov     al, es:[si]
test    al, 0E0h
jnz     short loc_4ABCF
jmp     loc_4ACFB

loc_4ABCF:
call    sub_4A88B
sbb     ah, ah
jb      short loc_4ABE0
cmp     si, di
jz      short loc_4ABE0
call    sub_4AA60
call    sub_4A8BB

loc_4ABE0:
mov     es, word ptr ds:273h
test    al, 80h
jnz     short loc_4AC04
test    al, 40h
jz      short loc_4AC36
test    al, 20h
jnz     short loc_4ABFA
add     cx, 1
jb      short loc_4ABBA
and     cl, 0FEh
jmp     short loc_4AC36

loc_4ABFA:
add     cx, 0Fh
jb      short loc_4ABBA
and     cl, 0F0h
jmp     short loc_4AC36

loc_4AC04:
test    al, 20h
jz      short loc_4AC12
add     cx, 3
jb      short loc_4ABBA
and     cl, 0FCh
jmp     short loc_4AC36

loc_4AC12:
mov     bx, dx
and     bx, 0Fh
shl     bx, 1
shl     bx, 1
shl     bx, 1
shl     bx, 1
add     bl, cl
adc     bh, 0
sub     bx, 100h
neg     bx
add     cx, bx
jb      short loc_4ABBA
test    ah, 1
jnz     short loc_4AC36
call    sub_4A8BB

loc_4AC36:
shr     ah, 1
jb      short loc_4AC44
cmp     cx, 10h
jnz     short loc_4AC42
sub     cx, cx
inc     dx

loc_4AC42:
mov     bp, cx

loc_4AC44:
mov     es:[si+0Eh], cx
mov     es:[si+0Ch], dx
mov     bx, es:[si+8]
cmp     bx, 0FFFFh
jz      short loc_4AC62
mov     es, word ptr ds:261h
cmp     word ptr es:[bx], 0FFFFh
jnz     short loc_4AC62
mov     es:[bx], dx

loc_4AC62:
mov     es, word ptr ds:273h
test    byte ptr es:[si], 2
jnz     short loc_4AC7C
mov     bl, al
mov     ax, es:[si+2]
shr     bl, 1
and     bx, 0Eh
jmp     cs:off_4AD06[bx]

loc_4AC7C:
and     cx, cx
jnz     short loc_4AC86
add     dx, 1000h
jmp     short loc_4ACD5

loc_4AC86:
mov     ax, 1Ch
mov     bx, es:[si+4]
jmp     short loc_4AC93
align 2

loc_4AC90:
mov     ax, 18h

loc_4AC93:
push    ax
mov     si, bx
push    ds
pop     es
mov     ds, word ptr ds:261h
mov     di, 68h ; 'h'
call    sub_4B7FE
pop     ax
push    ds
mov     bx, 68h ; 'h'
push    bx
mov     cx, 4
jmp     loc_4B60C

loc_4ACAE:
mov     es:[si+0Eh], bp
add     ax, bp
cmp     cx, ax
jnb     short loc_4ACD5
mov     cx, ax
jmp     short loc_4ACD5
db 90h

loc_4ACBD:
add     cx, ax
jb      short loc_4AC86
mov     ds:1D1h, dx
mov     ds:1D3h, cx
mov     byte ptr ds:10Ch, 1
jmp     short loc_4ACD5
db 90h

loc_4ACD1:
add     cx, ax
jb      short loc_4AC86

loc_4ACD5:
mov     bx, es:[si+8]
cmp     bx, 0FFFFh
jz      short loc_4ACF9
mov     es, word ptr ds:261h
push    cx
push    dx
call    sub_4A8BB
mov     ax, es:[bx]
add     ax, 1000h
cmp     ax, dx
jb      short loc_4AC90
ja      short loc_4ACF7
or      cx, cx
jnz     short loc_4AC90

loc_4ACF7:
pop     dx
pop     cx

loc_4ACF9:
mov     di, si

loc_4ACFB:
pop     si
add     si, 2
mov     es, word ptr ds:28Bh
jmp     loc_4AB73
off_4AD06 dw offset loc_4ACD1
dw offset loc_4ACAE
dw offset loc_4ACD1
dw offset loc_4ACD1
dw offset loc_4ACD1
dw offset loc_4ACBD
dw offset loc_4ACAE
dw offset loc_4ACAE
push    ax
push    bx
push    cx
push    dx
push    di
push    si
push    es
mov     es, word ptr ds:261h
mov     si, es:[si]
mov     di, es:[di]
mov     es, word ptr ds:26Dh
mov     ax, es:[si+2]
mov     si, es:[si]
mov     bx, es:[di+2]
mov     di, es:[di]
mov     es, word ptr ds:273h
sub     cx, cx
test    si, 1
jnz     short loc_4AD4D
mov     cx, es:[si+0Ch]
add     ax, es:[si+0Eh]

loc_4AD4D:
sub     dx, dx
test    di, 1
jnz     short loc_4AD5D
mov     dx, es:[di+0Ch]
add     bx, es:[di+0Eh]

loc_4AD5D:
cmp     cx, dx
jnz     short loc_4AD63
cmp     ax, bx

loc_4AD63:
pop     es
pop     si
pop     di
pop     dx
pop     cx
pop     bx
pop     ax
retn



sub_4AD6B proc near
push    ax
push    bx
push    cx
push    di
push    si
push    ds
mov     ds, word ptr ds:261h
inc     si
inc     si
inc     di
inc     di
lodsb
cmp     al, [di]
lahf
jbe     short loc_4AD81
mov     al, [di]

loc_4AD81:
inc     di
mov     cl, al
xor     ch, ch

loc_4AD86:
lodsb
mov     bl, [di]
inc     di
or      al, 20h
or      bl, 20h
cmp     al, bl
jnz     short loc_4AD96
loop    loc_4AD86
sahf

loc_4AD96:
pop     ds
pop     si
pop     di
pop     cx
pop     bx
pop     ax
retn
sub_4AD6B endp

push    ax
push    bx
push    cx
push    dx
push    di
push    si
push    es
mov     es, word ptr ds:261h
mov     si, es:[si]
mov     di, es:[di]
mov     es, word ptr ds:26Dh
mov     ax, es:[si+2]
mov     si, es:[si]
mov     bx, es:[di+2]
mov     di, es:[di]
mov     cx, si
xor     cx, di
test    cl, 1
jnz     short loc_4AE29
mov     es, word ptr ds:273h
sub     cx, cx
test    si, 1
jnz     short loc_4ADDD
mov     cx, es:[si+0Ch]
add     ax, es:[si+0Eh]

loc_4ADDD:
sub     dx, dx
test    di, 1
jnz     short loc_4ADED
mov     dx, es:[di+0Ch]
add     bx, es:[di+0Eh]

loc_4ADED:
cmp     cx, dx
jz      short loc_4AE1F
rol     cx, 1
rol     cx, 1
rol     cx, 1
rol     cx, 1
mov     si, cx
and     cx, 0Fh
and     si, 0FFF0h
add     ax, si
adc     cl, 0
rol     dx, 1
rol     dx, 1
rol     dx, 1
rol     dx, 1
mov     di, dx
and     dx, 0Fh
and     di, 0FFF0h
add     bx, di
adc     dl, 0
cmp     cx, dx
jnz     short loc_4AE21

loc_4AE1F:
cmp     ax, bx

loc_4AE21:
pop     es
pop     si
pop     di
pop     dx
pop     cx
pop     bx
pop     ax
retn

loc_4AE29:
and     si, 1
and     di, 1
cmp     di, si
jmp     short loc_4AE21



sub_4AE33 proc near
mov     word ptr ds:289h, 0
mov     si, 2
mov     dx, 5
cmp     byte ptr ds:13D6h, 0
jz      short loc_4AEA6
mov     si, 6
mov     dx, 9
jmp     short loc_4AEA6

loc_4AE4E:
mov     es, word ptr ds:261h
mov     al, es:[si+2]
cmp     word ptr es:[si], 0FFFEh
jnb     short loc_4AE9F
test    al, 0C0h
jnz     short loc_4AE9F
mov     bx, es:[si]
mov     es, word ptr ds:26Dh
mov     bx, es:[bx]
test    bx, 1
jnz     short loc_4AE78
mov     es, word ptr ds:273h
mov     bx, es:[bx+0Ah]

loc_4AE78:
and     bx, 0FFFEh
mov     es, word ptr ds:267h
cmp     word ptr es:[bx+0Ah], 2
jb      short loc_4AE9F

loc_4AE86:
les     di, ds:289h
add     di, 2
cmp     di, ds:287h
jbe     short loc_4AE98
call    sub_4746D
jmp     short loc_4AE86

loc_4AE98:
xchg    di, ds:289h
mov     es:[di], si

loc_4AE9F:
add     si, dx
and     ax, 3Fh
add     si, ax

loc_4AEA6:
cmp     si, ds:25Fh
jb      short loc_4AE4E
retn
sub_4AE33 endp




sub_4AEAD proc near
call    sub_4AE33
mov     di, ds:136h
call    sub_4B628
and     [bx+si], sp
and     [bx+di+64h], al
db      64h
jb      short loc_4AF24
jnb     short near ptr loc_4AF31+3
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si+75h], dl
bound   bp, [si+69h]
arpl    [bp+di+20h], si
bound   di, [bx+di+20h]
dec     si
popa
insw
db      65h
mov     bp, 3A6Bh
call    sub_4AF0C
mov     di, ds:136h
call    sub_4B628
and     ah, [bx+si]
and     [bx+di+64h], al
db      64h
jb      short loc_4AF53
jnb     short near ptr loc_4AF62+1
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si+75h], dl
bound   bp, [si+69h]
arpl    [bp+di+20h], si
bound   di, [bx+di+20h]
push    si
popa
insb
jnz     short loc_4AF6E
mov     bp, 3A16h
sub_4AEAD endp ; sp-analysis failed




sub_4AF0C proc near
push    di
mov     cx, ds:289h
mov     es, word ptr ds:28Bh
call    sub_4B80D
pop     di
call    sub_4B630
call    sub_4B630
sub     bx, bx
jmp     short loc_4AF65
align 2

loc_4AF24:
mov     al, 20h ; ' '
call    sub_4B5C7
mov     es, word ptr ds:28Bh
mov     si, es:[bx]
push    si

loc_4AF31:
mov     es, word ptr ds:261h
mov     si, es:[si]
call    near ptr loc_4AF7F+1
push    bp
call    sub_4B67C
mov     al, 3Ah ; ':'
call    sub_4B5C7
mov     ax, cx
call    sub_4B67C
pop     si
test    si, 1
jnz     short loc_4AF73
call    sub_4B628

loc_4AF53:
pop     es
and     [bx+si], ah
and     [bx+si], ah
and     [bx+si], ah
and     [bp-18h], bl
inc     bp
pop     es
call    sub_4B630

loc_4AF62:
add     bx, 2

loc_4AF65:
cmp     bx, ds:289h
jb      short loc_4AF24
call    sub_4B630

loc_4AF6E:
mov     ds:136h, di
retn

loc_4AF73:
call    sub_4B628
pop     es
and     [bx+si], ah
inc     cx
bound   si, [bp+di+20h]
and     bl, ch

loc_4AF7F:
fisttp  dword ptr [bp+6D06h]
sub_4AF0C endp ; sp-analysis failed

add     ah, ds:4C8Bh
add     ah, ds:348Bh
mov     bp, si



sub_4AF8D proc near
mov     es, word ptr ds:273h
sub     ax, ax
push    si
test    si, 1
jnz     short loc_4AFC3
mov     ax, es:[si+0Ch]
add     cx, es:[si+0Eh]
mov     dx, es:[si+2]
mov     si, es:[si+8]
cmp     si, 0FFFFh
jz      short loc_4AFC3
mov     es, word ptr ds:261h
sub     ax, es:[si]
shl     ax, 1
shl     ax, 1
shl     ax, 1
shl     ax, 1
add     cx, ax
mov     ax, es:[si]

loc_4AFC3:
pop     si
retn
sub_4AF8D endp




sub_4AFC5 proc near
xor     bx, bx
mov     cx, 80h
mov     di, ds:12h

loc_4AFCE:
cmp     [bx+1293h], di
jz      short loc_4B012
add     bx, 2
loop    loc_4AFCE
call    sub_475F3
cmp     word ptr ds:4, 40h ; '@'
jb      short loc_4AFFE
sub     word ptr ds:4, 40h ; '@'
mov     bx, ds:6
add     bx, 40h ; '@'
mov     ds:12h, bx
mov     ds:6, bx
add     word ptr ds:10h, 400h
retn

loc_4AFFE:
mov     byte ptr ss:9A63h, 0
push    ss
mov     bx, 0BE91h
push    bx
mov     ax, 3
push    ax
call    sub_4698B

loc_4B012:
push    ax
mov     ah, 40h ; '@'
call    sub_476F6
mov     word ptr [bx+1293h], 0FFFEh
pop     ax
add     di, 200h
mov     ds:12h, di
add     word ptr ds:10h, 2000h
dec     word ptr ds:1A1h
retn
sub_4AFC5 endp ; sp-analysis failed




sub_4B032 proc far
cmp     byte ptr ss:9A63h, 2
jnz     short loc_4B076
push    ds
mov     ds, cs:word_47310
mov     ax, ds:4
xor     dx, dx
add     ax, ds:19Fh
adc     dx, 0
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
shl     ax, 1
rcl     dx, 1
mov     bh, ds:1A1h
sub     bh, 2
jle     short loc_4B074
xor     bl, bl
shr     bx, 1
shr     bx, 1
shr     bx, 1
add     ah, bl
adc     dl, bh
adc     dh, 0

loc_4B074:
pop     ds
retf

loc_4B076:
mov     ax, 0FFFFh
retf
sub_4B032 endp




sub_4B07A proc far
mov     bx, sp
push    ds
push    bp
push    si
push    di
mov     ds, cs:word_47310
mov     bx, ss:[bx+4]
push    bx
cmp     byte ptr ds:110h, 1
jz      short loc_4B0AA

loc_4B091:
les     di, ds:28Fh
add     di, bx
cmp     di, ds:28Dh
jbe     short loc_4B0A2
call    sub_4746D
jmp     short loc_4B091

loc_4B0A2:
xchg    di, ds:28Fh
mov     ax, di
jmp     short loc_4B0C2

loc_4B0AA:
mov     ax, ds:28Fh
mov     di, ax
add     di, bx
push    di
cmp     di, ds:10h
jbe     short loc_4B0BE
call    sub_4AFC5
mov     ax, ds:28Fh

loc_4B0BE:
pop     word ptr ds:28Fh

loc_4B0C2:
mov     dx, ds:291h
mov     cx, ds:28Fh
pop     bx
pop     di
pop     si
pop     bp
pop     ds
mov     ds:14h, dx
mov     ds:16h, cx
mov     ds:18h, dx
retf    2
sub_4B07A endp




sub_4B0DE proc far
cmp     byte ptr ds:9A63h, 2
jnz     short locret_4B10E
mov     es, cs:word_47310
les     ax, es:14Eh
mov     ds:0BFB0h, ax
mov     word ptr ds:0BFB2h, es
mov     ax, 9Fh
push    ax
call    sub_312DE
pop     ax
push    ds
mov     bx, 0BE91h
push    bx
mov     ax, 0FFFFh
push    ax
call    sub_4698B

locret_4B10E:
retf
sub_4B0DE endp ; sp-analysis failed




sub_4B10F proc far
push    si
push    di
push    bp
call    sub_313FD
call    sub_25D3C
call    sub_317D1
mov     cs:byte_47314, 0
push    ds
mov     bx, 0BE91h
push    bx
call    sub_469C1
mov     ds, cs:word_47310
or      ax, ax
jz      short loc_4B15D
cmp     ax, 3
jnz     short loc_4B149
dec     word ptr ss:0BFAAh
dec     word ptr ss:0BFA8h

loc_4B149:
cmp     cs:byte_47314, 0
jz      short loc_4B157
call    sub_4B430
call    sub_4B48E

loc_4B157:
mov     ax, 1
jmp     short loc_4B162
db 90h

loc_4B15D:
call    sub_4B175

loc_4B162:
push    ss
pop     ds
push    ax
call    sub_317DE
pop     ax
mov     byte ptr ss:9A63h, 0
pop     bp
pop     di
pop     si
retf
sub_4B10F endp



; Attributes: bp-based frame

sub_4B175 proc far
push    bp
mov     bp, sp
push    ds
cld
xor     ax, ax
mov     ss:0BFB0h, ax
mov     ss:0BFB2h, ax
push    ds
push    ss
pop     ds
push    word ptr ds:0Ah
push    word ptr ds:0Ch
mov     ax, 5830h
add     ax, 0Fh
push    ax
call    sub_3193F
pop     word ptr ds:0Ch
pop     word ptr ds:0Ah
pop     ds
or      ax, dx
jz      short loc_4B1EA
mov     ax, ss:0Ch
inc     ax
mov     bx, ds
mov     ds, ax
mov     ds:2, bx
mov     ds:0, sp
mov     bx, ss:14h
mov     ds:12h, bx
mov     bx, ss:16h
mov     ds:10h, bx
mov     bx, 5830h
add     bx, 0Fh
mov     cl, 4
shr     bx, cl
add     ax, bx
mov     ds:6, ax
mov     bx, ss:8
mov     cs:word_47310, ds
cmp     bx, ds:6
ja      short loc_4B1ED

loc_4B1EA:
jmp     loc_477BB

loc_4B1ED:
mov     ds:0Ah, bx
mov     ds:0Ch, bx
sub     bx, ax
mov     ds:4, bx
mov     ds:8, bx
mov     ds:0Eh, bx
push    ds
pop     es
mov     di, 10Ah
mov     cx, 1394h
sub     cx, di
shr     cx, 1
mov     ax, 0FFFFh
rep stosw
mov     byte ptr ds:11Bh, 0
xor     ax, ax
mov     ds:19Fh, ax
mov     ds:1A1h, ax
mov     byte ptr ds:118h, 1
mov     word ptr ds:136h, 17E8h
mov     word ptr ds:19Bh, 1
mov     word ptr ds:581Ah, 0
push    ds
pop     es
mov     ax, ss
mov     ds, ax
mov     si, 230Ch
mov     di, 13D0h
mov     cx, 0Ch
rep movsw
push    es
pop     ds
mov     al, ds:13D0h
xor     bx, bx
mov     cx, bx
and     al, al
jz      short loc_4B268
mov     ch, ds:13D1h
inc     bl
dec     al
jz      short loc_4B268
inc     bh
dec     al
jz      short loc_4B268
inc     cl

loc_4B268:
mov     ds:118h, bl
mov     ds:119h, bh
mov     ds:11Ah, cl
mov     ds:13D1h, ch
call    sub_473DD
mov     byte ptr ss:9A63h, 2
inc     cs:byte_47314
mov     ax, 6
cmp     byte ptr ds:13D6h, 0
jz      short loc_4B2AB
push    ds
pop     es
mov     di, 1E5h
mov     cx, 18h
xor     ax, ax
rep stosw
mov     ds:178h, ax
mov     ds:17Ah, ax
mov     ds:17Ch, ax
mov     ds:17Eh, ax
mov     ax, 0Ch

loc_4B2AB:
mov     ds:186h, ax
call    sub_4763E
cmp     byte ptr ds:118h, 1
jnz     short loc_4B2CB
push    ds
lds     dx, ds:13E0h
add     dx, 4
mov     ah, 3Ch ; '<'
xor     cx, cx
call    near ptr sub_47363
pop     ds
mov     ds:134h, ax

loc_4B2CB:
mov     word ptr ds:13B2h, 0
mov     cs:word_48319, 3201h
mov     ax, ds:1B9h
mov     ds:1ADh, ax
mov     si, 13DCh
call    sub_47944
mov     si, 13E8h
call    sub_47944

loc_4B2EA:
les     di, ds:265h
add     di, 12h
cmp     di, ds:263h
jbe     short loc_4B2FC
call    sub_4746D
jmp     short loc_4B2EA

loc_4B2FC:
xchg    di, ds:265h
scasw
mov     ax, ds:271h
stosw
mov     ax, ds:277h
stosw
mov     ax, ds:26Bh
stosw
mov     ax, ds:283h
stosw
mov     ax, 3
stosw
xor     al, al
stosw
stosw
stosw
call    sub_4A7D3
mov     es, word ptr ds:28Bh
mov     cx, ds:289h
mov     bp, 350Eh
call    sub_4B80D
call    loc_4AB0E
cmp     byte ptr ds:118h, 1
jnz     short loc_4B35B
cmp     byte ptr ds:11Ah, 1
jnz     short loc_4B33F
call    sub_4B6BE

loc_4B33F:
mov     di, ds:136h
call    sub_4B630
mov     ds:136h, di
cmp     byte ptr ds:119h, 1
jnz     short loc_4B35B
call    sub_4AEAD
cmp     byte ptr ds:13D6h, 0
jnz     short loc_4B365

loc_4B35B:
cmp     byte ptr ds:13D6h, 0
jz      short loc_4B375
call    sub_4AE33

loc_4B365:
mov     bp, 3A9Dh
mov     cx, ds:289h
mov     es, word ptr ds:28Bh
call    sub_4B80D
jmp     short loc_4B37B

loc_4B375:
mov     word ptr ds:289h, 0

loc_4B37B:
mov     word ptr ds:27Dh, 0
mov     byte ptr ds:110h, 1
call    sub_4746D
mov     ax, 0C8h
call    sub_473B3
mov     bx, ds:6
mov     ds:12h, bx
add     ax, ds:28Fh
mov     ds:10h, ax
cmp     byte ptr ds:13D6h, 0
jz      short loc_4B3A8
call    sub_4867F

loc_4B3A8:
cmp     byte ptr ds:13D3h, 1
jnz     short loc_4B3C1
mov     dx, ds:128h
add     dx, ds:1CBh
mov     cx, ds:126h
mov     ax, 0
call    sub_4785A

loc_4B3C1:
mov     cs:word_48319, 3301h
push    ds
lds     dx, ds:13DCh
add     dx, 4
mov     ax, 3C00h
xor     cx, cx
call    near ptr sub_47363
pop     ds
mov     ds:138h, ax
mov     word ptr ds:140h, 0
mov     byte ptr ds:10Eh, 0FFh
mov     ax, ds:1B9h
mov     ds:1ADh, ax
mov     si, 13DCh
call    sub_47944
mov     si, 13E8h
call    sub_47944
cmp     byte ptr ds:13D6h, 0
jz      short loc_4B403
call    sub_48ECD

loc_4B403:
call    sub_4A8CB
mov     di, ds:136h
call    sub_4B630
call    sub_4B585
call    sub_477E7
sub     ax, ax

loc_4B415:
push    ax
call    sub_4B430
pop     ax
cmp     ax, 0FFFFh
jz      short loc_4B426
cmp     byte ptr ds:11Bh, 1
jnz     short loc_4B429

loc_4B426:
call    sub_4B48E

loc_4B429:
mov     sp, ds:0
pop     ds
pop     bp
retf
sub_4B175 endp




sub_4B430 proc near
mov     cx, ds:1BDh
jcxz    short loc_4B459
push    ds
pop     es
lds     si, ds:1B9h

loc_4B43C:
mov     bx, [si]
and     bx, bx
jz      short loc_4B452
cmp     bx, es:13Ah
jz      short loc_4B452
push    si
push    ds
push    cx
call    sub_47327
pop     cx
pop     ds
pop     si

loc_4B452:
add     si, 6
loop    loc_4B43C
push    es
pop     ds

loc_4B459:
mov     bx, ds:132h
call    sub_47327
mov     word ptr ds:132h, 0FFFFh
mov     bx, ds:138h
call    sub_47327
mov     word ptr ds:138h, 0FFFFh
mov     bx, ds:134h
call    sub_47327
mov     word ptr ds:134h, 0FFFFh
mov     bx, ds:13Ah
call    sub_47327
mov     word ptr ds:13Ah, 0FFFFh
retn
sub_4B430 endp




sub_4B48E proc near
push    ds
lds     dx, ds:13DCh
add     dx, 4
mov     ah, 41h
int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)
pop     ds
retn
sub_4B48E endp




sub_4B49C proc near
mov     word ptr ds:16Ah, ds
sub_4B49C endp




sub_4B4A0 proc far

; FUNCTION CHUNK AT 430C SIZE 0000001C BYTES

mov     bp, si
mov     dl, ds:13D2h
push    ds
mov     ds, word ptr ds:16Ah
mov     al, [si]
or      [si], ah
and     ax, 3Fh
inc     ax
mov     cx, ax
sub     bx, bx
jcxz    short loc_4B4D9
push    cx

loc_4B4BA:
lodsb
cmp     al, 61h ; 'a'
jb      short loc_4B4CC
cmp     al, 7Ah ; 'z'
ja      short loc_4B4CC
and     dl, dl
jnz     short loc_4B4CC
sub     al, 20h ; ' '
mov     [si-1], al

loc_4B4CC:
xor     bl, al
add     bx, cx
rol     bx, 1
rol     bx, 1
rol     bx, 1
loop    loc_4B4BA
pop     ax

loc_4B4D9:
pop     ds
xor     bl, bh
mov     es, word ptr ds:261h
mov     si, bp
and     bx, 0FFEh
mov     ds:16Eh, bx
add     bx, 293h
mov     dx, ds
mov     di, [bx]
cmp     di, 0FFFFh
jz      short loc_4B520
mov     dx, si

loc_4B4F9:
mov     bp, di
mov     cx, ax
inc     di
inc     di
mov     bx, ds
mov     ds, word ptr ds:16Ah
repe cmpsb
mov     ds, bx
jnz     short loc_4B511

loc_4B50B:
mov     bx, bp
clc
retn

loc_4B50F:
stc
retn

loc_4B511:
mov     si, dx
lea     bx, [bp-2]
mov     di, es:[bx]
cmp     di, 0FFFFh
jnz     short loc_4B4F9
xor     dx, dx

loc_4B520:
cmp     byte ptr ds:13D6h, 2
jz      short loc_4B50F
mov     cx, ax
add     ax, 4
cmp     byte ptr ds:13D6h, 0
jz      short loc_4B536
add     ax, 4

loc_4B536:
les     di, ds:25Fh
add     di, ax
cmp     di, 0FFF0h
jnb     short loc_4B57D
cmp     di, ds:25Dh
jbe     short loc_4B54C
call    sub_4746D
jmp     short loc_4B536

loc_4B54C:
xchg    di, ds:25Fh
xor     ax, ax
cmp     byte ptr ds:13D6h, 0
jz      short loc_4B55B
stosw
stosw

loc_4B55B:
dec     ax
stosw
push    ds
and     dx, dx
jnz     short loc_4B566
mov     ds, word ptr ds:261h

loc_4B566:
mov     [bx], di
mov     bp, di
pop     ds
stosw
mov     bx, ds
mov     ds, word ptr ds:16Ah
shr     cx, 1
rep movsw
jnb     short loc_4B579
movsb

loc_4B579:
mov     ds, bx
jmp     short loc_4B50B

loc_4B57D:
mov     ax, 0Fh
xor     cx, cx
jmp     loc_4B60C
sub_4B4A0 endp ; sp-analysis failed




sub_4B585 proc near
push    ax
push    bx
push    cx
push    dx
mov     ah, 40h ; '@'
mov     cx, di
sub     cx, 17E8h
mov     dx, 17E8h
mov     bx, ds:134h
cmp     bx, 0FFFFh
jz      short loc_4B5A0
call    near ptr sub_47315

loc_4B5A0:
mov     di, 17E8h
mov     ds:136h, di
pop     dx
pop     cx
pop     bx
pop     ax
retn
sub_4B585 endp




sub_4B5AC proc near
mov     ds, cs:word_47310
mov     di, ds:136h
call    sub_4B585
mov     byte ptr ds:116h, 1
retn
sub_4B5AC endp




sub_4B5BE proc near
call    sub_4B585
mov     byte ptr ds:116h, 0FFh
retn
sub_4B5BE endp




sub_4B5C7 proc near
cmp     di, 1FE8h
jnb     short loc_4B5D1
mov     [di], al
inc     di
retn

loc_4B5D1:
call    sub_4B585
jmp     short sub_4B5C7
sub_4B5C7 endp




sub_4B5D6 proc near
push    ax
push    cx
push    es
push    ds
pop     es
pop     ds
lodsb
and     ax, 3Fh
push    ax
jz      short loc_4B5F0

loc_4B5E3:
mov     cx, 1FE8h
sub     cx, di
cmp     cx, ax
jb      short loc_4B5FB
mov     cx, ax
rep movsb

loc_4B5F0:
push    es
push    ds
pop     es
pop     ds
pop     word ptr ds:154h
pop     cx
pop     ax
retn

loc_4B5FB:
sub     ax, cx
rep movsb
push    es
push    ds
pop     es
pop     ds
call    sub_4B585
push    es
push    ds
pop     es
pop     ds
jmp     short loc_4B5E3
sub_4B5D6 endp

; START OF FUNCTION CHUNK FOR sub_47315
;   ADDITIONAL PARENT FUNCTION sub_47332
;   ADDITIONAL PARENT FUNCTION sub_47363
;   ADDITIONAL PARENT FUNCTION sub_4766D
;   ADDITIONAL PARENT FUNCTION sub_4B4A0

loc_4B60C:
call    sub_4B78B
call    sub_4B5AC
pop     si
push    cs
pop     es
assume es:seg090
mov     di, ds:136h
call    sub_4B5D6
call    sub_4B630
call    sub_4B585
mov     ax, 0FFFFh
jmp     loc_4B415
; END OF FUNCTION CHUNK FOR sub_47315



sub_4B628 proc near
pop     si
push    cs
pop     es
call    sub_4B5D6
jmp     si
sub_4B628 endp ; sp-analysis failed




sub_4B630 proc near
mov     al, 0Dh
call    sub_4B5C7
mov     al, 0Ah
jmp     short sub_4B5C7
sub_4B630 endp

xor     [bx+di], dh
xor     dh, [bp+di]
xor     al, 35h
db      36h
aaa
cmp     [bx+di], bh
inc     cx
inc     dx
inc     bx
inc     sp
inc     bp
inc     si



sub_4B649 proc near
and     al, 0Fh
xlat    byte ptr cs:[bx]
cmp     di, 1FE8h
jnb     short loc_4B657

loc_4B653:
mov     [di], al
inc     di
retn

loc_4B657:
call    sub_4B585
jmp     short loc_4B653
sub_4B649 endp




sub_4B65C proc near
push    bx
mov     bx, 4339h
call    sub_4B649
pop     bx
retn
sub_4B65C endp




sub_4B665 proc near
push    ax
push    bx
mov     ah, al
shr     al, 1
shr     al, 1
shr     al, 1
shr     al, 1
call    sub_4B65C
mov     al, ah
call    sub_4B65C
pop     bx
pop     ax
retn
sub_4B665 endp




sub_4B67C proc near
push    ax
push    bx
push    dx
mov     bx, 4339h
mov     dx, ax
shr     ax, 1
shr     ax, 1
shr     ax, 1
shr     ax, 1
xchg    al, ah
call    sub_4B649
xchg    al, dh
call    sub_4B649
xchg    al, ah
call    sub_4B649
xchg    al, dl
call    sub_4B649
pop     dx
pop     bx
pop     ax
retn
sub_4B67C endp




sub_4B6A4 proc near
cmp     si, 0FFFFh
jz      short loc_4B6B3
inc     si
inc     si
mov     es, word ptr ds:261h
assume es:nothing
call    sub_4B5D6
retn

loc_4B6B3:
call    sub_4B628
push    es
sub     [bp+6Fh], ch
outsb
db      65h
sub     bx, ax
sub_4B6A4 endp ; sp-analysis failed




sub_4B6BE proc near
mov     di, ds:136h
call    sub_4B630
call    sub_4B628
sbb     [si+65h], al
jz      short near ptr loc_4B72D+1
imul    bp, [si+65h], 2064h
insw
popa
jo      short near ptr loc_4B6F4+2
outsw
db      66h
and     [bp+di+65h], dh
ins     word ptr es:[edi], dx
outs    dx, byte ptr gs:[si]
jz      short loc_4B754
call    sub_4B630
call    sub_4B630
sub     si, si

loc_4B6E9:
cmp     si, ds:289h
jb      short loc_4B6F3
call    sub_4B585
retn

loc_4B6F3:
push    si

loc_4B6F4:
mov     es, word ptr ds:28Bh
mov     bx, es:[si]
mov     es, word ptr ds:273h
mov     ax, es:[bx+0Ch]
call    sub_4B67C
mov     al, 3Ah ; ':'
call    sub_4B5C7
mov     ax, es:[bx+0Eh]
call    sub_4B67C
mov     al, 20h ; ' '
call    sub_4B5C7
mov     ax, es:[bx+2]
call    sub_4B67C
call    sub_4B628
add     sp, [bx+si]
inc     bx
cmp     ax, 68Eh
jnb     short near ptr loc_4B729+2

loc_4B729:
mov     si, es:[bx+6]

loc_4B72D:
call    sub_4B6A4
call    sub_4B628
add     sp, [bx+si]
push    bx
cmp     ax, 68Eh
jnb     short near ptr loc_4B73B+2

loc_4B73B:
mov     si, es:[bx+4]
call    sub_4B6A4
call    sub_4B628
add     sp, [bx+si]
inc     di
cmp     ax, 68Eh
jnb     short near ptr loc_4B74D+2

loc_4B74D:
mov     si, es:[bx+8]
call    sub_4B6A4

loc_4B754:
call    sub_4B628
add     sp, [bx+si]
dec     bp
cmp     ax, 68Eh
jnb     short near ptr loc_4B75F+2

loc_4B75F:
mov     si, es:[bx+0Ah]
mov     es, word ptr ds:267h
mov     si, es:[si]
call    sub_4B6A4
call    sub_4B628
push    es
and     [bx+di+43h], al
inc     dx
push    ax
cmp     ax, 68Eh
jnb     short near ptr loc_4B77B+2

loc_4B77B:
mov     al, es:[bx]
call    sub_4B665
call    sub_4B630
pop     si
add     si, 2
jmp     loc_4B6E9
sub_4B6BE endp ; sp-analysis failed




sub_4B78B proc near
mov     ds, cs:word_47310
pop     word ptr ds:14h
add     cx, 2
mov     ds:16h, cx
xor     bx, bx
mov     cx, bx
cmp     word ptr ds:162h, 0FFFFh
jz      short loc_4B7CB
cmp     word ptr ds:162h, 2
mov     word ptr ds:162h, 0FFFFh
jz      short loc_4B7D5
mov     si, ds:215h
push    ds
pop     es
mov     ds, word ptr ds:261h
mov     di, 18h
push    di
push    es
push    ax
call    sub_4B7FE
pop     ax
pop     ds
pop     bx
mov     cx, ds

loc_4B7CB:
mov     ss:0BFB0h, bx
mov     ss:0BFB2h, cx

loc_4B7D5:
push    ax
cmp     word ptr ds:164h, 1
push    ss
pop     ds
jz      short loc_4B7F7
call    sub_312DE

loc_4B7E4:
mov     ds, cs:word_47310
mov     word ptr ds:164h, 0FFFFh
add     sp, ds:16h
jmp     word ptr ds:14h

loc_4B7F7:
call    sub_31324
jmp     short loc_4B7E4
sub_4B78B endp ; sp-analysis failed




sub_4B7FE proc near
lodsw
lodsb
and     ax, 3Fh
mov     cx, ax
rep movsb
xor     al, al
stosb
push    es
pop     ds
retn
sub_4B7FE endp




sub_4B80D proc near
cmp     cx, 2
ja      short loc_4B813
retn

loc_4B813:
mov     dx, cx
shr     dx, 1
and     dx, 0FFFEh

loc_4B81A:
mov     ax, dx
mov     bx, ax

loc_4B81E:
shl     bx, 1
cmp     bx, cx
ja      short loc_4B850
mov     si, es:[bx-2]
jz      short loc_4B836
mov     di, es:[bx]
call    bp ; sub_4AD6B
jnb     short loc_4B836
add     bx, 2
mov     si, di

loc_4B836:
mov     di, si
mov     si, ax
mov     si, es:[si-2]
call    bp ; sub_4AD6B
jnb     short loc_4B850
mov     es:[bx-2], si
mov     si, ax
mov     es:[si-2], di
mov     ax, bx
jmp     short loc_4B81E

loc_4B850:
sub     dx, 2
jnz     short loc_4B81A
mov     dx, cx
sub     dx, 2

loc_4B85A:
sub     bx, bx
mov     ax, es:[bx]
mov     di, dx
push    word ptr es:[di]
mov     es:[di], ax
sub     dx, 2

loc_4B86A:
mov     ax, bx
inc     bx
shl     bx, 1
cmp     bx, dx
ja      short loc_4B88C
mov     si, es:[bx]
jz      short loc_4B885
mov     di, es:[bx+2]
call    bp ; sub_4AD6B
jnb     short loc_4B885
mov     si, di
add     bx, 2

loc_4B885:
mov     di, ax
mov     es:[di], si
jmp     short loc_4B86A

loc_4B88C:
pop     di

loc_4B88D:
or      ax, ax
jz      short loc_4B8A6
mov     bx, ax
shr     bx, 1
dec     bx
and     bx, 0FFFEh
mov     si, es:[bx]
call    bp ; sub_4AD6B
jnb     short loc_4B8A6
xchg    ax, bx
mov     es:[bx], si
jmp     short loc_4B88D

loc_4B8A6:
mov     bx, ax
mov     es:[bx], di
or      dx, dx
jnz     short loc_4B85A
retn
sub_4B80D endp

seg090 ends


; Segment type: Regular
seg091 segment byte public 'UNK' use16
assume cs:seg091
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
db    0
db    0
db    0
db    0
word_4B8B4 dw 0
align 4
word_4B8B8 dw 0
align 4
word_4B8BC dw 0
align 4
word_4B8C0 dw 0
align 4
word_4B8C4 dw 0
align 4
word_4B8C8 dw 0
word_4B8CA dw 0
word_4B8CC dw 0
word_4B8CE dw 0
db    4
db 0C2h
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  66h ; f
word_4B8DE dw 6769h
word_4B8E0 dw 7275h
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  1Ah
db    0
db    0
db    3
off_4B8F1 dd off_4B8F1
db    1
db    0
dd byte_45712
db    2
db    0
dd unk_4D518
db    3
db    0
dd unk_4DBD6
db    4
db    0
dd unk_500DA
db    5
db    0
dd unk_4B99A
db    6
db    0
dd unk_4B99C
db    7
db    0
dd unk_4B99E
db    8
db    0
dd unk_4D6BE
db    9
db    0
dd unk_4B9A6
db  0Ah
db    0
dd unk_4DB48
db  0Bh
db    0
dd unk_4DBF9
db  0Ch
db    0
dd unk_4DC1C
db  0Dh
db    0
dd unk_50120
db  0Eh
db    0
dd unk_50166
db  0Fh
db    0
dd unk_4D4B9
db  10h
db    0
dd unk_4D5D0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  0Dh
db  12h
db  17h
db    1
db  1Ah
db    0
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db  20h
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  4Ch ; L
db  69h ; i
db  73h ; s
db  74h ; t
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  1Ah
db    0
db  1Ah
db    0
db  24h ; $
db  2Ah ; *
db  24h ; $
db  2Ah ; *
db  24h ; $
db  2Ah ; *
db    4
db  10h
db    1
db    2
db  49h ; I
db  44h ; D
db  45h ; E
db    0
db  20h
db  56h ; V
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db  31h ; 1
db  20h
db    0
unk_4B99A db  10h
db    0
unk_4B99C db 0FFh
db    0
unk_4B99E db    2
db    0
db    0
db    0
db  19h
db    0
word_4B9A4 dw 18h
unk_4B9A6 db    1
db    0
db    2
db    0
db 0BBh
db  23h ; #
db    2
db    0
db    2
db    0
db 0BFh
db  23h ; #
db    3
db    0
db    2
db    0
db 0C1h
db  23h ; #
db    4
db    0
db    1
db    0
db  0Ch
db  23h ; #
db    5
db    0
db    1
db    0
db  0Fh
db  23h ; #
db    6
db    0
db    1
db    0
db  11h
db  23h ; #
db    8
db    0
db    1
db    0
db 0B1h
db  22h ; "
db    9
db    0
db    2
db    0
db 0F0h
db    0
db  0Dh
db    0
db    2
db    0
db 0C5h
db  31h ; 1
db  0Eh
db    0
db    2
db    0
db 0C3h
db  23h ; #
db  11h
db    0
db    1
db    0
db 0B4h
db  1Ch
db  12h
db    0
db    2
db    0
db 0BDh
db  23h ; #
db  13h
db    0
db    2
db    0
db 0F2h
db    0
db  14h
db    0
db    2
db    0
db 0E0h
db  31h ; 1
db  15h
db    0
db    2
db    0
db 0C7h
db  23h ; #
db  16h
db    0
db    2
db    0
db 0CBh
db  23h ; #
db  17h
db    0
db    2
db    0
db 0CDh
db  23h ; #
db  18h
db    0
db    2
db    0
db 0C9h
db  23h ; #
db  64h ; d
db    0
db    1
db    0
db  65h ; e
db  4Fh ; O
db  65h ; e
db    0
db    1
db    0
db  69h ; i
db  4Fh ; O
db  66h ; f
db    0
db    1
db    0
db  6Dh ; m
db  4Fh ; O
db  67h ; g
db    0
db    1
db    0
db  71h ; q
db  4Fh ; O
db  68h ; h
db    0
db    1
db    0
db  75h ; u
db  4Fh ; O
db  69h ; i
db    0
db    1
db    0
db  79h ; y
db  4Fh ; O
db  6Ah ; j
db    0
db    1
db    0
db  7Dh ; }
db  4Fh ; O
db  6Bh ; k
db    0
db    1
db    0
db  81h
db  4Fh ; O
db  6Ch ; l
db    0
db    1
db    0
db  85h
db  4Fh ; O
db  6Dh ; m
db    0
db    1
db    0
db  89h
db  4Fh ; O
db  6Eh ; n
db    0
db    1
db    0
db  8Dh
db  4Fh ; O
db  6Fh ; o
db    0
db    1
db    0
db  91h
db  4Fh ; O
db  70h ; p
db    0
db    1
db    0
db  95h
db  4Fh ; O
db  71h ; q
db    0
db    1
db    0
db  99h
db  4Fh ; O
db  72h ; r
db    0
db    1
db    0
db  9Dh
db  4Fh ; O
db  73h ; s
db    0
db    1
db    0
db 0A1h
db  4Fh ; O
db  74h ; t
db    0
db    1
db    0
db 0A5h
db  4Fh ; O
db  75h ; u
db    0
db    1
db    0
db 0A9h
db  4Fh ; O
db  76h ; v
db    0
db    1
db    0
db 0ADh
db  4Fh ; O
db  77h ; w
db    0
db    1
db    0
db 0B1h
db  4Fh ; O
db  78h ; x
db    0
db    1
db    0
db 0B5h
db  4Fh ; O
db  79h ; y
db    0
db    1
db    0
db 0B9h
db  4Fh ; O
db  7Ah ; z
db    0
db    1
db    0
db 0BDh
db  4Fh ; O
db  7Bh ; {
db    0
db    1
db    0
db 0C1h
db  4Fh ; O
db  7Ch ; |
db    0
db    1
db    0
db 0C5h
db  4Fh ; O
db  7Dh ; }
db    0
db    1
db    0
db 0C9h
db  4Fh ; O
db  7Eh ; ~
db    0
db    1
db    0
db 0CDh
db  4Fh ; O
db  7Fh ; 
db    0
db    1
db    0
db 0D1h
db  4Fh ; O
db  80h
db    0
db    1
db    0
db 0D5h
db  4Fh ; O
db  82h
db    0
db    1
db    0
db 0E1h
db  4Fh ; O
db  84h
db    0
db    1
db    0
db 0E9h
db  4Fh ; O
db  85h
db    0
db    1
db    0
db 0DDh
db  4Fh ; O
db 0C8h
db    0
db    1
db    0
db 0B2h
db  22h ; "
db 0C9h
db    0
db    1
db    0
db 0B4h
db  22h ; "
db 0CAh
db    0
db    1
db    0
db 0B5h
db  22h ; "
db 0CBh
db    0
db    1
db    0
db 0B6h
db  22h ; "
db 0CCh
db    0
db    1
db    0
db 0B7h
db  22h ; "
db 0CDh
db    0
db    1
db    0
db 0B8h
db  22h ; "
db 0CEh
db    0
db    1
db    0
db  0Eh
db  23h ; #
db 0CFh
db    0
db    1
db    0
db 0B9h
db  22h ; "
db 0D0h
db    0
db    1
db    0
db 0BAh
db  22h ; "
db 0D1h
db    0
db    1
db    0
db 0BBh
db  22h ; "
db 0D2h
db    0
db    1
db    0
db 0BCh
db  22h ; "
db 0D5h
db    0
db    1
db    0
db 0BFh
db  22h ; "
db 0D7h
db    0
db    1
db    0
db 0C1h
db  22h ; "
db 0D8h
db    0
db    1
db    0
db 0C2h
db  22h ; "
db 0D9h
db    0
db    1
db    0
db 0C3h
db  22h ; "
db 0DAh
db    0
db    1
db    0
db 0C4h
db  22h ; "
db 0DBh
db    0
db    1
db    0
db 0C5h
db  22h ; "
db 0DCh
db    0
db    1
db    0
db 0C6h
db  22h ; "
db 0DDh
db    0
db    1
db    0
db 0C7h
db  22h ; "
db 0DEh
db    0
db    1
db    0
db 0C8h
db  22h ; "
db 0DFh
db    0
db    1
db    0
db 0C9h
db  22h ; "
db 0E0h
db    0
db    1
db    0
db 0CAh
db  22h ; "
db 0E1h
db    0
db    1
db    0
db 0CBh
db  22h ; "
db 0E2h
db    0
db    1
db    0
db 0CCh
db  22h ; "
db  2Ch ; ,
db    1
db  44h ; D
db    0
db  40h ; @
db  2Dh ; -
db  2Dh ; -
db    1
db  80h
db    0
db 0C0h
db  2Ch ; ,
db  2Eh ; .
db    1
db  80h
db    0
db  84h
db  2Dh ; -
db  2Fh ; /
db    1
db  50h ; P
db    0
db  6Ch ; l
db  40h ; @
db  30h ; 0
db    1
db    4
db    0
db  8Eh
db  2Ah ; *
db  31h ; 1
db    1
db    5
db    0
db  35h ; 5
db  26h ; &
db  32h ; 2
db    1
db    5
db    0
db  3Ah ; :
db  26h ; &
db  33h ; 3
db    1
db  7Fh ; 
db    0
db  68h ; h
db  2Bh ; +
db  34h ; 4
db    1
db  1Eh
db    0
db 0B1h
db  26h ; &
db  35h ; 5
db    1
db  1Eh
db    0
db 0CFh
db  26h ; &
db  36h ; 6
db    1
db  1Eh
db    0
db 0EDh
db  26h ; &
db  37h ; 7
db    1
db  1Eh
db    0
db  59h ; Y
db  27h ; '
db  38h ; 8
db    1
db  1Eh
db    0
db  77h ; w
db  27h ; '
db  39h ; 9
db    1
db  1Eh
db    0
db  95h
db  27h ; '
db  3Ah ; :
db    1
db  1Eh
db    0
db    1
db  28h ; (
db  3Bh ; ;
db    1
db  1Eh
db    0
db  1Fh
db  28h ; (
db  3Ch ; <
db    1
db  1Eh
db    0
db  3Dh ; =
db  28h ; (
db  3Dh ; =
db    1
db  80h
db    0
db 0FCh
db  2Eh ; .
db  3Eh ; >
db    1
db    4
db    0
db  83h
db  2Eh ; .
db  3Fh ; ?
db    1
db  50h ; P
db    0
db 0A2h
db  1Fh
db  40h ; @
db    1
db  44h ; D
db    0
db  7Ch ; |
db  2Ch ; ,
db  41h ; A
db    1
db  50h ; P
db    0
db  80h
db  47h ; G
db 0FFh
db 0FFh
db    2
db    0
db 0CBh
db    0
db    1
db    0
db 0E2h
db    2
db  2Fh ; /
db  8Eh
db    2
db    0
db  12h
db    0
db 0F2h
db  1Fh
db    3
db    0
db  99h
db    0
db  96h
db  8Dh
db    4
db    0
db  36h ; 6
db    0
db    4
db  20h
db  64h ; d
db    0
db  0Ch
db    0
db 0C7h
db  1Ch
db  65h ; e
db    0
db    1
db    0
db 0D3h
db  1Ch
db  66h ; f
db    0
db  20h
db    0
db 0D5h
db  1Ch
db  67h ; g
db    0
db  20h
db    0
db 0F6h
db  1Ch
db  68h ; h
db    0
db  50h ; P
db    0
db  4Dh ; M
db  8Bh
db 0FFh
db 0FFh
db    2
db    0
db 0CBh
db    0
word_4BC28 dw 0
word_4BC2A dw 0
byte_4BC2C db 0
word_4BC2D dw 0
word_4BC2F dw 0
byte_4BC31 db 0
db  35h ; 5
db  2Dh ; -
db  2Eh ; .
db    7
db  5Bh ; [
db    2
db  57h ; W
db  57h ; W
db    2
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4BE3E db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4BE4C dw 0
align 4
word_4BE50 dw 0
word_4BE52 dw 0
word_4BE54 dw 0
db    0
db    0
db    0
db    0
off_4BE5A dd unk_4BE3E
word_4BE5E dw 0
word_4BE60 dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4C083 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4C262 dw 0
word_4C264 dw 0
dword_4C266 dd 0
word_4C26A dw 0
word_4C26C dw 0
db    0
db    0
db    0
db    0
db    0
db    0
word_4C274 dw 0
dword_4C276 dd 0
db    0
db    0
db    0
db    0
word_4C27E dw 0
word_4C280 dw 0
word_4C282 dw 0
word_4C284 dw 0
word_4C286 dw 0
db    0
db    0
db    0
db    0
word_4C28C dw 0
word_4C28E dw 0
word_4C290 dw 0
word_4C292 dw 0
word_4C294 dw 0
word_4C296 dw 0
word_4C298 dw 0
word_4C29A dw 0
word_4C29C dw 0
word_4C29E dw 0
word_4C2A0 dw 0
word_4C2A2 dw 0
word_4C2A4 dw 0
word_4C2A6 dw 0
word_4C2A8 dw 0
word_4C2AA dw 0
align 8
word_4C2B0 dw 0
word_4C2B2 dw 0
word_4C2B4 dw 0
word_4C2B6 dw 0
word_4C2B8 dw 0
dword_4C2BA dd 0
dword_4C2BE dd 0
word_4C2C2 dw 0
word_4C2C4 dw 0
db  59h ; Y
db  0Fh
db  60h ; `
db  0Fh
db 0B1h
db  0Fh
db  32h ; 2
db  10h
db  1Dh
db  10h
db  6Fh ; o
db  10h
db  77h ; w
db  10h
db  7Fh ; 
db  10h
db    1
db    0
db  10h
db    0
db    2
db    0
db  0Fh
db    0
db    4
db    0
db  0Eh
db    0
db    8
db    0
db  0Dh
db    0
db  10h
db    0
db  0Ch
db    0
db  20h
db    0
db  0Bh
db    0
db  40h ; @
db    0
db  0Ah
db    0
db  80h
db    0
db    9
db    0
db    0
db    1
db    8
db    0
db    0
db    2
db    7
db    0
db    0
db    4
db    6
db    0
db    0
db    8
db    5
db    0
db    0
db  10h
db    4
db    0
db    0
db  20h
db    3
db    0
db    0
db  40h ; @
db    2
db    0
db    0
db  80h
db    1
db    0
db 0C2h
db  12h
db 0FEh
db  12h
db 0F1h
db  12h
db    3
db  13h
db    3
db  13h
db  7Eh ; ~
db  12h
db  8Ch
db  12h
db  79h ; y
db  12h
db  46h ; F
db  12h
db    4
db  12h
db 0FCh
db    0
db  88h
db    0
db 0F4h
db    0
db 0FDh
db    0
db  8Ch
db    0
db 0F4h
db    0
db 0FEh
db    0
db  86h
db    0
db 0F4h
db    0
db 0FEh
db    0
db 0C4h
db    0
db 0F4h
db    0
db 0FEh
db    0
db  84h
db    0
db 0F4h
db    0
db 0FCh
db    0
db 0D0h
db    0
db 0F4h
db    0
db 0C4h
db    0
db    0
db    0
db 0F4h
db    0
db 0FFh
db    0
db  62h ; b
db    0
db 0F4h
db    0
db 0F8h
db    0
db 0D8h
db    0
db 0F4h
db    0
db 0FFh
db    0
db  8Dh
db    0
db 0F4h
db    0
db 0FFh
db  38h ; 8
db 0FFh
db  30h ; 0
db 0F4h
db    0
db 0FFh
db  38h ; 8
db  8Fh
db    0
db 0F4h
db    0
db 0FEh
db  30h ; 0
db 0FEh
db    0
db 0F4h
db    0
db 0FEh
db  20h
db 0F6h
db  20h
db 0F4h
db    0
db 0FEh
db  30h ; 0
db 0F6h
db  10h
db 0F4h
db    0
db 0FFh
db  30h ; 0
db 0FFh
db  10h
db 0F4h
db  84h
db 0FFh
db  30h ; 0
db 0FFh
db  20h
db 0F4h
db  82h
db 0FCh
db    0
db  80h
db    0
db 0E8h
db    0
db 0C6h
db    0
db    4
db    0
db 0F0h
db    0
db 0FEh
db    0
db 0A8h
db    0
db 0F0h
db    0
db 0F8h
db    0
db  90h
db    0
db    1
db    0
db 0E7h
db    0
db  27h ; '
db    0
db    1
db    0
db 0FFh
db    0
db 0D7h
db    0
db    1
db    0
db 0FFh
db    0
db 0C8h
db    0
db    4
db    0
db 0FFh
db    0
db 0C9h
db    0
db    1
db    0
db 0FFh
db 0FCh
db 0CDh
db  34h ; 4
db 0E4h
db    5
db 0FFh
db 0FCh
db 0CDh
db  38h ; 8
db 0E4h
db    5
db 0FFh
db 0FFh
db 0CDh
db  3Ch ; <
db 0DCh
db    5
db 0FFh
db 0FFh
db 0CDh
db  3Dh ; =
db    2
db    5
db 0FFh
db    0
db 0CDh
db    0
db    2
db    5
db 0FFh
db    0
db 0CCh
db    0
db    1
db    0
db 0FFh
db    0
db 0CEh
db    0
db    1
db    0
db 0FFh
db    0
db  9Bh
db    0
db    1
db    0
db 0FFh
db    0
db 0EBh
db    0
db 0FEh
db    2
db 0F0h
db    0
db  70h ; p
db    0
db 0FEh
db    3
db 0FCh
db    0
db 0E0h
db    0
db 0FEh
db    3
db 0FFh
db    0
db 0E9h
db    0
db 0FCh
db    2
db 0FFh
db    0
db 0E8h
db    0
db 0FCh
db    4
db 0FFh
db    0
db 0EAh
db    0
db 0FAh
db    2
db 0FFh
db    0
db  9Ah
db    0
db 0FAh
db    4
db 0E7h
db    0
db  26h ; &
db    0
db    0
db    0
db 0FEh
db    0
db 0F2h
db    0
db    0
db    0
db 0F7h
db    0
db 0C3h
db    0
db    1
db    1
db 0F7h
db    0
db 0C2h
db    0
db    3
db    1
db 0FFh
db    0
db 0CFh
db    0
db    1
db    1
db 0FEh
db 0FFh
db 0D4h
db  0Ah
db    2
db    0
db 0FEh
db    0
db  6Ch ; l
db    0
db 0E2h
db    0
db 0FEh
db    0
db  6Eh ; n
db    0
db 0E0h
db    0
db 0FEh
db    0
db 0A6h
db    0
db 0DEh
db    0
db 0FEh
db    0
db 0A4h
db    0
db 0DEh
db    0
db 0FEh
db    0
db 0ACh
db    0
db 0E0h
db    0
db 0FEh
db    0
db 0AEh
db    0
db 0E2h
db    0
db 0FEh
db    0
db 0AAh
db    0
db 0E2h
db    0
db 0FFh
db 0FFh
db  0Fh
db    6
db    2
db    0
db 0FFh
db 0C6h
db  0Fh
db  80h
db    1
db    0
db 0FEh
db    0
db  60h ; `
db    0
db    1
db    0
db 0FEh
db    0
db 0FCh
db    0
db    1
db    0
db 0FEh
db    0
db 0F4h
db    0
db    1
db    0
db 0FEh
db    0
db  98h
db    0
db    1
db    0
db 0FCh
db    0
db 0ECh
db    0
db    1
db    0
db 0FCh
db    0
db 0E4h
db    0
db    2
db    0
db 0FCh
db    0
db 0F8h
db    0
db    1
db    0
db 0FCh
db    0
db  9Ch
db    0
db    1
db    0
db 0F0h
db    0
db  50h ; P
db    0
db    1
db    0
db 0F0h
db    0
db  40h ; @
db    0
db    1
db    0
db 0FCh
db    0
db 0A0h
db    0
db 0DAh
db    0
db 0E6h
db    0
db    6
db    0
db    1
db    0
db 0FEh
db    0
db 0C0h
db    0
db 0F2h
db    0
db 0FEh
db  38h ; 8
db 0C6h
db    0
db 0EAh
db    0
db 0FEh
db  38h ; 8
db 0F6h
db    0
db 0EAh
db    0
db 0FDh
db    0
db  69h ; i
db    0
db 0E6h
db    0
db 0FFh
db 0FFh
db  0Fh
db 0AFh
db 0E4h
db    0
db 0FDh
db    0
db  68h ; h
db    0
db 0EEh
db    0
db 0F0h
db    0
db 0B0h
db    0
db 0ECh
db    0
db 0FFh
db    0
db 0F0h
db    0
db    0
db    0
db 0F8h
db    0
db 0D8h
db    0
db 0F4h
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
word_4C4FA dw 0
word_4C4FC dw 0
word_4C4FE dw 0
word_4C500 dw 0
db  2Eh ; .
db  20h
db  20h
db  50h ; P
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db 0FFh
db    3
db  45h ; E
db  53h ; S
db  43h ; C
db 0FFh
db    4
db  2Eh ; .
db    0
db  2Eh ; .
db  20h
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  74h ; t
db  69h ; i
db  6Eh ; n
db  75h ; u
db  65h ; e
db  3Fh ; ?
db  20h
db  28h ; (
db 0FFh
db    3
db  59h ; Y
db 0FFh
db    4
db  2Fh ; /
db 0FFh
db    3
db  4Eh ; N
db 0FFh
db    4
db  29h ; )
db    0
db  1Bh
db    0
db  59h ; Y
db  4Eh ; N
db  1Bh
db    0
db  2Eh ; .
db  20h
db  20h
db 0FFh
db    3
db  52h ; R
db 0FFh
db    4
db  65h ; e
db  74h ; t
db  72h ; r
db  79h ; y
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db 0FFh
db    3
db  41h ; A
db 0FFh
db    4
db  62h ; b
db  6Fh ; o
db  72h ; r
db  74h ; t
db  3Fh ; ?
db    0
db  52h ; R
db  41h ; A
db  1Bh
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  2Eh ; .
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db    0
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  63h ; c
db  72h ; r
db  65h ; e
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  77h ; w
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  63h ; c
db  6Ch ; l
db  6Fh ; o
db  73h ; s
db  65h ; e
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  69h ; i
db  73h ; s
db  20h
db  72h ; r
db  65h ; e
db  61h ; a
db  64h ; d
db  20h
db  6Fh ; o
db  6Eh ; n
db  6Ch ; l
db  79h ; y
db    0
db  54h ; T
db  43h ; C
db  48h ; H
db  45h ; E
db  4Ch ; L
db  50h ; P
db  2Eh ; .
db  54h ; T
db  43h ; C
db  48h ; H
db    0
db  54h ; T
db  55h ; U
db  52h ; R
db  42h ; B
db  4Fh ; O
db  20h
db  43h ; C
db  20h
db  48h ; H
db  45h ; E
db  4Ch ; L
db  50h ; P
db  20h
db  46h ; F
db  49h ; I
db  4Ch ; L
db  45h ; E
db  2Eh ; .
db    0
db  42h ; B
db  79h ; y
db  20h
db  42h ; B
db  4Ah ; J
db  2Ch ; ,
db  20h
db  50h ; P
db  47h ; G
db  2Ch ; ,
db  20h
db  4Dh ; M
db  57h ; W
db  2Ch ; ,
db  20h
db  44h ; D
db  4Ah ; J
db  2Ch ; ,
db  20h
db  50h ; P
db  4Bh ; K
db  2Ch ; ,
db  20h
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  50h ; P
db  57h ; W
db    0
db  20h
db  18h
db  20h
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  20h
db    0
db  20h
db 0FFh
db    3
db  49h ; I
db 0FFh
db    4
db  67h ; g
db  6Eh ; n
db  6Fh ; o
db  72h ; r
db  65h ; e
db  2Ch ; ,
db  20h
db 0FFh
db    3
db  45h ; E
db 0FFh
db    4
db  72h ; r
db  61h ; a
db  73h ; s
db  65h ; e
db  2Ch ; ,
db  20h
db 0FFh
db    3
db  43h ; C
db 0FFh
db    4
db  6Ch ; l
db  65h ; e
db  61h ; a
db  72h ; r
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  62h ; b
db  61h ; a
db  64h ; d
db  2Ch ; ,
db  20h
db 0FFh
db    3
db  53h ; S
db 0FFh
db    4
db  6Bh ; k
db  69h ; i
db  70h ; p
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  62h ; b
db  61h ; a
db  64h ; d
db  2Eh ; .
db    0
db  49h ; I
db  43h ; C
db  45h ; E
db  53h ; S
db  1Bh
db    0
db  49h ; I
db  6Eh ; n
db  73h ; s
db  65h ; e
db  72h ; r
db  74h ; t
db  20h
db  61h ; a
db  6Eh ; n
db  79h ; y
db  77h ; w
db  61h ; a
db  79h ; y
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Eh ; n
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  61h ; a
db  63h ; c
db  63h ; c
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db    0
db  4Eh ; N
db  6Fh ; o
db  74h ; t
db  20h
db  65h ; e
db  6Eh ; n
db  6Fh ; o
db  75h ; u
db  67h ; g
db  68h ; h
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db    0
db  4Eh ; N
db  4Fh ; O
db  4Eh ; N
db  41h ; A
db  4Dh ; M
db  45h ; E
db  2Eh ; .
db  43h ; C
db    0
db  20h
db  50h ; P
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  74h ; t
db  65h ; e
db  72h ; r
db  6Dh ; m
db  69h ; i
db  6Eh ; n
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db    0
db  2Ch ; ,
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  6Ch ; l
db  65h ; e
db  78h ; x
db    0
db  20h
db  55h ; U
db  73h ; s
db  65h ; e
db  72h ; r
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db    0
db  2Ch ; ,
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  74h ; t
db  65h ; e
db  72h ; r
db  6Dh ; m
db  69h ; i
db  6Eh ; n
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db    0
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db    0
db  20h
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Eh ; n
db  64h ; d
db  20h
db  73h ; s
db  6Fh ; o
db  75h ; u
db  72h ; r
db  63h ; c
db  65h ; e
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  2Ch ; ,
db  20h
db  65h ; e
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  6Eh ; n
db  65h ; e
db  77h ; w
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  64h ; d
db  65h ; e
db  62h ; b
db  75h ; u
db  67h ; g
db  20h
db  69h ; i
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db  20h
db  61h ; a
db  74h ; t
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  72h ; r
db  74h ; t
db  2Ch ; ,
db  20h
db  52h ; R
db  75h ; u
db  6Eh ; n
db  20h
db  61h ; a
db  6Eh ; n
db  79h ; y
db  77h ; w
db  61h ; a
db  79h ; y
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  64h ; d
db  65h ; e
db  62h ; b
db  75h ; u
db  67h ; g
db  20h
db  69h ; i
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db  2Ch ; ,
db  20h
db  52h ; R
db  75h ; u
db  6Eh ; n
db  20h
db  61h ; a
db  6Eh ; n
db  79h ; y
db  77h ; w
db  61h ; a
db  79h ; y
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  63h ; c
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  67h ; g
db  65h ; e
db  6Eh ; n
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  20h
db  74h ; t
db  68h ; h
db  69h ; i
db  73h ; s
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  64h ; d
db  6Fh ; o
db  65h ; e
db  73h ; s
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  74h ; t
db  61h ; a
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  43h ; C
db  4Fh ; O
db  4Dh ; M
db  53h ; S
db  50h ; P
db  45h ; E
db  43h ; C
db    0
db  44h ; D
db  4Fh ; O
db  53h ; S
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  65h ; e
db  78h ; x
db  65h ; e
db  63h ; c
db  75h ; u
db  74h ; t
db  65h ; e
db  2Eh ; .
db    0
db  4Eh ; N
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  6Eh ; n
db  20h
db  45h ; E
db  58h ; X
db  45h ; E
db  3Ah ; :
db  20h
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  64h ; d
db  65h ; e
db  62h ; b
db  75h ; u
db  67h ; g
db  20h
db  69h ; i
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db    0
db  20h
db  41h ; A
db  75h ; u
db  74h ; t
db  6Fh ; o
db  20h
db  62h ; b
db  75h ; u
db  69h ; i
db  6Ch ; l
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db  2Dh ; -
db  20h
db 0FFh
db    3
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  43h ; C
db 0FFh
db    4
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db 0FFh
db    3
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db 0FFh
db    4
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  65h ; e
db  78h ; x
db  69h ; i
db  74h ; t
db    0
db  20h
db  4Eh ; N
db  65h ; e
db  77h ; w
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  45h ; E
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  4Eh ; N
db  65h ; e
db  77h ; w
db  20h
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db    0
db  50h ; P
db  61h ; a
db  74h ; t
db  68h ; h
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  66h ; f
db  6Fh ; o
db  75h ; u
db  6Eh ; n
db  64h ; d
db    0
db  20h
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  50h ; P
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db  20h
db    0
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  69h ; i
db  67h ; g
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  20h
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Ch ; l
db  75h ; u
db  64h ; d
db  65h ; e
db  20h
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  69h ; i
db  65h ; e
db  73h ; s
db  20h
db    0
db  20h
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  6Fh ; o
db  72h ; r
db  20h
db  54h ; T
db  61h ; a
db  62h ; b
db  20h
db  53h ; S
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db    0
db  20h
db  50h ; P
db  72h ; r
db  69h ; i
db  6Dh ; m
db  61h ; a
db  72h ; r
db  79h ; y
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  2Eh ; .
db  42h ; B
db  41h ; A
db  4Bh ; K
db    0
db  53h ; S
db  6Fh ; o
db  75h ; u
db  72h ; r
db  63h ; c
db  65h ; e
db  20h
db  6Dh ; m
db  6Fh ; o
db  64h ; d
db  69h ; i
db  66h ; f
db  69h ; i
db  65h ; e
db  64h ; d
db  2Ch ; ,
db  20h
db  72h ; r
db  65h ; e
db  62h ; b
db  75h ; u
db  69h ; i
db  6Ch ; l
db  64h ; d
db    0
db  53h ; S
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  66h ; f
db  6Fh ; o
db  75h ; u
db  6Eh ; n
db  64h ; d
db    0
db  20h
db  44h ; D
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  53h ; S
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db  73h ; s
db  20h
db    0
db  20h
db  45h ; E
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  50h ; P
db  72h ; r
db  6Fh ; o
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  4Dh ; M
db  61h ; a
db  78h ; x
db  69h ; i
db  6Dh ; m
db  75h ; u
db  6Dh ; m
db  20h
db  4Ch ; L
db  65h ; e
db  6Eh ; n
db  67h ; g
db  74h ; t
db  68h ; h
db  20h
db    0
db  20h
db  4Dh ; M
db  61h ; a
db  78h ; x
db  69h ; i
db  6Dh ; m
db  75h ; u
db  6Dh ; m
db  20h
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db    0
db  20h
db  4Dh ; M
db  61h ; a
db  78h ; x
db  69h ; i
db  6Dh ; m
db  75h ; u
db  6Dh ; m
db  20h
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db  20h
db    0
db  20h
db  42h ; B
db  53h ; S
db  53h ; S
db  20h
db  53h ; S
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  42h ; B
db  53h ; S
db  53h ; S
db  20h
db  47h ; G
db  72h ; r
db  6Fh ; o
db  75h ; u
db  70h ; p
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  42h ; B
db  53h ; S
db  53h ; S
db  20h
db  43h ; C
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  44h ; D
db  41h ; A
db  54h ; T
db  41h ; A
db  20h
db  53h ; S
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  44h ; D
db  41h ; A
db  54h ; T
db  41h ; A
db  20h
db  47h ; G
db  72h ; r
db  6Fh ; o
db  75h ; u
db  70h ; p
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  44h ; D
db  41h ; A
db  54h ; T
db  41h ; A
db  20h
db  43h ; C
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  43h ; C
db  4Fh ; O
db  44h ; D
db  45h ; E
db  20h
db  53h ; S
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  43h ; C
db  4Fh ; O
db  44h ; D
db  45h ; E
db  20h
db  47h ; G
db  72h ; r
db  6Fh ; o
db  75h ; u
db  70h ; p
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  43h ; C
db  4Fh ; O
db  44h ; D
db  45h ; E
db  20h
db  43h ; C
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  20h
db  4Fh ; O
db  75h ; u
db  74h ; t
db  70h ; p
db  75h ; u
db  74h ; t
db  20h
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db    0
db  20h
db  4Ch ; L
db  69h ; i
db  62h ; b
db  72h ; r
db  61h ; a
db  72h ; r
db  79h ; y
db  20h
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  69h ; i
db  65h ; e
db  73h ; s
db  20h
db    0
db  20h
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db  20h
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db    0
db  2Eh ; .
db  4Dh ; M
db  41h ; A
db  50h ; P
db    0
db  2Eh ; .
db  4Fh ; O
db  42h ; B
db  4Ah ; J
db    0
db  2Eh ; .
db  45h ; E
db  58h ; X
db  45h ; E
db    0
db  54h ; T
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  45h ; E
db  58h ; X
db  49h ; I
db  54h ; T
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  49h ; I
db  6Eh ; n
db  73h ; s
db  65h ; e
db  72h ; r
db  74h ; t
db  20h
db  64h ; d
db  69h ; i
db  73h ; s
db  6Bh ; k
db  65h ; e
db  74h ; t
db  74h ; t
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db    0
db  44h ; D
db  69h ; i
db  73h ; s
db  6Bh ; k
db  20h
db  69h ; i
db  73h ; s
db  20h
db  77h ; w
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  2Dh ; -
db  70h ; p
db  72h ; r
db  6Fh ; o
db  74h ; t
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  55h ; U
db  6Eh ; n
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db  20h
db  75h ; u
db  6Eh ; n
db  69h ; i
db  74h ; t
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  44h ; D
db  69h ; i
db  73h ; s
db  6Bh ; k
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  72h ; r
db  65h ; e
db  61h ; a
db  64h ; d
db  79h ; y
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  43h ; C
db  72h ; r
db  69h ; i
db  74h ; t
db  69h ; i
db  63h ; c
db  61h ; a
db  6Ch ; l
db  20h
db  64h ; d
db  69h ; i
db  73h ; s
db  6Bh ; k
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  44h ; D
db  61h ; a
db  74h ; t
db  61h ; a
db  20h
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  67h ; g
db  72h ; r
db  69h ; i
db  74h ; t
db  79h ; y
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  53h ; S
db  65h ; e
db  65h ; e
db  6Bh ; k
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  55h ; U
db  6Eh ; n
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db  20h
db  6Dh ; m
db  65h ; e
db  64h ; d
db  69h ; i
db  61h ; a
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  53h ; S
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  66h ; f
db  6Fh ; o
db  75h ; u
db  6Eh ; n
db  64h ; d
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  50h ; P
db  72h ; r
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  70h ; p
db  61h ; a
db  70h ; p
db  65h ; e
db  72h ; r
db    0
db  57h ; W
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  20h
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  52h ; R
db  65h ; e
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  48h ; H
db  61h ; a
db  72h ; r
db  64h ; d
db  77h ; w
db  61h ; a
db  72h ; r
db  65h ; e
db  20h
db  66h ; f
db  61h ; a
db  69h ; i
db  6Ch ; l
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  72h ; r
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  40h ; @
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db  69h ; i
db  6Dh ; m
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  46h ; F
db  41h ; A
db  54h ; T
db  20h
db  64h ; d
db  65h ; e
db  74h ; t
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  61h ; a
db  63h ; c
db  63h ; c
db  65h ; e
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  24h ; $
db  20h
db  64h ; d
db  65h ; e
db  76h ; v
db  69h ; i
db  63h ; c
db  65h ; e
db    0
db  3Ah ; :
db  20h
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  70h ; p
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db 0FFh
db    3
db  45h ; E
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db 0FFh
db    4
db  20h
db  77h ; w
db  68h ; h
db  65h ; e
db  6Eh ; n
db  20h
db  72h ; r
db  65h ; e
db  61h ; a
db  64h ; d
db  79h ; y
db  2Eh ; .
db    0
db  20h
db  57h ; W
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db    0
db  20h
db  4Dh ; M
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db    0
db  20h
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  20h
db    0
db  20h
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db    0
db  20h
db  56h ; V
db  65h ; e
db  72h ; r
db  69h ; i
db  66h ; f
db  79h ; y
db  20h
db    0
db  20h
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db    0
db  20h
db  43h ; C
db  72h ; r
db  69h ; i
db  74h ; t
db  69h ; i
db  63h ; c
db  61h ; a
db  6Ch ; l
db  20h
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db    0
db  20h
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db    0
db  20h
db  49h ; I
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db  72h ; r
db  6Dh ; m
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db    0
db  20h
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  53h ; S
db  74h ; t
db  61h ; a
db  63h ; c
db  6Bh ; k
db  20h
db    0
db  55h ; U
db  6Eh ; n
db  65h ; e
db  78h ; x
db  70h ; p
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Eh ; n
db  64h ; d
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  69h ; i
db  67h ; g
db  75h ; u
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  3Ah ; :
db  20h
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  63h ; c
db  72h ; r
db  65h ; e
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  77h ; w
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db    0
db  20h
db  43h ; C
db  41h ; A
db  50h ; P
db  53h ; S
db  20h
db    0
db  20h
db  4Eh ; N
db  55h ; U
db  4Dh ; M
db  20h
db    0
db  20h
db  53h ; S
db  43h ; C
db  52h ; R
db  4Fh ; O
db  4Ch ; L
db  4Ch ; L
db  20h
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  68h ; h
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  72h ; r
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  68h ; h
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  50h ; P
db  67h ; g
db  55h ; U
db  70h ; p
db  2Fh ; /
db  50h ; P
db  67h ; g
db  44h ; D
db  6Eh ; n
db    0
db  50h ; P
db  67h ; g
db  55h ; U
db  70h ; p
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  73h ; s
db    0
db  20h
db  4Eh ; N
db  65h ; e
db  77h ; w
db  20h
db  6Dh ; m
db  61h ; a
db  73h ; s
db  6Bh ; k
db  20h
db    0
db  20h
db  45h ; E
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db    0
db  20h
db  4Eh ; N
db  65h ; e
db  77h ; w
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  20h
db    0
db  20h
db  52h ; R
db  65h ; e
db  73h ; s
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  62h ; b
db  65h ; e
db  20h
db  6Dh ; m
db  6Fh ; o
db  64h ; d
db  69h ; i
db  66h ; f
db  69h ; i
db  65h ; e
db  64h ; d
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  2Eh ; .
db  20h
db  20h
db  4Ch ; L
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  72h ; r
db  61h ; a
db  6Eh ; n
db  67h ; g
db  65h ; e
db  20h
db    0
db  4Fh ; O
db  76h ; v
db  65h ; e
db  72h ; r
db  77h ; w
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  20h
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  73h ; s
db  61h ; a
db  76h ; v
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  70h ; p
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  6Ch ; l
db  69h ; i
db  73h ; s
db  74h ; t
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  73h ; s
db  61h ; a
db  76h ; v
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  69h ; i
db  67h ; g
db  75h ; u
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  20h
db  52h ; R
db  65h ; e
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db  4Eh ; N
db  4Fh ; O
db  4Eh ; N
db  41h ; A
db  4Dh ; M
db  45h ; E
db  20h
db    0
db  20h
db  4Ch ; L
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db    0
db  49h ; I
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  6Eh ; n
db  61h ; a
db  6Ch ; l
db  20h
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  2Dh ; -
db  20h
db  50h ; P
db  6Ch ; l
db  65h ; e
db  61h ; a
db  73h ; s
db  65h ; e
db  20h
db  72h ; r
db  65h ; e
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  42h ; B
db  6Fh ; o
db  72h ; r
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  64h ; d
db    0
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  73h ; s
db  61h ; a
db  76h ; v
db  65h ; e
db  64h ; d
db  2Eh ; .
db  20h
db  20h
db  53h ; S
db  61h ; a
db  76h ; v
db  65h ; e
db    0
db  65h ; e
db  78h ; x
db  69h ; i
db  74h ; t
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  3Dh ; =
db  20h
db    0
db  2Ch ; ,
db  20h
db  77h ; w
db  69h ; i
db  6Eh ; n
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  3Dh ; =
db  20h
db    0
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db    0
db  43h ; C
db  6Fh ; o
db  70h ; p
db  79h ; y
db  72h ; r
db  69h ; i
db  67h ; g
db  68h ; h
db  74h ; t
db  20h
db  28h ; (
db  63h ; c
db  29h ; )
db  20h
db  31h ; 1
db  39h ; 9
db  38h ; 8
db  37h ; 7
db  2Ch ; ,
db  20h
db  31h ; 1
db  39h ; 9
db  38h ; 8
db  38h ; 8
db  20h
db  62h ; b
db  79h ; y
db    0
db  42h ; B
db  6Fh ; o
db  72h ; r
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  49h ; I
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  6Eh ; n
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  61h ; a
db  6Ch ; l
db  2Ch ; ,
db  20h
db  49h ; I
db  6Eh ; n
db  63h ; c
db  2Eh ; .
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  3Ah ; :
db  20h
db    0
db  52h ; R
db  65h ; e
db  61h ; a
db  64h ; d
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db  2Eh ; .
db  20h
db  20h
db  54h ; T
db  72h ; r
db  75h ; u
db  6Eh ; n
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db    0
db  55h ; U
db  6Eh ; n
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  6Eh ; n
db  20h
db    0
db  20h
db  52h ; R
db  65h ; e
db  61h ; a
db  64h ; d
db  20h
db  42h ; B
db  6Ch ; l
db  6Fh ; o
db  63h ; c
db  6Bh ; k
db  20h
db  46h ; F
db  72h ; r
db  6Fh ; o
db  6Dh ; m
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  20h
db  57h ; W
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  20h
db  42h ; B
db  6Ch ; l
db  6Fh ; o
db  63h ; c
db  6Bh ; k
db  20h
db  54h ; T
db  6Fh ; o
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  2Eh ; .
db  2Eh ; .
db  23h ; #
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  5Fh ; _
db    0
db  4Eh ; N
db  6Fh ; o
db  74h ; t
db  20h
db  65h ; e
db  6Eh ; n
db  6Fh ; o
db  75h ; u
db  67h ; g
db  68h ; h
db  20h
db  72h ; r
db  6Fh ; o
db  6Fh ; o
db  6Dh ; m
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  61h ; a
db  64h ; d
db  64h ; d
db  20h
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  20h
db  41h ; A
db  64h ; d
db  64h ; d
db  20h
db  57h ; W
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db    0
db  20h
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  20h
db  57h ; W
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db    0
db  4Bh ; K
db  20h
db  20h
db    0
db  45h ; E
db  44h ; D
db  49h ; I
db  54h ; T
db  4Fh ; O
db  52h ; R
db  20h
db  1Ah
db  20h
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  71h ; q
db  75h ; u
db  69h ; i
db  74h ; t
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db  4Dh ; M
db  61h ; a
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  3Ah ; :
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  67h ; g
db  3Ah ; :
db    0
db  54h ; T
db  6Fh ; o
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  20h
db  20h
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  65h ; e
db  73h ; s
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  64h ; d
db  3Ah ; :
db  20h
db  30h ; 0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  30h ; 0
db    0
db  41h ; A
db  76h ; v
db  61h ; a
db  69h ; i
db  6Ch ; l
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db  3Ah ; :
db  20h
db    0
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db  3Ah ; :
db  20h
db  30h ; 0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  30h ; 0
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db  3Ah ; :
db  20h
db  30h ; 0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  30h ; 0
db    0
db  20h
db  20h
db  20h
db  20h
db  50h ; P
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  6Bh ; k
db  65h ; e
db  79h ; y
db  20h
db  20h
db  20h
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  50h ; P
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  6Bh ; k
db  65h ; e
db  79h ; y
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db  43h ; C
db  75h ; u
db  72h ; r
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db  3Ah ; :
db  20h
db    0
db  43h ; C
db  75h ; u
db  72h ; r
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db  20h
db    0
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db  20h
db    0
db  45h ; E
db  4Dh ; M
db  53h ; S
db  20h
db  75h ; u
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db  20h
db    0
db  20h
db  28h ; (
db  4Dh ; M
db  61h ; a
db  78h ; x
db  3Ah ; :
db  20h
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  65h ; e
db  73h ; s
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  64h ; d
db  3Ah ; :
db  20h
db    0
db  54h ; T
db  6Fh ; o
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db  20h
db  3Ah ; :
db  20h
db    0
db  54h ; T
db  6Fh ; o
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  77h ; w
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db  3Ah ; :
db  20h
db    0
db  50h ; P
db  41h ; A
db  53h ; S
db  53h ; S
db  20h
db  31h ; 1
db    0
db  50h ; P
db  41h ; A
db  53h ; S
db  53h ; S
db  20h
db  32h ; 2
db    0
db  43h ; C
db  68h ; h
db  65h ; e
db  63h ; c
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  64h ; d
db  65h ; e
db  70h ; p
db  65h ; e
db  6Eh ; n
db  64h ; d
db  65h ; e
db  6Eh ; n
db  63h ; c
db  69h ; i
db  65h ; e
db  73h ; s
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  54h ; T
db  68h ; h
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db  20h
db  53h ; S
db  75h ; u
db  63h ; c
db  63h ; c
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db    0
db  20h
db  20h
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db    0
db  20h
db  20h
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db    0
db  20h
db  20h
db  46h ; F
db  61h ; a
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db    0
db  20h
db  20h
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  20h
db  20h
db  20h
db  3Ah ; :
db    0
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  3Ah ; :
db    0
db  20h
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db    0
db  45h ; E
db  58h ; X
db  45h ; E
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  3Ah ; :
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  20h
db  3Ah ; :
db    0
db  54h ; T
db  6Fh ; o
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  20h
db  20h
db  20h
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db    0
db  20h
db  4Dh ; M
db  61h ; a
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db    0
db  69h ; i
db  73h ; s
db  20h
db  75h ; u
db  70h ; p
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  64h ; d
db  61h ; a
db  74h ; t
db  65h ; e
db  2Eh ; .
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  65h ; e
db  64h ; d
db  2Eh ; .
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  72h ; r
db  75h ; u
db  6Eh ; n
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  2Eh ; .
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  74h ; t
db  65h ; e
db  72h ; r
db  6Dh ; m
db  69h ; i
db  6Eh ; n
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db  2Eh ; .
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  65h ; e
db  78h ; x
db  69h ; i
db  74h ; t
db  20h
db  63h ; c
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  20h
db  20h
db  20h
db    0
db  4Eh ; N
db  6Fh ; o
db  74h ; t
db  20h
db  65h ; e
db  6Eh ; n
db  6Fh ; o
db  75h ; u
db  67h ; g
db  68h ; h
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db  2Ch ; ,
db  20h
db  73h ; s
db  6Fh ; o
db  6Dh ; m
db  65h ; e
db  20h
db  6Dh ; m
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  73h ; s
db  20h
db  6Ch ; l
db  6Fh ; o
db  73h ; s
db  74h ; t
db    0
db  55h ; U
db  6Eh ; n
db  65h ; e
db  78h ; x
db  70h ; p
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  44h ; D
db  4Fh ; O
db  53h ; S
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db    0
db  55h ; U
db  6Eh ; n
db  65h ; e
db  78h ; x
db  70h ; p
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  72h ; r
db  65h ; e
db  61h ; a
db  64h ; d
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  65h ; e
db  64h ; d
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  68h ; h
db  65h ; e
db  73h ; s
db  65h ; e
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  53h ; S
db  53h ; S
db  4Dh ; M
db  43h ; C
db  4Ch ; L
db  48h ; H
db    0
db  55h ; U
db  6Eh ; n
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  6Eh ; n
db  20h
db  64h ; d
db  65h ; e
db  70h ; p
db  65h ; e
db  6Eh ; n
db  64h ; d
db  65h ; e
db  6Eh ; n
db  63h ; c
db  79h ; y
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  45h ; E
db  4Dh ; M
db  55h ; U
db  2Eh ; .
db  4Ch ; L
db  49h ; I
db  42h ; B
db    0
db  47h ; G
db  52h ; R
db  41h ; A
db  50h ; P
db  48h ; H
db  49h ; I
db  43h ; C
db  53h ; S
db  2Eh ; .
db  4Ch ; L
db  49h ; I
db  42h ; B
db    0
db  46h ; F
db  50h ; P
db  38h ; 8
db  37h ; 7
db  2Eh ; .
db  4Ch ; L
db  49h ; I
db  42h ; B
db    0
db  4Dh ; M
db  41h ; A
db  54h ; T
db  48h ; H
db  78h ; x
db  2Eh ; .
db  4Ch ; L
db  49h ; I
db  42h ; B
db    0
db  43h ; C
db  78h ; x
db  2Eh ; .
db  4Ch ; L
db  49h ; I
db  42h ; B
db    0
db  2Eh ; .
db  50h ; P
db  52h ; R
db  4Ah ; J
db    0
db  43h ; C
db  30h ; 0
db    0
db  43h ; C
db  30h ; 0
db  78h ; x
db  2Eh ; .
db  4Fh ; O
db  42h ; B
db  4Ah ; J
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0DAh
db 0BFh
db 0C0h
db 0D9h
db 0C4h
db 0B3h
db 0C3h
db 0B4h
db 0C2h
db 0C2h
db 0C0h
db 0D9h
db 0C4h
db 0B3h
db 0C3h
db 0B4h
db 0C3h
db 0C2h
db 0C0h
db 0D9h
db 0C4h
db 0B3h
db 0C3h
db 0B4h
db 0C2h
db 0B4h
db 0C0h
db 0D9h
db 0C4h
db 0B3h
db 0C3h
db 0B4h
db 0C9h
db 0BBh
db 0C8h
db 0BCh
db 0CDh
db 0BAh
db 0CCh
db 0B9h
db 0C3h
db 0B4h
db 0C0h
db 0D9h
db 0C4h
db 0B3h
db 0C3h
db 0B4h
db    2
db    1
db  2Eh ; .
db  2Eh ; .
db  2Eh ; .
db    0
db 0FFh
db 0FFh
db    1
db    0
db  24h ; $
db  15h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Bh ; ;
db  15h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Fh ; /
db  15h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Eh ; .
db  2Eh ; .
db  2Eh ; .
db    0
db  2Ah ; *
db    0
db  2Eh ; .
db  2Ah ; *
db    0
db    0
unk_4D42C db    1
db    0
db    0
db  50h ; P
db  19h
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4D445 db    0
db    0
db  61h ; a
db    5
dd unk_4D42C
db    0
db    0
db    0
db    0
dd unk_4D5CC
unk_4D455 db  28h ; (
unk_4D456 db  29h ; )
unk_4D457 db  5Bh ; [
unk_4D458 db  5Dh ; ]
unk_4D459 db  7Bh ; {
unk_4D45A db  7Dh ; }
unk_4D45B db  3Ch ; <
unk_4D45C db  3Eh ; >
unk_4D45D db  22h ; "
unk_4D45E db  22h ; "
unk_4D45F db  27h ; '
unk_4D460 db  27h ; '
unk_4D461 db  2Fh ; /
db  2Ah ; *
unk_4D463 db  2Ah ; *
db  2Fh ; /
unk_4D465 db    1
db    1
dd unk_4D455
dd unk_4D456
db    1
db    1
dd unk_4D457
dd unk_4D458
db    1
db    1
dd unk_4D459
dd unk_4D45A
db    1
db    1
dd unk_4D45B
dd unk_4D45C
db    1
db    0
dd unk_4D45D
dd unk_4D45E
db    1
db    0
dd unk_4D45F
dd unk_4D460
db    2
db    0
dd unk_4D461
dd unk_4D463
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4D4B5 db 0FFh
db 0FFh
db 0FFh
db 0FFh
unk_4D4B9 db 0FEh
db 0FFh
unk_4D4BB db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4D50B db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  4Fh ; O
db  14h
db    0
db    0
unk_4D518 db  8Bh
db  0Ch
dd unk_4D4BB
dd unk_4D50B
dd loc_14548
dd loc_1456D
dd unk_4D4B5
dd loc_1458A
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd unk_4D445
dd unk_4D6BE
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
dd loc_14696
dd loc_14710
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd unk_4D465
align 4
unk_4D5CC db  2Eh ; .
db  43h ; C
db    0
db    0
unk_4D5D0 db    1
db    0
db    0
db    0
db  45h ; E
db  4Dh ; M
db  4Dh ; M
db  58h ; X
db  58h ; X
db  58h ; X
db  58h ; X
db  30h ; 0
db    0
db    0
db    1
db    0
db  4Eh ; N
db  4Fh ; O
db  4Eh ; N
db  41h ; A
db  4Dh ; M
db  45h ; E
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  24h ; $
db  2Ah ; *
db  24h ; $
db  2Ah ; *
db  20h
db  26h ; &
db  26h ; &
db  26h ; &
db  26h ; &
db  24h ; $
db  2Ah ; *
db  24h ; $
db    0
db  1Eh
db  49h ; I
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db  54h ; T
db  43h ; C
db  43h ; C
db  4Fh ; O
db  4Eh ; N
db  46h ; F
db  49h ; I
db  47h ; G
db  2Eh ; .
db  54h ; T
db  43h ; C
db    0
db 0FFh
db 0FFh
db  52h ; R
db  12h
db  75h ; u
db  12h
db  8Dh
db  12h
db 0AAh
db  12h
db 0C9h
db  12h
db 0AAh
db  12h
db 0E9h
db  12h
db 0FFh
db  12h
db  1Dh
db  13h
db  39h ; 9
db  13h
db  4Eh ; N
db  13h
db  65h ; e
db  13h
db  7Bh ; {
db  13h
db 0AAh
db  12h
db  97h
db  13h
db 0B8h
db  13h
db  0Dh
db  1Bh
db    0
db    0
unk_4D6BE db    2
db    0
db 0FFh
db    2
db    0
db 0FFh
db    2
db    0
db  3Ch ; <
db    2
db    0
db  3Fh ; ?
db    2
db    0
db  40h ; @
db    2
db    0
db  3Dh ; =
db    2
db    0
db  2Dh ; -
db    2
db    0
db  6Dh ; m
db    2
db    0
db  19h
db    2
db    0
db  6Eh ; n
db    2
db    0
db  6Fh ; o
db    2
db    0
db  43h ; C
db    2
db    0
db  70h ; p
db    2
db    0
db  44h ; D
db    2
db    0
db  13h
db    2
db    0
db  2Eh ; .
db    2
db    0
db  21h ; !
db    2
db    0
db  18h
db    2
db    0
db  6Ah ; j
db    2
db    0
db  5Dh ; ]
db    2
db    0
db  6Ch ; l
db    2
db    0
db  20h
db    2
db    0
db  41h ; A
db    2
db    0
db  42h ; B
db    2
db    0
db  61h ; a
db    2
db    0
db  65h ; e
db    2
db    0
db  3Eh ; >
db    2
db    0
db  30h ; 0
db    2
db    0
db  64h ; d
db    2
db    0
db  66h ; f
db    2
db    0
db  5Fh ; _
db    2
db    0
db  60h ; `
db    0
db 0F7h
db 0FFh
db    1
db    0
db 0F4h
db 0FFh
db 0F8h
db 0FFh
db 0FCh
db 0FFh
db 0F5h
db 0FFh
db 0FDh
db 0FFh
db 0E4h
db 0FFh
db 0E0h
db 0FFh
db 0F2h
db 0FFh
db 0F3h
db 0FFh
db 0F0h
db 0FFh
db 0F1h
db 0FFh
db 0F7h
db 0FFh
db 0DEh
db 0FFh
db 0DFh
db 0FFh
db 0DCh
db 0FFh
db 0E1h
db 0FFh
db 0F6h
db 0FFh
db 0FEh
db 0FFh
db 0EFh
db 0FFh
db 0E2h
db 0FFh
db 0EDh
db 0FFh
db 0ECh
db 0FFh
db 0EAh
db 0FFh
db 0E9h
db 0FFh
db 0EBh
db 0FFh
db 0E3h
db 0FFh
db 0E8h
db 0FFh
db 0EEh
db 0FFh
db 0E7h
db 0FFh
db 0E6h
db 0FFh
db    0
db    0
db  48h ; H
db    0
db    5
db    0
db    0
db    0
db  50h ; P
db    1
db  18h
db    0
db    1
db    0
db  4Bh ; K
db    2
db  13h
db    0
db    2
db    0
db  4Dh ; M
db    3
db    4
db    0
db    3
db  0Dh
db    0
db    4
db  1Bh
db    0
db    5
db    0
db  47h ; G
db    9
db    1
db    0
db    9
db    0
db  4Fh ; O
db  0Ah
db    6
db    0
db  0Ah
db    0
db  49h ; I
db  0Bh
db  12h
db    0
db  0Bh
db    0
db  51h ; Q
db  0Ch
db    3
db    0
db  0Ch
db    0
db  84h
db  0Dh
db    0
db  76h ; v
db  0Eh
db    8
db    0
db    8
db    0
db  52h ; R
db    6
db    0
db  53h ; S
db    7
db    7
db    0
db    7
db  19h
db    0
db  1Ah
db  0Eh
db    0
db  1Bh
db    0
db  2Ah ; *
db  12h
db    0
db  1Dh
db  13h
db    0
db  38h ; 8
db  14h
db    0
db  45h ; E
db  0Fh
db    0
db  46h ; F
db  11h
db    0
db  3Ah ; :
db  10h
db    9
db    0
db  1Eh
db    0
db  0Fh
db  1Fh
db 0FFh
db 0FFh
db  15h
db    0
db  5Dh ; ]
db 0FEh
db    0
db  3Dh ; =
db 0F5h
db    0
db  3Ch ; <
db 0F4h
db    0
db  40h ; @
db 0FCh
db    0
db  6Dh ; m
db 0E4h
db    0
db  3Fh ; ?
db 0F8h
db    0
db  43h ; C
db 0F0h
db    0
db  70h ; p
db 0F1h
db    0
db  44h ; D
db 0F7h
db    0
db  6Ah ; j
db 0F6h
db    0
db  6Eh ; n
db 0F2h
db    0
db  6Fh ; o
db 0F3h
db    0
db  66h ; f
db 0EEh
db    0
db  3Eh ; >
db 0EBh
db    0
db  5Fh ; _
db 0E7h
db    0
db  60h ; `
db 0E6h
db    0
db  61h ; a
db 0EAh
db    0
db  41h ; A
db 0EDh
db    0
db  42h ; B
db 0ECh
db    0
db  64h ; d
db 0E8h
db    0
db  65h ; e
db 0E9h
db    0
db  3Bh ; ;
db 0FBh
db    0
db  68h ; h
db 0FAh
db    0
db  6Ch ; l
db 0EFh
db    0
db  21h ; !
db 0DCh
db    0
db  12h
db 0DDh
db    0
db  13h
db 0DEh
db    0
db  2Eh ; .
db 0DFh
db    0
db  18h
db 0E1h
db    0
db  30h ; 0
db 0E3h
db    0
db  20h
db 0E2h
db    0
db  2Fh ; /
db  1Ch
db    0
db  17h
db  1Dh
db    0
db  2Dh ; -
db 0FDh
db    0
db  19h
db 0E0h
db    0
db    0
db 0FFh
db 0B0h
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    2
db    0
db    3
db    0
db    4
db    0
db    5
db    0
db    6
db    0
db    7
db    0
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Dh ; -
db  2Dh ; -
db  20h
db    0
db  3Ah ; :
db  20h
db  6Dh ; m
db  20h
db 0A0h
db  20h
db 0D3h
db  20h
db    6
db  21h ; !
db  39h ; 9
db  21h ; !
db  6Ch ; l
db  21h ; !
db  9Fh
db  21h ; !
db 0D2h
db  21h ; !
db    0
db    0
db  54h ; T
db  43h ; C
db  50h ; P
db  49h ; I
db  43h ; C
db  4Bh ; K
db  2Eh ; .
db  54h ; T
db  43h ; C
db  50h ; P
db    0
db  2Eh ; .
db  2Ah ; *
db    0
db  2Eh ; .
db  54h ; T
db  43h ; C
db    0
db  54h ; T
db  43h ; C
db  43h ; C
db  4Fh ; O
db  4Eh ; N
db  46h ; F
db  49h ; I
db  47h ; G
db  2Eh ; .
db  54h ; T
db  43h ; C
db    0
db  54h ; T
db  43h ; C
db  50h ; P
db  49h ; I
db  43h ; C
db  4Bh ; K
db  2Eh ; .
db  54h ; T
db  43h ; C
db  50h ; P
db    0
db  11h
db    0
db  20h
db    0
db  10h
db    0
db  2Dh ; -
db    0
db    0
db    0
db  3Bh ; ;
db  2Ch ; ,
db  3Dh ; =
db  2Bh ; +
db  3Ch ; <
db  3Eh ; >
db  7Ch ; |
db  22h ; "
db  5Bh ; [
db  5Dh ; ]
db    0
db  22h ; "
db    0
db  3Fh ; ?
db  2Ah ; *
db    0
db  5Ch ; \
db    0
db  74h ; t
db    0
db    0
db    0
db    0
db    4
db    0
db    0
db  10h
db    4
db    0
db    0
db  65h ; e
db    4
db    0
db    0
db  87h
db    4
db    0
db    0
db 0A8h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4DB48 db    1
db    0
db    0
db    0
db    0
db    0
db 0D3h
db  91h
db    0
db    0
db    1
db    0
db    0
db    0
db    1
db    0
db    0
db  3Ah ; :
db  20h
db    0
db    7
db    0
db  20h
db    0
db    0
db    1
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db  19h
db  64h ; d
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd unk_4DF61
dd unk_4DF7F
dd unk_4DF9D
dd unk_4E009
dd unk_4E027
dd unk_4E045
dd unk_4E0B1
dd unk_4E0CF
dd unk_4E0ED
dd unk_4E5F0
db    0
db    0
db    0
db    0
dd aCTcLib              ; "C:\\TC\\LIB"
dd aCTcInclude          ; "C:\\TC\\INCLUDE"
dd unk_4E418
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
unk_4DBC4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4DBD0 db    0
db    0
db    0
db    0
db    0
db    0
unk_4DBD6 db    0
db    0
db  0Fh
db  70h ; p
db    0
db  74h ; t
db    0
db    0
db  70h ; p
db  0Fh
db  70h ; p
db  78h ; x
db  74h ; t
db    0
db  70h ; p
db  70h ; p
db  0Fh
db  70h ; p
db  78h ; x
db  74h ; t
db    0
db    0
db  70h ; p
db  0Fh
db  70h ; p
db  78h ; x
db  74h ; t
db    0
db    0
db  70h ; p
db  0Fh
db  70h ; p
db  78h ; x
db  74h ; t
db    0
unk_4DBF9 db    0
db    0
db  70h ; p
db    7
db    0
db  0Fh
db    0
db    0
db    7
db  70h ; p
db    7
db  0Fh
db  0Fh
db    0
db    7
db    7
db  70h ; p
db    7
db  0Fh
db  0Fh
db    0
db    0
db    7
db  70h ; p
db    7
db  0Fh
db  0Fh
db    0
db    0
db    7
db  70h ; p
db    7
db  0Fh
db  0Fh
db    0
unk_4DC1C db    0
db    0
db    7
db  78h ; x
db    0
db  70h ; p
db    0
db  28h ; (
db  78h ; x
db    7
db  78h ; x
db  78h ; x
db  70h ; p
db    0
db  78h ; x
db  78h ; x
db    7
db  78h ; x
db  78h ; x
db  70h ; p
db    0
db    0
db  78h ; x
db    7
db  78h ; x
db  78h ; x
db  70h ; p
db    0
db    0
db  78h ; x
db    7
db  78h ; x
db  78h ; x
db  70h ; p
db    0
db 0AFh
db  34h ; 4
db 0B3h
db  34h ; 4
db 0B3h
db  34h ; 4
db 0AFh
db  34h ; 4
db 0B6h
db  34h ; 4
db 0B9h
db  34h ; 4
db 0BDh
db  34h ; 4
db 0C7h
db  34h ; 4
db 0D3h
db  34h ; 4
db 0D8h
db  34h ; 4
db 0DDh
db  34h ; 4
db 0E4h
db  34h ; 4
db 0EDh
db  34h ; 4
db 0F2h
db  34h ; 4
db 0F8h
db  34h ; 4
db 0FAh
db  34h ; 4
db    1
db  35h ; 5
db    6
db  35h ; 5
db  10h
db  35h ; 5
db 0AFh
db  34h ; 4
db  1Bh
db  35h ; 5
db  25h ; %
db  35h ; 5
db    0
db    0
db    0
db    0
db    1
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    1
db    0
db    0
db    0
db    1
db    0
db 0BBh
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db 0BDh
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db 0BFh
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db 0C1h
db  23h ; #
db    3
db    0
db 0B5h
db  23h ; #
db 0C3h
db  23h ; #
db    2
db    0
db  97h
db  23h ; #
db 0C5h
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db  65h ; e
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  69h ; i
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  6Dh ; m
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  71h ; q
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  75h ; u
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  79h ; y
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  7Dh ; }
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  81h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  85h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  89h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  8Dh
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  91h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  95h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  99h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  9Dh
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0A1h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0A5h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0A9h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0ADh
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0B1h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0B5h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0B9h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0BDh
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0C5h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0CDh
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0D1h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0D5h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0DDh
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0E1h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db 0E9h
db  4Fh ; O
db    2
db    0
db  8Fh
db  23h ; #
db  32h ; 2
db  35h ; 5
db  41h ; A
db  1Ah
db    2
db    2
db  14h
db 0FFh
db  23h ; #
db 0C8h
db    0
db  55h ; U
db  35h ; 5
db  42h ; B
db  1Bh
db    2
db    2
db  14h
db    5
db  24h ; $
db 0C8h
db    0
db  78h ; x
db  35h ; 5
db  43h ; C
db  1Ch
db    2
db    2
db  14h
db  0Bh
db  24h ; $
db 0C8h
db    0
db  9Bh
db  35h ; 5
db  44h ; D
db  1Dh
db    2
db    2
db  14h
db  11h
db  24h ; $
db 0C8h
db    0
db 0C2h
db  35h ; 5
db  45h ; E
db  1Fh
db    2
db    2
db  14h
db  1Dh
db  24h ; $
db 0C8h
db    0
db 0D6h
db  35h ; 5
db  46h ; F
db  27h ; '
db    2
db    2
db  14h
db  4Dh ; M
db  24h ; $
db 0C8h
db    0
db    0
db  36h ; 6
db  47h ; G
db  31h ; 1
db    2
db    2
db  14h
db  8Fh
db  24h ; $
db 0C8h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    7
db 0A7h
db  24h ; $
db    0
db    0
db  2Fh ; /
db  36h ; 6
db  41h ; A
db  18h
db    2
db    2
db  14h
db 0F3h
db  23h ; #
db 0C9h
db    0
db  50h ; P
db  36h ; 6
db  42h ; B
db  1Eh
db    2
db    2
db  14h
db  17h
db  24h ; $
db 0C9h
db    0
db  69h ; i
db  36h ; 6
db  43h ; C
db  23h ; #
db    2
db    2
db  14h
db  35h ; 5
db  24h ; $
db 0C9h
db    0
db  92h
db  36h ; 6
db  44h ; D
db  24h ; $
db    2
db    2
db  14h
db  3Bh ; ;
db  24h ; $
db 0C9h
db    0
db 0BCh
db  36h ; 6
db  45h ; E
db  26h ; &
db    2
db    2
db  14h
db  47h ; G
db  24h ; $
db 0C9h
db    0
db 0DDh
db  36h ; 6
db  46h ; F
db  2Eh ; .
db    2
db    2
db  14h
db  77h ; w
db  24h ; $
db 0C9h
db    0
db 0FCh
db  36h ; 6
db  47h ; G
db  30h ; 0
db    2
db    2
db  14h
db  7Dh ; }
db  24h ; $
db 0C9h
db    0
db  28h ; (
db  37h ; 7
db  48h ; H
db  36h ; 6
db    2
db    2
db  14h
db  95h
db  24h ; $
db 0C9h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    8
db    9
db  25h ; %
db    0
db    0
db  53h ; S
db  37h ; 7
db  41h ; A
db  25h ; %
db    2
db    2
db  14h
db  41h ; A
db  24h ; $
db 0CAh
db    0
db  75h ; u
db  37h ; 7
db  42h ; B
db  28h ; (
db    2
db    2
db  14h
db  53h ; S
db  24h ; $
db 0CAh
db    0
db  89h
db  37h ; 7
db  43h ; C
db  29h ; )
db    2
db    2
db  14h
db  59h ; Y
db  24h ; $
db 0CAh
db    0
db  9Fh
db  37h ; 7
db  44h ; D
db  20h
db    2
db    2
db  14h
db  23h ; #
db  24h ; $
db 0CAh
db    0
db 0CCh
db  37h ; 7
db  45h ; E
db  21h ; !
db    2
db    2
db  14h
db  29h ; )
db  24h ; $
db 0CAh
db    0
db 0FFh
db  37h ; 7
db  46h ; F
db  2Ah ; *
db    2
db    2
db  14h
db  5Fh ; _
db  24h ; $
db 0CAh
db    0
db  22h ; "
db  38h ; 8
db  47h ; G
db  2Ch ; ,
db    2
db    2
db  14h
db  6Bh ; k
db  24h ; $
db 0CAh
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    7
db  76h ; v
db  25h ; %
db    0
db    0
db  43h ; C
db  38h ; 8
db  41h ; A
db  19h
db    2
db    2
db  14h
db 0F9h
db  23h ; #
db 0CBh
db    0
db  6Bh ; k
db  38h ; 8
db  42h ; B
db  22h ; "
db    2
db    2
db  14h
db  2Fh ; /
db  24h ; $
db 0CBh
db    0
db  8Eh
db  38h ; 8
db  43h ; C
db  2Bh ; +
db    2
db    2
db  14h
db  65h ; e
db  24h ; $
db 0CBh
db    0
db 0B6h
db  38h ; 8
db  44h ; D
db  2Dh ; -
db    2
db    2
db  14h
db  71h ; q
db  24h ; $
db 0CBh
db    0
db 0D3h
db  38h ; 8
db  45h ; E
db  32h ; 2
db    2
db    2
db  14h
db  89h
db  24h ; $
db 0CBh
db    0
db 0FAh
db  38h ; 8
db  46h ; F
db  33h ; 3
db    2
db    2
db  14h
db  83h
db  24h ; $
db 0CBh
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    6
db 0D8h
db  25h ; %
db    0
db    0
db 0B9h
db  22h ; "
db    2
db    0
db  93h
db  23h ; #
db  32h ; 2
db  35h ; 5
db    0
db    0
db    0
db  31h ; 1
db  30h ; 0
db  30h ; 0
db    0
db    0
db 0FFh
db  10h
db  35h ; 5
db  26h ; &
db    5
db    0
db    3
db    0
db  10h
db  11h
db  3Ah ; :
db  26h ; &
db    5
db    0
db    3
db    0
db  20h
db  39h ; 9
db  45h ; E
db  4Fh ; O
db    2
db    6
db    4
db  3Fh ; ?
db  26h ; &
db 0A9h
db    0
db  35h ; 5
db  39h ; 9
db  57h ; W
db  50h ; P
db    2
db    6
db    4
db  47h ; G
db  26h ; &
db 0AAh
db    0
db  4Ah ; J
db  39h ; 9
db  44h ; D
db  3Ah ; :
db    2
db    2
db  14h
db  2Fh ; /
db  26h ; &
db 0ABh
db    0
db  5Bh ; [
db  39h ; 9
db  50h ; P
db  68h ; h
db    2
db    0
db    4
db 0F4h
db  24h ; $
db 0C8h
db    0
db  70h ; p
db  39h ; 9
db  41h ; A
db  69h ; i
db    2
db    0
db    4
db  61h ; a
db  25h ; %
db 0C9h
db    0
db  80h
db  39h ; 9
db  43h ; C
db  6Ah ; j
db    2
db    0
db    4
db 0C3h
db  25h ; %
db 0CAh
db    0
db  8Eh
db  39h ; 9
db  4Ch ; L
db  6Bh ; k
db    2
db    0
db    4
db  1Ah
db  26h ; &
db 0CBh
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    7
db  4Fh ; O
db  26h ; &
db    0
db    0
unk_4DF61 db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4DF7F db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4DF9D db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h
db  11h
db 0B1h
db  26h ; &
db  1Eh
db    0
db    8
db    0
db 0A4h
db  11h
db 0CFh
db  26h ; &
db  1Eh
db    0
db    8
db    0
db 0B6h
db  11h
db 0EDh
db  26h ; &
db  1Eh
db    0
db    8
db    0
db 0A1h
db  39h ; 9
db  53h ; S
db  57h ; W
db    2
db    6
db    4
db  0Bh
db  27h ; '
db  84h
db    0
db 0AEh
db  39h ; 9
db  47h ; G
db  58h ; X
db    2
db    6
db    4
db  13h
db  27h ; '
db  84h
db    0
db 0BBh
db  39h ; 9
db  43h ; C
db  59h ; Y
db    2
db    6
db    4
db  1Bh
db  27h ; '
db  84h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db  23h ; #
db  27h ; '
db    0
db    0
unk_4E009 db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4E027 db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4E045 db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  58h ; X
db  11h
db  59h ; Y
db  27h ; '
db  1Eh
db    0
db    8
db    0
db  6Ch ; l
db  11h
db  77h ; w
db  27h ; '
db  1Eh
db    0
db    8
db    0
db  7Eh ; ~
db  11h
db  95h
db  27h ; '
db  1Eh
db    0
db    8
db    0
db 0A1h
db  39h ; 9
db  53h ; S
db  54h ; T
db    2
db    6
db    4
db 0B3h
db  27h ; '
db  84h
db    0
db 0AEh
db  39h ; 9
db  47h ; G
db  55h ; U
db    2
db    6
db    4
db 0BBh
db  27h ; '
db  84h
db    0
db 0BBh
db  39h ; 9
db  43h ; C
db  56h ; V
db    2
db    6
db    4
db 0C3h
db  27h ; '
db  84h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db 0CBh
db  27h ; '
db    0
db    0
unk_4E0B1 db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4E0CF db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4E0ED db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  23h ; #
db  11h
db    1
db  28h ; (
db  1Eh
db    0
db    8
db    0
db  36h ; 6
db  11h
db  1Fh
db  28h ; (
db  1Eh
db    0
db    8
db    0
db  47h ; G
db  11h
db  3Dh ; =
db  28h ; (
db  1Eh
db    0
db    8
db    0
db 0A1h
db  39h ; 9
db  53h ; S
db  51h ; Q
db    2
db    6
db    4
db  5Bh ; [
db  28h ; (
db  84h
db    0
db 0AEh
db  39h ; 9
db  47h ; G
db  52h ; R
db    2
db    6
db    4
db  63h ; c
db  28h ; (
db  84h
db    0
db 0BBh
db  39h ; 9
db  43h ; C
db  53h ; S
db    2
db    6
db    4
db  6Bh ; k
db  28h ; (
db  84h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db  73h ; s
db  28h ; (
db    0
db    0
db 0C8h
db  39h ; 9
db  43h ; C
db  65h ; e
db    2
db    0
db    4
db  44h ; D
db  27h ; '
db  84h
db    0
db 0D3h
db  39h ; 9
db  44h ; D
db  66h ; f
db    2
db    0
db    4
db 0ECh
db  27h ; '
db  84h
db    0
db 0DEh
db  39h ; 9
db  42h ; B
db  67h ; g
db    2
db    0
db    4
db  94h
db  28h ; (
db  84h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db 0A9h
db  28h ; (
db    0
db    0
db 0B6h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0B8h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0B7h
db  22h ; "
db    2
db    0
db 0A3h
db  23h ; #
db 0BFh
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0B4h
db  22h ; "
db    2
db    0
db  9Fh
db  23h ; #
db  0Fh
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db  11h
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db 0C9h
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db  0Eh
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db 0AFh
db  34h ; 4
db  4Fh ; O
db  43h ; C
db    2
db    0
db  10h
db    0
db    0
db  85h
db    0
db 0E9h
db  39h ; 9
db  53h ; S
db  44h ; D
db    2
db    0
db  10h
db    0
db    0
db  85h
db    0
db 0F2h
db  39h ; 9
db  50h ; P
db  45h ; E
db    2
db    0
db  10h
db    0
db    0
db  85h
db    0
db 0FAh
db  39h ; 9
db  44h ; D
db  46h ; F
db    2
db    0
db  10h
db    0
db    0
db  85h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    4
db  15h
db  29h ; )
db  0Ch
db  23h ; #
db    3
db  3Ah ; :
db  4Dh ; M
db  11h
db    2
db    3
db  14h
db  41h ; A
db  29h ; )
db  85h
db    0
db  0Ch
db  3Ah ; :
db  49h ; I
db  12h
db    2
db    2
db  14h
db 0FDh
db  28h ; (
db  86h
db    0
db  20h
db  3Ah ; :
db  44h ; D
db  13h
db    2
db    2
db  14h
db    3
db  29h ; )
db  87h
db    0
db  32h ; 2
db  3Ah ; :
db  47h ; G
db  14h
db    2
db    2
db  14h
db    9
db  29h ; )
db  19h
db    1
db  43h ; C
db  3Ah ; :
db  57h ; W
db  37h ; 7
db    2
db    2
db  14h
db  9Bh
db  24h ; $
db  88h
db    0
db  5Ah ; Z
db  3Ah ; :
db  53h ; S
db  39h ; 9
db    2
db    2
db  14h
db 0A1h
db  24h ; $
db  89h
db    0
db  68h ; h
db  3Ah ; :
db  43h ; C
db  16h
db    2
db    2
db  14h
db  0Fh
db  29h ; )
db  8Ah
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    7
db  56h ; V
db  29h ; )
db    0
db    0
db 0B2h
db  22h ; "
db    2
db    0
db  9Bh
db  23h ; #
db 0B5h
db  22h ; "
db    3
db    0
db 0AFh
db  23h ; #
db 0C2h
db  22h ; "
db    2
db    0
db 0A7h
db  23h ; #
db 0C3h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0C4h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0C7h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0C8h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0C6h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0C5h
db  22h ; "
db    2
db    0
db 0ABh
db  23h ; #
db 0CCh
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0C1h
db  22h ; "
db    2
db    0
db  8Fh
db  23h ; #
db 0CDh
db  23h ; #
db    2
db    0
db  8Fh
db  23h ; #
db  7Ch ; |
db  3Ah ; :
db  43h ; C
db  63h ; c
db    2
db    2
db  14h
db 0E8h
db  29h ; )
db  98h
db    0
db  8Fh
db  3Ah ; :
db  49h ; I
db    1
db    2
db    2
db  14h
db 0B8h
db  29h ; )
db  99h
db    0
db  9Fh
db  3Ah ; :
db  46h ; F
db    3
db    2
db    2
db  14h
db 0BEh
db  29h ; )
db  9Ah
db    0
db 0AEh
db  3Ah ; :
db  44h ; D
db    5
db    2
db    2
db  14h
db 0EBh
db  28h ; (
db  9Bh
db    0
db 0C0h
db  3Ah ; :
db  41h ; A
db    2
db    2
db    2
db  14h
db 0F7h
db  28h ; (
db  9Ch
db    0
db 0CAh
db  3Ah ; :
db  47h ; G
db  10h
db    2
db    2
db  14h
db 0EEh
db  29h ; )
db  9Dh
db    0
db 0DDh
db  3Ah ; :
db  4Dh ; M
db  0Fh
db    2
db    2
db  14h
db 0DCh
db  29h ; )
db  9Eh
db    0
db 0F5h
db  3Ah ; :
db  53h ; S
db  0Eh
db    2
db    2
db  14h
db 0E2h
db  29h ; )
db  9Fh
db    0
db  0Ah
db  3Bh ; ;
db  54h ; T
db    7
db    2
db    2
db  14h
db 0F1h
db  28h ; (
db 0A0h
db    0
db  1Eh
db  3Bh ; ;
db  4Ch ; L
db    9
db    2
db    2
db  14h
db 0F4h
db  29h ; )
db 0A1h
db    0
db  2Bh ; +
db  3Bh ; ;
db  4Fh ; O
db  17h
db    2
db    2
db  14h
db 0FAh
db  29h ; )
db  11h
db    1
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db  0Bh
db    0
db  2Ah ; *
db    0
db    0
db  33h ; 3
db  32h ; 2
db    0
db    0
db 0EEh
db  10h
db  8Eh
db  2Ah ; *
db    4
db    0
db    2
db    0
db  41h ; A
db  3Bh ; ;
db  49h ; I
db  4Eh ; N
db    2
db    6
db    4
db  92h
db  2Ah ; *
db 0A6h
db    0
db  53h ; S
db  3Bh ; ;
db  4Eh ; N
db    6
db    2
db    2
db  14h
db 0E5h
db  28h ; (
db 0A7h
db    0
db  63h ; c
db  3Bh ; ;
db  41h ; A
db    4
db    2
db    2
db  14h
db 0DFh
db  28h ; (
db 0A8h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db  9Ah
db  2Ah ; *
db    0
db    0
db  76h ; v
db  3Bh ; ;
db  4Fh ; O
db  0Ah
db    2
db    2
db  14h
db 0C4h
db  29h ; )
db 0A2h
db    0
db  83h
db  3Bh ; ;
db  55h ; U
db  0Dh
db    2
db    2
db  14h
db 0D6h
db  29h ; )
db 0A3h
db    0
db  9Ah
db  3Bh ; ;
db  52h ; R
db  0Ch
db    2
db    2
db  14h
db 0D0h
db  29h ; )
db 0A4h
db    0
db 0B0h
db  3Bh ; ;
db  4Ah ; J
db  0Bh
db    2
db    2
db  14h
db 0CAh
db  29h ; )
db 0A5h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    4
db 0D0h
db  2Ah ; *
db    0
db    0
db 0C2h
db  3Bh ; ;
db  54h ; T
db  3Bh ; ;
db    2
db    0
db  10h
db    0
db    0
db  92h
db    0
db 0C7h
db  3Bh ; ;
db  53h ; S
db  3Ch ; <
db    2
db    0
db  10h
db    0
db    0
db  93h
db    0
db 0CDh
db  3Bh ; ;
db  4Dh ; M
db  3Dh ; =
db    2
db    0
db  10h
db    0
db    0
db  95h
db    0
db 0D4h
db  3Bh ; ;
db  43h ; C
db  3Eh ; >
db    2
db    0
db  10h
db    0
db    0
db  94h
db    0
db 0DCh
db  3Bh ; ;
db  4Ch ; L
db  3Fh ; ?
db    2
db    0
db  10h
db    0
db    0
db  96h
db    0
db 0E2h
db  3Bh ; ;
db  48h ; H
db  40h ; @
db    2
db    0
db  10h
db    0
db    0
db  97h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    6
db  11h
db  2Bh ; +
db 0B1h
db  22h ; "
unk_4E418 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B7h
db  10h
db  68h ; h
db  2Bh ; +
db  7Fh ; 
db    0
db    8
db    0
db 0E7h
db  3Bh ; ;
db  4Dh ; M
db  5Ah ; Z
db    2
db    3
db  14h
db  53h ; S
db  2Bh ; +
db  7Eh ; ~
db    0
db 0EDh
db  3Bh ; ;
db  44h ; D
db  6Dh ; m
db    2
db    6
db  0Ch
db 0E7h
db  2Bh ; +
db  7Fh ; 
db    0
db 0F5h
db  3Bh ; ;
db  43h ; C
db  61h ; a
db    2
db    0
db    4
db  79h ; y
db  2Ah ; *
db  80h
db    0
db    5
db  3Ch ; <
db  4Fh ; O
db  5Fh ; _
db    2
db    0
db    4
db 0FCh
db  2Ah ; *
db  81h
db    0
db  12h
db  3Ch ; <
db  53h ; S
db  60h ; `
db    2
db    0
db    4
db 0BBh
db  2Ah ; *
db  82h
db    0
db  19h
db  3Ch ; <
db  45h ; E
db  62h ; b
db    2
db    0
db    4
db  9Ch
db  26h ; &
db  83h
db    0
db  20h
db  3Ch ; <
db  4Eh ; N
db  64h ; d
db    2
db    0
db    4
db 0CAh
db  28h ; (
db  84h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    7
db 0EFh
db  2Bh ; +
db    0
db    0
db  26h ; &
db  3Ch ; <
db  32h ; 2
db    2
db    4
db    0
db    0
db    0
db    0
db 0D6h
db    0
db  36h ; 6
db  3Ch ; <
db  34h ; 4
db    3
db    4
db    0
db    0
db    0
db    0
db 0D7h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    2
db  51h ; Q
db  2Ch ; ,
db    0
db    0
db  43h ; C
db  3Ah ; :
db  5Ch ; \
db  54h ; T
db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
aCTcInclude db 'C:\TC\INCLUDE',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4E5F0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
aCTcLib db 'C:\TC\LIB',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Eh
db    0
db 0A2h
db  1Fh
db  1Eh
db    0
db  13h
db  91h
db  40h ; @
db  10h
db 0C0h
db  2Ch ; ,
db  80h
db    0
db  1Eh
db    0
db 0C8h
db  11h
db  40h ; @
db  2Dh ; -
db  44h ; D
db    0
db  1Eh
db    0
db 0DBh
db  11h
db  84h
db  2Dh ; -
db  80h
db    0
db  1Eh
db    0
db 0F1h
db  11h
db  7Ch ; |
db  2Ch ; ,
db  44h ; D
db    0
db  1Eh
db    0
db  49h ; I
db  3Ch ; <
db  49h ; I
db  0Ah
db    3
db    6
db    4
db  0Ch
db  2Eh ; .
db  8Bh
db    0
db  5Eh ; ^
db  3Ch ; <
db  4Ch ; L
db    8
db    3
db    6
db    4
db  1Ch
db  2Eh ; .
db  8Dh
db    0
db  73h ; s
db  3Ch ; <
db  4Fh ; O
db    9
db    3
db    6
db    4
db  14h
db  2Eh ; .
db  8Ch
db    0
db  85h
db  3Ch ; <
db  54h ; T
db    7
db    3
db    6
db    4
db  24h ; $
db  2Eh ; .
db  8Eh
db    0
db  98h
db  3Ch ; <
db  50h ; P
db  0Bh
db    3
db    4
db    4
db    4
db  2Eh ; .
db 0D9h
db    0
db 0A8h
db  3Ch ; <
db    0
db    0
db    0
db    4
db  41h ; A
db    8
db  2Eh ; .
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    6
db  2Ch ; ,
db  2Eh ; .
db    0
db    0
db  38h ; 8
db    0
db    0
db    0
db  67h ; g
db  10h
db  83h
db  2Eh ; .
db    4
db    0
db    2
db    0
db 0BBh
db  3Ch ; <
db  4Dh ; M
db  0Fh
db    3
db    2
db    4
db 0E1h
db  23h ; #
db 0CEh
db    0
db 0CCh
db  3Ch ; <
db  4Bh ; K
db  10h
db    3
db    2
db    4
db 0E7h
db  23h ; #
db 0CFh
db    0
db 0DAh
db  3Ch ; <
db  43h ; C
db    4
db    3
db    2
db    4
db 0D5h
db  23h ; #
db 0D3h
db    0
db 0EBh
db  3Ch ; <
db  45h ; E
db    3
db    3
db    2
db    4
db 0CFh
db  23h ; #
db  8Fh
db    0
db 0FAh
db  3Ch ; <
db  42h ; B
db  0Ch
db    3
db    2
db    4
db 0DBh
db  23h ; #
db  90h
db    0
db    7
db  3Dh ; =
db  54h ; T
db  0Eh
db    3
db    6
db    4
db  87h
db  2Eh ; .
db 0D4h
db    0
db  10h
db  3Dh ; =
db  5Ah ; Z
db    1
db    4
db    2
db    4
db 0EDh
db  23h ; #
db  91h
db    0
db  1Fh
db  3Dh ; =
db  53h ; S
db  0Dh
db    3
db    0
db    4
db  67h ; g
db  2Ch ; ,
db 0D5h
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    8
db  8Fh
db  2Eh ; .
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Ah ; *
db  2Eh ; .
db  54h ; T
db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  18h
db  10h
db 0FCh
db  2Eh ; .
db  80h
db    0
db    0
db    0
db  32h ; 2
db  10h
db  7Ch ; |
db  2Fh ; /
db  50h ; P
db    0
db    0
db    0
db  2Bh ; +
db  3Dh ; =
db  43h ; C
db  5Bh ; [
db    2
db    0
db    4
db  3Ch ; <
db  2Ch ; ,
db  78h ; x
db    0
db  34h ; 4
db  3Dh ; =
db  4Ch ; L
db  5Ch ; \
db    2
db    0
db    4
db 0A3h
db  29h ; )
db  79h ; y
db    0
db  3Bh ; ;
db  3Dh ; =
db  45h ; E
db  5Dh ; ]
db    2
db    0
db    4
db 0E7h
db  2Eh ; .
db  7Ah ; z
db    0
db  47h ; G
db  3Dh ; =
db  44h ; D
db  5Eh ; ^
db    2
db    0
db    4
db  6Eh ; n
db  2Eh ; .
db 0D2h
db    0
db  53h ; S
db  3Dh ; =
db  41h ; A
db  4Dh ; M
db    2
db    6
db  0Ch
db 0CCh
db  2Fh ; /
db  7Bh ; {
db    0
db  5Dh ; ]
db  3Dh ; =
db  53h ; S
db    6
db    3
db    0
db    4
db    0
db    0
db  7Dh ; }
db    0
db  6Ah ; j
db  3Dh ; =
db  52h ; R
db    5
db    3
db    6
db  84h
db 0D4h
db  2Fh ; /
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    7
db 0DCh
db  2Fh ; /
db    0
db    0
db  3Ah ; :
db  20h
db    0
db    4
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db  6Dh ; m
db  20h
db    0
db    5
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db 0A0h
db  20h
db    0
db    6
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db 0D3h
db  20h
db    0
db    7
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db    6
db  21h ; !
db    0
db    8
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db  39h ; 9
db  21h ; !
db    0
db    9
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db  6Ch ; l
db  21h ; !
db    0
db  0Ah
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db  9Fh
db  21h ; !
db    0
db  0Bh
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db 0D2h
db  21h ; !
db    0
db  0Ch
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db    5
db  22h ; "
db    0
db  0Dh
db    1
db    0
db    0
db    0
db    0
db  67h ; g
db    0
db  7Bh ; {
db  3Dh ; =
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    1
db  3Eh ; >
db  30h ; 0
db    0
db    0
db  2Ah ; *
db  2Eh ; .
db  2Ah ; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0DCh
db  0Fh
db 0DCh
db  93h
db  50h ; P
db    0
db    0
db    0
db 0E7h
db  0Fh
db 0C1h
db  30h ; 0
db  50h ; P
db    0
db    0
db    0
db  8Ah
db  3Dh ; =
db  4Ch ; L
db    1
db    1
db    0
db    4
db    0
db    0
db  0Bh
db    0
db  97h
db  3Dh ; =
db  50h ; P
db    3
db    1
db    0
db    4
db 0ACh
db  30h ; 0
db  67h ; g
db    0
db 0A4h
db  3Dh ; =
db  4Eh ; N
db  11h
db    1
db    0
db    4
db    0
db    0
db  0Dh
db    0
db 0A8h
db  3Dh ; =
db  53h ; S
db    2
db    1
db    0
db    4
db    0
db    0
db  0Eh
db    0
db 0B5h
db  3Dh ; =
db  57h ; W
db  0Eh
db    1
db    6
db  84h
db  11h
db  31h ; 1
db  0Fh
db    0
db 0BEh
db  3Dh ; =
db  44h ; D
db  0Fh
db    1
db    6
db  84h
db  19h
db  31h ; 1
db  10h
db    0
db 0C8h
db  3Dh ; =
db  43h ; C
db  10h
db    1
db    0
db    4
db    0
db    0
db  11h
db    0
db 0D3h
db  3Dh ; =
db  4Fh ; O
db  12h
db    1
db    0
db    0
db    0
db    0
db  12h
db    0
db 0DCh
db  3Dh ; =
db  51h ; Q
db 0FDh
db 0FFh
db    0
db    4
db    0
db    0
db  13h
db    0
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    9
db  21h ; !
db  31h ; 1
db    0
db    0
db 0E9h
db  3Dh ; =
db  57h ; W
db    3
db  0Dh
db    0
db    0
db    0
db    0
db  72h ; r
db    0
db  19h
db  3Ch ; <
db  45h ; E
db    4
db  0Dh
db    0
db    0
db    0
db    0
db  73h ; s
db    0
db 0F2h
db  3Dh ; =
db  46h ; F
db    5
db  0Dh
db    0
db    0
db    0
db    0
db  74h ; t
db    0
db 0FFh
db  3Dh ; =
db  4Ch ; L
db    6
db  0Dh
db    0
db    0
db    0
db    0
db  75h ; u
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    4
db  99h
db  31h ; 1
db 0C5h
db  31h ; 1
db  0Eh
db    0
db  6Ch ; l
db  40h ; @
db    0
db    0
db 0E0h
db  31h ; 1
db    2
db    0
db  8Fh
db  23h ; #
db    4
db  3Eh ; >
db  50h ; P
db    1
db  0Dh
db    4
db  24h ; $
db 0DCh
db  31h ; 1
db  70h ; p
db    0
db  11h
db  3Eh ; >
db  42h ; B
db    2
db  0Dh
db    3
db    4
db 0C7h
db  31h ; 1
db  71h ; q
db    0
db  1Fh
db  3Eh ; >
db  41h ; A
db    9
db  0Dh
db    2
db    4
db 0E2h
db  31h ; 1
db    0
db    1
db  31h ; 1
db  3Eh ; >
db  43h ; C
db    7
db  0Dh
db    0
db    0
db    0
db    0
db  76h ; v
db    0
db  3Fh ; ?
db  3Eh ; >
db  52h ; R
db    8
db  0Dh
db    0
db    0
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    5
db 0E8h
db  31h ; 1
db    0
db    0
db  4Fh ; O
db  3Eh ; >
db  41h ; A
db    1
db  0Ch
db    0
db    4
db    0
db    0
db    8
db    1
db  6Ah ; j
db  3Eh ; >
db  44h ; D
db    2
db  0Ch
db    0
db    0
db    0
db    0
db    9
db    1
db  77h ; w
db  3Eh ; >
db  45h ; E
db    3
db  0Ch
db    0
db    4
db    0
db    0
db  0Ah
db    1
db  82h
db  3Eh ; >
db  52h ; R
db    4
db  0Ch
db    0
db    0
db    0
db    0
db  0Bh
db    1
db 0B2h
db  34h ; 4
db    0
db    0
db    0
db    5
db    1
db    0
db    0
db    0
db    0
db  95h
db  3Eh ; >
db  54h ; T
db    5
db  0Ch
db    0
db    0
db    0
db    0
db  0Ch
db    1
db 0B0h
db  3Eh ; >
db  43h ; C
db    6
db  0Ch
db    0
db    0
db    0
db    0
db  0Dh
db    1
db 0C6h
db  3Eh ; >
db  56h ; V
db    7
db  0Ch
db    0
db    0
db    0
db    0
db  0Eh
db    1
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    8
db  34h ; 4
db  32h ; 2
db    0
db    0
db 0C9h
db  10h
db  13h
db  9Ah
db  50h ; P
db    0
db    0
db    0
db 0B3h
db  34h ; 4
db  4Fh ; O
db  47h ; G
db    2
db    0
db    0
db    0
db    0
db  13h
db    1
db 0DBh
db  3Eh ; >
db  53h ; S
db  48h ; H
db    2
db    0
db    0
db    0
db    0
db  14h
db    1
db    1
db  35h ; 5
db  4Eh ; N
db  49h ; I
db    2
db    0
db    0
db    0
db    0
db  15h
db    1
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db 0A9h
db  32h ; 2
db 0CBh
db  23h ; #
db    1
db  35h ; 5
db  4Eh ; N
db  4Ah ; J
db    2
db    0
db    0
db    0
db    0
db  16h
db    1
db 0E6h
db  3Eh ; >
db  53h ; S
db  4Bh ; K
db    2
db    0
db    0
db    0
db    0
db  17h
db    1
db 0ECh
db  3Eh ; >
db  41h ; A
db  4Ch ; L
db    2
db    0
db    0
db    0
db    0
db  18h
db    1
db    0
db    0
db    0
db    0
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    3
db 0DFh
db  32h ; 2
db 0C7h
db  23h ; #
db 0F3h
db  3Eh ; >
db  45h ; E
db    2
db  0Bh
db    0
db    0
db    0
db    0
db    3
db    1
db    7
db  3Fh ; ?
db  43h ; C
db    1
db  0Bh
db    0
db    0
db    0
db    0
db    5
db    1
db  1Bh
db  3Fh ; ?
db  46h ; F
db    3
db  0Bh
db    6
db  8Ch
db 0A1h
db  32h ; 2
db    4
db    1
db  29h ; )
db  3Fh ; ?
db  52h ; R
db    4
db  0Bh
db    0
db    0
db    0
db    0
db  10h
db    1
db  39h ; 9
db  3Fh ; ?
db  44h ; D
db    5
db  0Bh
db    3
db    4
db    0
db  33h ; 3
db  0Fh
db    1
db  4Ah ; J
db  3Fh ; ?
db  53h ; S
db    8
db    2
db    3
db    4
db 0CAh
db  32h ; 2
db    6
db    1
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    6
db  15h
db  33h ; 3
db    0
db    0
db  5Bh ; [
db  3Fh ; ?
db  52h ; R
db    1
db    9
db    0
db    0
db    0
db    0
db 0F9h
db    0
db  72h ; r
db  3Fh ; ?
db  50h ; P
db    3
db    9
db    0
db    0
db    0
db    0
db 0FCh
db    0
db  89h
db  3Fh ; ?
db  47h ; G
db    2
db    9
db    0
db    0
db    0
db    0
db 0FBh
db    0
db 0A0h
db  3Fh ; ?
db  54h ; T
db    4
db    9
db    0
db    0
db    0
db    0
db 0FDh
db    0
db 0B7h
db  3Fh ; ?
db  53h ; S
db    5
db    9
db    0
db    0
db    0
db    0
db 0FEh
db    0
db 0CEh
db  3Fh ; ?
db  55h ; U
db    4
db    4
db    0
db    0
db    0
db    0
db  12h
db    1
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    6
db  6Ch ; l
db  33h ; 3
db    0
db    0
db  0Eh
db    0
db  50h ; P
db  97h
db  0Eh
db    0
db 0A0h
db  97h
db  0Eh
db    0
db  80h
db  47h ; G
db 0E5h
db  3Fh ; ?
db  43h ; C
db    1
db  0Ah
db    4
db  20h
db 0C7h
db  33h ; 3
db  6Ah ; j
db    0
db 0F4h
db  3Fh ; ?
db  4Dh ; M
db    4
db  0Ah
db    4
db  20h
db 0C3h
db  33h ; 3
db  6Bh ; k
db    0
db    2
db  40h ; @
db  4Ch ; L
db    3
db  0Ah
db    0
db    0
db    0
db    0
db  6Ch ; l
db    0
db  10h
db  40h ; @
db  42h ; B
db    5
db  0Ah
db    0
db    0
db    0
db    0
db  6Dh ; m
db    0
db  1Ah
db  40h ; @
db  50h ; P
db    2
db  0Ah
db    4
db  24h ; $
db 0CBh
db  33h ; 3
db  6Eh ; n
db    0
db  2Ah ; *
db  40h ; @
db  47h ; G
db    6
db  0Ah
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    1
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    6
db 0CFh
db  33h ; 3
db    0
db    0
db  2Dh ; -
db  35h ; 5
db  46h ; F
db    0
db    1
db    0
db    0
db  84h
db  31h ; 1
db  0Ah
db    0
db  33h ; 3
db  40h ; @
db  45h ; E
db    0
db    6
db    0
db    0
db    0
db    0
db  18h
db    0
db  38h ; 8
db  40h ; @
db  52h ; R
db    0
db    9
db    0
db    0
db 0AEh
db  33h ; 3
db  68h ; h
db    0
db  3Ch ; <
db  40h ; @
db  43h ; C
db    0
db  0Ah
db    0
db    0
db  11h
db  34h ; 4
db  69h ; i
db    0
db  44h ; D
db  40h ; @
db  50h ; P
db    0
db  0Dh
db    0
db    0
db  1Fh
db  32h ; 2
db  6Fh ; o
db    0
db  4Ch ; L
db  40h ; @
db  4Fh ; O
db    0
db    2
db    0
db    0
db  29h ; )
db  30h ; 0
db  77h ; w
db    0
db  54h ; T
db  40h ; @
db  44h ; D
db    0
db  0Bh
db    0
db    0
db  57h ; W
db  33h ; 3
db    2
db    1
db  5Ah ; Z
db  40h ; @
db  42h ; B
db    0
db  0Ch
db    0
db    0
db  8Ch
db  32h ; 2
db    7
db    1
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    8
db  26h ; &
db  34h ; 4
db    0
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Fh ; O
db  66h ; f
db  66h ; f
db    0
db  4Fh ; O
db  6Eh ; n
db    0
db  4Eh ; N
db  6Fh ; o
db    0
db  59h ; Y
db  65h ; e
db  73h ; s
db    0
db  38h ; 8
db  30h ; 0
db  38h ; 8
db  38h ; 8
db  2Fh ; /
db  38h ; 8
db  30h ; 0
db  38h ; 8
db  36h ; 6
db    0
db  38h ; 8
db  30h ; 0
db  31h ; 1
db  38h ; 8
db  36h ; 6
db  2Fh ; /
db  38h ; 8
db  30h ; 0
db  32h ; 2
db  38h ; 8
db  36h ; 6
db    0
db  42h ; B
db  79h ; y
db  74h ; t
db  65h ; e
db    0
db  57h ; W
db  6Fh ; o
db  72h ; r
db  64h ; d
db    0
db  53h ; S
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db    0
db  55h ; U
db  6Eh ; n
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db    0
db  53h ; S
db  69h ; i
db  7Ah ; z
db  65h ; e
db    0
db  53h ; S
db  70h ; p
db  65h ; e
db  65h ; e
db  64h ; d
db    0
db  43h ; C
db    0
db  50h ; P
db  61h ; a
db  73h ; s
db  63h ; c
db  61h ; a
db  6Ch ; l
db    0
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  65h ; e
db    0
db  45h ; E
db  6Dh ; m
db  75h ; u
db  6Ch ; l
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  38h ; 8
db  30h ; 0
db  38h ; 8
db  37h ; 7
db  2Fh ; /
db  38h ; 8
db  30h ; 0
db  32h ; 2
db  38h ; 8
db  37h ; 7
db    0
db  41h ; A
db  6Ch ; l
db  6Ch ; l
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  73h ; s
db    0
db  43h ; C
db  75h ; u
db  72h ; r
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  41h ; A
db  3Ah ; :
db  20h
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  42h ; B
db  3Ah ; :
db  20h
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  43h ; C
db  3Ah ; :
db  20h
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  72h ; r
db  69h ; i
db  73h ; s
db  6Fh ; o
db  6Eh ; n
db    0
db  44h ; D
db  3Ah ; :
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  72h ; r
db  61h ; a
db  6Eh ; n
db  67h ; g
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  72h ; r
db  69h ; i
db  73h ; s
db  6Fh ; o
db  6Eh ; n
db    0
db  45h ; E
db  3Ah ; :
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  46h ; F
db  3Ah ; :
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Dh ; m
db  61h ; a
db  79h ; y
db  20h
db  6Ch ; l
db  6Fh ; o
db  73h ; s
db  65h ; e
db  20h
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  69h ; i
db  66h ; f
db  69h ; i
db  63h ; c
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  64h ; d
db  69h ; i
db  67h ; g
db  69h ; i
db  74h ; t
db  73h ; s
db    0
db  47h ; G
db  3Ah ; :
db  20h
db  4Dh ; M
db  69h ; i
db  78h ; x
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  75h ; u
db  6Eh ; n
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db    0
db  41h ; A
db  3Ah ; :
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db    0
db  42h ; B
db  3Ah ; :
db  20h
db  5Ah ; Z
db  65h ; e
db  72h ; r
db  6Fh ; o
db  20h
db  6Ch ; l
db  65h ; e
db  6Eh ; n
db  67h ; g
db  74h ; t
db  68h ; h
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db    0
db  43h ; C
db  3Ah ; :
db  20h
db  56h ; V
db  6Fh ; o
db  69h ; i
db  64h ; d
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  20h
db  6Dh ; m
db  61h ; a
db  79h ; y
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  44h ; D
db  3Ah ; :
db  20h
db  42h ; B
db  6Fh ; o
db  74h ; t
db  68h ; h
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  45h ; E
db  3Ah ; :
db  20h
db  53h ; S
db  75h ; u
db  73h ; s
db  70h ; p
db  69h ; i
db  63h ; c
db  69h ; i
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  46h ; F
db  3Ah ; :
db  20h
db  55h ; U
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db    0
db  47h ; G
db  3Ah ; :
db  20h
db  52h ; R
db  65h ; e
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  69h ; i
db  63h ; c
db  61h ; a
db  6Ch ; l
db    0
db  48h ; H
db  3Ah ; :
db  20h
db  48h ; H
db  65h ; e
db  78h ; x
db  61h ; a
db  64h ; d
db  65h ; e
db  63h ; c
db  69h ; i
db  6Dh ; m
db  61h ; a
db  6Ch ; l
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  63h ; c
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  41h ; A
db  3Ah ; :
db  20h
db  46h ; F
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  73h ; s
db  68h ; h
db  6Fh ; o
db  75h ; u
db  6Ch ; l
db  64h ; d
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  42h ; B
db  3Ah ; :
db  20h
db  55h ; U
db  6Eh ; n
db  72h ; r
db  65h ; e
db  61h ; a
db  63h ; c
db  68h ; h
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  63h ; c
db  6Fh ; o
db  64h ; d
db  65h ; e
db    0
db  43h ; C
db  3Ah ; :
db  20h
db  43h ; C
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  68h ; h
db  61h ; a
db  73h ; s
db  20h
db  6Eh ; n
db  6Fh ; o
db  20h
db  65h ; e
db  66h ; f
db  66h ; f
db  65h ; e
db  63h ; c
db  74h ; t
db    0
db  44h ; D
db  3Ah ; :
db  20h
db  50h ; P
db  6Fh ; o
db  73h ; s
db  73h ; s
db  69h ; i
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db  20h
db  62h ; b
db  65h ; e
db  66h ; f
db  6Fh ; o
db  72h ; r
db  65h ; e
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  45h ; E
db  3Ah ; :
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db  20h
db  69h ; i
db  73h ; s
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  20h
db  77h ; w
db  68h ; h
db  69h ; i
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  65h ; e
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  46h ; F
db  3Ah ; :
db  20h
db  50h ; P
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  65h ; e
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  47h ; G
db  3Ah ; :
db  20h
db  50h ; P
db  6Fh ; o
db  73h ; s
db  73h ; s
db  69h ; i
db  62h ; b
db  6Ch ; l
db  79h ; y
db  20h
db  69h ; i
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  72h ; r
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  41h ; A
db  3Ah ; :
db  20h
db  53h ; S
db  75h ; u
db  70h ; p
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  75h ; u
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  26h ; &
db  20h
db  77h ; w
db  69h ; i
db  74h ; t
db  68h ; h
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  61h ; a
db  72h ; r
db  72h ; r
db  61h ; a
db  79h ; y
db    0
db  42h ; B
db  3Ah ; :
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  65h ; e
db  64h ; d
db  20h
db  62h ; b
db  75h ; u
db  74h ; t
db  20h
db  6Eh ; n
db  65h ; e
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  43h ; C
db  3Ah ; :
db  20h
db  41h ; A
db  6Dh ; m
db  62h ; b
db  69h ; i
db  67h ; g
db  75h ; u
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db  6Eh ; n
db  65h ; e
db  65h ; e
db  64h ; d
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  68h ; h
db  65h ; e
db  73h ; s
db  65h ; e
db  73h ; s
db    0
db  44h ; D
db  3Ah ; :
db  20h
db  53h ; S
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  70h ; p
db  61h ; a
db  73h ; s
db  73h ; s
db  65h ; e
db  64h ; d
db  20h
db  62h ; b
db  79h ; y
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  45h ; E
db  3Ah ; :
db  20h
db  4Eh ; N
db  6Fh ; o
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  27h ; '
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  27h ; '
db    0
db  46h ; F
db  3Ah ; :
db  20h
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  77h ; w
db  69h ; i
db  74h ; t
db  68h ; h
db  20h
db  6Eh ; n
db  6Fh ; o
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  74h ; t
db  6Fh ; o
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db  20h
db  3Ah ; :
db  20h
db  73h ; s
db  74h ; t
db  6Fh ; o
db  70h ; p
db  20h
db  61h ; a
db  66h ; f
db  74h ; t
db  65h ; e
db  72h ; r
db    0
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db  3Ah ; :
db  20h
db  73h ; s
db  74h ; t
db  6Fh ; o
db  70h ; p
db  20h
db  61h ; a
db  66h ; f
db  74h ; t
db  65h ; e
db  72h ; r
db    0
db  44h ; D
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  79h ; y
db  20h
db  77h ; w
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db    0
db  50h ; P
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  69h ; i
db  6Ch ; l
db  69h ; i
db  74h ; t
db  79h ; y
db  20h
db  77h ; w
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db    0
db  41h ; A
db  4Eh ; N
db  53h ; S
db  49h ; I
db  20h
db  76h ; v
db  69h ; i
db  6Fh ; o
db  6Ch ; l
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  6Dh ; m
db  6Fh ; o
db  6Eh ; n
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db    0
db  4Ch ; L
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  6Dh ; m
db  6Fh ; o
db  6Eh ; n
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db    0
db  53h ; S
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  47h ; G
db  72h ; r
db  6Fh ; o
db  75h ; u
db  70h ; p
db  20h
db  20h
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  43h ; C
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db  20h
db  20h
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  43h ; C
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  73h ; s
db    0
db  44h ; D
db  61h ; a
db  74h ; t
db  61h ; a
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  73h ; s
db    0
db  42h ; B
db  53h ; S
db  53h ; S
db  20h
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  73h ; s
db    0
db  53h ; S
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  50h ; P
db  75h ; u
db  62h ; b
db  6Ch ; l
db  69h ; i
db  63h ; c
db  73h ; s
db    0
db  44h ; D
db  65h ; e
db  74h ; t
db  61h ; a
db  69h ; i
db  6Ch ; l
db  65h ; e
db  64h ; d
db    0
db  4Dh ; M
db  61h ; a
db  70h ; p
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  49h ; I
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  61h ; a
db  6Ch ; l
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  73h ; s
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  44h ; D
db  65h ; e
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db  6Ch ; l
db  69h ; i
db  62h ; b
db  72h ; r
db  61h ; a
db  72h ; r
db  69h ; i
db  65h ; e
db  73h ; s
db    0
db  47h ; G
db  72h ; r
db  61h ; a
db  70h ; p
db  68h ; h
db  69h ; i
db  63h ; c
db  73h ; s
db  20h
db  6Ch ; l
db  69h ; i
db  62h ; b
db  72h ; r
db  61h ; a
db  72h ; r
db  79h ; y
db    0
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  20h
db  64h ; d
db  75h ; u
db  70h ; p
db  6Ch ; l
db  69h ; i
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  73h ; s
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db  73h ; s
db    0
db  53h ; S
db  74h ; t
db  61h ; a
db  63h ; c
db  6Bh ; k
db  20h
db  77h ; w
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db    0
db  43h ; C
db  61h ; a
db  73h ; s
db  65h ; e
db  2Dh ; -
db  73h ; s
db  65h ; e
db  6Eh ; n
db  73h ; s
db  69h ; i
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db    0
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  6Eh ; n
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  6Eh ; n
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  73h ; s
db  65h ; e
db  74h ; t
db    0
db  46h ; F
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db    0
db  44h ; D
db  65h ; e
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db    0
db  41h ; A
db  6Ch ; l
db  69h ; i
db  67h ; g
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  47h ; G
db  65h ; e
db  6Eh ; n
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  75h ; u
db  6Eh ; n
db  64h ; d
db  65h ; e
db  72h ; r
db  62h ; b
db  61h ; a
db  72h ; r
db  73h ; s
db    0
db  4Dh ; M
db  65h ; e
db  72h ; r
db  67h ; g
db  65h ; e
db  20h
db  64h ; d
db  75h ; u
db  70h ; p
db  6Ch ; l
db  69h ; i
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db    0
db  53h ; S
db  74h ; t
db  61h ; a
db  6Eh ; n
db  64h ; d
db  61h ; a
db  72h ; r
db  64h ; d
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  63h ; c
db  6Bh ; k
db  20h
db  66h ; f
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  54h ; T
db  65h ; e
db  73h ; s
db  74h ; t
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  63h ; c
db  6Bh ; k
db  20h
db  6Fh ; o
db  76h ; v
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  62h ; b
db  65h ; e
db  72h ; r
db  73h ; s
db    0
db  4Fh ; O
db  42h ; B
db  4Ah ; J
db  20h
db  64h ; d
db  65h ; e
db  62h ; b
db  75h ; u
db  67h ; g
db  20h
db  69h ; i
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db  72h ; r
db  6Dh ; m
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  69h ; i
db  66h ; f
db  69h ; i
db  65h ; e
db  72h ; r
db  20h
db  6Ch ; l
db  65h ; e
db  6Eh ; n
db  67h ; g
db  74h ; t
db  68h ; h
db    0
db  4Eh ; N
db  65h ; e
db  73h ; s
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  41h ; A
db  4Eh ; N
db  53h ; S
db  49h ; I
db  20h
db  6Bh ; k
db  65h ; e
db  79h ; y
db  77h ; w
db  6Fh ; o
db  72h ; r
db  64h ; d
db  73h ; s
db  20h
db  6Fh ; o
db  6Eh ; n
db  6Ch ; l
db  79h ; y
db    0
db  4Fh ; O
db  70h ; p
db  74h ; t
db  69h ; i
db  6Dh ; m
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db    0
db  55h ; U
db  73h ; s
db  65h ; e
db  20h
db  72h ; r
db  65h ; e
db  67h ; g
db  69h ; i
db  73h ; s
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  76h ; v
db  61h ; a
db  72h ; r
db  69h ; i
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  73h ; s
db    0
db  52h ; R
db  65h ; e
db  67h ; g
db  69h ; i
db  73h ; s
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  6Fh ; o
db  70h ; p
db  74h ; t
db  69h ; i
db  6Dh ; m
db  69h ; i
db  7Ah ; z
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  4Ah ; J
db  75h ; u
db  6Dh ; m
db  70h ; p
db  20h
db  6Fh ; o
db  70h ; p
db  74h ; t
db  69h ; i
db  6Dh ; m
db  69h ; i
db  7Ah ; z
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  54h ; T
db  69h ; i
db  6Eh ; n
db  79h ; y
db    0
db  53h ; S
db  6Dh ; m
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db    0
db  4Dh ; M
db  65h ; e
db  64h ; d
db  69h ; i
db  75h ; u
db  6Dh ; m
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  63h ; c
db  74h ; t
db    0
db  4Ch ; L
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  48h ; H
db  75h ; u
db  67h ; g
db  65h ; e
db    0
db  4Dh ; M
db  6Fh ; o
db  64h ; d
db  65h ; e
db  6Ch ; l
db    0
db  44h ; D
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  73h ; s
db    0
db  43h ; C
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  67h ; g
db  65h ; e
db  6Eh ; n
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  4Fh ; O
db  70h ; p
db  74h ; t
db  69h ; i
db  6Dh ; m
db  69h ; i
db  7Ah ; z
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  53h ; S
db  6Fh ; o
db  75h ; u
db  72h ; r
db  63h ; c
db  65h ; e
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db    0
db  4Eh ; N
db  61h ; a
db  6Dh ; m
db  65h ; e
db  73h ; s
db    0
db  32h ; 2
db  35h ; 5
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  79h ; y
db    0
db  34h ; 4
db  33h ; 3
db  2Fh ; /
db  35h ; 5
db  30h ; 0
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  79h ; y
db    0
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Ch ; l
db  75h ; u
db  64h ; d
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  69h ; i
db  65h ; e
db  73h ; s
db  3Ah ; :
db    0
db  4Ch ; L
db  69h ; i
db  62h ; b
db  72h ; r
db  61h ; a
db  72h ; r
db  79h ; y
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  69h ; i
db  65h ; e
db  73h ; s
db  3Ah ; :
db    0
db  4Fh ; O
db  75h ; u
db  74h ; t
db  70h ; p
db  75h ; u
db  74h ; t
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db  3Ah ; :
db    0
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db  3Ah ; :
db    0
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  3Ah ; :
db    0
db  43h ; C
db  75h ; u
db  72h ; r
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  70h ; p
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  3Ah ; :
db    0
db  4Dh ; M
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db    0
db  4Bh ; K
db  65h ; e
db  65h ; e
db  70h ; p
db  20h
db  6Dh ; m
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  73h ; s
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  69h ; i
db  67h ; g
db  20h
db  61h ; a
db  75h ; u
db  74h ; t
db  6Fh ; o
db  20h
db  73h ; s
db  61h ; a
db  76h ; v
db  65h ; e
db    0
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  20h
db  61h ; a
db  75h ; u
db  74h ; t
db  6Fh ; o
db  20h
db  73h ; s
db  61h ; a
db  76h ; v
db  65h ; e
db    0
db  42h ; B
db  61h ; a
db  63h ; c
db  6Bh ; k
db  75h ; u
db  70h ; p
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  73h ; s
db    0
db  54h ; T
db  61h ; a
db  62h ; b
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db    0
db  5Ah ; Z
db  6Fh ; o
db  6Fh ; o
db  6Dh ; m
db  65h ; e
db  64h ; d
db  20h
db  77h ; w
db  69h ; i
db  6Eh ; n
db  64h ; d
db  6Fh ; o
db  77h ; w
db  73h ; s
db    0
db  53h ; S
db  63h ; c
db  72h ; r
db  65h ; e
db  65h ; e
db  6Eh ; n
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  72h ; r
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  65h ; e
db  72h ; r
db    0
db  45h ; E
db  6Eh ; n
db  76h ; v
db  69h ; i
db  72h ; r
db  6Fh ; o
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  69h ; i
db  65h ; e
db  73h ; s
db    0
db  41h ; A
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  53h ; S
db  61h ; a
db  76h ; v
db  65h ; e
db  20h
db  6Fh ; o
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db    0
db  52h ; R
db  65h ; e
db  74h ; t
db  72h ; r
db  69h ; i
db  65h ; e
db  76h ; v
db  65h ; e
db  20h
db  6Fh ; o
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db    0
db  20h
db  52h ; R
db  65h ; e
db  63h ; c
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  73h ; s
db  20h
db    0
db  4Ch ; L
db  6Fh ; o
db  61h ; a
db  64h ; d
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  46h ; F
db  33h ; 3
db    0
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  20h
db  41h ; A
db  6Ch ; l
db  74h ; t
db  2Dh ; -
db  46h ; F
db  33h ; 3
db    0
db  4Eh ; N
db  65h ; e
db  77h ; w
db    0
db  53h ; S
db  61h ; a
db  76h ; v
db  65h ; e
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  46h ; F
db  32h ; 2
db    0
db  57h ; W
db  72h ; r
db  69h ; i
db  74h ; t
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db    0
db  44h ; D
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  6Fh ; o
db  72h ; r
db  79h ; y
db    0
db  43h ; C
db  68h ; h
db  61h ; a
db  6Eh ; n
db  67h ; g
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db    0
db  4Fh ; O
db  53h ; S
db  20h
db  73h ; s
db  68h ; h
db  65h ; e
db  6Ch ; l
db  6Ch ; l
db    0
db  51h ; Q
db  75h ; u
db  69h ; i
db  74h ; t
db  20h
db  20h
db  20h
db  41h ; A
db  6Ch ; l
db  74h ; t
db  2Dh ; -
db  58h ; X
db    0
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  73h ; s
db    0
db  46h ; F
db  61h ; a
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  20h
db  6Dh ; m
db  61h ; a
db  6Bh ; k
db  65h ; e
db  20h
db  6Fh ; o
db  6Eh ; n
db    0
db  41h ; A
db  75h ; u
db  74h ; t
db  6Fh ; o
db  20h
db  64h ; d
db  65h ; e
db  70h ; p
db  65h ; e
db  6Eh ; n
db  64h ; d
db  65h ; e
db  6Eh ; n
db  63h ; c
db  69h ; i
db  65h ; e
db  73h ; s
db    0
db  43h ; C
db  6Ch ; l
db  65h ; e
db  61h ; a
db  72h ; r
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db    0
db  52h ; R
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  76h ; v
db  65h ; e
db  20h
db  6Dh ; m
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  73h ; s
db    0
db  41h ; A
db  64h ; d
db  64h ; d
db  20h
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  46h ; F
db  37h ; 7
db    0
db  44h ; D
db  65h ; e
db  6Ch ; l
db  65h ; e
db  74h ; t
db  65h ; e
db  20h
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  20h
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  52h ; R
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  76h ; v
db  65h ; e
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  65h ; e
db  73h ; s
db    0
db  54h ; T
db  6Fh ; o
db  67h ; g
db  67h ; g
db  6Ch ; l
db  65h ; e
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  46h ; F
db  38h ; 8
db    0
db  43h ; C
db  6Ch ; l
db  65h ; e
db  61h ; a
db  72h ; r
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  56h ; V
db  69h ; i
db  65h ; e
db  77h ; w
db  20h
db  6Eh ; n
db  65h ; e
db  78h ; x
db  74h ; t
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db    0
db  53h ; S
db  74h ; t
db  61h ; a
db  6Eh ; n
db  64h ; d
db  61h ; a
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  65h ; e
db    0
db  53h ; S
db  6Dh ; m
db  61h ; a
db  72h ; r
db  74h ; t
db    0
db  41h ; A
db  6Ch ; l
db  77h ; w
db  61h ; a
db  79h ; y
db  73h ; s
db    0
db  45h ; E
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  20h
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  46h ; F
db  34h ; 4
db    0
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  63h ; c
db  6Bh ; k
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  46h ; F
db  33h ; 3
db    0
db  46h ; F
db  69h ; i
db  6Eh ; n
db  64h ; d
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  52h ; R
db  65h ; e
db  66h ; f
db  72h ; r
db  65h ; e
db  73h ; s
db  68h ; h
db  20h
db  64h ; d
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  79h ; y
db    0
db  44h ; D
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  79h ; y
db  20h
db  73h ; s
db  77h ; w
db  61h ; a
db  70h ; p
db  70h ; p
db  69h ; i
db  6Eh ; n
db  67h ; g
db    0
db  53h ; S
db  6Fh ; o
db  75h ; u
db  72h ; r
db  63h ; c
db  65h ; e
db  20h
db  64h ; d
db  65h ; e
db  62h ; b
db  75h ; u
db  67h ; g
db  67h ; g
db  69h ; i
db  6Eh ; n
db  67h ; g
db    0
db  52h ; R
db  75h ; u
db  6Eh ; n
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  46h ; F
db  39h ; 9
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  67h ; g
db  72h ; r
db  61h ; a
db  6Dh ; m
db  20h
db  72h ; r
db  65h ; e
db  73h ; s
db  65h ; e
db  74h ; t
db  20h
db  20h
db  43h ; C
db  74h ; t
db  72h ; r
db  6Ch ; l
db  2Dh ; -
db  46h ; F
db  32h ; 2
db    0
db  47h ; G
db  6Fh ; o
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  63h ; c
db  75h ; u
db  72h ; r
db  73h ; s
db  6Fh ; o
db  72h ; r
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  46h ; F
db  34h ; 4
db    0
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  74h ; t
db  6Fh ; o
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  46h ; F
db  37h ; 7
db    0
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  6Fh ; o
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  46h ; F
db  38h ; 8
db    0
db  55h ; U
db  73h ; s
db  65h ; e
db  72h ; r
db  20h
db  73h ; s
db  63h ; c
db  72h ; r
db  65h ; e
db  65h ; e
db  6Eh ; n
db  20h
db  20h
db  20h
db  20h
db  20h
db  41h ; A
db  6Ch ; l
db  74h ; t
db  2Dh ; -
db  46h ; F
db  35h ; 5
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  4Fh ; O
db  42h ; B
db  4Ah ; J
db    0
db  4Dh ; M
db  61h ; a
db  6Bh ; k
db  65h ; e
db  20h
db  45h ; E
db  58h ; X
db  45h ; E
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  20h
db  45h ; E
db  58h ; X
db  45h ; E
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  42h ; B
db  75h ; u
db  69h ; i
db  6Ch ; l
db  64h ; d
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db    0
db  50h ; P
db  72h ; r
db  69h ; i
db  6Dh ; m
db  61h ; a
db  72h ; r
db  79h ; y
db  20h
db  43h ; C
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  3Ah ; :
db    0
db  47h ; G
db  65h ; e
db  74h ; t
db  20h
db  69h ; i
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db    0
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db    0
db  52h ; R
db  75h ; u
db  6Eh ; n
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  50h ; P
db  72h ; r
db  6Fh ; o
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db    0
db  4Fh ; O
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db    0
db  44h ; D
db  65h ; e
db  62h ; b
db  75h ; u
db  67h ; g
db    0
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db  2Fh ; /
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db    0
db    0
db    1
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  92h
db  96h
dd unk_54D3A
db  28h ; (
db  29h ; )
db  20h
db  2Ch ; ,
db  3Bh ; ;
db    9
db  0Ah
db  0Dh
db  0Ch
db    0
dd unk_4DBC4
dd unk_4DBD0
db  20h
db  3Bh ; ;
db    0
db  2Eh ; .
db  3Bh ; ;
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db  12h
db    0
db  12h
db    0
db    1
db    0
db    2
db    0
db    5
db    0
db    5
db    0
db    1
db    0
db    2
db    0
db    7
db    0
db    7
db    0
db    7
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db  0Ah
db    0
db  0Ah
db    0
db  0Ah
db    0
db  0Ah
db    0
db  0Bh
db    0
db  0Bh
db    0
db  0Bh
db    0
db  0Bh
db    0
db  0Ch
db    0
db  0Ch
db    0
db  0Ch
db    0
db  0Ch
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Fh
db    0
db  0Fh
db    0
db  0Fh
db    0
db  0Fh
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  11h
db    0
db  11h
db    0
db  11h
db    0
db  11h
db    0
db  13h
db    0
db  13h
db    0
db    1
db    0
db    6
db    0
db  14h
db    0
db  14h
db    0
db  14h
db    0
db  14h
db    0
db  15h
db    0
db  15h
db    0
db  15h
db    0
db  15h
db    0
db  16h
db    0
db  16h
db    0
db  16h
db    0
db  16h
db    0
db  17h
db    0
db  17h
db    0
db  17h
db    0
db  17h
db    0
db  18h
db    0
db  18h
db    0
db  18h
db    0
db  18h
db    0
db  19h
db    0
db  19h
db    0
db  19h
db    0
db  19h
db    0
db 0C0h
db  41h ; A
db  1Fh
db  42h ; B
db  6Bh ; k
db  42h ; B
db 0CCh
db  42h ; B
db 0E8h
db  42h ; B
db  42h ; B
db  43h ; C
db  92h
db  43h ; C
db 0A8h
db  43h ; C
db 0B5h
db  43h ; C
db 0CCh
db  42h ; B
db 0A8h
db  43h ; C
db    6
db  44h ; D
db  20h
db  44h ; D
db  1Eh
db  42h ; B
db  3Bh ; ;
db  44h ; D
db  53h ; S
db  44h ; D
db  74h ; t
db  44h ; D
db  8Dh
db  44h ; D
db 0AFh
db  44h ; D
db  17h
db  45h ; E
db 0D9h
db  42h ; B
db  49h ; I
db  45h ; E
db 0A0h
db  45h ; E
db    8
db  46h ; F
db  5Bh ; [
db  46h ; F
db 0B0h
db  46h ; F
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  35h ; 5
db 0FFh
db    4
db  2Dh ; -
db  5Ah ; Z
db  6Fh ; o
db  6Fh ; o
db  6Dh ; m
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  36h ; 6
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Dh ; -
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  39h ; 9
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  61h ; a
db  6Bh ; k
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db    0
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  53h ; S
db 0FFh
db    4
db  2Dh ; -
db  4Ch ; L
db  65h ; e
db  66h ; f
db  74h ; t
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  44h ; D
db 0FFh
db    4
db  2Dh ; -
db  52h ; R
db  69h ; i
db  67h ; g
db  68h ; h
db  74h ; t
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  45h ; E
db 0FFh
db    4
db  2Dh ; -
db  55h ; U
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  58h ; X
db 0FFh
db    4
db  2Dh ; -
db  44h ; D
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  41h ; A
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  6Fh ; o
db  6Dh ; m
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  46h ; F
db 0FFh
db    4
db  2Dh ; -
db  45h ; E
db  6Eh ; n
db  64h ; d
db    0
db  20h
db  41h ; A
db  6Ch ; l
db  74h ; t
db  3Ah ; :
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  4Ch ; L
db  61h ; a
db  73h ; s
db  74h ; t
db  20h
db  68h ; h
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  33h ; 3
db 0FFh
db    4
db  2Dh ; -
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  36h ; 6
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  77h ; w
db  61h ; a
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Fh ; /
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  50h ; P
db  72h ; r
db  65h ; e
db  76h ; v
db  2Fh ; /
db  4Eh ; N
db  65h ; e
db  78h ; x
db  74h ; t
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  39h ; 9
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  45h ; E
db  73h ; s
db  63h ; c
db 0FFh
db    4
db  2Dh ; -
db  41h ; A
db  62h ; b
db  6Fh ; o
db  72h ; r
db  74h ; t
db    0
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  53h ; S
db 0FFh
db    4
db  2Dh ; -
db  4Ch ; L
db  65h ; e
db  66h ; f
db  74h ; t
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  44h ; D
db 0FFh
db    4
db  2Dh ; -
db  52h ; R
db  69h ; i
db  67h ; g
db  68h ; h
db  74h ; t
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  47h ; G
db 0FFh
db    4
db  2Dh ; -
db  44h ; D
db  65h ; e
db  6Ch ; l
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  48h ; H
db 0FFh
db    4
db  2Dh ; -
db  42h ; B
db  61h ; a
db  63h ; c
db  6Bh ; k
db  73h ; s
db  70h ; p
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  59h ; Y
db 0FFh
db    4
db  2Dh ; -
db  44h ; D
db  65h ; e
db  6Ch ; l
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  5Eh ; ^
db  52h ; R
db 0FFh
db    4
db  2Dh ; -
db  52h ; R
db  65h ; e
db  73h ; s
db  74h ; t
db  6Fh ; o
db  72h ; r
db  65h ; e
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  34h ; 4
db 0FFh
db    4
db  2Dh ; -
db  4Eh ; N
db  65h ; e
db  77h ; w
db  20h
db  6Dh ; m
db  61h ; a
db  73h ; s
db  6Bh ; k
db  20h
db  20h
db 0FFh
db    3
db  18h
db  19h
db  1Ah
db  1Bh
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  68h ; h
db  6Fh ; o
db  6Fh ; o
db  73h ; s
db  65h ; e
db  20h
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  65h ; e
db  6Ch ; l
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  20h
db 0FFh
db    3
db  45h ; E
db  73h ; s
db  63h ; c
db 0FFh
db    4
db  2Dh ; -
db  41h ; A
db  62h ; b
db  6Fh ; o
db  72h ; r
db  74h ; t
db  20h
db    0
db  20h
db 0FFh
db    3
db  41h ; A
db  6Ch ; l
db  74h ; t
db  2Dh ; -
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  4Ch ; L
db  61h ; a
db  73h ; s
db  74h ; t
db  20h
db  68h ; h
db  65h ; e
db  6Ch ; l
db  70h ; p
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  69h ; i
db  6Eh ; n
db  64h ; d
db  65h ; e
db  78h ; x
db  20h
db  20h
db 0FFh
db    3
db  18h
db  19h
db  1Bh
db  1Ah
db 0FFh
db    4
db  2Dh ; -
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  74h ; t
db  6Fh ; o
db  70h ; p
db  69h ; i
db  63h ; c
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  47h ; G
db  6Fh ; o
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  74h ; t
db  6Fh ; o
db  70h ; p
db  69h ; i
db  63h ; c
db  20h
db  20h
db 0FFh
db    3
db  45h ; E
db  73h ; s
db  63h ; c
db 0FFh
db    4
db  2Dh ; -
db  45h ; E
db  78h ; x
db  69h ; i
db  74h ; t
db  20h
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db    0
db  20h
db  53h ; S
db  61h ; a
db  76h ; v
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  6Fh ; o
db  72h ; r
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db  4Ch ; L
db  6Fh ; o
db  61h ; a
db  64h ; d
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  6Fh ; o
db  72h ; r
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db  53h ; S
db  61h ; a
db  76h ; v
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db  53h ; S
db  61h ; a
db  76h ; v
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  69h ; i
db  67h ; g
db  75h ; u
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db  4Ch ; L
db  6Fh ; o
db  61h ; a
db  64h ; d
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  50h ; P
db  69h ; i
db  63h ; c
db  6Bh ; k
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db  4Ch ; L
db  6Fh ; o
db  61h ; a
db  64h ; d
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  69h ; i
db  67h ; g
db  75h ; u
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db  20h
db  2Eh ; .
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  35h ; 5
db 0FFh
db    4
db  2Dh ; -
db  5Ah ; Z
db  6Fh ; o
db  6Fh ; o
db  6Dh ; m
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  36h ; 6
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db  20h
db  20h
db 0FFh
db    3
db  49h ; I
db  6Eh ; n
db  73h ; s
db 0FFh
db    4
db  2Dh ; -
db  41h ; A
db  64h ; d
db  64h ; d
db  20h
db  20h
db 0FFh
db    3
db  44h ; D
db  65h ; e
db  6Ch ; l
db 0FFh
db    4
db  2Dh ; -
db  44h ; D
db  65h ; e
db  6Ch ; l
db  65h ; e
db  74h ; t
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  45h ; E
db  64h ; d
db  69h ; i
db  74h ; t
db  20h
db  77h ; w
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  18h
db  19h
db  1Ah
db  1Bh
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  63h ; c
db  72h ; r
db  6Fh ; o
db  6Ch ; l
db  6Ch ; l
db  20h
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  56h ; V
db  69h ; i
db  65h ; e
db  77h ; w
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Dh ; -
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db  20h
db  20h
db 0FFh
db    3
db  54h ; T
db  41h ; A
db  42h ; B
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  79h ; y
db  63h ; c
db  6Ch ; l
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  45h ; E
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  61h ; a
db  74h ; t
db  65h ; e
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Dh ; -
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db  20h
db  20h
db 0FFh
db    3
db  54h ; T
db  41h ; A
db  42h ; B
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  79h ; y
db  63h ; c
db  6Ch ; l
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  45h ; E
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  1Ah
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  6Fh ; o
db  72h ; r
db  65h ; e
db  20h
db  74h ; t
db  65h ; e
db  78h ; x
db  74h ; t
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Dh ; -
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db  20h
db  20h
db 0FFh
db    3
db  54h ; T
db  41h ; A
db  42h ; B
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  79h ; y
db  63h ; c
db  6Ch ; l
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  6Fh ; o
db  70h ; p
db  79h ; y
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Dh ; -
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db  20h
db  20h
db 0FFh
db    3
db  54h ; T
db  41h ; A
db  42h ; B
db 0FFh
db    4
db  2Dh ; -
db  43h ; C
db  79h ; y
db  63h ; c
db  6Ch ; l
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  3Ch ; <
db 0C4h
db 0D9h
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  6Fh ; o
db  64h ; d
db  69h ; i
db  66h ; f
db  79h ; y
db    0
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db 0FFh
db    4
db  2Dh ; -
db  48h ; H
db  65h ; e
db  6Ch ; l
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  35h ; 5
db 0FFh
db    4
db  2Dh ; -
db  5Ah ; Z
db  6Fh ; o
db  6Fh ; o
db  6Dh ; m
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  36h ; 6
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  37h ; 7
db 0FFh
db    4
db  2Dh ; -
db  54h ; T
db  72h ; r
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  38h ; 8
db 0FFh
db    4
db  2Dh ; -
db  53h ; S
db  74h ; t
db  65h ; e
db  70h ; p
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  39h ; 9
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  61h ; a
db  6Bh ; k
db  65h ; e
db  20h
db  20h
db 0FFh
db    3
db  46h ; F
db  31h ; 1
db  30h ; 0
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  65h ; e
db  6Eh ; n
db  75h ; u
db  20h
db  20h
db 0FFh
db    3
db  1Ah
db 0FFh
db    4
db  2Dh ; -
db  4Dh ; M
db  6Fh ; o
db  72h ; r
db  65h ; e
db  20h
db  74h ; t
db  65h ; e
db  78h ; x
db  74h ; t
db    0
db    0
db    0
db    1
db    0
db    0
db    5
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Ah ; *
db  2Eh ; .
db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Ah ; *
db  2Eh ; .
db  50h ; P
db  52h ; R
db  4Ah ; J
db    0
db  2Ah ; *
db  2Eh ; .
db  43h ; C
db    0
unk_500DA db  17h
db  17h
db  71h ; q
db  1Eh
db  17h
db  4Eh ; N
db  1Fh
db  17h
db  17h
db  7Fh ; 
db  1Fh
db  7Fh ; 
db  4Eh ; N
db  1Fh
db  70h ; p
db  70h ; p
db  0Fh
db  70h ; p
db  71h ; q
db    0
db    0
db  7Fh ; 
db  7Fh ; 
db  70h ; p
db  70h ; p
db  70h ; p
db    0
db    0
db    0
db    0
db  74h ; t
db  70h ; p
db  1Fh
db    0
db    0
db  4Fh ; O
db  30h ; 0
db    0
db    0
db    0
db    0
db    0
db  70h ; p
db  70h ; p
db  0Fh
db  70h ; p
db    0
db    0
db    0
db  4Fh ; O
db  47h ; G
db  4Eh ; N
db  4Fh ; O
db  74h ; t
db  74h ; t
db    0
db  70h ; p
db  70h ; p
db  0Fh
db  70h ; p
db    0
db    0
db    0
db  70h ; p
db  70h ; p
db  1Fh
db  70h ; p
db    0
db    0
db    0
unk_50120 db    7
db    7
db  70h ; p
db    7
db    7
db  70h ; p
db  0Fh
db    7
db    7
db  70h ; p
db    7
db  0Fh
db  70h ; p
db  0Fh
db  0Fh
db  0Fh
db  70h ; p
db    7
db  0Fh
db    0
db    0
db  0Fh
db  0Fh
db  0Fh
db    7
db    7
db    7
db    0
db    0
db    0
db  0Fh
db    7
db  70h ; p
db    0
db    0
db  0Fh
db  70h ; p
db    0
db    0
db    0
db    0
db    0
db  0Fh
db  0Fh
db  70h ; p
db    7
db    0
db    0
db    0
db  0Fh
db  0Fh
db  0Fh
db    7
db    0
db    0
db    0
db  70h ; p
db  70h ; p
db  0Fh
db  70h ; p
db    0
db    0
db    0
db  70h ; p
db  70h ; p
db  70h ; p
db    7
db    0
db    0
db    0
unk_50166 db    7
db    7
db  70h ; p
db  0Fh
db  0Fh
db  70h ; p
db  0Fh
db    7
db    7
db  70h ; p
db    7
db  0Fh
db  0Fh
db  0Fh
db  0Fh
db  0Fh
db  70h ; p
db  0Fh
db    7
db    0
db    0
db  0Fh
db  0Fh
db  0Fh
db    7
db    0
db    0
db    0
db    0
db    0
db  0Fh
db    7
db  70h ; p
db    0
db    0
db  0Fh
db  70h ; p
db    0
db    0
db    0
db    0
db    0
db  0Fh
db  0Fh
db  70h ; p
db    7
db    0
db    0
db    0
db  0Fh
db  0Fh
db    7
db  0Fh
db    0
db    0
db    0
db  0Fh
db  0Fh
db  70h ; p
db    7
db    0
db    0
db    0
db  0Fh
db  0Fh
db  70h ; p
db  0Fh
db    0
db    0
db    0
db  2Ah ; *
db  48h ; H
db    5
db  14h
db 0FFh
db 0FFh
db    0
db    6
db    0
db    1
db  4Fh ; O
db  10h
db    1
db    0
db  20h
db    1
db    1
db  31h ; 1
db  48h ; H
db 0FBh
db  13h
db 0FFh
db 0FFh
db    0
db    7
db    0
db  10h
db  4Fh ; O
db  17h
db    6
db    1
db  20h
db    0
db    1
db  38h ; 8
db  48h ; H
db  0Ch
db  14h
db 0FFh
db 0FFh
db    0
db    5
db  0Fh
db    5
db  40h ; @
db  15h
db    1
db    0
db    0
db    0
db    0
db  62h ; b
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db    0
db    5
db    9
db    8
db  47h ; G
db  12h
db    1
db    0
db  20h
db    0
db    0
db  3Fh ; ?
db  48h ; H
db  13h
db  14h
db 0FFh
db 0FFh
db    0
db    5
db  1Eh
db  0Ah
db  2Ah ; *
db  0Dh
db    5
db    0
db    0
db    0
db    0
db  5Bh ; [
db  48h ; H
db  1Ch
db  14h
db 0FFh
db 0FFh
db    0
db    5
db  1Eh
db  0Ah
db  2Ah ; *
db  0Dh
db    5
db    0
db    0
db    0
db    0
db  46h ; F
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db    0
db    5
db    0
db  18h
db  4Fh ; O
db  18h
db    0
db    0
db  20h
db    0
db    0
db  46h ; F
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db    0
db    5
db  48h ; H
db  18h
db  4Fh ; O
db  18h
db    0
db    0
db  20h
db    0
db    0
db  46h ; F
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db    0
db    5
db  44h ; D
db  18h
db  48h ; H
db  18h
db    0
db    0
db  20h
db    0
db    0
db  46h ; F
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db    0
db    5
db  3Fh ; ?
db  18h
db  44h ; D
db  18h
db    0
db    0
db  20h
db    0
db    0
db  54h ; T
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db    0
db    5
db  3Bh ; ;
db  18h
db    0
db    0
db    1
db    0
db  20h
db    1
db    0
db  5Bh ; [
db  48h ; H
db  24h ; $
db  14h
db 0FFh
db 0FFh
db    0
db    5
db  0Ah
db  0Ah
db    0
db    0
db    5
db    0
db  20h
db    0
db    0
db  69h ; i
db  48h ; H
db  35h ; 5
db  14h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  13h
db    7
db  3Bh ; ;
db  13h
db    5
db    0
db  20h
db    0
db    0
db  5Bh ; [
db  48h ; H
db  1Ch
db  14h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  0Ah
db  0Ah
db    0
db    0
db    5
db    0
db  20h
db    0
db    0
db  3Fh ; ?
db  48h ; H
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  13h
db    7
db  3Bh ; ;
db  0Fh
db    5
db    5
db  10h
db    0
db    0
db  69h ; i
db  48h ; H
db  41h ; A
db  14h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    9
db    3
db  47h ; G
db  0Fh
db    5
db    0
db  20h
db    0
db    0
db    0
db    0
db  4Fh ; O
db  14h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  44h ; D
db    3
db  4Eh ; N
db  16h
db    1
db    1
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db  37h ; 7
db  0Ah
db    1
db    1
db  20h
db    0
db    0
db  90h
db  21h ; !
db  90h
db  20h
db  10h
db  20h
db  10h
db  20h
db    0
db  20h
db    6
db  20h
db    6
db    0
db    0
db  40h ; @
db    0
db  40h ; @
db    0
db  40h ; @
db 0D1h
db  81h
db  91h
db  80h
db  91h
db  80h
db  11h
db  80h
db  11h
db  80h
db    1
db  80h
db    3
db  80h
db    3
db  80h
db    1
db  80h
db    1
db  80h
db    1
db  80h
db  98h
db    1
db  98h
db    1
db  98h
db    1
db  98h
db    1
db  98h
db    1
db  98h
db    1
db  10h
db  40h ; @
db    0
db  40h ; @
db  90h
db    1
db  80h
db    1
db 0D0h
db    1
db    0
db    0
db  90h
db  80h
db  90h
db  80h
db 0F0h
db    1
db 0F0h
db  41h ; A
db  90h
db    1
db  90h
db    1
db  80h
db    0
db    0
db    0
db  80h
db  10h
db  10h
db  10h
db  20h
db  80h
db  80h
db  40h ; @
db    0
db  5Bh ; [
db    0
db    0
db    0
db    0
db    0
db  5Bh ; [
db    0
db  5Bh ; [
db    0
db  4Bh ; K
db    0
db  4Bh ; K
db    0
db  4Bh ; K
db    0
db  40h ; @
db    0
db  5Bh ; [
db    0
db  5Bh ; [
db    0
db  4Ch ; L
db    0
db    0
db    1
db    3
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  30h ; 0
db  30h ; 0
db    0
db    0
db    0
db  10h
db    0
db  30h ; 0
db  30h ; 0
db  30h ; 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  30h ; 0
db  30h ; 0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  30h ; 0
db    0
db    0
db    0
db    2
db    0
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db 0C0h
db 0C0h
db 0C0h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C0h
db 0C0h
db    0
db    0
db    0
db    0
db    0
db    0
db  80h
db 0C0h
db    0
db    0
db    0
db    2
db    0
db    0
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db  0Dh
db  0Dh
db  0Eh
db  0Eh
db  0Eh
db    9
db    7
db    8
db  0Ch
db  0Ch
db    3
db    0
db    5
db    6
db  0Ah
db  0Ah
db  0Bh
db  0Bh
db  0Bh
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  38h ; 8
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Fh
db  20h
db  21h ; !
db  1Dh
db  1Eh
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  14h
db  15h
db  16h
db  12h
db  13h
db  30h ; 0
db  31h ; 1
db  33h ; 3
db  32h ; 2
db  22h ; "
db  23h ; #
db  25h ; %
db  24h ; $
db  27h ; '
db  26h ; &
db    0
db    1
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    0
db  18h
db  19h
db  49h ; I
db  66h ; f
db    0
db  46h ; F
db  6Fh ; o
db  72h ; r
db    0
db  44h ; D
db  6Fh ; o
db  2Dh ; -
db  77h ; w
db  68h ; h
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  57h ; W
db  68h ; h
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  53h ; S
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  42h ; B
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  74h ; t
db  69h ; i
db  6Eh ; n
db  75h ; u
db  65h ; e
db    0
db  52h ; R
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db    0
db  47h ; G
db  6Fh ; o
db  74h ; t
db  6Fh ; o
db    0
db 0FFh
db 0FFh
db  24h ; $
db  2Ah ; *
db  24h ; $
db  2Ah ; *
db  24h ; $
db  2Ah ; *
db    0
db    2
db    1
db    2
db  54h ; T
db  55h ; U
db  52h ; R
db  42h ; B
db  4Fh ; O
db  43h ; C
db    0
unk_50483 db  4Ch ; L
db    0
db  97h
db  4Ch ; L
db  4Dh ; M
db    0
db  9Bh
db  4Ch ; L
db  4Eh ; N
db    0
db  9Fh
db  4Ch ; L
db  4Fh ; O
db    0
db 0A3h
db  4Ch ; L
db  34h ; 4
db    0
db 0A7h
db  4Ch ; L
db  69h ; i
db    0
db 0ABh
db  4Ch ; L
db  4Bh ; K
db    0
db 0B1h
db  4Ch ; L
db  6Ah ; j
db    0
db 0B5h
db  4Ch ; L
db  45h ; E
db    0
db 0BAh
db  4Ch ; L
db  4Ah ; J
db    0
db 0C4h
db  4Ch ; L
db  46h ; F
db    0
db 0C9h
db  4Ch ; L
unk_504AF db  48h ; H
db    0
db 0D0h
db  4Ch ; L
db  5Dh ; ]
db    0
db 0D6h
db  4Ch ; L
db  49h ; I
db    0
db 0DDh
db  4Ch ; L
unk_504BB db  43h ; C
db    0
db 0E6h
db  4Ch ; L
db  44h ; D
db    0
db 0EBh
db  4Ch ; L
unk_504C3 db  39h ; 9
db    0
db 0F0h
db  4Ch ; L
db  59h ; Y
db    0
db 0F5h
db  4Ch ; L
db  5Ch ; \
db    0
db 0FBh
db  4Ch ; L
db  3Ah ; :
db    0
db    0
db  4Dh ; M
db  5Ah ; Z
db    0
db    5
db  4Dh ; M
db  5Bh ; [
db    0
db  0Eh
db  4Dh ; M
db  56h ; V
db    0
db  16h
db  4Dh ; M
db  40h ; @
db    0
db  19h
db  4Dh ; M
db  53h ; S
db    0
db  20h
db  4Dh ; M
db  36h ; 6
db    0
db  25h ; %
db  4Dh ; M
db  3Fh ; ?
db    0
db  2Ch ; ,
db  4Dh ; M
db  54h ; T
db    0
db  32h ; 2
db  4Dh ; M
db  51h ; Q
db    0
db  36h ; 6
db  4Dh ; M
db  52h ; R
db    0
db  3Bh ; ;
db  4Dh ; M
db  3Ch ; <
db    0
db  3Eh ; >
db  4Dh ; M
db  3Eh ; >
db    0
db  42h ; B
db  4Dh ; M
db  38h ; 8
db    0
db  47h ; G
db  4Dh ; M
db  58h ; X
db    0
db  50h ; P
db  4Dh ; M
db  3Bh ; ;
db    0
db  57h ; W
db  4Dh ; M
db  2Ah ; *
db    0
db  5Dh ; ]
db  4Dh ; M
db  35h ; 5
db    0
db  64h ; d
db  4Dh ; M
db  41h ; A
db    0
db  6Bh ; k
db  4Dh ; M
db  57h ; W
db    0
db  72h ; r
db  4Dh ; M
db  37h ; 7
db    0
db  79h ; y
db  4Dh ; M
db  42h ; B
db    0
db  81h
db  4Dh ; M
db  3Dh ; =
db    0
db  87h
db  4Dh ; M
db  55h ; U
db    0
db  90h
db  4Dh ; M
dd unk_50483
db  0Bh
db    0
dd unk_504AF
db    3
db    0
dd unk_504BB
db    2
db    0
dd unk_504C3
db  1Bh
db    0
db  5Fh ; _
db  63h ; c
db  73h ; s
db    0
db  5Fh ; _
db  64h ; d
db  73h ; s
db    0
db  5Fh ; _
db  65h ; e
db  73h ; s
db    0
db  5Fh ; _
db  73h ; s
db  73h ; s
db    0
db  61h ; a
db  73h ; s
db  6Dh ; m
db    0
db  63h ; c
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db    0
db  66h ; f
db  61h ; a
db  72h ; r
db    0
db  68h ; h
db  75h ; u
db  67h ; g
db  65h ; e
db    0
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  72h ; r
db  75h ; u
db  70h ; p
db  74h ; t
db    0
db  6Eh ; n
db  65h ; e
db  61h ; a
db  72h ; r
db    0
db  70h ; p
db  61h ; a
db  73h ; s
db  63h ; c
db  61h ; a
db  6Ch ; l
db    0
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db    0
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db    0
db  76h ; v
db  6Fh ; o
db  6Ch ; l
db  61h ; a
db  74h ; t
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  65h ; e
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db    0
db  76h ; v
db  6Fh ; o
db  69h ; i
db  64h ; d
db    0
db  61h ; a
db  75h ; u
db  74h ; t
db  6Fh ; o
db    0
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db    0
db  63h ; c
db  61h ; a
db  73h ; s
db  65h ; e
db    0
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db    0
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  74h ; t
db  69h ; i
db  6Eh ; n
db  75h ; u
db  65h ; e
db    0
db  64h ; d
db  65h ; e
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db    0
db  64h ; d
db  6Fh ; o
db    0
db  64h ; d
db  6Fh ; o
db  75h ; u
db  62h ; b
db  6Ch ; l
db  65h ; e
db    0
db  65h ; e
db  6Ch ; l
db  73h ; s
db  65h ; e
db    0
db  65h ; e
db  78h ; x
db  74h ; t
db  65h ; e
db  72h ; r
db  6Eh ; n
db    0
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  74h ; t
db    0
db  66h ; f
db  6Fh ; o
db  72h ; r
db    0
db  67h ; g
db  6Fh ; o
db  74h ; t
db  6Fh ; o
db    0
db  69h ; i
db  66h ; f
db    0
db  69h ; i
db  6Eh ; n
db  74h ; t
db    0
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  72h ; r
db  65h ; e
db  67h ; g
db  69h ; i
db  73h ; s
db  74h ; t
db  65h ; e
db  72h ; r
db    0
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db    0
db  73h ; s
db  68h ; h
db  6Fh ; o
db  72h ; r
db  74h ; t
db    0
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  6Fh ; o
db  66h ; f
db    0
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  69h ; i
db  63h ; c
db    0
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db    0
db  73h ; s
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  64h ; d
db  65h ; e
db  66h ; f
db    0
db  75h ; u
db  6Eh ; n
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  75h ; u
db  6Eh ; n
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db    0
db  77h ; w
db  68h ; h
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  20h
db    0
db  2Ah ; *
db  2Ah ; *
db  2Ah ; *
db  20h
db  25h ; %
db  64h ; d
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  2Ah ; *
db  2Ah ; *
db  2Ah ; *
db  0Ah
db    0
db  46h ; F
db  61h ; a
db  74h ; t
db  61h ; a
db  6Ch ; l
db    0
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  25h ; %
db  73h ; s
db    0
db  57h ; W
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db 0B2h
db  50h ; P
db 0CEh
db  50h ; P
db 0EAh
db  50h ; P
db    7
db  51h ; Q
db  20h
db  51h ; Q
db  3Fh ; ?
db  51h ; Q
db  61h ; a
db  51h ; Q
db  6Fh ; o
db  51h ; Q
db  89h
db  51h ; Q
db  9Dh
db  51h ; Q
db 0B1h
db  51h ; Q
db 0C0h
db  51h ; Q
db 0DCh
db  51h ; Q
db 0FAh
db  51h ; Q
db  15h
db  52h ; R
db  32h ; 2
db  52h ; R
db  48h ; H
db  52h ; R
db  65h ; e
db  52h ; R
db  76h ; v
db  52h ; R
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Ch
db  52h ; R
db    0
db    0
db    0
db    0
db    0
db    0
db 0BEh
db  52h ; R
db    0
db    0
db    0
db    0
db 0E2h
db  52h ; R
db    0
db    0
db    0
db    0
db    0
db    0
db    7
db  53h ; S
db  1Ah
db  53h ; S
db  53h ; S
db  53h ; S
db  82h
db  53h ; S
db 0A7h
db  53h ; S
db 0D1h
db  53h ; S
db 0E5h
db  53h ; S
db    6
db  54h ; T
db  34h ; 4
db  54h ; T
db  4Dh ; M
db  54h ; T
db  72h ; r
db  54h ; T
db  8Eh
db  54h ; T
db 0AFh
db  54h ; T
db 0CAh
db  54h ; T
db 0E3h
db  54h ; T
db 0FEh
db  54h ; T
db  1Ah
db  55h ; U
db  33h ; 3
db  55h ; U
db    0
db    0
db    0
db    0
db  4Dh ; M
db  55h ; U
db  6Ah ; j
db  55h ; U
db  94h
db  55h ; U
db 0C9h
db  55h ; U
db 0E7h
db  55h ; U
db 0F9h
db  55h ; U
db  0Dh
db  56h ; V
db  34h ; 4
db  56h ; V
db  45h ; E
db  56h ; V
db  62h ; b
db  56h ; V
db  76h ; v
db  56h ; V
db  9Dh
db  56h ; V
db 0C5h
db  56h ; V
db 0DAh
db  56h ; V
db 0F0h
db  56h ; V
db    5
db  57h ; W
db  1Bh
db  57h ; W
db  30h ; 0
db  57h ; W
db  46h ; F
db  57h ; W
db  67h ; g
db  57h ; W
db  77h ; w
db  57h ; W
db  95h
db  57h ; W
db 0B1h
db  57h ; W
db 0CFh
db  57h ; W
db 0E3h
db  57h ; W
db    7
db  58h ; X
db  22h ; "
db  58h ; X
db  45h ; E
db  58h ; X
db  73h ; s
db  58h ; X
db 0A3h
db  58h ; X
db 0C1h
db  58h ; X
db 0E1h
db  58h ; X
db 0F9h
db  58h ; X
db  17h
db  59h ; Y
db  3Ah ; :
db  59h ; Y
db  5Fh ; _
db  59h ; Y
db  78h ; x
db  59h ; Y
db  8Fh
db  59h ; Y
db 0ABh
db  59h ; Y
db 0C8h
db  59h ; Y
db 0EDh
db  59h ; Y
db    1
db  5Ah ; Z
db  23h ; #
db  5Ah ; Z
db  38h ; 8
db  5Ah ; Z
db  4Dh ; M
db  5Ah ; Z
db  6Eh ; n
db  5Ah ; Z
db  87h
db  5Ah ; Z
db 0BCh
db  5Ah ; Z
db 0D4h
db  5Ah ; Z
db 0ECh
db  5Ah ; Z
db 0FFh
db  5Ah ; Z
db  17h
db  5Bh ; [
db  37h ; 7
db  5Bh ; [
db  57h ; W
db  5Bh ; [
db    0
db    0
db  77h ; w
db  5Bh ; [
db  93h
db  5Bh ; [
db 0BDh
db  5Bh ; [
db 0DAh
db  5Bh ; [
db 0F1h
db  5Bh ; [
db    9
db  5Ch ; \
db  1Ch
db  5Ch ; \
db  31h ; 1
db  5Ch ; \
db  43h ; C
db  5Ch ; \
db  5Ah ; Z
db  5Ch ; \
db  70h ; p
db  5Ch ; \
db  89h
db  5Ch ; \
db 0A6h
db  5Ch ; \
db 0C3h
db  5Ch ; \
db 0DAh
db  5Ch ; \
db 0E9h
db  5Ch ; \
db 0F8h
db  5Ch ; \
db  11h
db  5Dh ; ]
db  2Bh ; +
db  5Dh ; ]
db  42h ; B
db  5Dh ; ]
db  51h ; Q
db  5Dh ; ]
db  68h ; h
db  5Dh ; ]
db  7Fh ; 
db  5Dh ; ]
db  96h
db  5Dh ; ]
db 0B3h
db  5Dh ; ]
db 0CCh
db  5Dh ; ]
db 0E9h
db  5Dh ; ]
db 0F9h
db  5Dh ; ]
db  0Ch
db  5Eh ; ^
db  29h ; )
db  5Eh ; ^
db  3Dh ; =
db  5Eh ; ^
db  58h ; X
db  5Eh ; ^
db  78h ; x
db  5Eh ; ^
db  98h
db  5Eh ; ^
db 0AEh
db  5Eh ; ^
db 0C0h
db  5Eh ; ^
db 0D9h
db  5Eh ; ^
db 0FAh
db  5Eh ; ^
db  15h
db  5Fh ; _
db  30h ; 0
db  5Fh ; _
db  47h ; G
db  5Fh ; _
db  5Dh ; ]
db  5Fh ; _
db  76h ; v
db  5Fh ; _
db  8Ah
db  5Fh ; _
db 0A3h
db  5Fh ; _
db 0CBh
db  5Fh ; _
db 0E6h
db  5Fh ; _
db    4
db  60h ; `
db  1Dh
db  60h ; `
db  3Ah ; :
db  60h ; `
db  45h ; E
db  60h ; `
db  59h ; Y
db  60h ; `
db  7Ch ; |
db  60h ; `
db  97h
db  60h ; `
db  37h ; 7
db  5Bh ; [
db  17h
db  5Bh ; [
db  57h ; W
db  5Bh ; [
db 0BCh
db  60h ; `
db 0E0h
db  60h ; `
db 0F6h
db  60h ; `
db    7
db  61h ; a
db  2Eh ; .
db  61h ; a
db  5Bh ; [
db  61h ; a
db  78h ; x
db  61h ; a
db  9Eh
db  61h ; a
db 0C5h
db  61h ; a
db 0E4h
db  61h ; a
db    2
db  62h ; b
db  29h ; )
db  62h ; b
db  3Ah ; :
db  62h ; b
db  4Dh ; M
db  62h ; b
db  6Ah ; j
db  62h ; b
db  8Fh
db  62h ; b
db 0ADh
db  62h ; b
db  8Ah
db  5Fh ; _
db 0C7h
db  62h ; b
db 0E5h
db  62h ; b
db  0Bh
db  63h ; c
db  2Dh ; -
db  63h ; c
db  50h ; P
db  63h ; c
db  71h ; q
db  63h ; c
db  9Dh
db  63h ; c
db 0C5h
db  63h ; c
db  65h ; e
db  52h ; R
db  76h ; v
db  52h ; R
db 0EDh
db  63h ; c
db  73h ; s
db  74h ; t
db  72h ; r
db    1
db  61h ; a
db  6Dh ; m
db  70h ; p
db    0
db  72h ; r
db  70h ; p
db  74h ; t
db    1
db  61h ; a
db  70h ; p
db  74h ; t
db    1
db  63h ; c
db  70h ; p
db  74h ; t
db    1
db  72h ; r
db  6Eh ; n
db  67h ; g
db    1
db  7Ah ; z
db  73h ; s
db  74h ; t
db    1
db  63h ; c
db  6Ch ; l
db  6Eh ; n
db    0
db  64h ; d
db  65h ; e
db  66h ; f
db    1
db  61h ; a
db  75h ; u
db  73h ; s
db    1
db  75h ; u
db  73h ; s
db  65h ; e
db    0
db  76h ; v
db  6Fh ; o
db  69h ; i
db    1
db  72h ; r
db  65h ; e
db  74h ; t
db    1
db  72h ; r
db  76h ; v
db  6Ch ; l
db    0
db  73h ; s
db  75h ; u
db  73h ; s
db    1
db  73h ; s
db  69h ; i
db  67h ; g
db    0
db  72h ; r
db  63h ; c
db  68h ; h
db    1
db  65h ; e
db  66h ; f
db  66h ; f
db    1
db  70h ; p
db  61h ; a
db  72h ; r
db    1
db  61h ; a
db  6Dh ; m
db  62h ; b
db    0
db  70h ; p
db  69h ; i
db  61h ; a
db    1
db  73h ; s
db  74h ; t
db  76h ; v
db    0
db  73h ; s
db  74h ; t
db  75h ; u
db    1
db  61h ; a
db  73h ; s
db  6Dh ; m
db    0
db  64h ; d
db  75h ; u
db  70h ; p
db    1
db  61h ; a
db  73h ; s
db  63h ; c
db    1
db  70h ; p
db  72h ; r
db  6Fh ; o
db    0
db  6Eh ; n
db  6Fh ; o
db  64h ; d
db    0
db  75h ; u
db  63h ; c
db  70h ; p
db    0
db  70h ; p
db  72h ; r
db  6Fh ; o
db    0
db  62h ; b
db  69h ; i
db  67h ; g
db    1
db  6Dh ; m
db  6Ch ; l
db  74h ; t
db    0
db  6Dh ; m
db  6Ch ; l
db  74h ; t
db    0
db  73h ; s
db  74h ; t
db  6Bh ; k
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db    0
db    0
db  10h
db  20h
db    0
db    0
db  10h
db  10h
db  10h
db    0
db  10h
db  10h
db  11h
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db    0
db    0
db  10h
db    0
db    0
db    0
db  10h
db    0
db  11h
db    0
db  20h
db    0
db  10h
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  20h
db  33h ; 3
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db  10h
db  10h
db    0
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  21h ; !
db  11h
db  20h
db  10h
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  10h
db    0
db  10h
db    0
db    0
db  10h
db    0
db  10h
db    0
db  10h
db  11h
db    0
db  49h ; I
db  72h ; r
db  72h ; r
db  65h ; e
db  64h ; d
db  75h ; u
db  63h ; c
db  69h ; i
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  65h ; e
db  78h ; x
db  70h ; p
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  74h ; t
db  72h ; r
db  65h ; e
db  65h ; e
db    0
db  52h ; R
db  65h ; e
db  67h ; g
db  69h ; i
db  73h ; s
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  63h ; c
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  66h ; f
db  61h ; a
db  69h ; i
db  6Ch ; l
db  75h ; u
db  72h ; r
db  65h ; e
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  69h ; i
db  6Eh ; n
db  2Dh ; -
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  6Eh ; n
db  61h ; a
db  6Ch ; l
db  20h
db  75h ; u
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  55h ; U
db  6Eh ; n
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  6Eh ; n
db  20h
db  69h ; i
db  6Eh ; n
db  70h ; p
db  75h ; u
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  55h ; U
db  6Eh ; n
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  63h ; c
db  72h ; r
db  65h ; e
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  70h ; p
db  75h ; u
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  4Fh ; O
db  75h ; u
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  77h ; w
db  72h ; r
db  69h ; i
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  70h ; p
db  75h ; u
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  45h ; E
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  3Ah ; :
db  20h
db  25h ; %
db  73h ; s
db    0
db  4Dh ; M
db  53h ; S
db  44h ; D
db  4Fh ; O
db  53h ; S
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  61h ; a
db  78h ; x
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  64h ; d
db    0
db  55h ; U
db  6Eh ; n
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db  20h
db  6Fh ; o
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db  61h ; a
db  63h ; c
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  4Fh ; O
db  42h ; B
db  4Ah ; J
db  20h
db  72h ; r
db  65h ; e
db  63h ; c
db  6Fh ; o
db  72h ; r
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  25h ; %
db  73h ; s
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  73h ; s
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  67h ; g
db  72h ; r
db  6Fh ; o
db  75h ; u
db  70h ; p
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  3Ah ; :
db  20h
db  25h ; %
db  73h ; s
db    0
db  53h ; S
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db  20h
db  6Ch ; l
db  69h ; i
db  6Dh ; m
db  69h ; i
db  74h ; t
db  20h
db  65h ; e
db  78h ; x
db  63h ; c
db  65h ; e
db  65h ; e
db  64h ; d
db  65h ; e
db  64h ; d
db    0
db  46h ; F
db  69h ; i
db  78h ; x
db  75h ; u
db  70h ; p
db  20h
db  6Fh ; o
db  76h ; v
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  73h ; s
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  25h ; %
db  73h ; s
db    0
db  25h ; %
db  73h ; s
db  20h
db  69h ; i
db  73h ; s
db  20h
db  64h ; d
db  75h ; u
db  70h ; p
db  6Ch ; l
db  69h ; i
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db    0
db  25h ; %
db  73h ; s
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  6Dh ; m
db  6Fh ; o
db  64h ; d
db  75h ; u
db  6Ch ; l
db  65h ; e
db  20h
db  25h ; %
db  73h ; s
db  20h
db  69h ; i
db  73h ; s
db  20h
db  64h ; d
db  75h ; u
db  70h ; p
db  6Ch ; l
db  69h ; i
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db    0
db  47h ; G
db  72h ; r
db  6Fh ; o
db  75h ; u
db  70h ; p
db  20h
db  6Fh ; o
db  76h ; v
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db  20h
db  6Dh ; m
db  61h ; a
db  78h ; x
db  69h ; i
db  6Dh ; m
db  75h ; u
db  6Dh ; m
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  3Ah ; :
db  20h
db  25h ; %
db  73h ; s
db    0
db  53h ; S
db  65h ; e
db  67h ; g
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Fh ; o
db  76h ; v
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db  20h
db  6Dh ; m
db  61h ; a
db  78h ; x
db  69h ; i
db  6Dh ; m
db  75h ; u
db  6Dh ; m
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  3Ah ; :
db  20h
db  25h ; %
db  73h ; s
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  75h ; u
db  63h ; c
db  68h ; h
db  20h
db  67h ; g
db  6Ch ; l
db  6Fh ; o
db  62h ; b
db  61h ; a
db  6Ch ; l
db  20h
db  64h ; d
db  61h ; a
db  74h ; t
db  61h ; a
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  46h ; F
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  55h ; U
db  6Eh ; n
db  65h ; e
db  78h ; x
db  70h ; p
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Eh ; n
db  64h ; d
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  64h ; d
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  61h ; a
db  6Ch ; l
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  72h ; r
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  25h ; %
db  64h ; d
db    0
db  23h ; #
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  6Fh ; o
db  72h ; r
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  66h ; f
db  6Fh ; o
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db  20h
db  62h ; b
db  79h ; y
db  20h
db  6Dh ; m
db  61h ; a
db  63h ; c
db  72h ; r
db  6Fh ; o
db  20h
db  61h ; a
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  55h ; U
db  6Eh ; n
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db  20h
db  70h ; p
db  72h ; r
db  65h ; e
db  70h ; p
db  72h ; r
db  6Fh ; o
db  63h ; c
db  65h ; e
db  73h ; s
db  73h ; s
db  6Fh ; o
db  72h ; r
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  3Ah ; :
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  6Dh ; m
db  61h ; a
db  74h ; t
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  69h ; i
db  6Eh ; n
db  63h ; c
db  6Ch ; l
db  75h ; u
db  64h ; d
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db  20h
db  65h ; e
db  6Eh ; n
db  64h ; d
db  69h ; i
db  6Eh ; n
db  67h ; g
db    0
db  55h ; U
db  6Eh ; n
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  6Eh ; n
db  20h
db  69h ; i
db  6Eh ; n
db  63h ; c
db  6Ch ; l
db  75h ; u
db  64h ; d
db  65h ; e
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  65h ; e
db  64h ; d
db  20h
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  62h ; b
db  65h ; e
db  72h ; r
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  4Dh ; M
db  61h ; a
db  63h ; c
db  72h ; r
db  6Fh ; o
db  20h
db  65h ; e
db  78h ; x
db  70h ; p
db  61h ; a
db  6Eh ; n
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  44h ; D
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  6Eh ; n
db  65h ; e
db  65h ; e
db  64h ; d
db  73h ; s
db  20h
db  61h ; a
db  6Eh ; n
db  20h
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  69h ; i
db  66h ; f
db  69h ; i
db  65h ; e
db  72h ; r
db    0
db  4Dh ; M
db  61h ; a
db  63h ; c
db  72h ; r
db  6Fh ; o
db  20h
db  61h ; a
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  6Dh ; m
db  61h ; a
db  63h ; c
db  72h ; r
db  6Fh ; o
db  20h
db  61h ; a
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  73h ; s
db  65h ; e
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  6Fh ; o
db  72h ; r
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  75h ; u
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Ch ; l
db  69h ; i
db  66h ; f
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  69h ; i
db  66h ; f
db  64h ; d
db  65h ; e
db  66h ; f
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db    0
db  42h ; B
db  61h ; a
db  64h ; d
db  20h
db  69h ; i
db  66h ; f
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Ch ; l
db  73h ; s
db  65h ; e
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Eh ; n
db  64h ; d
db  69h ; i
db  66h ; f
db  20h
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db    0
db  52h ; R
db  65h ; e
db  70h ; p
db  65h ; e
db  61h ; a
db  74h ; t
db  20h
db  63h ; c
db  6Fh ; o
db  75h ; u
db  6Eh ; n
db  74h ; t
db  20h
db  6Eh ; n
db  65h ; e
db  65h ; e
db  64h ; d
db  73h ; s
db  20h
db  61h ; a
db  6Eh ; n
db  20h
db  6Ch ; l
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  57h ; W
db  72h ; r
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db  20h
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  62h ; b
db  65h ; e
db  72h ; r
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  61h ; a
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  55h ; U
db  6Eh ; n
db  65h ; e
db  78h ; x
db  70h ; p
db  65h ; e
db  63h ; c
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Eh ; n
db  64h ; d
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  72h ; r
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  25h ; %
db  64h ; d
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db  61h ; a
db  63h ; c
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  27h ; '
db  25h ; %
db  63h ; c
db  27h ; '
db  20h
db  28h ; (
db  30h ; 0
db  78h ; x
db  25h ; %
db  78h ; x
db  29h ; )
db    0
db  45h ; E
db  78h ; x
db  70h ; p
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  6Fh ; o
db  63h ; c
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  64h ; d
db  69h ; i
db  67h ; g
db  69h ; i
db  74h ; t
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  6Eh ; n
db  65h ; e
db  61h ; a
db  72h ; r
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db    0
db  44h ; D
db  69h ; i
db  76h ; v
db  69h ; i
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  62h ; b
db  79h ; y
db  20h
db  7Ah ; z
db  65h ; e
db  72h ; r
db  6Fh ; o
db    0
db  43h ; C
db  61h ; a
db  6Eh ; n
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  6Dh ; m
db  6Fh ; o
db  64h ; d
db  69h ; i
db  66h ; f
db  79h ; y
db  20h
db  61h ; a
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  20h
db  6Fh ; o
db  62h ; b
db  6Ah ; j
db  65h ; e
db  63h ; c
db  74h ; t
db    0
db  4Eh ; N
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  6Eh ; n
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db    0
db  54h ; T
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  72h ; r
db  65h ; e
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  44h ; D
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Eh ; n
db  65h ; e
db  65h ; e
db  64h ; d
db  73h ; s
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  73h ; s
db  74h ; t
db  6Fh ; o
db  72h ; r
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db  63h ; c
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db    0
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  6Eh ; n
db  20h
db  61h ; a
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  41h ; A
db  6Dh ; m
db  62h ; b
db  69h ; i
db  67h ; g
db  75h ; u
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  73h ; s
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  54h ; T
db  77h ; w
db  6Fh ; o
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  65h ; e
db  63h ; c
db  75h ; u
db  74h ; t
db  69h ; i
db  76h ; v
db  65h ; e
db  20h
db  64h ; d
db  6Fh ; o
db  74h ; t
db  73h ; s
db    0
db  52h ; R
db  65h ; e
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  55h ; U
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  6Ch ; l
db  61h ; a
db  62h ; b
db  65h ; e
db  6Ch ; l
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  55h ; U
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  73h ; s
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  49h ; I
db  6Dh ; m
db  70h ; p
db  72h ; r
db  6Fh ; o
db  70h ; p
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  61h ; a
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  64h ; d
db  65h ; e
db  66h ; f
db  20h
db  73h ; s
db  79h ; y
db  6Dh ; m
db  62h ; b
db  6Fh ; o
db  6Ch ; l
db    0
db  4Ch ; L
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  20h
db  72h ; r
db  65h ; e
db  71h ; q
db  75h ; u
db  69h ; i
db  72h ; r
db  65h ; e
db  64h ; d
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  75h ; u
db  63h ; c
db  68h ; h
db  20h
db  63h ; c
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  64h ; d
db  69h ; i
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  50h ; P
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  72h ; r
db  65h ; e
db  71h ; q
db  75h ; u
db  69h ; i
db  72h ; r
db  65h ; e
db  64h ; d
db  20h
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Ch ; l
db  65h ; e
db  66h ; f
db  74h ; t
db  20h
db  73h ; s
db  69h ; i
db  64h ; d
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  2Dh ; -
db  3Eh ; >
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  66h ; f
db  65h ; e
db  77h ; w
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  66h ; f
db  65h ; e
db  77h ; w
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  54h ; T
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  25h ; %
db  64h ; d
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  54h ; T
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  54h ; T
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  25h ; %
db  64h ; d
db    0
db  54h ; T
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  6Dh ; m
db  61h ; a
db  74h ; t
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  45h ; E
db  78h ; x
db  74h ; t
db  72h ; r
db  61h ; a
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db    0
db  45h ; E
db  78h ; x
db  74h ; t
db  72h ; r
db  61h ; a
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  25h ; %
db  73h ; s
db    0
db  4Eh ; N
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  65h ; e
db  78h ; x
db  70h ; p
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  6Dh ; m
db  61h ; a
db  74h ; t
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db    0
db  4Dh ; M
db  75h ; u
db  73h ; s
db  74h ; t
db  20h
db  74h ; t
db  61h ; a
db  6Bh ; k
db  65h ; e
db  20h
db  61h ; a
db  64h ; d
db  64h ; d
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db  6Ch ; l
db  6Fh ; o
db  63h ; c
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  61h ; a
db  64h ; d
db  64h ; d
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  73h ; s
db  75h ; u
db  62h ; b
db  74h ; t
db  72h ; r
db  61h ; a
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  74h ; t
db  69h ; i
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  53h ; S
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  61h ; a
db  72h ; r
db  72h ; r
db  61h ; a
db  79h ; y
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db    0
db  4Dh ; M
db  75h ; u
db  73h ; s
db  74h ; t
db  20h
db  62h ; b
db  65h ; e
db  20h
db  61h ; a
db  64h ; d
db  64h ; d
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db    0
db  45h ; E
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  6Eh ; n
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  41h ; A
db  72h ; r
db  72h ; r
db  61h ; a
db  79h ; y
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  75h ; u
db  63h ; c
db  68h ; h
db  20h
db  61h ; a
db  75h ; u
db  74h ; t
db  6Fh ; o
db  20h
db  6Dh ; m
db  65h ; e
db  6Dh ; m
db  6Fh ; o
db  72h ; r
db  79h ; y
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  53h ; S
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  46h ; F
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  6Fh ; o
db  65h ; e
db  73h ; s
db  6Eh ; n
db  27h ; '
db  74h ; t
db  20h
db  74h ; t
db  61h ; a
db  6Bh ; k
db  65h ; e
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  72h ; r
db  69h ; i
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  62h ; b
db  65h ; e
db  72h ; r
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  61h ; a
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  69h ; i
db  6Dh ; m
db  61h ; a
db  6Ch ; l
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  69h ; i
db  6Dh ; m
db  61h ; a
db  6Ch ; l
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  65h ; e
db  78h ; x
db  70h ; p
db  6Fh ; o
db  6Eh ; n
db  65h ; e
db  6Eh ; n
db  74h ; t
db  73h ; s
db    0
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  72h ; r
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  62h ; b
db  65h ; e
db  72h ; r
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  6Dh ; m
db  61h ; a
db  74h ; t
db    0
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  4Eh ; N
db  6Fh ; o
db  6Eh ; n
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  72h ; r
db  69h ; i
db  73h ; s
db  6Fh ; o
db  6Eh ; n
db    0
db  43h ; C
db  68h ; h
db  61h ; a
db  72h ; r
db  61h ; a
db  63h ; c
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  55h ; U
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  6Dh ; m
db  69h ; i
db  6Eh ; n
db  61h ; a
db  74h ; t
db  65h ; e
db  64h ; d
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db  61h ; a
db  63h ; c
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db    0
db  41h ; A
db  73h ; s
db  73h ; s
db  65h ; e
db  6Dh ; m
db  62h ; b
db  6Ch ; l
db  65h ; e
db  72h ; r
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  53h ; S
db  75h ; u
db  62h ; b
db  73h ; s
db  63h ; c
db  72h ; r
db  69h ; i
db  70h ; p
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  5Dh ; ]
db    0
db  46h ; F
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  63h ; c
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  29h ; )
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  64h ; d
db  6Fh ; o
db  74h ; t
db    0
db  49h ; I
db  6Eh ; n
db  76h ; v
db  61h ; a
db  6Ch ; l
db  69h ; i
db  64h ; d
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  61h ; a
db  72h ; r
db  72h ; r
db  6Fh ; o
db  77h ; w
db    0
db  43h ; C
db  61h ; a
db  73h ; s
db  74h ; t
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  41h ; A
db  72h ; r
db  72h ; r
db  61h ; a
db  79h ; y
db  20h
db  62h ; b
db  6Fh ; o
db  75h ; u
db  6Eh ; n
db  64h ; d
db  73h ; s
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  5Dh ; ]
db    0
db  42h ; B
db  69h ; i
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  65h ; e
db  6Ch ; l
db  64h ; d
db  20h
db  73h ; s
db  69h ; i
db  7Ah ; z
db  65h ; e
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db    0
db  43h ; C
db  61h ; a
db  73h ; s
db  65h ; e
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  3Ah ; :
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  65h ; e
db  78h ; x
db  70h ; p
db  72h ; r
db  65h ; e
db  73h ; s
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  72h ; r
db  65h ; e
db  71h ; q
db  75h ; u
db  69h ; i
db  72h ; r
db  65h ; e
db  64h ; d
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  6Fh ; o
db  75h ; u
db  6Eh ; n
db  64h ; d
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  7Dh ; }
db    0
db  43h ; C
db  61h ; a
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  73h ; s
db  69h ; i
db  64h ; d
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  73h ; s
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  44h ; D
db  75h ; u
db  70h ; p
db  6Ch ; l
db  69h ; i
db  63h ; c
db  61h ; a
db  74h ; t
db  65h ; e
db  20h
db  63h ; c
db  61h ; a
db  73h ; s
db  65h ; e
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  63h ; c
db  61h ; a
db  73h ; s
db  65h ; e
db  73h ; s
db    0
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  72h ; r
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db    0
db  44h ; D
db  65h ; e
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  73h ; s
db  69h ; i
db  64h ; d
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  73h ; s
db  77h ; w
db  69h ; i
db  74h ; t
db  63h ; c
db  68h ; h
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  61h ; a
db  75h ; u
db  6Ch ; l
db  74h ; t
db  20h
db  63h ; c
db  61h ; a
db  73h ; s
db  65h ; e
db  73h ; s
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  65h ; e
db  6Ch ; l
db  73h ; s
db  65h ; e
db    0
db  25h ; %
db  73h ; s
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  28h ; (
db    0
db  25h ; %
db  73h ; s
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  29h ; )
db    0
db  25h ; %
db  73h ; s
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  3Bh ; ;
db    0
db  44h ; D
db  6Fh ; o
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  75h ; u
db  73h ; s
db  74h ; t
db  20h
db  68h ; h
db  61h ; a
db  76h ; v
db  65h ; e
db  20h
db  77h ; w
db  68h ; h
db  69h ; i
db  6Ch ; l
db  65h ; e
db    0
db  41h ; A
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  25h ; %
db  64h ; d
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  6Eh ; n
db  61h ; a
db  6Dh ; m
db  65h ; e
db    0
db  53h ; S
db  69h ; i
db  64h ; d
db  65h ; e
db  20h
db  65h ; e
db  66h ; f
db  66h ; f
db  65h ; e
db  63h ; c
db  74h ; t
db  73h ; s
db  20h
db  61h ; a
db  72h ; r
db  65h ; e
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db    0
db  4Dh ; M
db  69h ; i
db  73h ; s
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db  64h ; d
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  74h ; t
db  69h ; i
db  6Eh ; n
db  75h ; u
db  65h ; e
db    0
db  47h ; G
db  6Fh ; o
db  74h ; t
db  6Fh ; o
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  6Ch ; l
db  61h ; a
db  62h ; b
db  65h ; e
db  6Ch ; l
db    0
db  53h ; S
db  74h ; t
db  61h ; a
db  74h ; t
db  65h ; e
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  3Bh ; ;
db    0
db  49h ; I
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  74h ; t
db  69h ; i
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  73h ; s
db  74h ; t
db  6Fh ; o
db  72h ; r
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db  63h ; c
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  27h ; '
db  5Fh ; _
db  5Fh ; _
db  65h ; e
db  6Dh ; m
db  69h ; i
db  74h ; t
db  5Fh ; _
db  5Fh ; _
db  27h ; '
db    0
db  53h ; S
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  75h ; u
db  6Eh ; n
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  44h ; D
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Dh ; m
db  69h ; i
db  73h ; s
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  3Bh ; ;
db    0
db  45h ; E
db  6Eh ; n
db  75h ; u
db  6Dh ; m
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  44h ; D
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  46h ; F
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  70h ; p
db  6Ch ; l
db  61h ; a
db  63h ; c
db  65h ; e
db    0
db  4Eh ; N
db  75h ; u
db  6Dh ; m
db  65h ; e
db  72h ; r
db  69h ; i
db  63h ; c
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  41h ; A
db  72h ; r
db  67h ; g
db  75h ; u
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  20h
db  6Ch ; l
db  69h ; i
db  73h ; s
db  74h ; t
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  49h ; I
db  6Ch ; l
db  6Ch ; l
db  65h ; e
db  67h ; g
db  61h ; a
db  6Ch ; l
db  20h
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  61h ; a
db  6Ch ; l
db  69h ; i
db  7Ah ; z
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  61h ; a
db  6Ch ; l
db  69h ; i
db  7Ah ; z
db  65h ; e
db  72h ; r
db  73h ; s
db    0
db  49h ; I
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  61h ; a
db  6Ch ; l
db  69h ; i
db  7Ah ; z
db  65h ; e
db  72h ; r
db  20h
db  73h ; s
db  79h ; y
db  6Eh ; n
db  74h ; t
db  61h ; a
db  78h ; x
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  42h ; B
db  69h ; i
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  65h ; e
db  6Ch ; l
db  64h ; d
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  55h ; U
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  73h ; s
db  74h ; t
db  6Fh ; o
db  72h ; r
db  61h ; a
db  67h ; g
db  65h ; e
db  20h
db  63h ; c
db  6Ch ; l
db  61h ; a
db  73h ; s
db  73h ; s
db  65h ; e
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  66h ; f
db  6Ch ; l
db  69h ; i
db  63h ; c
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  6Dh ; m
db  6Fh ; o
db  64h ; d
db  69h ; i
db  66h ; f
db  69h ; i
db  65h ; e
db  72h ; r
db  73h ; s
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  73h ; s
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  43h ; C
db  6Fh ; o
db  75h ; u
db  6Ch ; l
db  64h ; d
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  66h ; f
db  69h ; i
db  6Eh ; n
db  64h ; d
db  20h
db  66h ; f
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  49h ; I
db  6Eh ; n
db  2Dh ; -
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  65h ; e
db  6Dh ; m
db  62h ; b
db  6Ch ; l
db  79h ; y
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  65h ; e
db  64h ; d
db    0
db  55h ; U
db  73h ; s
db  65h ; e
db  72h ; r
db  20h
db  62h ; b
db  72h ; r
db  65h ; e
db  61h ; a
db  6Bh ; k
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  66h ; f
db  6Fh ; o
db  72h ; r
db  6Dh ; m
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Dh ; m
db  61h ; a
db  6Eh ; n
db  79h ; y
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  77h ; w
db  61h ; a
db  72h ; r
db  6Eh ; n
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  6Dh ; m
db  65h ; e
db  73h ; s
db  73h ; s
db  61h ; a
db  67h ; g
db  65h ; e
db  73h ; s
db    0
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db    0
db  53h ; S
db  75h ; u
db  70h ; p
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  75h ; u
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  26h ; &
db  20h
db  77h ; w
db  69h ; i
db  74h ; t
db  68h ; h
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  61h ; a
db  72h ; r
db  72h ; r
db  61h ; a
db  79h ; y
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  6Fh ; o
db  75h ; u
db  74h ; t
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  72h ; r
db  61h ; a
db  6Eh ; n
db  67h ; g
db  65h ; e
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  61h ; a
db  72h ; r
db  69h ; i
db  73h ; s
db  6Fh ; o
db  6Eh ; n
db    0
db  5Ah ; Z
db  65h ; e
db  72h ; r
db  6Fh ; o
db  20h
db  6Ch ; l
db  65h ; e
db  6Eh ; n
db  67h ; g
db  74h ; t
db  68h ; h
db  20h
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Ch ; l
db  6Fh ; o
db  6Eh ; n
db  67h ; g
db    0
db  50h ; P
db  6Fh ; o
db  73h ; s
db  73h ; s
db  69h ; i
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  62h ; b
db  65h ; e
db  66h ; f
db  6Fh ; o
db  72h ; r
db  65h ; e
db  20h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  69h ; i
db  73h ; s
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  20h
db  77h ; w
db  68h ; h
db  69h ; i
db  63h ; c
db  68h ; h
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  65h ; e
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  65h ; e
db  64h ; d
db  20h
db  62h ; b
db  75h ; u
db  74h ; t
db  20h
db  6Eh ; n
db  65h ; e
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  56h ; V
db  6Fh ; o
db  69h ; i
db  64h ; d
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  20h
db  6Dh ; m
db  61h ; a
db  79h ; y
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  42h ; B
db  6Fh ; o
db  74h ; t
db  68h ; h
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  46h ; F
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  73h ; s
db  68h ; h
db  6Fh ; o
db  75h ; u
db  6Ch ; l
db  64h ; d
db  20h
db  72h ; r
db  65h ; e
db  74h ; t
db  75h ; u
db  72h ; r
db  6Eh ; n
db  20h
db  61h ; a
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  53h ; S
db  75h ; u
db  73h ; s
db  70h ; p
db  69h ; i
db  63h ; c
db  69h ; i
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  43h ; C
db  6Fh ; o
db  6Eh ; n
db  76h ; v
db  65h ; e
db  72h ; r
db  73h ; s
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Dh ; m
db  61h ; a
db  79h ; y
db  20h
db  6Ch ; l
db  6Fh ; o
db  73h ; s
db  65h ; e
db  20h
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  69h ; i
db  66h ; f
db  69h ; i
db  63h ; c
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  64h ; d
db  69h ; i
db  67h ; g
db  69h ; i
db  74h ; t
db  73h ; s
db    0
db  55h ; U
db  6Eh ; n
db  72h ; r
db  65h ; e
db  61h ; a
db  63h ; c
db  68h ; h
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  20h
db  63h ; c
db  6Fh ; o
db  64h ; d
db  65h ; e
db    0
db  43h ; C
db  6Fh ; o
db  64h ; d
db  65h ; e
db  20h
db  68h ; h
db  61h ; a
db  73h ; s
db  20h
db  6Eh ; n
db  6Fh ; o
db  20h
db  65h ; e
db  66h ; f
db  66h ; f
db  65h ; e
db  63h ; c
db  74h ; t
db    0
db  50h ; P
db  61h ; a
db  72h ; r
db  61h ; a
db  6Dh ; m
db  65h ; e
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  65h ; e
db  76h ; v
db  65h ; e
db  72h ; r
db  20h
db  75h ; u
db  73h ; s
db  65h ; e
db  64h ; d
db    0
db  41h ; A
db  6Dh ; m
db  62h ; b
db  69h ; i
db  67h ; g
db  75h ; u
db  6Fh ; o
db  75h ; u
db  73h ; s
db  20h
db  6Fh ; o
db  70h ; p
db  65h ; e
db  72h ; r
db  61h ; a
db  74h ; t
db  6Fh ; o
db  72h ; r
db  73h ; s
db  20h
db  6Eh ; n
db  65h ; e
db  65h ; e
db  64h ; d
db  20h
db  70h ; p
db  61h ; a
db  72h ; r
db  65h ; e
db  6Eh ; n
db  74h ; t
db  68h ; h
db  65h ; e
db  73h ; s
db  65h ; e
db  73h ; s
db    0
db  50h ; P
db  6Fh ; o
db  73h ; s
db  73h ; s
db  69h ; i
db  62h ; b
db  6Ch ; l
db  79h ; y
db  20h
db  69h ; i
db  6Eh ; n
db  63h ; c
db  6Fh ; o
db  72h ; r
db  72h ; r
db  65h ; e
db  63h ; c
db  74h ; t
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db    0
db  53h ; S
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  75h ; u
db  72h ; r
db  65h ; e
db  20h
db  70h ; p
db  61h ; a
db  73h ; s
db  73h ; s
db  65h ; e
db  64h ; d
db  20h
db  62h ; b
db  79h ; y
db  20h
db  76h ; v
db  61h ; a
db  6Ch ; l
db  75h ; u
db  65h ; e
db    0
db  55h ; U
db  6Eh ; n
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  65h ; e
db  6Dh ; m
db  62h ; b
db  6Ch ; l
db  65h ; e
db  72h ; r
db  20h
db  69h ; i
db  6Eh ; n
db  73h ; s
db  74h ; t
db  72h ; r
db  75h ; u
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db  52h ; R
db  65h ; e
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  69h ; i
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  6Fh ; o
db  66h ; f
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  69h ; i
db  73h ; s
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  69h ; i
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  69h ; i
db  63h ; c
db  61h ; a
db  6Ch ; l
db    0
db  52h ; R
db  65h ; e
db  73h ; s
db  74h ; t
db  61h ; a
db  72h ; r
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  63h ; c
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  65h ; e
db  20h
db  75h ; u
db  73h ; s
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  65h ; e
db  6Dh ; m
db  62h ; b
db  6Ch ; l
db  79h ; y
db    0
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  77h ; w
db  69h ; i
db  74h ; t
db  68h ; h
db  20h
db  6Eh ; n
db  6Fh ; o
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  74h ; t
db  6Fh ; o
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  64h ; d
db  65h ; e
db  63h ; c
db  6Ch ; l
db  61h ; a
db  72h ; r
db  61h ; a
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db    0
db  4Dh ; M
db  69h ; i
db  78h ; x
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  73h ; s
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  75h ; u
db  6Eh ; n
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  65h ; e
db  64h ; d
db  20h
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db    0
db  43h ; C
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db  27h ; '
db  25h ; %
db  73h ; s
db  27h ; '
db  20h
db  77h ; w
db  69h ; i
db  74h ; t
db  68h ; h
db  20h
db  6Eh ; n
db  6Fh ; o
db  20h
db  70h ; p
db  72h ; r
db  6Fh ; o
db  74h ; t
db  6Fh ; o
db  74h ; t
db  79h ; y
db  70h ; p
db  65h ; e
db    0
db  48h ; H
db  65h ; e
db  78h ; x
db  61h ; a
db  64h ; d
db  65h ; e
db  63h ; c
db  69h ; i
db  6Dh ; m
db  61h ; a
db  6Ch ; l
db  20h
db  6Fh ; o
db  72h ; r
db  20h
db  6Fh ; o
db  63h ; c
db  74h ; t
db  61h ; a
db  6Ch ; l
db  20h
db  63h ; c
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  74h ; t
db  61h ; a
db  6Eh ; n
db  74h ; t
db  20h
db  74h ; t
db  6Fh ; o
db  6Fh ; o
db  20h
db  6Ch ; l
db  61h ; a
db  72h ; r
db  67h ; g
db  65h ; e
db    0
db  4Eh ; N
db  6Fh ; o
db  20h
db  73h ; s
db  74h ; t
db  61h ; a
db  63h ; c
db  6Bh ; k
db    0
db  4Ah ; J
db  61h ; a
db  6Eh ; n
db  46h ; F
db  65h ; e
db  62h ; b
db  4Dh ; M
db  61h ; a
db  72h ; r
db  41h ; A
db  70h ; p
db  72h ; r
db  4Dh ; M
db  61h ; a
db  79h ; y
db  4Ah ; J
db  75h ; u
db  6Eh ; n
db  4Ah ; J
db  75h ; u
db  6Ch ; l
db  41h ; A
db  75h ; u
db  67h ; g
db  53h ; S
db  65h ; e
db  70h ; p
db  4Fh ; O
db  63h ; c
db  74h ; t
db  4Eh ; N
db  6Fh ; o
db  76h ; v
db  44h ; D
db  65h ; e
db  63h ; c
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    3
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    3
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    4
db    4
db    8
db  10h
db  10h
db  10h
db  10h
db  10h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  40h ; @
db  40h ; @
db  40h ; @
db 0A0h
db 0A0h
db 0C0h
db 0C0h
db  80h
db  80h
db  80h
db  80h
db    4
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  40h ; @
db 0C0h
db  28h ; (
db  18h
db  19h
db  16h
db  14h
db  17h
db  1Bh
db  1Ah
db    9
db  23h ; #
db  0Eh
db  0Fh
db  0Ch
db  0Ah
db  0Dh
db  11h
db  10h
db  22h ; "
db    0
db    0
db  21h ; !
db    0
db  2Bh ; +
db    0
db    0
db  20h
db  22h ; "
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0F7h
db 0F7h
db 0F7h
db 0F7h
db 0ECh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0E7h
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0F7h
db    0
db 0F4h
db 0EEh
db 0EEh
db 0FFh
db 0FEh
db 0F2h
db    1
db    2
db 0FDh
db 0FCh
db    8
db 0F1h
db 0F0h
db 0FBh
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db  1Fh
db    7
db 0EFh
db 0F8h
db 0EDh
db  1Eh
db 0EEh
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db    3
db 0EAh
db    4
db 0FAh
db 0F6h
db 0EEh
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db    5
db 0F9h
db    6
db  29h ; )
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0EEh
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0F7h
db 0E6h
db 0E6h
db 0ECh
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E7h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E1h
db 0E3h
db 0E6h
db 0E6h
db 0E6h
db 0E1h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E2h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0E6h
db 0E4h
db 0E6h
db 0E6h
db 0F6h
db 0E6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0F7h
db 0E6h
db 0E6h
db 0ECh
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E7h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E5h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E5h
db    1
db    2
db 0E6h
db 0E6h
db    8
db 0E6h
db 0E6h
db 0E2h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0F5h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0E6h
db 0E0h
db 0E6h
db 0E6h
db 0F6h
db 0E6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0F6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db 0E6h
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db  64h ; d
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  80h
db 0FFh
db  3Fh ; ?
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd unk_520E3
align 8
db    3
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
dd unk_520E6
db    0
db    0
db    0
db    0
db    3
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
dd unk_520E9
db    0
db    0
db    0
db    0
db    3
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    1
db  21h ; !
db    1
db  21h ; !
db    1
db  21h ; !
db  0Ch
db    1
db  21h ; !
db  0Ch
db  18h
db    2
db    2
db    2
db    0
db    0
db    0
db    0
db    1
db    0
db    2
db    8
db    4
db  0Ah
db    4
db  0Ah
db    0
db    6
db  0Ch
db    0
db    0
db  0Eh
db  0Fh
db  10h
unk_520E3 db  64h ; d
db  40h ; @
db    0
unk_520E6 db  73h ; s
db  40h ; @
db    0
unk_520E9 db  62h ; b
db  40h ; @
db    0
db  0Dh
db    0
db 0FDh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Dh
db  1Ah
db  9Eh
db  68h ; h
db  0Bh
db  45h ; E
db    2
db 0A5h
db  68h ; h
db  0Ch
db 0BFh
db    2
db 0ABh
db  68h ; h
db    1
db  19h
db    3
db 0B3h
db  68h ; h
db    2
db  12h
db    5
db 0BAh
db  68h ; h
db    3
db 0F7h
db    6
db 0C0h
db  68h ; h
db    7
db  92h
db    7
db 0C3h
db  68h ; h
db    4
db 0E4h
db    7
db 0C9h
db  68h ; h
db    5
db  48h ; H
db    8
db 0D0h
db  68h ; h
db    8
db 0ACh
db    8
db 0D5h
db  68h ; h
db  0Ah
db  12h
db    9
db 0DAh
db  68h ; h
db    6
db  8Ah
db    9
db 0E0h
db  68h ; h
db    9
db 0D4h
db    9
db 0E8h
db    0
db 0E5h
db  68h ; h
db 0A1h
db    1
db 0EAh
db  68h ; h
db 0ABh
db    1
db 0F1h
db  68h ; h
db 0BAh
db    1
db 0FAh
db  68h ; h
db    0
db    0
db    0
db    0
db  70h ; p
db  72h ; r
db  61h ; a
db  67h ; g
db  6Dh ; m
db  61h ; a
db    0
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db    0
db  69h ; i
db  6Eh ; n
db  63h ; c
db  6Ch ; l
db  75h ; u
db  64h ; d
db  65h ; e
db    0
db  64h ; d
db  65h ; e
db  66h ; f
db  69h ; i
db  6Eh ; n
db  65h ; e
db    0
db  75h ; u
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db    0
db  69h ; i
db  66h ; f
db    0
db  69h ; i
db  66h ; f
db  64h ; d
db  65h ; e
db  66h ; f
db    0
db  69h ; i
db  66h ; f
db  6Eh ; n
db  64h ; d
db  65h ; e
db  66h ; f
db    0
db  65h ; e
db  6Ch ; l
db  73h ; s
db  65h ; e
db    0
db  65h ; e
db  6Ch ; l
db  69h ; i
db  66h ; f
db    0
db  65h ; e
db  6Eh ; n
db  64h ; d
db  69h ; i
db  66h ; f
db    0
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db    0
db  77h ; w
db  61h ; a
db  72h ; r
db  6Eh ; n
db    0
db  69h ; i
db  6Eh ; n
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  65h ; e
db    0
db  73h ; s
db  61h ; a
db  76h ; v
db  65h ; e
db  72h ; r
db  65h ; e
db  67h ; g
db  73h ; s
db    0
db  6Fh ; o
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db    0
db    0
db  53h ; S
db  54h ; T
db  44h ; D
db  43h ; C
db  5Fh ; _
db  5Fh ; _
db    0
db  46h ; F
db  49h ; I
db  4Ch ; L
db  45h ; E
db  5Fh ; _
db  5Fh ; _
db    0
db  4Ch ; L
db  49h ; I
db  4Eh ; N
db  45h ; E
db  5Fh ; _
db  5Fh ; _
db    0
db  44h ; D
db  41h ; A
db  54h ; T
db  45h ; E
db  5Fh ; _
db  5Fh ; _
db    0
db  54h ; T
db  49h ; I
db  4Dh ; M
db  45h ; E
db  5Fh ; _
db  5Fh ; _
db    0
db    0
db  67h ; g
db  65h ; e
db  6Eh ; n
db  20h
db  25h ; %
db  6Ch ; l
db  78h ; x
db  28h ; (
db  25h ; %
db  64h ; d
db  29h ; )
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    0
db    1
db    1
db    1
db    0
db    1
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  23h ; #
db    0
db  22h ; "
db    0
db  27h ; '
db    0
db  26h ; &
db    0
db  25h ; %
db    0
db  24h ; $
db    0
db  22h ; "
db    0
db  23h ; #
db    0
db  25h ; %
db    0
db  24h ; $
db    0
db  27h ; '
db    0
db  26h ; &
db    0
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db    0
db  3Ah ; :
db    0
db  43h ; C
db  6Fh ; o
db  6Dh ; m
db  70h ; p
db  69h ; i
db  6Ch ; l
db  69h ; i
db  6Eh ; n
db  67h ; g
db  20h
db    0
db  4Ch ; L
db  69h ; i
db  6Eh ; n
db  6Bh ; k
db  65h ; e
db  72h ; r
db  20h
db    0
db  3Ah ; :
db  20h
db    0
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  66h ; f
db  75h ; u
db  6Eh ; n
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  20h
db    0
db  20h
db  69h ; i
db  6Eh ; n
db  20h
db  6Dh ; m
db  6Fh ; o
db  64h ; d
db  75h ; u
db  6Ch ; l
db  65h ; e
db  20h
db    0
db    0
unk_52280 db    0
db    0
dd unk_52280
dd unk_52280
db 0FFh
db 0FFh
db  0Fh
db    0
db    0
db    0
dd aTiny                ; "__TINY__"
db    0
db    0
dd aSmall               ; "__SMALL__"
align 4
dd aMedium              ; "__MEDIUM__"
db    0
db    1
dd aCompact             ; "__COMPACT__"
db    1
db    0
dd aLarge               ; "__LARGE__"
db    1
db    1
dd aHuge                ; "__HUGE__"
db    1
db    1
db 0A9h
db  6Ah ; j
db    6
db    0
db 0ADh
db  6Ah ; j
db    6
db    6
db 0B1h
db  6Ah ; j
db    6
db    2
db 0B5h
db  6Ah ; j
db    6
db    4
db 0B9h
db  6Ah ; j
db    6
db  0Ah
db 0BDh
db  6Ah ; j
db    6
db  0Ch
db    0
db    0
db    5
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db    5
db    0
db 0C1h
db  6Ah ; j
db    6
db  10h
db 0C5h
db  6Ah ; j
db    6
db  0Eh
db 0C9h
db  6Ah ; j
db    6
db  14h
db 0CDh
db  6Ah ; j
db    6
db  1Ah
db 0D1h
db  6Ah ; j
db    2
db    0
db 0D5h
db  6Ah ; j
db    2
db    2
db 0D9h
db  6Ah ; j
db    2
db    4
db 0DDh
db  6Ah ; j
db    2
db    6
db 0E1h
db  6Ah ; j
db    2
db    1
db 0E5h
db  6Ah ; j
db    2
db    3
db 0E9h
db  6Ah ; j
db    2
db    5
db 0EDh
db  6Ah ; j
db    2
db    7
db    0
db    0
db    5
db    0
db    0
db    0
db    5
db    0
db 0F1h
db  6Ah ; j
db    6
db    8
db 0F5h
db  6Ah ; j
db    6
db  18h
db 0F9h
db  6Ah ; j
db    6
db  16h
aTiny db '__TINY__',0
aSmall db '__SMALL__',0
aMedium db '__MEDIUM__',0
aCompact db '__COMPACT__',0
aLarge db '__LARGE__',0
aHuge db '__HUGE__',0
aAx db '_AX',0
aDx db '_DX',0
aBx db '_BX',0
aCx db '_CX',0
aSi db '_SI',0
aDi db '_DI',0
aEs db '_ES',0
aDs db '_DS',0
aCs db '_CS',0
aSs db '_SS',0
aAl db '_AL',0
aBl db '_BL',0
aCl db '_CL',0
aDl db '_DL',0
aAh db '_AH',0
aBh db '_BH',0
aCh db '_CH',0
aDh db '_DH',0
aBp db '_BP',0
aSp db '_SP',0
aFlags db '_FLAGS',0
aText db '_text',0
aCode db 'code',0
aData db '_data',0
aDgroup db 'dgroup',0
aBss db '_bss',0
a1 db '1 ',0
aTurboc db '__TURBOC__',0
a0x0201 db '0x0201 ',0
aMsdos db '__MSDOS__',0
aPascal db '__PASCAL__',0
aCdecl db '__CDECL__',0
aStklen db '_stklen',0
aBrklvl db '__brklvl',0
db    0
db    0
db    0
db    0
db    0
db    0
db  51h ; Q
db  51h ; Q
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  51h ; Q
db    0
db    0
db  3Dh ; =
db  3Dh ; =
db  3Bh ; ;
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  3Bh ; ;
db  41h ; A
db  41h ; A
db  3Bh ; ;
db  10h
db  3Eh ; >
db  42h ; B
db  42h ; B
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  38h ; 8
db    0
db  2Bh ; +
db  2Bh ; +
db  2Ch ; ,
db  2Ch ; ,
db  51h ; Q
db  51h ; Q
db  2Ch ; ,
db  2Dh ; -
db  2Dh ; -
db  2Ch ; ,
db  11h
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    2
db    3
db    4
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    8
db    8
db    8
db    8
db    8
db  51h ; Q
db  51h ; Q
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db  51h ; Q
db    8
db    0
db  3Ch ; <
db  3Ch ; <
db  3Bh ; ;
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  51h ; Q
db  51h ; Q
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  46h ; F
db  51h ; Q
db  46h ; F
db    0
db  3Dh ; =
db  3Dh ; =
db  3Bh ; ;
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  3Bh ; ;
db  41h ; A
db  41h ; A
db  3Bh ; ;
db  10h
db  3Fh ; ?
db  43h ; C
db  43h ; C
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  39h ; 9
db    0
db  3Dh ; =
db  3Dh ; =
db  3Bh ; ;
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  3Bh ; ;
db  41h ; A
db  41h ; A
db  3Bh ; ;
db  10h
db  3Fh ; ?
db  43h ; C
db  43h ; C
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  39h ; 9
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  19h
db  19h
db  19h
db  19h
db  51h ; Q
db  51h ; Q
db  19h
db  21h ; !
db  20h
db  51h ; Q
db  4Ah ; J
db  1Fh
db  1Fh
db  1Fh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  51h ; Q
db  51h ; Q
db  1Ah
db  21h ; !
db  21h ; !
db  51h ; Q
db  4Ah ; J
db  1Fh
db  1Fh
db  1Fh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  2Eh ; .
db  2Eh ; .
db  51h ; Q
db  51h ; Q
db  2Eh ; .
db  28h ; (
db  28h ; (
db  51h ; Q
db  51h ; Q
db  1Fh
db  1Fh
db  1Fh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  2Fh ; /
db  2Fh ; /
db  51h ; Q
db  51h ; Q
db  2Fh ; /
db  29h ; )
db  29h ; )
db  51h ; Q
db  51h ; Q
db  1Fh
db  1Fh
db  1Fh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  2Fh ; /
db  2Fh ; /
db  51h ; Q
db  51h ; Q
db  2Fh ; /
db  29h ; )
db  29h ; )
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  26h ; &
db  26h ; &
db  26h ; &
db  26h ; &
db  51h ; Q
db  51h ; Q
db  26h ; &
db  2Ah ; *
db  2Ah ; *
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  26h ; &
db  26h ; &
db  26h ; &
db  26h ; &
db  51h ; Q
db  51h ; Q
db  26h ; &
db  2Ah ; *
db  2Ah ; *
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  19h
db  19h
db  19h
db  19h
db  51h ; Q
db  51h ; Q
db  19h
db  21h ; !
db  21h ; !
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  19h
db  19h
db  19h
db  19h
db  51h ; Q
db  51h ; Q
db  19h
db  21h ; !
db  20h
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  19h
db  19h
db  19h
db  19h
db  51h ; Q
db  51h ; Q
db  19h
db  21h ; !
db  21h ; !
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  35h ; 5
db  35h ; 5
db  30h ; 0
db  30h ; 0
db  51h ; Q
db  51h ; Q
db  30h ; 0
db  31h ; 1
db  31h ; 1
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  34h ; 4
db  33h ; 3
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  37h ; 7
db    0
db  24h ; $
db  24h ; $
db  24h ; $
db  24h ; $
db  51h ; Q
db  51h ; Q
db  4Dh ; M
db  0Ah
db  0Ah
db  51h ; Q
db  4Eh ; N
db  1Eh
db  1Eh
db  1Eh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  24h ; $
db  24h ; $
db  24h ; $
db  24h ; $
db  51h ; Q
db  51h ; Q
db  4Dh ; M
db  0Ah
db  0Ah
db  51h ; Q
db  4Eh ; N
db  1Eh
db  1Eh
db  1Eh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  25h ; %
db  25h ; %
db  25h ; %
db  25h ; %
db  51h ; Q
db  51h ; Q
db  25h ; %
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  25h ; %
db  25h ; %
db  25h ; %
db  25h ; %
db  51h ; Q
db  51h ; Q
db  25h ; %
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  24h ; $
db  24h ; $
db  24h ; $
db  24h ; $
db  51h ; Q
db  51h ; Q
db  24h ; $
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  24h ; $
db  24h ; $
db  24h ; $
db  24h ; $
db  51h ; Q
db  51h ; Q
db  24h ; $
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  24h ; $
db  24h ; $
db  24h ; $
db  24h ; $
db  51h ; Q
db  51h ; Q
db  24h ; $
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db    0
db  22h ; "
db  22h ; "
db  22h ; "
db  22h ; "
db  51h ; Q
db  51h ; Q
db  22h ; "
db  27h ; '
db  27h ; '
db  51h ; Q
db  51h ; Q
db  1Dh
db  1Dh
db  1Dh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  22h ; "
db  22h ; "
db  22h ; "
db  22h ; "
db  51h ; Q
db  51h ; Q
db  22h ; "
db  23h ; #
db  23h ; #
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  15h
db  15h
db  15h
db  15h
db  15h
db  51h ; Q
db  51h ; Q
db  15h
db  15h
db  15h
db  15h
db  15h
db  15h
db  15h
db  15h
db  15h
db  15h
db  51h ; Q
db  15h
db    0
db  3Dh ; =
db  3Dh ; =
db  3Bh ; ;
db  3Bh ; ;
db  51h ; Q
db  51h ; Q
db  3Bh ; ;
db  41h ; A
db  41h ; A
db  3Bh ; ;
db  10h
db  40h ; @
db  44h ; D
db  44h ; D
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  3Ah ; :
db    0
db  51h ; Q
db  51h ; Q
db    7
db    7
db  51h ; Q
db  51h ; Q
db    7
db    6
db    6
db    5
db    6
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  51h ; Q
db  4Fh ; O
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  0Ch
db  0Ch
db  0Bh
db  0Bh
db  51h ; Q
db  51h ; Q
db  4Bh ; K
db    9
db    9
db  51h ; Q
db  4Ch ; L
db  1Eh
db  1Eh
db  1Eh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  0Ch
db  0Ch
db  0Bh
db  0Bh
db  51h ; Q
db  51h ; Q
db  4Bh ; K
db    9
db    9
db  51h ; Q
db  4Ch ; L
db  1Eh
db  1Eh
db  1Eh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  13h
db  13h
db  13h
db  13h
db  51h ; Q
db  51h ; Q
db  13h
db  13h
db  13h
db  13h
db  13h
db  14h
db  14h
db  14h
db  13h
db  51h ; Q
db  51h ; Q
db  12h
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  51h ; Q
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  16h
db  51h ; Q
db  16h
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  36h ; 6
db  51h ; Q
db  51h ; Q
db    1
db    1
db    1
db    1
db    1
db  51h ; Q
db  51h ; Q
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  51h ; Q
db    1
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  51h ; Q
db  51h ; Q
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  0Dh
db  51h ; Q
db  0Dh
db  17h
db  17h
db  17h
db  17h
db  17h
db  51h ; Q
db  51h ; Q
db  17h
db  17h
db  17h
db  17h
db  17h
db  17h
db  17h
db  17h
db  17h
db  17h
db  51h ; Q
db  17h
db  18h
db  18h
db  18h
db  18h
db  18h
db  51h ; Q
db  51h ; Q
db  18h
db  18h
db  18h
db  18h
db  18h
db  18h
db  18h
db  18h
db  18h
db  18h
db  51h ; Q
db  18h
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  1Ch
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  1Bh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  49h ; I
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db  47h ; G
db  47h ; G
db  45h ; E
db  45h ; E
db  51h ; Q
db  51h ; Q
db  0Fh
db  48h ; H
db  48h ; H
db  0Fh
db  0Eh
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db  51h ; Q
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    8
db    8
db  1Ah
db  1Ah
db    8
db  0Ch
db  0Ch
db    8
db    2
db  0Fh
db  12h
db  12h
db    0
db    6
db    1
db    9
db    9
db  1Ah
db  1Ah
db    9
db  0Dh
db  0Dh
db    9
db    2
db  0Fh
db  13h
db  13h
db    0
db    7
db    7
db    1
db    1
db  1Ah
db  1Ah
db    1
db  0Ah
db  0Ah
db    1
db    2
db  0Fh
db  12h
db  12h
db    0
db    7
db    7
db    1
db    1
db  1Ah
db  1Ah
db    1
db  0Bh
db  0Bh
db    1
db    2
db  0Fh
db  13h
db  13h
db    0
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db    1
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db    0
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db    1
db  1Ah
db  1Ah
db  1Ah
db  1Ah
db    0
db    7
db    7
db    1
db    1
db  1Ah
db  1Ah
db    1
db    3
db    3
db    1
db    3
db  0Fh
db  13h
db  13h
db    0
db  0Eh
db  0Eh
db  0Eh
db  0Eh
db  1Ah
db  1Ah
db  0Eh
db    1
db    1
db  18h
db    1
db  0Fh
db  14h
db  14h
db    0
db  0Eh
db  0Eh
db  0Eh
db  0Eh
db  1Ah
db  1Ah
db  0Eh
db    5
db    1
db  18h
db    1
db  0Fh
db  15h
db  15h
db    0
db    7
db    7
db    1
db    1
db    1
db    1
db    1
db  19h
db  19h
db    1
db  19h
db  0Fh
db  13h
db  13h
db    0
db  0Eh
db  0Eh
db  0Eh
db  0Eh
db  1Ah
db  1Ah
db    4
db    1
db    1
db  18h
db    1
db  0Fh
db  15h
db  15h
db    0
db  10h
db  10h
db  10h
db  10h
db  1Ah
db  1Ah
db  10h
db  10h
db  10h
db  10h
db    2
db    1
db  11h
db  11h
db    0
db  12h
db  13h
db  12h
db  13h
db  1Ah
db  1Ah
db  13h
db  16h
db  17h
db  13h
db    2
db  11h
db    1
db  11h
db    0
db  12h
db  13h
db  12h
db  13h
db  1Ah
db  1Ah
db  13h
db  16h
db  17h
db  13h
db    2
db  11h
db  11h
db    1
db  70h ; p
db  73h ; s
db  62h ; b
db  70h ; p
db  40h ; @
db    0
db  73h ; s
db  63h ; c
db  6Fh ; o
db  70h ; p
db  79h ; y
db  40h ; @
db    0
db  70h ; p
db  61h ; a
db  64h ; d
db  64h ; d
db  40h ; @
db    0
db  70h ; p
db  73h ; s
db  75h ; u
db  62h ; b
db  40h ; @
db    0
db  70h ; p
db  64h ; d
db  65h ; e
db  61h ; a
db  40h ; @
db    0
db  70h ; p
db  69h ; i
db  6Eh ; n
db  61h ; a
db  40h ; @
db    0
db  70h ; p
db  73h ; s
db  62h ; b
db  61h ; a
db  40h ; @
db    0
db  70h ; p
db  61h ; a
db  64h ; d
db  61h ; a
db  40h ; @
db    0
db  66h ; f
db  74h ; t
db  6Fh ; o
db  6Ch ; l
db  40h ; @
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd unk_57908
db    1
db    0
db    0
db    0
db    0
db    0
dd unk_5790C
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
dd unk_57898
db    3
db    0
db    0
db    0
db    0
db    0
db  8Ah
db    2
db    0
db    0
db    0
db  98h
db    7
db    0
db  28h ; (
db    0
db    0
db    2
db    3
db    1
db    0
db  98h
db    7
db    0
db  48h ; H
db    0
db    0
db    4
db    5
db    1
db    0
db  98h
db    7
db    0
db  48h ; H
db    0
db    0
db    6
db    7
db    1
db    0
db    0
db    2
db    3
db    1
db    6
db    7
db    0
db    0
db    0
db  10h
db  13h
db  11h
db  12h
db    8
db  0Bh
db    9
db  0Ah
db  0Ch
db  0Fh
db  0Dh
db  0Eh
db    0
db    0
db    5
db    4
db    0
db 0C4h
db 0C4h
db    0
db 0C8h
db    0
db  84h
db 0CCh
db 0CCh
db 0C8h
db 0C8h
db 0C4h
db  54h ; T
db  43h ; C
db  38h ; 8
db  36h ; 6
db  20h
db  42h ; B
db  6Fh ; o
db  72h ; r
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  64h ; d
db  20h
db  54h ; T
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  20h
db  43h ; C
db  20h
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db  31h ; 1
db  20h
db    0
db  5Fh ; _
db  5Fh ; _
db  74h ; t
db  75h ; u
db  72h ; r
db  62h ; b
db  6Fh ; o
db  46h ; F
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  74h ; t
db    0
dd loc_3608A
dd loc_37CBF
dd loc_37E40
dd loc_37D69
dd sub_362BF
dd loc_37C97
dd loc_37E13
dd loc_37E50
dd loc_3799D
dd loc_37E79
dd sub_37CA4
dd loc_37F12
dd loc_37B44
dd loc_37194
dd loc_37E66
dd loc_37C90
dd loc_38993
dd loc_37F5E
dd loc_37D4A
dd loc_37D20
dd loc_37DA5
dd loc_37C7C
dd loc_37C75
dd sub_37C6E
dd loc_37E8C
dd loc_37EF5
dd loc_36238
db    0
db    0
db 0DDh
db    0
db 0D9h
db 0E0h
db    0
db    0
db 0DEh
db 0C1h
db 0DCh
db    0
db 0DEh
db 0E9h
db 0DCh
db  20h
db 0DEh
db 0C9h
db 0DCh
db    8
db 0DEh
db 0F9h
db 0DCh
db  30h ; 0
db 0DEh
db 0D9h
db    0
db    0
db 0D9h
db 0E4h
db    0
db    0
db    0
db    0
db 0DDh
db  18h
db    0
db    0
db 0DDh
db  10h
db 0D9h
db 0C0h
db    0
db    0
db 0DEh
db 0E1h
db 0DCh
db  28h ; (
db 0DEh
db 0F1h
db 0DCh
db  38h ; 8
db 0DDh
db 0C0h
db    0
db    0
db 0D9h
db 0F6h
db    0
db    0
db 0D9h
db 0EEh
db    0
db    0
db    0
db    0
db 0DBh
db    0
db    0
db    0
db 0DBh
db  18h
db    0
db    0
db 0DDh
db  38h ; 8
db 0DDh
db 0D8h
db    0
db    0
db    0
db    0
db 0DFh
db  28h ; (
db    0
db    0
db 0DFh
db  38h ; 8
db    0
db    0
db 0D9h
db    0
db    0
db    0
db 0D9h
db  18h
db    0
db    0
db 0D9h
db  10h
db    0
db    0
db 0DBh
db  28h ; (
db    0
db    0
db 0DBh
db  38h ; 8
db 0D9h
db 0E8h
db    0
db    0
db    0
db    0
db 0DCh
db  18h
db 0D9h
db 0C9h
db    0
db    0
db    0
db  28h ; (
db  20h
db    8
db  38h ; 8
db  30h ; 0
db  20h
db  30h ; 0
db  38h ; 8
db  10h
db  10h
db  18h
db  18h
db  84h
db 0CBh
db 0C8h
db 0C9h
db  8Dh
db 0C4h
db  99h
db  98h
db 0FFh
db 0CDh
db 0CFh
db  9Ch
db 0FAh
db 0FBh
db 0F8h
db 0F9h
db  9Fh
db  9Eh
db  9Bh
db  9Dh
db    0
db    0
db    2
db    3
db    1
db    6
db    7
db    3
db    7
db    6
db    0
db    0
db    0
db    0
db    0
db    3
db    1
db    2
db    4
db    7
db    5
db    6
db    0
db    0
db    5
db    4
db  74h ; t
db  75h ; u
db  7Fh ; 
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  70h ; p
db  71h ; q
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  74h ; t
db  75h ; u
db  77h ; w
db  72h ; r
db  73h ; s
db  76h ; v
db  70h ; p
db  71h ; q
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  2Eh ; .
db  6Fh ; o
db  62h ; b
db  6Ah ; j
db    0
db  44h ; D
db  47h ; G
db  52h ; R
db  4Fh ; O
db  55h ; U
db  50h ; P
db  40h ; @
db    0
db  46h ; F
db  49h ; I
db  57h ; W
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  49h ; I
db  41h ; A
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  4Ah ; J
db  41h ; A
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  49h ; I
db  45h ; E
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  49h ; I
db  53h ; S
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  4Ah ; J
db  53h ; S
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  49h ; I
db  43h ; C
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  4Ah ; J
db  43h ; C
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db  46h ; F
db  49h ; I
db  44h ; D
db  52h ; R
db  51h ; Q
db  51h ; Q
db    0
db    0
db  90h
db  73h ; s
db    3
db    1
db    3
db    0
db    0
db    0
db  98h
db  73h ; s
db    3
db    1
db    3
db    0
db    0
db    0
db 0A0h
db  73h ; s
db    3
db    0
db    0
db    0
db    0
db    0
db 0A8h
db  73h ; s
db    3
db    0
db    0
db    0
db    0
db    0
db 0B0h
db  73h ; s
db    3
db    2
db    3
db    2
db    0
db    0
db 0BDh
db  73h ; s
db    2
db    1
db    3
db    0
db    0
db    0
db 0C9h
db  73h ; s
db    3
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  5Fh ; _
db  5Fh ; _
db  69h ; i
db  6Eh ; n
db  74h ; t
db  5Fh ; _
db  5Fh ; _
db    0
db  5Fh ; _
db  5Fh ; _
db  61h ; a
db  62h ; b
db  73h ; s
db  5Fh ; _
db  5Fh ; _
db    0
db  5Fh ; _
db  5Fh ; _
db  63h ; c
db  6Ch ; l
db  69h ; i
db  5Fh ; _
db  5Fh ; _
db    0
db  5Fh ; _
db  5Fh ; _
db  73h ; s
db  74h ; t
db  69h ; i
db  5Fh ; _
db  5Fh ; _
db    0
db  5Fh ; _
db  5Fh ; _
db  6Fh ; o
db  75h ; u
db  74h ; t
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  62h ; b
db  5Fh ; _
db  5Fh ; _
db    0
db  5Fh ; _
db  5Fh ; _
db  69h ; i
db  6Eh ; n
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  62h ; b
db  5Fh ; _
db  5Fh ; _
db    0
db  5Fh ; _
db  5Fh ; _
db  65h ; e
db  6Dh ; m
db  69h ; i
db  74h ; t
db  5Fh ; _
db  5Fh ; _
db    0
db  80h
db 0FFh
db 0FFh
db 0FFh
db  7Fh ; 
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db  80h
db 0FFh
db 0FFh
db 0FFh
db  7Fh ; 
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db  80h
db 0FFh
db 0FFh
db 0FFh
db  7Fh ; 
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db  80h
db 0FFh
db 0FFh
db 0FFh
db  7Fh ; 
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  91h
db  7Ah ; z
db    2
db  86h
db 0F2h
db  74h ; t
db  32h ; 2
db  75h ; u
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  94h
db  7Ah ; z
db  22h ; "
db  82h
db  22h ; "
db  75h ; u
db  62h ; b
db  75h ; u
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  97h
db  7Ah ; z
db  63h ; c
db  86h
db    2
db  75h ; u
db  42h ; B
db  75h ; u
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Ah
db  7Ah ; z
db  62h ; b
db  82h
db  12h
db  75h ; u
db  52h ; R
db  75h ; u
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Dh
db  7Ah ; z
db  70h ; p
db  82h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h
db  7Ah ; z
db  70h ; p
db  82h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  97h
db  7Ah ; z
db    0
db  81h
db  42h ; B
db  74h ; t
db 0B2h
db  74h ; t
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h
db  7Ah ; z
db    0
db  81h
db  72h ; r
db  74h ; t
db 0B2h
db  74h ; t
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Dh
db  7Ah ; z
db    0
db  81h
db  62h ; b
db  74h ; t
db 0B2h
db  74h ; t
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A3h
db  7Ah ; z
db    0
db  88h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A6h
db  7Ah ; z
db    0
db  88h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A9h
db  7Ah ; z
db    0
db  88h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ACh
db  7Ah ; z
db    0
db  88h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0AFh
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B2h
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B8h
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0BBh
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0BEh
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C1h
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C4h
db  7Ah ; z
db    4
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C7h
db  7Ah ; z
db    8
db  80h
db  22h ; "
db  74h ; t
db  32h ; 2
db  74h ; t
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0CCh
db  7Ah ; z
db    8
db  80h
db  42h ; B
db  74h ; t
db  52h ; R
db  74h ; t
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D1h
db  7Ah ; z
db    0
db  82h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D4h
db  7Ah ; z
db    0
db  82h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D7h
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0DEh
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E1h
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E4h
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E7h
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0EAh
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0EDh
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F3h
db  7Ah ; z
db  80h
db  80h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Fh ; /
db  53h ; S
db  38h ; 8
db  30h ; 0
db  54h ; T
db  3Ah ; :
db  35h ; 5
db  35h ; 5
db    0
db  36h ; 6
db  37h ; 7
db    0
db    0
db    0
db    0
db  26h ; &
db  26h ; &
db  26h ; &
db  28h ; (
db  27h ; '
db  27h ; '
db  31h ; 1
db  31h ; 1
db  31h ; 1
db  32h ; 2
db  32h ; 2
db  32h ; 2
db  34h ; 4
db  34h ; 4
db  34h ; 4
db    0
db    0
db    0
db  2Fh ; /
db  53h ; S
db  38h ; 8
db  30h ; 0
db  54h ; T
db  3Ah ; :
db  35h ; 5
db  35h ; 5
db    0
db  36h ; 6
db  37h ; 7
db    0
db    0
db    0
db    0
db  26h ; &
db  26h ; &
db  26h ; &
db  28h ; (
db  27h ; '
db  27h ; '
db  31h ; 1
db  31h ; 1
db  31h ; 1
db  32h ; 2
db  32h ; 2
db  32h ; 2
db  34h ; 4
db  34h ; 4
db  34h ; 4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Bh ; ;
db  3Bh ; ;
db  3Bh ; ;
db  39h ; 9
db  39h ; 9
db  39h ; 9
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Fh ; /
db  53h ; S
db  38h ; 8
db  30h ; 0
db  54h ; T
db  3Ah ; :
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  30h ; 0
db  2Dh ; -
db  3Ah ; :
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    4
db    4
db    4
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    1
db    1
db    1
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    1
db    1
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd aLxmul               ; "lxmul@"
dd aLxmul               ; "lxmul@"
dd aLdiv                ; "ldiv@"
dd aLudiv               ; "ludiv@"
dd aLmod                ; "lmod@"
dd aLumod               ; "lumod@"
dd aLxlsh               ; "lxlsh@"
dd aLxlsh               ; "lxlsh@"
dd aLxrsh               ; "lxrsh@"
dd aLxursh              ; "lxursh@"
db    2
db    2
db  2Dh ; -
db  7Bh ; {
db  2Dh ; -
db  7Bh ; {
db    3
db  0Bh
db  33h ; 3
db  7Bh ; {
db  39h ; 9
db  7Bh ; {
db    4
db    4
db  40h ; @
db  7Bh ; {
db  40h ; @
db  7Bh ; {
db    5
db  0Ch
db  46h ; F
db  7Bh ; {
db  4Ch ; L
db  7Bh ; {
db  61h ; a
db  78h ; x
db    0
db  64h ; d
db  78h ; x
db    0
db  62h ; b
db  78h ; x
db    0
db  63h ; c
db  78h ; x
db    0
db  73h ; s
db  69h ; i
db    0
db  64h ; d
db  69h ; i
db    0
db  65h ; e
db  73h ; s
db    0
db  64h ; d
db  73h ; s
db    0
db  63h ; c
db  73h ; s
db    0
db  73h ; s
db  73h ; s
db    0
db  61h ; a
db  6Ch ; l
db    0
db  62h ; b
db  6Ch ; l
db    0
db  63h ; c
db  6Ch ; l
db    0
db  64h ; d
db  6Ch ; l
db    0
db  61h ; a
db  68h ; h
db    0
db  62h ; b
db  68h ; h
db    0
db  63h ; c
db  68h ; h
db    0
db  64h ; d
db  68h ; h
db    0
db  61h ; a
db  78h ; x
db  64h ; d
db  78h ; x
db    0
db  62h ; b
db  78h ; x
db  63h ; c
db  78h ; x
db    0
db  62h ; b
db  70h ; p
db    0
db  73h ; s
db  70h ; p
db    0
db  5Fh ; _
db  66h ; f
db  6Ch ; l
db  61h ; a
db  67h ; g
db  73h ; s
db    0
db  66h ; f
db  30h ; 0
db    0
db  66h ; f
db  31h ; 1
db    0
db  66h ; f
db  32h ; 2
db    0
db  66h ; f
db  33h ; 3
db    0
db  66h ; f
db  34h ; 4
db    0
db  66h ; f
db  35h ; 5
db    0
db  66h ; f
db  36h ; 6
db    0
db  66h ; f
db  37h ; 7
db    0
aLxmul db 'lxmul@',0
aLdiv db 'ldiv@',0
aLudiv db 'ludiv@',0
aLmod db 'lmod@',0
aLumod db 'lumod@',0
aLxlsh db 'lxlsh@',0
aLxrsh db 'lxrsh@',0
aLxursh db 'lxursh@',0
aDadd db 'dadd@',0
aDsub db 'dsub@',0
aDsubr db 'dsubr@',0
aDmul db 'dmul@',0
aDdiv db 'ddiv@',0
aDdivr db 'ddivr@',0
aFidrqq db 'FIDRQQ',0
aDgroup_0 db 'dgroup',0
aFlags8087 db 'flags8087@',0
db    0
db    1
db    1
db    3
db    3
db    3
db    3
db    3
db    8
db    8
db    3
db    8
db    0
db    0
db    1
db    0
db    2
db    0
db    3
db    0
db    4
db    0
db    3
db    0
db    4
db    0
db    7
db    0
db    8
db    0
db    9
db    0
db  0Ah
db    0
db  0Bh
db    0
db  0Ch
db    0
db  0Dh
db    0
db  0Eh
db    0
db    3
db    0
db  10h
db    0
db  11h
db    0
db  12h
db    0
db    3
db    0
db    3
db    0
db    0
db    0
db    5
db    0
db    5
db    0
db    5
db    0
db    6
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    1
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    4
db    0
db    4
db    0
db    2
db    0
db    4
db    0
db    4
db    0
db    8
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    2
db    0
db    2
db    0
db    1
db    0
db    0
db  6Fh ; o
db  76h ; v
db  65h ; e
db  72h ; r
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  77h ; w
db  40h ; @
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0CCh
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F4h
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E0h
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  7Ch ; |
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db 0B8h
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db 0A4h
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Ch ; |
db  40h ; @
db  7Ch ; |
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    4
db    0
db    0
db    0
db    9
db    0
db  73h ; s
db  63h ; c
db  6Fh ; o
db  70h ; p
db  79h ; y
db  40h ; @
db    0
db  73h ; s
db  70h ; p
db  75h ; u
db  73h ; s
db  68h ; h
db  40h ; @
db    0
db  70h ; p
db  63h ; c
db  6Dh ; m
db  70h ; p
db  40h ; @
db    0
word_53714 dw 0A278h
db  0Fh
db    0
db    0
db    0
db    1
db    3
db    8
db    0
db    2
db    4
db    9
db    0
db    1
db  0Ch
db    0
db  0Dh
db  0Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    0
db    0
db    2
db    2
db    4
db    9
db  0Dh
db    0
db  0Eh
db    0
db    1
db    2
db    3
db    4
db    0
db    0
db    0
db    4
db    6
db    2
db  18h
db    8
db  0Ah
db  0Ch
db    0
db    4
db    6
db    2
db    1
db    5
db    7
db    3
db  10h
db  14h
db  1Ah
db  0Eh
db    0
db    0
dd aInterruptVecto      ; " Interrupt vector table"
db  40h ; @
db    0
dd aBiosDataArea        ; " BIOS Data area"
db  50h ; P
db    0
dd aMsdosTsrS           ; " MSDOS / TSR's"
align 4
dd aTurboC              ; " Turbo C"
db    0
db    0
dd aUserProcessPsp      ; " User Process PSP"
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h
dd aEgaVideoRam         ; " EGA Video RAM"
db    0
db 0B0h
dd aMonochromeDisp      ; " Monochrome Display RAM"
db    0
db 0B8h
dd aColorDisplayRa      ; " Color Display RAM"
db    0
db 0C0h
dd aEmsPagesAdapto      ; " EMS Pages / Adaptor BIOS ROM's"
db    0
db 0F0h
dd aEmsPagesAdapto+14h  ; " BIOS ROM's"
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  74h ; t
db  6Eh ; n
db  76h ; v
db  66h ; f
db  72h ; r
db  6Dh ; m
db  61h ; a
db  69h ; i
db  6Eh ; n
db    0
db  28h ; (
db  63h ; c
db  68h ; h
db  61h ; a
db  72h ; r
db  2Ah ; *
db  29h ; )
db    0
db  6Eh ; n
db  6Fh ; o
db  6Eh ; n
db  65h ; e
db    0
db  2Ch ; ,
db  20h
db    0
db  75h ; u
db  6Eh ; n
db  6Bh ; k
db  6Eh ; n
db  6Fh ; o
db  77h ; w
db  6Eh ; n
db    0
aInterruptVecto db ' Interrupt vector table',0
aBiosDataArea db ' BIOS Data area',0
aMsdosTsrS db ' MSDOS / TSR',27h,'s',0
aTurboC db ' Turbo C',0
aUserProcessPsp db ' User Process PSP',0
aEgaVideoRam db ' EGA Video RAM',0
aMonochromeDisp db ' Monochrome Display RAM',0
aColorDisplayRa db ' Color Display RAM',0
aEmsPagesAdapto db ' EMS Pages / Adaptor BIOS ROM',27h,'s'
db 0
aDs_0 db 'DS:',0
aEs_0 db 'ES:',0
aSs_0 db 'SS:',0
aCs_0 db 'CS:',0
aNull db 'NULL',0
aDs_1 db '(DS)',0
aSs_1 db '(SS)',0
aCs_1 db '(CS)',0
db ' /* ',0
db ' */',0
db '{ ',0
db ' }',0
aInf db 'INF',0
aNan db 'NAN',0
a0x db '0x',0
db    1
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  64h ; d
db    0
db    0
db    0
db 0E8h
db    3
db    0
db    0
db  10h
db  27h ; '
db    0
db    0
db 0A0h
db  86h
db    1
db    0
db  40h ; @
db  42h ; B
db  0Fh
db    0
db  80h
db  96h
db  98h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db 0BCh
db 0BEh
db  19h
db  40h ; @
db    0
db    0
db    0
db    4
db 0BFh
db 0C9h
db  1Bh
db  8Eh
db  34h ; 4
db  40h ; @
db  9Eh
db 0B5h
db  70h ; p
db  2Bh ; +
db 0A8h
db 0ADh
db 0C5h
db  9Dh
db  69h ; i
db  40h ; @
db 0D5h
db 0A6h
db 0CFh
db 0FFh
db  49h ; I
db  1Fh
db  78h ; x
db 0C2h
db 0D3h
db  40h ; @
db 0E0h
db  8Ch
db 0E9h
db  80h
db 0C9h
db  47h ; G
db 0BAh
db  93h
db 0A8h
db  41h ; A
db  8Eh
db 0DEh
db 0F9h
db  9Dh
db 0FBh
db 0EBh
db  7Eh ; ~
db 0AAh
db  51h ; Q
db  43h ; C
db 0C7h
db  91h
db  0Eh
db 0A6h
db 0AEh
db 0A0h
db  19h
db 0E3h
db 0A3h
db  46h ; F
db  17h
db  0Ch
db  75h ; u
db  81h
db  86h
db  75h ; u
db  76h ; v
db 0C9h
db  48h ; H
db  4Dh ; M
db 0E5h
db  5Dh ; ]
db  3Dh ; =
db 0C5h
db  5Dh ; ]
db  3Bh ; ;
db  8Bh
db  9Eh
db  92h
db  5Ah ; Z
db  9Bh
db  97h
db  20h
db  8Ah
db    2
db  52h ; R
db  60h ; `
db 0C4h
db  25h ; %
db  75h ; u
db    0
db    0
db    0
db    0
db    0
db  20h
db 0BCh
db 0BEh
db  19h
db  40h ; @
unk_53944 db    2
db    0
db    4
db    0
db    1
db    0
db    2
db    0
db    4
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    1
db    0
db    2
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    4
db    0
db    4
db    0
db    4
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    9
db    0
db  10h
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db  10h
db    0
byte_53984 db 1
db 0E1h
db 0DDh
byte_53987 db 1
db  4Dh ; M
db 0DEh
byte_5398A db 1
db  82h
db 0DEh
byte_5398D db 1
db  99h
db 0DEh
unk_53990 db  30h ; 0
db    0
db    0
db 0C0h
db  20h
db  37h ; 7
db  36h ; 6
db  31h ; 1
db  32h ; 2
db  39h ; 9
db  35h ; 5
db  35h ; 5
db  32h ; 2
db  30h ; 0
db    0
db 0FEh
db 0FFh
db    0
db 0F0h
db 0FFh
db 0FEh
db 0FDh
db 0FCh
db  2Dh ; -
db  9Ah
db 0F8h
db    0
db    1
db    0
db    2
db    0
db    4
db    0
db    8
db    0
db  10h
db    0
db  30h ; 0
db    0
db  40h ; @
db    0
db    0
db    0
db 0EAh
db 0FFh
db    0
db 0F0h
db  43h ; C
db  4Fh ; O
db  4Dh ; M
db  50h ; P
db  41h ; A
db  51h ; Q
db    0
word_539C6 dw 0
word_539C8 dw 0
word_539CA dw 0
word_539CC dw 0
byte_539CE db 0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  21h ; !
db  21h ; !
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  14h
db  14h
db  14h
db  14h
db  14h
db  14h
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db  18h
db  18h
db  18h
db  18h
db  18h
db  18h
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    0
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  32h ; 2
db  31h ; 1
db  34h ; 4
db  37h ; 7
db  34h ; 4
db  38h ; 8
db  33h ; 3
db  36h ; 6
db  34h ; 4
db  38h ; 8
db    0
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_53AEE dw ?
word_53AF0 dw ?
dword_53AF2 dd ?
word_53AF6 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_53B0A dw ?
db    ? ;
word_53B0D dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
byte_54340 db ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_54D3A db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_57898 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_57908 db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_5790C db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_5799F dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_57AAE dd ?
word_57AB2 dw ?
align 10h
seg091 ends


; Segment type: Uninitialized
seg092 segment byte stack 'STACK' use16
assume cs:seg092
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
db 1964h dup(?)
seg092 ends


end start
